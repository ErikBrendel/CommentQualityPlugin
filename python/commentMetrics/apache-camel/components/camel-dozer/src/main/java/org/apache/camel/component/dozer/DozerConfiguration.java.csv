commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getMarshalId() {     return marshalId. }
true;public;1;3;/**  * The id of a dataFormat defined within the Camel Context to use for marshalling the mapping output to a non-Java type.  */ ;/**  * The id of a dataFormat defined within the Camel Context to use for marshalling the mapping output to a non-Java type.  */ public void setMarshalId(String marshalId) {     this.marshalId = marshalId. }
false;public;0;3;;public String getUnmarshalId() {     return unmarshalId. }
true;public;1;3;/**  * The id of a dataFormat defined within the Camel Context to use for unmarshalling the mapping input from a non-Java type.  */ ;/**  * The id of a dataFormat defined within the Camel Context to use for unmarshalling the mapping input from a non-Java type.  */ public void setUnmarshalId(String unmarshalId) {     this.unmarshalId = unmarshalId. }
false;public;0;3;;public String getSourceModel() {     return sourceModel. }
true;public;1;3;/**  * Fully-qualified class name for the source type used in the mapping. If specified, the input to the mapping is converted to the specified type before being mapped with Dozer.  */ ;/**  * Fully-qualified class name for the source type used in the mapping. If specified, the input to the mapping is converted to the specified type before being mapped with Dozer.  */ public void setSourceModel(String sourceModel) {     this.sourceModel = sourceModel. }
false;public;0;3;;public String getTargetModel() {     return targetModel. }
true;public;1;3;/**  * Fully-qualified class name for the target type used in the mapping.  */ ;/**  * Fully-qualified class name for the target type used in the mapping.  */ public void setTargetModel(String targetModel) {     this.targetModel = targetModel. }
false;public;0;3;;public String getName() {     return name. }
true;public;1;3;/**  * A human readable name of the mapping.  */ ;/**  * A human readable name of the mapping.  */ public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getMappingFile() {     return mappingFile. }
true;public;1;3;/**  * The location of a Dozer configuration file. The file is loaded from the classpath by default,  * but you can use file:, classpath:, or http: to load the configuration from a specific location.  */ ;/**  * The location of a Dozer configuration file. The file is loaded from the classpath by default,  * but you can use file:, classpath:, or http: to load the configuration from a specific location.  */ public void setMappingFile(String mappingFile) {     this.mappingFile = mappingFile. }
false;public;0;3;;public DozerBeanMapperConfiguration getMappingConfiguration() {     return mappingConfiguration. }
true;public;1;3;/**  * The name of a DozerBeanMapperConfiguration bean in the Camel registry which should be used for configuring the Dozer mapping.  * This is an alternative to the mappingFile option that can be used for fine-grained control over how Dozer is configured.  * Remember to use a "#" prefix in the value to indicate that the bean is in the Camel registry (e.g. "#myDozerConfig").  */ ;/**  * The name of a DozerBeanMapperConfiguration bean in the Camel registry which should be used for configuring the Dozer mapping.  * This is an alternative to the mappingFile option that can be used for fine-grained control over how Dozer is configured.  * Remember to use a "#" prefix in the value to indicate that the bean is in the Camel registry (e.g. "#myDozerConfig").  */ public void setMappingConfiguration(DozerBeanMapperConfiguration mappingConfiguration) {     this.mappingConfiguration = mappingConfiguration. }
