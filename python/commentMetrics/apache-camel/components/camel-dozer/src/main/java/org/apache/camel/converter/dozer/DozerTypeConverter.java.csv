commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Mapper getMapper() {     return mapper. }
false;public;3;36;;@Override public <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {     CamelContext context = exchange != null ? exchange.getContext() : null.     ClassLoader appcl = context != null ? context.getApplicationContextClassLoader() : null.     T result.     ClassLoader tccl = Thread.currentThread().getContextClassLoader().     try {         if (appcl != null && appcl != tccl) {             LOG.debug("Switching TCCL to: {}", appcl).             Thread.currentThread().setContextClassLoader(appcl).         }         // find the map id, so we can provide that when trying to map from source to destination         String mapId = null.         if (value != null) {             Class<?> sourceType = value.getClass().             ClassMappingMetadata metadata = getClassMappingMetadata(sourceType, type).             if (metadata != null) {                 mapId = metadata.getMapId().             }         }         result = mapper.map(value, type, mapId).     } finally {         if (appcl != null && appcl != tccl) {             Thread.currentThread().setContextClassLoader(tccl).             LOG.debug("Restored TCCL to: {}", tccl).         }     }     return result. }
false;private;2;10;;private ClassMappingMetadata getClassMappingMetadata(Class<?> sourceType, Class<?> destType) {     ClassMappingMetadata result = null.     for (ClassMappingMetadata aux : mapper.getMappingMetadata().getClassMappingsBySource(sourceType)) {         if (destType.isAssignableFrom(aux.getDestinationClass())) {             result = aux.             break.         }     }     return result. }
