commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;20;;@BeforeClass public static void setUpMockServer() throws IOException {     // @formatter:off     int i = 0.     while (true) {         try {             localServer = createServer(PORT + i).             localServer.start().             break.         } catch (BindException ex) {             LOGGER.warn("Port {} already in use, trying next one", PORT + i).             i++.         }     }     serviceProvider = WordpressServiceProvider.getInstance().     serviceProvider.init(getServerBaseUrl()).     // @formatter:on     LOGGER.info("Local server up and running on address {} and port {}", localServer.getInetAddress(), localServer.getLocalPort()). }
false;private,static;1;26;;private static HttpServer createServer(int port) {     final Map<String, String> postsListCreateRequestHandlers = new HashMap<>().     postsListCreateRequestHandlers.put("GET", "/data/posts/list.json").     postsListCreateRequestHandlers.put("POST", "/data/posts/create.json").     final Map<String, String> postsSingleUpdateRequestHandlers = new HashMap<>().     postsSingleUpdateRequestHandlers.put("GET", "/data/posts/single.json").     postsSingleUpdateRequestHandlers.put("POST", "/data/posts/update.json").     postsSingleUpdateRequestHandlers.put("DELETE", "/data/posts/delete.json").     final Map<String, String> usersListCreateRequestHandlers = new HashMap<>().     usersListCreateRequestHandlers.put("GET", "/data/users/list.json").     usersListCreateRequestHandlers.put("POST", "/data/users/create.json").     final Map<String, String> usersSingleUpdateRequestHandlers = new HashMap<>().     usersSingleUpdateRequestHandlers.put("GET", "/data/users/single.json").     usersSingleUpdateRequestHandlers.put("POST", "/data/users/update.json").     usersSingleUpdateRequestHandlers.put("DELETE", "/data/users/delete.json").     // @formatter:off     return ServerBootstrap.bootstrap().setListenerPort(port).registerHandler("/wp/v2/posts", new WordpressServerHttpRequestHandler(postsListCreateRequestHandlers)).registerHandler("/wp/v2/posts/*", new WordpressServerHttpRequestHandler(postsSingleUpdateRequestHandlers)).registerHandler("/wp/v2/users", new WordpressServerHttpRequestHandler(usersListCreateRequestHandlers)).registerHandler("/wp/v2/users/*", new WordpressServerHttpRequestHandler(usersSingleUpdateRequestHandlers)).create(). // @formatter:on }
false;public,static;0;7;;@AfterClass public static void tearDownMockServer() {     LOGGER.info("Stopping local server").     if (localServer != null) {         localServer.stop().     } }
false;public,static;0;3;;public static WordpressServiceProvider getServiceProvider() {     return serviceProvider. }
false;public,static;0;3;;public static String getServerBaseUrl() {     return "http://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort(). }
