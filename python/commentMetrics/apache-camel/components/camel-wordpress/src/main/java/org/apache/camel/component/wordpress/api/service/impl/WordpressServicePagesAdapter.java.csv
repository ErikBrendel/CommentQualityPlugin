commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Class<PagesSPI> getSpiType() {     return PagesSPI.class. }
true;public;1;7;// @formatter:off ;// @formatter:off @Override public List<Page> list(PageSearchCriteria c) {     LOGGER.debug("Calling list pages: searchCriteria {}", c).     checkNotNull(c, "Please provide a search criteria").     return getSpi().list(this.getApiVersion(), c.getContext(), c.getPage(), c.getPerPage(), c.getSearch(), c.getAfter(), c.getAuthor(), c.getAuthorExclude(), c.getBefore(), c.getExclude(), c.getInclude(), c.getMenuOrder(), c.getOffset(), c.getOrder(), c.getOrderBy(), c.getParent(), c.getParentExclude(), c.getSlug(), c.getStatus(), c.getFilter()). }
false;public;3;6;;// @formatter:on @Override public Page retrieve(Integer pageId, Context context, String password) {     LOGGER.debug("Calling retrieve: postId {}.  context: {}", pageId, context).     checkArgument(pageId > 0, "Please provide a non zero post id").     return getSpi().retrieve(this.getApiVersion(), pageId, context, password). }
false;protected;1;4;;@Override protected Page doCreate(Page object) {     return getSpi().create(getApiVersion(), object). }
false;protected;1;4;;@Override protected Page doDelete(Integer id) {     return getSpi().delete(getApiVersion(), id, false). }
false;protected;2;4;;@Override protected Page doUpdate(Integer id, Page object) {     return getSpi().update(getApiVersion(), id, object). }
false;protected;2;4;;@Override protected Page doRetrieve(Integer entityID, Context context) {     return getSpi().retrieve(getApiVersion(), entityID, context, null). }
