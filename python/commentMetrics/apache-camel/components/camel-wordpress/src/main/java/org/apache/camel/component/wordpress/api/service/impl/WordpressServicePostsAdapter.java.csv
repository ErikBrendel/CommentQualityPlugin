commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Class<PostsSPI> getSpiType() {     return PostsSPI.class. }
false;public;1;8;;@Override public List<Post> list(PostSearchCriteria criteria) {     LOGGER.debug("Calling list posts: searchCriteria {}", criteria).     checkNotNull(criteria, "Please provide a search criteria").     return getSpi().list(this.getApiVersion(), criteria.getContext(), criteria.getPage(), criteria.getPerPage(), criteria.getSearch(), criteria.getAfter(), criteria.getAuthor(), criteria.getAuthorExclude(), criteria.getBefore(), criteria.getExclude(), criteria.getInclude(), criteria.getOffset(), criteria.getOrder(), criteria.getOrderBy(), criteria.getSlug(), criteria.getStatus(), criteria.getCategories(), criteria.getCategoriesExclude(), criteria.getTags(), criteria.getTagsExclude(), criteria.getStick()). }
false;public;3;7;;@Override public Post retrieve(Integer postId, Context context, String password) {     LOGGER.debug("Calling retrievePosts: postId {}.  postContext: {}", postId, context).     checkArgument(postId > 0, "Please provide a non zero post id").     checkNotNull(context, "Provide a post context").     return getSpi().retrieve(this.getApiVersion(), postId, context, password). }
false;protected;2;4;;@Override protected Post doRetrieve(Integer postId, Context context) {     return this.retrieve(postId, context, ""). }
false;public;1;4;;@Override public Post retrieve(Integer postId) {     return this.retrieve(postId, Context.view, ""). }
false;protected;1;4;;@Override protected Post doCreate(Post object) {     return getSpi().create(this.getApiVersion(), object). }
false;protected;1;4;;@Override protected Post doDelete(Integer id) {     return getSpi().delete(getApiVersion(), id). }
false;protected;1;4;;@Override protected DeletedModel<Post> doForceDelete(Integer id) {     return getSpi().forceDelete(getApiVersion(), id). }
false;protected;2;4;;@Override protected Post doUpdate(Integer id, Post object) {     return getSpi().update(getApiVersion(), id, object). }
