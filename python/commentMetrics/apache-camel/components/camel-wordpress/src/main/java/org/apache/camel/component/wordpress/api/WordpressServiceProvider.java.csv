commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static WordpressServiceProvider getInstance() {     return ServiceProviderHolder.INSTANCE. }
false;public;1;3;;public void init(String wordpressApiUrl) {     this.init(wordpressApiUrl, WordpressConstants.API_VERSION). }
false;public;2;3;;public void init(String wordpressApiUrl, String apiVersion) {     this.init(new WordpressAPIConfiguration(wordpressApiUrl, apiVersion)). }
false;public;1;20;;public void init(WordpressAPIConfiguration config) {     checkNotNull(emptyToNull(config.getApiUrl()), "Please inform the Wordpress API url , eg.: http://myblog.com/wp-json/wp").     if (isNullOrEmpty(config.getApiVersion())) {         config.setApiVersion(WordpressConstants.API_VERSION).     }     final WordpressServicePosts servicePosts = new WordpressServicePostsAdapter(config.getApiUrl(), config.getApiVersion()).     final WordpressServiceUsers serviceUsers = new WordpressServiceUsersAdapter(config.getApiUrl(), config.getApiVersion()).     servicePosts.setWordpressAuthentication(config.getAuthentication()).     serviceUsers.setWordpressAuthentication(config.getAuthentication()).     this.services = new HashMap<>().     this.services.put(WordpressServicePosts.class, servicePosts).     this.services.put(WordpressServiceUsers.class, serviceUsers).     this.configuration = config.     LOGGER.info("Wordpress Service Provider initialized using base URL: {}, API Version {}", config.getApiUrl(), config.getApiVersion()). }
false;public;1;8;;@SuppressWarnings("unchecked") public <T extends WordpressService> T getService(Class<T> wordpressServiceClazz) {     T service = (T) this.services.get(wordpressServiceClazz).     if (service == null) {         throw new IllegalArgumentException(String.format("Couldn't find a Wordpress Service '%s'", wordpressServiceClazz)).     }     return service. }
false;public;0;6;;public boolean hasAuthentication() {     if (this.configuration != null) {         return this.configuration.getAuthentication() != null.     }     return false. }
