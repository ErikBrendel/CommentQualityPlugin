commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public WordpressComponentConfiguration getConfig() {     return config. }
false;public;0;3;;public String getOperation() {     return operation. }
false;public;1;3;;public void setOperation(String operation) {     this.operation = operation. }
false;public;0;3;;public String getOperationDetail() {     return operationDetail. }
false;public;1;3;;public void setOperationDetail(String operationDetail) {     this.operationDetail = operationDetail. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;11;;public Producer createProducer() throws Exception {     switch(WordpressOperationType.valueOf(operation)) {         case post:             return new WordpressPostProducer(this).         case user:             return new WordpressUserProducer(this).         default:             break.     }     throw new UnsupportedOperationException(String.format("Operation '%s' not supported.", operation)). }
false;public;1;11;;public Consumer createConsumer(Processor processor) throws Exception {     switch(WordpressOperationType.valueOf(operation)) {         case post:             return new WordpressPostConsumer(this, processor).         case user:             return new WordpressUserConsumer(this, processor).         default:             break.     }     throw new UnsupportedOperationException(String.format("Operation '%s' not supported.", operation)). }
false;public;1;32;;@Override public void configureProperties(Map<String, Object> options) {     super.configureProperties(options).     // set configuration properties first     try {         if (config == null) {             config = new WordpressComponentConfiguration().         }         EndpointHelper.setReferenceProperties(getCamelContext(), config, options).         EndpointHelper.setProperties(getCamelContext(), config, options).         if (config.getSearchCriteria() == null) {             final SearchCriteria searchCriteria = WordpressOperationType.valueOf(operation).getCriteriaType().newInstance().             Map<String, Object> criteriaOptions = IntrospectionSupport.extractProperties(options, "criteria.").             // any property that has a "," should be a List             criteriaOptions = criteriaOptions.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> {                 if (e != null && e.toString().indexOf(",") > -1) {                     return Arrays.asList(e.toString().split(",")).                 }                 return e.getValue().             })).             IntrospectionSupport.setProperties(searchCriteria, criteriaOptions).             config.setSearchCriteria(searchCriteria).         }     } catch (Exception e) {         throw new IllegalArgumentException(e.getMessage(), e).     }     // validate configuration     config.validate().     this.initServiceProvider(). }
false;private;0;9;;private void initServiceProvider() {     final WordpressAPIConfiguration apiConfiguration = new WordpressAPIConfiguration(config.getUrl(), config.getApiVersion()).     // basic auth     if (ObjectHelper.isNotEmpty(config.getUser())) {         apiConfiguration.setAuthentication(new WordpressBasicAuthentication(config.getUser(), config.getPassword())).     }     WordpressServiceProvider.getInstance().init(apiConfiguration). }
