commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;26;;@Override protected ServerConnector createHttpsConnector(final String bindAddress, final HttpsSettings httpsSettings, final JettySettings jettySettings, final NetworkTrafficListener listener) {     final SslContextFactory sslContextFactory = new SslContextFactory().     sslContextFactory.setKeyStorePath(httpsSettings.keyStorePath()).     sslContextFactory.setKeyManagerPassword(httpsSettings.keyStorePassword()).     sslContextFactory.setKeyStorePassword(httpsSettings.keyStorePassword()).     sslContextFactory.setKeyStoreType(httpsSettings.keyStoreType()).     if (httpsSettings.hasTrustStore()) {         sslContextFactory.setTrustStorePath(httpsSettings.trustStorePath()).         sslContextFactory.setTrustStorePassword(httpsSettings.trustStorePassword()).         sslContextFactory.setTrustStoreType(httpsSettings.trustStoreType()).     }     sslContextFactory.setNeedClientAuth(httpsSettings.needClientAuth()).     sslContextFactory.setIncludeCipherSuites("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256").     sslContextFactory.setProtocol("TLSv1.2").     final HttpConfiguration httpConfig = createHttpConfig(jettySettings).     httpConfig.addCustomizer(new SecureRequestCustomizer()).     final int port = httpsSettings.port().     return createServerConnector(bindAddress, jettySettings, port, listener, new SslConnectionFactory(sslContextFactory, "http/1.1"), new HttpConnectionFactory(httpConfig)). }
false;public;3;33;;@Override public HttpServer buildHttpServer(final Options options, final AdminRequestHandler adminRequestHandler, final StubRequestHandler stubRequestHandler) {     return new JettyHttpServer(options, adminRequestHandler, stubRequestHandler) {          @Override         protected ServerConnector createHttpsConnector(final String bindAddress, final HttpsSettings httpsSettings, final JettySettings jettySettings, final NetworkTrafficListener listener) {             final SslContextFactory sslContextFactory = new SslContextFactory().             sslContextFactory.setKeyStorePath(httpsSettings.keyStorePath()).             sslContextFactory.setKeyManagerPassword(httpsSettings.keyStorePassword()).             sslContextFactory.setKeyStorePassword(httpsSettings.keyStorePassword()).             sslContextFactory.setKeyStoreType(httpsSettings.keyStoreType()).             if (httpsSettings.hasTrustStore()) {                 sslContextFactory.setTrustStorePath(httpsSettings.trustStorePath()).                 sslContextFactory.setTrustStorePassword(httpsSettings.trustStorePassword()).                 sslContextFactory.setTrustStoreType(httpsSettings.trustStoreType()).             }             sslContextFactory.setNeedClientAuth(httpsSettings.needClientAuth()).             sslContextFactory.setIncludeCipherSuites("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256").             sslContextFactory.setProtocol("TLSv1.2").             final HttpConfiguration httpConfig = createHttpConfig(jettySettings).             httpConfig.addCustomizer(new SecureRequestCustomizer()).             final int port = httpsSettings.port().             return createServerConnector(bindAddress, jettySettings, port, listener, new SslConnectionFactory(sslContextFactory, "http/1.1"), new HttpConnectionFactory(httpConfig)).         }     }. }
