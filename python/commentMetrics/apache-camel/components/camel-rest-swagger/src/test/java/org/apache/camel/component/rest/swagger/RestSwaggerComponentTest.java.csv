commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void resetWireMock() {     petstore.resetRequests(). }
false;public;0;15;;@Test public void shouldBeAddingPets() {     final Pet pet = new Pet().     pet.name = "Jean-Luc Picard".     final Pet created = template.requestBody("direct:addPet", pet, Pet.class).     assertNotNull(created).     assertEquals(Integer.valueOf(14), created.id).     petstore.verify(postRequestedFor(urlEqualTo("/v2/pet")).withHeader("Accept", equalTo("application/xml, application/json")).withHeader("Content-Type", equalTo("application/xml"))). }
false;public;0;12;;@Test public void shouldBeGettingPetsById() {     final Pet pet = template.requestBodyAndHeader("direct:getPetById", NO_BODY, "petId", 14, Pet.class).     assertNotNull(pet).     assertEquals(Integer.valueOf(14), pet.id).     assertEquals("Olafur Eliason Arnalds", pet.name).     petstore.verify(getRequestedFor(urlEqualTo("/v2/pet/14")).withHeader("Accept", equalTo("application/xml, application/json"))). }
false;public;0;12;;@Test public void shouldBeGettingPetsByIdSpecifiedInEndpointParameters() {     final Pet pet = template.requestBody("direct:getPetByIdWithEndpointParams", NO_BODY, Pet.class).     assertNotNull(pet).     assertEquals(Integer.valueOf(14), pet.id).     assertEquals("Olafur Eliason Arnalds", pet.name).     petstore.verify(getRequestedFor(urlEqualTo("/v2/pet/14")).withHeader("Accept", equalTo("application/xml, application/json"))). }
false;public;0;13;;@Test public void shouldBeGettingPetsByStatus() {     final Pets pets = template.requestBodyAndHeader("direct:findPetsByStatus", NO_BODY, "status", "available", Pets.class).     assertNotNull(pets).     assertNotNull(pets.pets).     assertEquals(2, pets.pets.size()).     petstore.verify(getRequestedFor(urlPathEqualTo("/v2/pet/findByStatus")).withQueryParam("status", equalTo("available")).withHeader("Accept", equalTo("application/xml, application/json"))). }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext camelContext = super.createCamelContext().     final RestSwaggerComponent component = new RestSwaggerComponent().     component.setComponentName(componentName).     component.setHost("http://localhost:" + petstore.port()).     camelContext.addComponent("petStore", component).     return camelContext. }
false;public;0;16;;@Override public void configure() throws Exception {     final JAXBContext jaxbContext = JAXBContext.newInstance(Pet.class, Pets.class).     final JaxbDataFormat jaxb = new JaxbDataFormat(jaxbContext).     jaxb.setJaxbProviderProperties(Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, false)).     from("direct:getPetById").to("petStore:getPetById").unmarshal(jaxb).     from("direct:getPetByIdWithEndpointParams").to("petStore:getPetById?petId=14").unmarshal(jaxb).     from("direct:addPet").marshal(jaxb).to("petStore:addPet").unmarshal(jaxb).     from("direct:findPetsByStatus").to("petStore:findPetsByStatus").unmarshal(jaxb). }
false;protected;0;21;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             final JAXBContext jaxbContext = JAXBContext.newInstance(Pet.class, Pets.class).             final JaxbDataFormat jaxb = new JaxbDataFormat(jaxbContext).             jaxb.setJaxbProviderProperties(Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, false)).             from("direct:getPetById").to("petStore:getPetById").unmarshal(jaxb).             from("direct:getPetByIdWithEndpointParams").to("petStore:getPetById?petId=14").unmarshal(jaxb).             from("direct:addPet").marshal(jaxb).to("petStore:addPet").unmarshal(jaxb).             from("direct:findPetsByStatus").to("petStore:findPetsByStatus").unmarshal(jaxb).         }     }. }
false;public,static;0;4;;@Parameters(name = "component = {0}") public static Iterable<String> knownProducers() {     return Arrays.asList(RestEndpoint.DEFAULT_REST_PRODUCER_COMPONENTS). }
false;public,static;0;19;;@BeforeClass public static void setupStubs() throws IOException, URISyntaxException {     petstore.stubFor(get(urlEqualTo("/swagger.json")).willReturn(aResponse().withBody(Files.readAllBytes(Paths.get(RestSwaggerComponentTest.class.getResource("/swagger.json").toURI()))))).     petstore.stubFor(post(urlEqualTo("/v2/pet")).withRequestBody(equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Pet><name>Jean-Luc Picard</name></Pet>")).willReturn(aResponse().withStatus(HttpURLConnection.HTTP_CREATED).withBody("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Pet><id>14</id></Pet>"))).     petstore.stubFor(get(urlEqualTo("/v2/pet/14")).willReturn(aResponse().withStatus(HttpURLConnection.HTTP_OK).withBody("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Pet><id>14</id><name>Olafur Eliason Arnalds</name></Pet>"))).     petstore.stubFor(get(urlPathEqualTo("/v2/pet/findByStatus")).withQueryParam("status", equalTo("available")).willReturn(aResponse().withStatus(HttpURLConnection.HTTP_OK).withBody("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><pets><Pet><id>1</id><name>Olafur Eliason Arnalds</name></Pet><Pet><name>Jean-Luc Picard</name></Pet></pets>"))). }
