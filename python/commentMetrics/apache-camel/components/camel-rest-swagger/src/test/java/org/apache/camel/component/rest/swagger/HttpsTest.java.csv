commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void resetWireMock() {     petstore.resetRequests(). }
false;public;0;12;;@Test public void shouldBeConfiguredForHttps() throws Exception {     final Pet pet = template.requestBodyAndHeader("direct:getPetById", NO_BODY, "petId", 14, Pet.class).     assertNotNull(pet).     assertEquals(Integer.valueOf(14), pet.id).     assertEquals("Olafur Eliason Arnalds", pet.name).     petstore.verify(getRequestedFor(urlEqualTo("/v2/pet/14")).withHeader("Accept", equalTo("application/xml, application/json"))). }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext camelContext = super.createCamelContext().     final RestSwaggerComponent component = new RestSwaggerComponent().     component.setComponentName(componentName).     component.setHost("https://localhost:" + petstore.httpsPort()).     camelContext.addComponent("petStore", component).     return camelContext. }
false;public;0;10;;@Override public void configure() throws Exception {     final JAXBContext jaxbContext = JAXBContext.newInstance(Pet.class, Pets.class).     final JaxbDataFormat jaxb = new JaxbDataFormat(jaxbContext).     jaxb.setJaxbProviderProperties(Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, false)).     from("direct:getPetById").to("petStore:getPetById").unmarshal(jaxb). }
false;protected;0;15;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             final JAXBContext jaxbContext = JAXBContext.newInstance(Pet.class, Pets.class).             final JaxbDataFormat jaxb = new JaxbDataFormat(jaxbContext).             jaxb.setJaxbProviderProperties(Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, false)).             from("direct:getPetById").to("petStore:getPetById").unmarshal(jaxb).         }     }. }
false;public,static;0;17;;@Parameters(name = "component = {0}") public static Iterable<String> knownProducers() {     final List<String> producers = new ArrayList<>(Arrays.asList(RestEndpoint.DEFAULT_REST_PRODUCER_COMPONENTS)).     // we cannot support SSL in the `http` component as it needs to be     // configured via static helper method and this influences all users of     // the commons-httpclient (all endpoints, component instances)     producers.remove("http").     // `http4` component transforms the endpoint uri from `http4://` to     // `https4://` we need to accommodate for that otherwise we'll end up     // configuring the wrong component's properties in     // RestSwaggerDelegateHttpsTest     producers.replaceAll(c -> "http4".equals(c) ? "https4" : c).     return producers. }
false;public,static;0;9;;@BeforeClass public static void setupStubs() throws IOException, URISyntaxException {     petstore.stubFor(get(urlEqualTo("/swagger.json")).willReturn(aResponse().withBody(Files.readAllBytes(Paths.get(RestSwaggerGlobalHttpsTest.class.getResource("/swagger.json").toURI()))))).     petstore.stubFor(get(urlEqualTo("/v2/pet/14")).willReturn(aResponse().withStatus(HttpURLConnection.HTTP_OK).withBody("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Pet><id>14</id><name>Olafur Eliason Arnalds</name></Pet>"))). }
false;static;1;20;;static SSLContextParameters createHttpsParameters(final CamelContext camelContext) throws Exception {     final TrustManagersParameters trustManagerParameters = new TrustManagersParameters().     trustManagerParameters.setCamelContext(camelContext).     final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).     final HttpsSettings httpsSettings = petstore.getOptions().httpsSettings().     final KeyStore trustStore = CertificateUtils.getKeyStore(Resource.newResource(httpsSettings.keyStorePath()), httpsSettings.keyStoreType(), null, httpsSettings.keyStorePassword()).     trustManagerFactory.init(trustStore).     final TrustManager trustManager = trustManagerFactory.getTrustManagers()[0].     trustManagerParameters.setTrustManager(trustManager).     final SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setCamelContext(camelContext).     sslContextParameters.setTrustManagers(trustManagerParameters).     final CipherSuitesParameters cipherSuites = new CipherSuitesParameters().     cipherSuites.setCipherSuite(Collections.singletonList("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256")).     sslContextParameters.setCipherSuites(cipherSuites).     sslContextParameters.setSecureSocketProtocol("TLSv1.2").     return sslContextParameters. }
