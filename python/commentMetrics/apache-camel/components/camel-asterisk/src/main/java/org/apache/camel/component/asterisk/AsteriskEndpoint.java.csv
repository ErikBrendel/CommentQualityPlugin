commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     // Validate mandatory option     ObjectHelper.notNull(hostname, "hostname").     ObjectHelper.notNull(username, "username").     ObjectHelper.notNull(password, "password"). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new AsteriskProducer(this). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return new AsteriskConsumer(this, processor). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;3;/**  * Login username  */ ;/**  * Login username  */ public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Login password  */ ;/**  * Login password  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public AsteriskAction getAction() {     return action. }
true;public;1;3;/**  * What action to perform such as getting queue status, sip peers or extension state.  */ ;/**  * What action to perform such as getting queue status, sip peers or extension state.  */ public void setAction(AsteriskAction action) {     this.action = action. }
false;public;0;3;;public String getHostname() {     return hostname. }
true;public;1;3;/**  * The hostname of the asterisk server  */ ;/**  * The hostname of the asterisk server  */ public void setHostname(String hostname) {     this.hostname = hostname. }
true;public;0;3;/**  * Logical name  */ ;/**  * Logical name  */ public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
