# id;timestamp;commentText;codeText;commentWords;codeWords
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1468567279;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        Point p = exchange.getIn().getMandatoryBody(Point.class)_____        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Writing point {}", p.lineProtocol())__            }__            connection.write(dataBaseName, retentionPolicy, p)__        } catch (Exception ex) {_            exchange.setException(new CamelInfluxDbException(ex))__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,point,p,exchange,get,in,get,mandatory,body,point,class,try,if,log,is,debug,enabled,log,debug,writing,point,p,line,protocol,connection,write,data,base,name,retention,policy,p,catch,exception,ex,exchange,set,exception,new,camel,influx,db,exception,ex
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1482922438;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        if (!endpoint.isBatch()) {_            Point p = exchange.getIn().getMandatoryBody(Point.class)___            try {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Writing point {}", p.lineProtocol())__                }__                connection.write(dataBaseName, retentionPolicy, p)__            } catch (Exception ex) {_                exchange.setException(new CamelInfluxDbException(ex))__            }_        } else {_            BatchPoints batchPoints = exchange.getIn().getMandatoryBody(BatchPoints.class)___            try {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Writing BatchPoints {}", batchPoints.lineProtocol())__                }__                connection.write(batchPoints)__            } catch (Exception ex) {_                exchange.setException(new CamelInfluxDbException(ex))__            }_        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,if,endpoint,is,batch,point,p,exchange,get,in,get,mandatory,body,point,class,try,if,log,is,debug,enabled,log,debug,writing,point,p,line,protocol,connection,write,data,base,name,retention,policy,p,catch,exception,ex,exchange,set,exception,new,camel,influx,db,exception,ex,else,batch,points,batch,points,exchange,get,in,get,mandatory,body,batch,points,class,try,if,log,is,debug,enabled,log,debug,writing,batch,points,batch,points,line,protocol,connection,write,batch,points,catch,exception,ex,exchange,set,exception,new,camel,influx,db,exception,ex
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1484056283;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        if (!endpoint.isBatch()) {_            Point p = exchange.getIn().getMandatoryBody(Point.class)___            try {_                LOG.debug("Writing point {}", p.lineProtocol())___                connection.write(dataBaseName, retentionPolicy, p)__            } catch (Exception ex) {_                exchange.setException(new CamelInfluxDbException(ex))__            }_        } else {_            BatchPoints batchPoints = exchange.getIn().getMandatoryBody(BatchPoints.class)___            try {_                LOG.debug("Writing BatchPoints {}", batchPoints.lineProtocol())___                connection.write(batchPoints)__            } catch (Exception ex) {_                exchange.setException(new CamelInfluxDbException(ex))__            }_        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,if,endpoint,is,batch,point,p,exchange,get,in,get,mandatory,body,point,class,try,log,debug,writing,point,p,line,protocol,connection,write,data,base,name,retention,policy,p,catch,exception,ex,exchange,set,exception,new,camel,influx,db,exception,ex,else,batch,points,batch,points,exchange,get,in,get,mandatory,body,batch,points,class,try,log,debug,writing,batch,points,batch,points,line,protocol,connection,write,batch,points,catch,exception,ex,exchange,set,exception,new,camel,influx,db,exception,ex
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1484130837;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        switch (endpoint.getOperation()) {_        case InfluxDbOperations.INSERT:_            doInsert(exchange, dataBaseName, retentionPolicy)__            break__        case InfluxDbOperations.QUERY:_            doQuery(exchange, dataBaseName, retentionPolicy)__            break__        default:_            throw new IllegalArgumentException("The operation " + endpoint.getOperation() + " is not supported")__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,switch,endpoint,get,operation,case,influx,db,operations,insert,do,insert,exchange,data,base,name,retention,policy,break,case,influx,db,operations,query,do,query,exchange,data,base,name,retention,policy,break,default,throw,new,illegal,argument,exception,the,operation,endpoint,get,operation,is,not,supported
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1484138295;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        switch (endpoint.getOperation()) {_        case InfluxDbOperations.INSERT:_            doInsert(exchange, dataBaseName, retentionPolicy)__            break__        case InfluxDbOperations.QUERY:_            doQuery(exchange, dataBaseName, retentionPolicy)__            break__        default:_            throw new IllegalArgumentException("The operation " + endpoint.getOperation() + " is not supported")__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,switch,endpoint,get,operation,case,influx,db,operations,insert,do,insert,exchange,data,base,name,retention,policy,break,case,influx,db,operations,query,do,query,exchange,data,base,name,retention,policy,break,default,throw,new,illegal,argument,exception,the,operation,endpoint,get,operation,is,not,supported
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1499690339;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        switch (endpoint.getOperation()) {_        case InfluxDbOperations.INSERT:_            doInsert(exchange, dataBaseName, retentionPolicy)__            break__        case InfluxDbOperations.QUERY:_            doQuery(exchange, dataBaseName, retentionPolicy)__            break__        default:_            throw new IllegalArgumentException("The operation " + endpoint.getOperation() + " is not supported")__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,switch,endpoint,get,operation,case,influx,db,operations,insert,do,insert,exchange,data,base,name,retention,policy,break,case,influx,db,operations,query,do,query,exchange,data,base,name,retention,policy,break,default,throw,new,illegal,argument,exception,the,operation,endpoint,get,operation,is,not,supported
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1499755478;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        switch (endpoint.getOperation()) {_        case InfluxDbOperations.INSERT:_            doInsert(exchange, dataBaseName, retentionPolicy)__            break__        case InfluxDbOperations.QUERY:_            doQuery(exchange, dataBaseName, retentionPolicy)__            break__        default:_            throw new IllegalArgumentException("The operation " + endpoint.getOperation() + " is not supported")__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,switch,endpoint,get,operation,case,influx,db,operations,insert,do,insert,exchange,data,base,name,retention,policy,break,case,influx,db,operations,query,do,query,exchange,data,base,name,retention,policy,break,default,throw,new,illegal,argument,exception,the,operation,endpoint,get,operation,is,not,supported
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1521557037;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        switch (endpoint.getOperation()) {_        case InfluxDbOperations.INSERT:_            doInsert(exchange, dataBaseName, retentionPolicy)__            break__        case InfluxDbOperations.QUERY:_            doQuery(exchange, dataBaseName, retentionPolicy)__            break__        default:_            throw new IllegalArgumentException("The operation " + endpoint.getOperation() + " is not supported")__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,switch,endpoint,get,operation,case,influx,db,operations,insert,do,insert,exchange,data,base,name,retention,policy,break,case,influx,db,operations,query,do,query,exchange,data,base,name,retention,policy,break,default,throw,new,illegal,argument,exception,the,operation,endpoint,get,operation,is,not,supported
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1540108160;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        switch (endpoint.getOperation()) {_        case InfluxDbOperations.INSERT:_            doInsert(exchange, dataBaseName, retentionPolicy)__            break__        case InfluxDbOperations.QUERY:_            doQuery(exchange, dataBaseName, retentionPolicy)__            break__        default:_            throw new IllegalArgumentException("The operation " + endpoint.getOperation() + " is not supported")__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,switch,endpoint,get,operation,case,influx,db,operations,insert,do,insert,exchange,data,base,name,retention,policy,break,case,influx,db,operations,query,do,query,exchange,data,base,name,retention,policy,break,default,throw,new,illegal,argument,exception,the,operation,endpoint,get,operation,is,not,supported
InfluxDbProducer -> @Override     public void process(Exchange exchange) throws Exception;1540108163;Processes the message exchange__@param exchange the message exchange_@throws Exception if an internal processing error has occurred.;@Override_    public void process(Exchange exchange) throws Exception {__        String dataBaseName = calculateDatabaseName(exchange)__        String retentionPolicy = calculateRetentionPolicy(exchange)__        switch (endpoint.getOperation()) {_        case InfluxDbOperations.INSERT:_            doInsert(exchange, dataBaseName, retentionPolicy)__            break__        case InfluxDbOperations.QUERY:_            doQuery(exchange, dataBaseName, retentionPolicy)__            break__        default:_            throw new IllegalArgumentException("The operation " + endpoint.getOperation() + " is not supported")__        }_    };processes,the,message,exchange,param,exchange,the,message,exchange,throws,exception,if,an,internal,processing,error,has,occurred;override,public,void,process,exchange,exchange,throws,exception,string,data,base,name,calculate,database,name,exchange,string,retention,policy,calculate,retention,policy,exchange,switch,endpoint,get,operation,case,influx,db,operations,insert,do,insert,exchange,data,base,name,retention,policy,break,case,influx,db,operations,query,do,query,exchange,data,base,name,retention,policy,break,default,throw,new,illegal,argument,exception,the,operation,endpoint,get,operation,is,not,supported
