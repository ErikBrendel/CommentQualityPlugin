commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY, "select * from cpu"). }
false;public;0;17;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(0)).     // test route     from("direct:test").to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY, "select * from cpu").         }     }).to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}&operation=query").to("mock:test"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(0)).             // test route             from("direct:test").to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY, "select * from cpu").                 }             }).to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}&operation=query").to("mock:test").         }     }. }
false;public;0;5;;@Before public void resetEndpoints() {     errorEndpoint.reset().     successEndpoint.reset(). }
false;public;0;12;;@Test public void writePointFromMapAndStaticDbName() throws InterruptedException {     errorEndpoint.expectedMessageCount(0).     successEndpoint.expectedMessageCount(1).     Map<String, Object> pointMap = createMapPoint().     sendBody("direct:test", pointMap).     errorEndpoint.assertIsSatisfied().     successEndpoint.assertIsSatisfied(). }
false;private;0;6;;private Map<String, Object> createMapPoint() {     Map<String, Object> pointMap = new HashMap<>().     pointMap.put(InfluxDbConstants.MEASUREMENT_NAME, "MyTestMeasurement").     pointMap.put("CPU", 1).     return pointMap. }
