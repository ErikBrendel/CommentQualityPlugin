commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(0)).     // test route     from("direct:test").to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}").to("mock:test"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(0)).             // test route             from("direct:test").to("influxdb:influxDbBean?databaseName={{influxdb.testDb}}").to("mock:test").         }     }. }
false;public;0;5;;@Before public void resetEndpoints() {     errorEndpoint.reset().     successEndpoint.reset(). }
false;public;0;13;;@Test public void writePointFromMapAndStaticDbName() throws InterruptedException {     errorEndpoint.expectedMessageCount(0).     successEndpoint.expectedMessageCount(1).     Map<String, Object> pointMap = createMapPoint().     sendBody("direct:test", pointMap).     errorEndpoint.assertIsSatisfied().     successEndpoint.assertIsSatisfied(). }
false;public;0;14;;@Test public void writePointFromMapAndDynamicDbName() throws InterruptedException {     errorEndpoint.expectedMessageCount(0).     successEndpoint.expectedMessageCount(1).     Map<String, Object> pointMap = createMapPoint().     Map<String, Object> header = createHeader().     sendBody("direct:test", pointMap, header).     errorEndpoint.assertIsSatisfied().     successEndpoint.assertIsSatisfied(). }
false;public;0;15;;@Test public void missingMeassurementNameFails() throws InterruptedException {     errorEndpoint.expectedMessageCount(1).     successEndpoint.expectedMessageCount(0).     Map<String, Object> pointMap = new HashMap<>().     pointMap.remove(InfluxDbConstants.MEASUREMENT_NAME).     sendBody("direct:test", pointMap).     errorEndpoint.assertIsSatisfied().     successEndpoint.assertIsSatisfied(). }
false;private;0;5;;private Map<String, Object> createHeader() {     Map<String, Object> header = new HashMap<>().     header.put(InfluxDbConstants.DBNAME_HEADER, "myOtherDatabase").     return header. }
false;private;0;6;;private Map<String, Object> createMapPoint() {     Map<String, Object> pointMap = new HashMap<>().     pointMap.put(InfluxDbConstants.MEASUREMENT_NAME, "MyTestMeasurement").     pointMap.put("CPU", 1).     return pointMap. }
