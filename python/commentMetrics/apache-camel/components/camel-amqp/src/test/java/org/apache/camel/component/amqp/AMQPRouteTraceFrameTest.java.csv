commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;@BeforeClass public static void beforeClass() throws Exception {     broker = new BrokerService().     broker.setPersistent(false).     broker.addConnector("amqp://0.0.0.0:" + amqpPort).     broker.start().     System.setProperty(AMQP_PORT, amqpPort + ""). }
false;public,static;0;4;;@AfterClass public static void afterClass() throws Exception {     broker.stop(). }
false;public;0;7;;@Test public void testTraceFrame() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.message(0).header("cheese").isEqualTo(123).     template.sendBodyAndHeader("amqp-customized:queue:ping", expectedBody, "cheese", 123).     resultEndpoint.assertIsSatisfied(). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     JmsConnectionFactory connectionFactory = new JmsConnectionFactory("amqp://localhost:" + amqpPort + "?amqp.traceFrames=true").     AMQPComponent amqp = amqpComponent("amqp://localhost:" + amqpPort).     amqp.setConnectionFactory(connectionFactory).     camelContext.addComponent("amqp-customized", amqp).     return camelContext. }
false;public;0;5;;public void configure() throws Exception {     from("amqp-customized:queue:ping").to("log:routing").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("amqp-customized:queue:ping").to("log:routing").to("mock:result").         }     }. }
