commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;@BeforeClass public static void beforeClass() throws Exception {     broker = new BrokerService().     broker.setPersistent(false).     broker.addConnector("amqp://0.0.0.0:" + amqpPort).     broker.start().     System.setProperty(AMQP_PORT, amqpPort + ""). }
false;public,static;0;4;;@AfterClass public static void afterClass() throws Exception {     broker.stop(). }
false;public;0;7;;@Test public void testJmsQueue() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.message(0).header("cheese").isEqualTo(123).     template.sendBodyAndHeader("amqp-customized:queue:ping", expectedBody, "cheese", 123).     resultEndpoint.assertIsSatisfied(). }
false;public;0;5;;@Test public void testRequestReply() {     String response = template.requestBody("amqp-customized:queue:inOut", expectedBody, String.class).     assertEquals("response", response). }
false;public;0;7;;@Test public void testJmsTopic() throws Exception {     resultEndpoint.expectedMessageCount(2).     resultEndpoint.message(0).header("cheese").isEqualTo(123).     template.sendBodyAndHeader("amqp-customized:topic:ping", expectedBody, "cheese", 123).     resultEndpoint.assertIsSatisfied(). }
false;public;0;6;;@Test public void testPrefixWildcard() throws Exception {     resultEndpoint.expectedMessageCount(1).     template.sendBody("amqp-customized:wildcard.foo.bar", expectedBody).     resultEndpoint.assertIsSatisfied(). }
false;public;0;7;;@Test public void testIncludeDestination() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.message(0).header("JMSDestination").isEqualTo("ping").     template.sendBody("amqp-customized:queue:ping", expectedBody).     resultEndpoint.assertIsSatisfied(). }
false;protected;0;6;;// Routes fixtures protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.getRegistry().bind("amqpConnection", discoverAMQP(camelContext)).     camelContext.addComponent("amqp-customized", amqpComponent("amqp://localhost:" + amqpPort)).     return camelContext. }
false;public;0;24;;public void configure() throws Exception {     from("amqp-customized:queue:ping").to("log:routing").to("mock:result").     from("amqp-customized:queue:inOut").setBody().constant("response").     from("amqp-customized:topic:ping").to("log:routing").to("mock:result").     from("amqp-customized:topic:ping").to("log:routing").to("mock:result").     from("amqp-customized:queue:wildcard.>").to("log:routing").to("mock:result").     from("amqp:queue:uriEndpoint").to("log:routing").to("mock:result"). }
false;protected;0;28;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("amqp-customized:queue:ping").to("log:routing").to("mock:result").             from("amqp-customized:queue:inOut").setBody().constant("response").             from("amqp-customized:topic:ping").to("log:routing").to("mock:result").             from("amqp-customized:topic:ping").to("log:routing").to("mock:result").             from("amqp-customized:queue:wildcard.>").to("log:routing").to("mock:result").             from("amqp:queue:uriEndpoint").to("log:routing").to("mock:result").         }     }. }
