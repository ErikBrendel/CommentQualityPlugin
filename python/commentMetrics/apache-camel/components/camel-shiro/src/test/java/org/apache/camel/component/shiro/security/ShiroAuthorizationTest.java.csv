commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testShiroAuthorizationFailure() throws Exception {     // The user ringo has role sec-level1 with permission set as zone1:readonly:*     // Since the required permission is zone1:readwrite:*, this request should fail authorization     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("ringo", "starr").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(0).     failureEndpoint.expectedMessageCount(1).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;15;;@Test public void testSuccessfulAuthorization() throws Exception {     // The user george has role sec-level2 with permission set as zone1:*     // Since the required permission incorporates zone1:readwrite:*, this request should successfully pass authorization     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("george", "harrison").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(1).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;15;;@Test public void testSuccessfulAuthorizationForHigherScope() throws Exception {     // The user john has role sec-level3 with permission set as *     // Since the required permission incorporates zone1:readwrite:*, this request should successfully pass authorization     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("paul", "mccartney").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(1).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;15;;@Test public void testSuccessfulAuthorizationAny() throws Exception {     // The user ringo has role sec-level1 with permission set as zone1:readonly:*     // This permission is allowed and so this should work     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("ringo", "starr").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(1).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureAnyEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;15;;@Test public void testFailureAuthorizationAll() throws Exception {     // The user ringo has role sec-level1 with permission set as zone1:readonly:*     // However, ringo does not have a permission of "zone1:writeonly:*" and so authorization fails     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("ringo", "starr").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(0).     failureEndpoint.expectedMessageCount(1).     template.send("direct:secureAllEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;15;;@Test public void testSuccessfulAuthorizationAll() throws Exception {     // The user george has role sec-level2 with permission set as zone1:*     // Since the required permission incorporates all permissions, this request should successfully pass authorization     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("george", "harrison").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(1).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureAllEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;17;;public void configure() {     List<Permission> permissionsList = new ArrayList<>().     Permission permission = new WildcardPermission("zone1:readwrite:*").     permissionsList.add(permission).     final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true, permissionsList).     onException(CamelAuthorizationException.class).to("mock:authorizationException").     from("direct:secureEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success"). }
false;public;0;19;;public void configure() {     List<Permission> permissionsList = new ArrayList<>().     Permission permission = new WildcardPermission("zone1:readonly:*").     permissionsList.add(permission).     permission = new WildcardPermission("zone1:writeonly:*").     permissionsList.add(permission).     final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true, permissionsList).     onException(CamelAuthorizationException.class).to("mock:authorizationException").     from("direct:secureAnyEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success"). }
false;public;0;20;;public void configure() {     List<Permission> permissionsList = new ArrayList<>().     Permission permission = new WildcardPermission("zone1:readonly:*").     permissionsList.add(permission).     permission = new WildcardPermission("zone1:writeonly:*").     permissionsList.add(permission).     final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true, permissionsList).     securityPolicy.setAllPermissionsRequired(true).     onException(CamelAuthorizationException.class).to("mock:authorizationException").     from("direct:secureAllEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success"). }
false;protected;0;65;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     return new RouteBuilder[] { new RouteBuilder() {          public void configure() {             List<Permission> permissionsList = new ArrayList<>().             Permission permission = new WildcardPermission("zone1:readwrite:*").             permissionsList.add(permission).             final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true, permissionsList).             onException(CamelAuthorizationException.class).to("mock:authorizationException").             from("direct:secureEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success").         }     }, new RouteBuilder() {          public void configure() {             List<Permission> permissionsList = new ArrayList<>().             Permission permission = new WildcardPermission("zone1:readonly:*").             permissionsList.add(permission).             permission = new WildcardPermission("zone1:writeonly:*").             permissionsList.add(permission).             final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true, permissionsList).             onException(CamelAuthorizationException.class).to("mock:authorizationException").             from("direct:secureAnyEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success").         }     }, new RouteBuilder() {          public void configure() {             List<Permission> permissionsList = new ArrayList<>().             Permission permission = new WildcardPermission("zone1:readonly:*").             permissionsList.add(permission).             permission = new WildcardPermission("zone1:writeonly:*").             permissionsList.add(permission).             final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true, permissionsList).             securityPolicy.setAllPermissionsRequired(true).             onException(CamelAuthorizationException.class).to("mock:authorizationException").             from("direct:secureAllEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success").         }     } }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(ShiroSecurityConstants.SHIRO_SECURITY_TOKEN, encrypt()).     exchange.getIn().setBody("Beatle Mania"). }
