commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testShiroAuthorizationFailure() throws Exception {     // The user ringo has role sec-level1     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("ringo", "starr").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(0).     failureEndpoint.expectedMessageCount(1).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;14;;@Test public void testSuccessfulAuthorization() throws Exception {     // The user george has role sec-level2     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("george", "harrison").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(1).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;14;;@Test public void testSuccessfulAuthorizationForHigherScope() throws Exception {     // The user john has role sec-level3     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("john", "lennon").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(1).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;14;;@Test public void testFailureAuthorizationAll() throws Exception {     // The user george has role sec-level2 but not sec-level3     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("george", "harrison").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(0).     failureEndpoint.expectedMessageCount(1).     template.send("direct:secureAllEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;14;;@Test public void testSuccessfulAuthorizationAll() throws Exception {     // The user paul has role sec-level2 and sec-level3     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("paul", "mccartney").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(1).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureAllEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;18;;public void configure() {     List<String> rolesList = new ArrayList<>().     rolesList.add("sec-level2").     rolesList.add("sec-level3").     final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true).     securityPolicy.setRolesList(rolesList).     onException(CamelAuthorizationException.class).to("mock:authorizationException").     from("direct:secureEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success"). }
false;public;0;19;;public void configure() {     List<String> rolesList = new ArrayList<>().     rolesList.add("sec-level2").     rolesList.add("sec-level3").     final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true).     securityPolicy.setRolesList(rolesList).     securityPolicy.setAllRolesRequired(true).     onException(CamelAuthorizationException.class).to("mock:authorizationException").     from("direct:secureAllEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success"). }
false;protected;0;45;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     return new RouteBuilder[] { new RouteBuilder() {          public void configure() {             List<String> rolesList = new ArrayList<>().             rolesList.add("sec-level2").             rolesList.add("sec-level3").             final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true).             securityPolicy.setRolesList(rolesList).             onException(CamelAuthorizationException.class).to("mock:authorizationException").             from("direct:secureEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success").         }     }, new RouteBuilder() {          public void configure() {             List<String> rolesList = new ArrayList<>().             rolesList.add("sec-level2").             rolesList.add("sec-level3").             final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase, true).             securityPolicy.setRolesList(rolesList).             securityPolicy.setAllRolesRequired(true).             onException(CamelAuthorizationException.class).to("mock:authorizationException").             from("direct:secureAllEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success").         }     } }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(ShiroSecurityConstants.SHIRO_SECURITY_TOKEN, encrypt()).     exchange.getIn().setBody("Beatle Mania"). }
