commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testShiroAuthenticationFailure() throws Exception {     // Incorrect password     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("ringo", "stirr").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(0).     failureEndpoint.expectedMessageCount(1).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;14;;@Test public void testSuccessfulShiroAuthenticationWithNoAuthorization() throws Exception {     ShiroSecurityToken shiroSecurityToken = new ShiroSecurityToken("ringo", "starr").     TestShiroSecurityTokenInjector shiroSecurityTokenInjector = new TestShiroSecurityTokenInjector(shiroSecurityToken, passPhrase).     successEndpoint.expectedMessageCount(2).     failureEndpoint.expectedMessageCount(0).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     template.send("direct:secureEndpoint", shiroSecurityTokenInjector).     successEndpoint.assertIsSatisfied().     failureEndpoint.assertIsSatisfied(). }
false;public;0;11;;@SuppressWarnings("unchecked") public void configure() {     onException(UnknownAccountException.class, IncorrectCredentialsException.class, LockedAccountException.class, AuthenticationException.class).to("mock:authenticationException").     from("direct:secureEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success"). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() throws Exception {     final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase).     securityPolicy.setBase64(true).     return new RouteBuilder() {          @SuppressWarnings("unchecked")         public void configure() {             onException(UnknownAccountException.class, IncorrectCredentialsException.class, LockedAccountException.class, AuthenticationException.class).to("mock:authenticationException").             from("direct:secureEndpoint").policy(securityPolicy).to("log:incoming payload").to("mock:success").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     super.process(exchange).     exchange.getIn().setBody("Beatle Mania"). }
