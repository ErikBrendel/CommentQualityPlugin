commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public ByteSource encrypt() throws Exception {     if (passPhrase == bits128) {         LOG.warn("Using the default encryption key is not secure").     }     return ShiroSecurityHelper.encrypt(securityToken, passPhrase, cipherService). }
false;public;1;12;;public void process(Exchange exchange) throws Exception {     ByteSource bytes = encrypt().     Object token.     if (isBase64()) {         token = bytes.toBase64().     } else {         token = bytes.     }     exchange.getIn().setHeader(ShiroSecurityConstants.SHIRO_SECURITY_TOKEN, token). }
false;public;0;3;;public byte[] getPassPhrase() {     return passPhrase. }
false;public;1;3;;public void setPassPhrase(byte[] passPhrase) {     this.passPhrase = passPhrase. }
false;public;1;3;;public void setSecurityToken(ShiroSecurityToken securityToken) {     this.securityToken = securityToken. }
false;public;0;3;;public ShiroSecurityToken getSecurityToken() {     return securityToken. }
false;public;0;3;;public CipherService getCipherService() {     return cipherService. }
false;public;1;3;;public void setCipherService(CipherService cipherService) {     this.cipherService = cipherService. }
false;public;0;3;;public boolean isBase64() {     return base64. }
false;public;1;3;;public void setBase64(boolean base64) {     this.base64 = base64. }
