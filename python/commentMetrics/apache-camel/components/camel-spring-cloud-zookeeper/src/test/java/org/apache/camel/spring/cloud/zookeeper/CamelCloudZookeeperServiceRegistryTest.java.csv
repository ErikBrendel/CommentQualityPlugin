commented;modifiers;parameterAmount;loc;comment;code
false;public;0;50;;@Test public void testServiceRegistry() throws Exception {     final ZookeeperServer server = new ZookeeperServer(temporaryFolder.newFolder(testName.getMethodName())).     ConfigurableApplicationContext context = new SpringApplicationBuilder(TestConfiguration.class).web(WebApplicationType.NONE).run("--debug=false", "--spring.main.banner-mode=OFF", "--spring.application.name=" + UUID.randomUUID().toString(), "--ribbon.enabled=false", "--ribbon.eureka.enabled=false", "--management.endpoint.enabled=false", "--spring.cloud.zookeeper.enabled=true", "--spring.cloud.zookeeper.connect-string=" + server.connectString(), "--spring.cloud.zookeeper.config.enabled=false", "--spring.cloud.zookeeper.discovery.enabled=true", "--spring.cloud.service-registry.auto-registration.enabled=false", "--camel.cloud.service-registry.service-host=" + SERVICE_HOST).     try {         final ServiceDiscovery client = context.getBean(ServiceDiscovery.class).         final ServiceRegistry registry = context.getBean(ServiceRegistry.class).         registry.register(DefaultServiceDefinition.builder().withHost(SERVICE_HOST).withPort(SERVICE_PORT).withName(SERVICE_NAME).withId(SERVICE_ID).build()).         Collection<ServiceInstance<ZookeeperInstance>> services = client.queryForInstances(SERVICE_NAME).         assertThat(services).hasSize(1).         assertThat(services).first().hasFieldOrPropertyWithValue("address", SERVICE_HOST).         assertThat(services).first().hasFieldOrPropertyWithValue("port", SERVICE_PORT).         assertThat(services).first().extracting("payload").first().hasFieldOrPropertyWithValue("id", SERVICE_ID).         assertThat(services).first().extracting("payload").first().hasFieldOrPropertyWithValue("name", SERVICE_NAME).     } finally {         // shutdown spring context         context.close().         // shutdown zookeeper         server.shutdown().     } }
false;public;0;9;;@Override public void configure() throws Exception {     fromF("jetty:http://0.0.0.0:%d/service/endpoint", SERVICE_PORT).routeId(SERVICE_ID).routeGroup(SERVICE_NAME).routePolicy(new ServiceRegistrationRoutePolicy()).noAutoStartup().to("log:service-registry?level=INFO"). }
false;public;0;14;;@Bean public RouteBuilder routes() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             fromF("jetty:http://0.0.0.0:%d/service/endpoint", SERVICE_PORT).routeId(SERVICE_ID).routeGroup(SERVICE_NAME).routePolicy(new ServiceRegistrationRoutePolicy()).noAutoStartup().to("log:service-registry?level=INFO").         }     }. }
