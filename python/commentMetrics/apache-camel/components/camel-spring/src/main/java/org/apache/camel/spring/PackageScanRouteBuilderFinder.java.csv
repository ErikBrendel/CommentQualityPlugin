commented;modifiers;parameterAmount;loc;comment;code
true;public;1;27;/**  * Appends all the {@link org.apache.camel.builder.RouteBuilder} instances that can be found on the classpath  */ ;/**  * Appends all the {@link org.apache.camel.builder.RouteBuilder} instances that can be found on the classpath  */ public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {     Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages).     for (Class<?> aClass : classes) {         LOG.trace("Found RouteBuilder class: {}", aClass).         // certain beans should be ignored         if (shouldIgnoreBean(aClass)) {             LOG.debug("Ignoring RouteBuilder class: {}", aClass).             continue.         }         if (!isValidClass(aClass)) {             LOG.debug("Ignoring invalid RouteBuilder class: {}", aClass).             continue.         }         // type is valid so create and instantiate the builder         @SuppressWarnings("unchecked")         RoutesBuilder builder = instantiateBuilder((Class<? extends RoutesBuilder>) aClass).         if (beanPostProcessor != null) {             // Inject the annotated resource             beanPostProcessor.postProcessBeforeInitialization(builder, builder.toString()).         }         LOG.debug("Adding instantiated RouteBuilder: {}", builder).         list.add(builder).     } }
true;protected;1;7;/**  * Lets ignore beans that are explicitly configured in the Spring XML files  */ ;/**  * Lets ignore beans that are explicitly configured in the Spring XML files  */ protected boolean shouldIgnoreBean(Class<?> type) {     Map<String, ?> beans = applicationContext.getBeansOfType(type, true, true).     if (beans == null || beans.isEmpty()) {         return false.     }     return true. }
true;protected;1;11;/**  * Returns <tt>true</tt>if the class is a public, non-abstract class  */ ;/**  * Returns <tt>true</tt>if the class is a public, non-abstract class  */ protected boolean isValidClass(Class<?> type) {     // should skip non public classes     if (!Modifier.isPublic(type.getModifiers())) {         return false.     }     if (!Modifier.isAbstract(type.getModifiers()) && !type.isInterface()) {         return true.     }     return false. }
false;protected;1;3;;protected RoutesBuilder instantiateBuilder(Class<? extends RoutesBuilder> type) throws IllegalAccessException, InstantiationException {     return camelContext.getInjector().newInstance(type). }
