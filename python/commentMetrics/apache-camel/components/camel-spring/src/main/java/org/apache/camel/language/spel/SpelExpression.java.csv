commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static SpelExpression spel(String expression) {     return new SpelExpression(expression, Object.class). }
false;public;2;11;;public <T> T evaluate(Exchange exchange, Class<T> tClass) {     try {         Expression expression = parseExpression().         EvaluationContext evaluationContext = createEvaluationContext(exchange).         Object value = expression.getValue(evaluationContext).         // Let Camel handle the type conversion         return exchange.getContext().getTypeConverter().convertTo(tClass, value).     } catch (Exception e) {         throw new ExpressionEvaluationException(this, exchange, e).     } }
false;private;1;13;;private EvaluationContext createEvaluationContext(Exchange exchange) {     StandardEvaluationContext evaluationContext = new StandardEvaluationContext(new RootObject(exchange)).     if (beanResolver != null) {         evaluationContext.setBeanResolver(beanResolver).     } else if (exchange.getContext() instanceof SpringCamelContext) {         // Support references (like @foo) in expressions to beans defined in the Registry/ApplicationContext         ApplicationContext applicationContext = ((SpringCamelContext) exchange.getContext()).getApplicationContext().         evaluationContext.setBeanResolver(new BeanFactoryResolver(applicationContext)).     } else {         evaluationContext.setBeanResolver(new RegistryBeanResolver(exchange.getContext().getRegistry())).     }     return evaluationContext. }
false;private;0;6;;private Expression parseExpression() {     // Support template parsing with #{ } delimiters     ParserContext parserContext = new TemplateParserContext().     Expression expression = expressionParser.parseExpression(expressionString, parserContext).     return expression. }
false;public;0;3;;public Class<?> getType() {     return type. }
false;protected;1;3;;protected String assertionFailureMessage(Exchange exchange) {     return expressionString. }
false;public;0;4;;@Override public String toString() {     return "SpelExpression[" + expressionString + "]". }
