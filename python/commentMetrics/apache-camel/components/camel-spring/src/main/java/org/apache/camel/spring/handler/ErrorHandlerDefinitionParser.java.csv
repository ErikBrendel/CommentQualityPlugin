commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;protected Class<?> getBeanClass(Element element) {     ErrorHandlerType type = ErrorHandlerType.DefaultErrorHandler.     if (ObjectHelper.isNotEmpty(element.getAttribute("type"))) {         type = ErrorHandlerType.valueOf(element.getAttribute("type")).     }     return type.getTypeAsClass(). }
false;protected;1;18;;protected boolean isEligibleAttribute(String attributeName) {     if (attributeName == null || ID_ATTRIBUTE.equals(attributeName)) {         return false.     }     if (attributeName.equals("xmlns") || attributeName.startsWith("xmlns:")) {         return false.     }     // CHECKSTYLE:OFF     return !attributeName.equals("type") && !attributeName.equals("onRedeliveryRef") && !attributeName.equals("onRetryWhileRef") && !attributeName.equals("onPrepareFailureRef") && !attributeName.equals("onExceptionOccurredRef") && !attributeName.equals("redeliveryPolicyRef") && !attributeName.equals("transactionTemplateRef") && !attributeName.equals("transactionManagerRef"). // CHECKSTYLE:ON }
false;protected;3;107;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     super.doParse(element, parserContext, builder).     String id = element.getAttribute("id").     ErrorHandlerType type = ErrorHandlerType.DefaultErrorHandler.     if (ObjectHelper.isNotEmpty(element.getAttribute("type"))) {         type = ErrorHandlerType.valueOf(element.getAttribute("type")).     }     if (type.equals(ErrorHandlerType.DefaultErrorHandler) || type.equals(ErrorHandlerType.DeadLetterChannel) || type.equals(ErrorHandlerType.TransactionErrorHandler)) {         NodeList list = element.getChildNodes().         int size = list.getLength().         for (int i = 0. i < size. i++) {             Node child = list.item(i).             if (child instanceof Element) {                 Element childElement = (Element) child.                 String localName = child.getLocalName().                 // set the redeliveryPolicy                 if (localName.equals("redeliveryPolicy")) {                     // cannot have redeliveryPolicyRef attribute as well, only one is allowed                     if (ObjectHelper.isNotEmpty(element.getAttribute("redeliveryPolicyRef"))) {                         throw new IllegalArgumentException("Cannot set both redeliveryPolicyRef and redeliveryPolicy," + " only one allowed, in error handler with id: " + id).                     }                     BeanDefinition redeliveryPolicyDefinition = redeliveryPolicyParser.parse(childElement, parserContext).                     builder.addPropertyValue(localName, redeliveryPolicyDefinition).                 }             }         }         parserRefAttribute(element, "onRedeliveryRef", "onRedelivery", builder).         parserRefAttribute(element, "onRetryWhileRef", "onRetryWhile", builder).         parserRefAttribute(element, "onPrepareFailureRef", "onPrepareFailure", builder).         parserRefAttribute(element, "onExceptionOccurredRef", "onExceptionOccurred", builder).         parserRefAttribute(element, "redeliveryPolicyRef", "redeliveryPolicy", builder).         if (type.equals(ErrorHandlerType.TransactionErrorHandler)) {             parserRefAttribute(element, "transactionTemplateRef", "transactionTemplate", builder).             parserRefAttribute(element, "transactionManagerRef", "transactionManager", builder).         }     }     // validate attributes according to type     String deadLetterUri = element.getAttribute("deadLetterUri").     if (ObjectHelper.isNotEmpty(deadLetterUri) && !type.equals(ErrorHandlerType.DeadLetterChannel)) {         throw new IllegalArgumentException("Attribute deadLetterUri can only be used if type is " + ErrorHandlerType.DeadLetterChannel.name() + ", in error handler with id: " + id).     }     String deadLetterHandleNewException = element.getAttribute("deadLetterHandleNewException").     if (ObjectHelper.isNotEmpty(deadLetterHandleNewException) && !type.equals(ErrorHandlerType.DeadLetterChannel)) {         throw new IllegalArgumentException("Attribute deadLetterHandleNewException can only be used if type is " + ErrorHandlerType.DeadLetterChannel.name() + ", in error handler with id: " + id).     }     String transactionTemplateRef = element.getAttribute("transactionTemplateRef").     if (ObjectHelper.isNotEmpty(transactionTemplateRef) && !type.equals(ErrorHandlerType.TransactionErrorHandler)) {         throw new IllegalArgumentException("Attribute transactionTemplateRef can only be used if type is " + ErrorHandlerType.TransactionErrorHandler.name() + ", in error handler with id: " + id).     }     String transactionManagerRef = element.getAttribute("transactionManagerRef").     if (ObjectHelper.isNotEmpty(transactionManagerRef) && !type.equals(ErrorHandlerType.TransactionErrorHandler)) {         throw new IllegalArgumentException("Attribute transactionManagerRef can only be used if type is " + ErrorHandlerType.TransactionErrorHandler.name() + ", in error handler with id: " + id).     }     String rollbackLoggingLevel = element.getAttribute("rollbackLoggingLevel").     if (ObjectHelper.isNotEmpty(rollbackLoggingLevel) && (!type.equals(ErrorHandlerType.TransactionErrorHandler))) {         throw new IllegalArgumentException("Attribute rollbackLoggingLevel can only be used if type is " + ErrorHandlerType.TransactionErrorHandler.name() + ", in error handler with id: " + id).     }     String useOriginalMessage = element.getAttribute("useOriginalMessage").     if (ObjectHelper.isNotEmpty(useOriginalMessage) && type.equals(ErrorHandlerType.NoErrorHandler)) {         throw new IllegalArgumentException("Attribute useOriginalMessage is not supported by error handler type: " + type.name() + ", in error handler with id: " + id).     }     String onRedeliveryRef = element.getAttribute("onRedeliveryRef").     if (ObjectHelper.isNotEmpty(onRedeliveryRef) && type.equals(ErrorHandlerType.NoErrorHandler)) {         throw new IllegalArgumentException("Attribute onRedeliveryRef is not supported by error handler type: " + type.name() + ", in error handler with id: " + id).     }     String onExceptionOccurredRef = element.getAttribute("onExceptionOccurredRef").     if (ObjectHelper.isNotEmpty(onExceptionOccurredRef) && type.equals(ErrorHandlerType.NoErrorHandler)) {         throw new IllegalArgumentException("Attribute onExceptionOccurredRef is not supported by error handler type: " + type.name() + ", in error handler with id: " + id).     }     String onPrepareFailureRef = element.getAttribute("onPrepareFailureRef").     if (ObjectHelper.isNotEmpty(onPrepareFailureRef) && (type.equals(ErrorHandlerType.TransactionErrorHandler) || type.equals(ErrorHandlerType.NoErrorHandler))) {         throw new IllegalArgumentException("Attribute onPrepareFailureRef is not supported by error handler type: " + type.name() + ", in error handler with id: " + id).     }     String retryWhileRef = element.getAttribute("retryWhileRef").     if (ObjectHelper.isNotEmpty(retryWhileRef) && type.equals(ErrorHandlerType.NoErrorHandler)) {         throw new IllegalArgumentException("Attribute retryWhileRef is not supported by error handler type: " + type.name() + ", in error handler with id: " + id).     }     String redeliveryPolicyRef = element.getAttribute("redeliveryPolicyRef").     if (ObjectHelper.isNotEmpty(redeliveryPolicyRef) && type.equals(ErrorHandlerType.NoErrorHandler)) {         throw new IllegalArgumentException("Attribute redeliveryPolicyRef is not supported by error handler type: " + type.name() + ", in error handler with id: " + id).     }     String executorServiceRef = element.getAttribute("executorServiceRef").     if (ObjectHelper.isNotEmpty(executorServiceRef) && type.equals(ErrorHandlerType.NoErrorHandler)) {         throw new IllegalArgumentException("Attribute executorServiceRef is not supported by error handler type: " + type.name() + ", in error handler with id: " + id).     } }
false;private;4;12;;private void parserRefAttribute(Element element, String attributeName, String propertyName, BeanDefinitionBuilder builder) {     NamedNodeMap attributes = element.getAttributes().     for (int x = 0. x < attributes.getLength(). x++) {         Attr attribute = (Attr) attributes.item(x).         String name = attribute.getLocalName().         if (name.equals(attributeName)) {             Assert.state(StringUtils.hasText(propertyName), "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.").             builder.addPropertyReference(propertyName, attribute.getValue()).         }     } }
false;protected;0;3;;protected boolean shouldGenerateId() {     return true. }
