commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getUri() {     return uri. }
false;public;1;3;;public void setUri(String uri) {     this.uri = uri. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;1;3;;public void setCamelContextId(String camelContextId) {     this.camelContextId = camelContextId. }
false;public;0;3;;public String getServiceRef() {     return serviceRef. }
false;public;1;3;;public void setServiceRef(String serviceRef) {     this.serviceRef = serviceRef. }
false;public;0;3;;public ApplicationContext getApplicationContext() {     return applicationContext. }
false;public;1;3;;public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
false;public;0;26;;public void afterPropertiesSet() throws Exception {     // lets bind the URI to a pojo     notNull(uri, "uri").     // Always resolve the camel context by using the camelContextID     if (ObjectHelper.isNotEmpty(camelContextId)) {         camelContext = CamelContextResolverHelper.getCamelContextWithId(applicationContext, camelContextId).     }     notNull(camelContext, "camelContext").     if (serviceRef != null && getService() == null && applicationContext != null) {         setService(applicationContext.getBean(serviceRef)).     }     Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(camelContext, uri).     notNull(getService(), "service").     Object proxy = getProxyForService().     try {         // need to start endpoint before we create consumer         ServiceHelper.startService(endpoint).         consumer = endpoint.createConsumer(new BeanProcessor(proxy, camelContext)).         // add and start consumer         camelContext.addService(consumer, true, true).     } catch (Exception e) {         throw new FailedToCreateConsumerException(endpoint, e).     } }
false;public;0;3;;public void destroy() throws Exception { // we let CamelContext manage the lifecycle of the consumer and shut it down when Camel stops }
