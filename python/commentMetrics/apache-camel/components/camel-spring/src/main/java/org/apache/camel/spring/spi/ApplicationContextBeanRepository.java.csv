commented;modifiers;parameterAmount;loc;comment;code
false;public;2;24;;@Override public <T> T lookupByNameAndType(String name, Class<T> type) {     Object answer.     try {         answer = applicationContext.getBean(name, type).     } catch (NoSuchBeanDefinitionException e) {         return null.     } catch (BeanNotOfRequiredTypeException e) {         return null.     }     // just to be safe     if (answer == null) {         return null.     }     try {         return type.cast(answer).     } catch (Throwable e) {         String msg = "Found bean: " + name + " in ApplicationContext: " + applicationContext + " of type: " + answer.getClass().getName() + " expected type was: " + type.         throw new NoSuchBeanException(name, msg, e).     } }
false;public;1;8;;@Override public Object lookupByName(String name) {     try {         return applicationContext.getBean(name).     } catch (NoSuchBeanDefinitionException e) {         return null.     } }
false;public;1;5;;@Override public <T> Set<T> findByType(Class<T> type) {     Map<String, T> map = findByTypeWithName(type).     return new HashSet<>(map.values()). }
false;public;1;4;;@Override public <T> Map<String, T> findByTypeWithName(Class<T> type) {     return BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, type). }
