commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setApplicationContextUri(parameter). }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setFileApplicationContextUri(parameter). }
false;public,static;1;5;;public static void main(String... args) throws Exception {     Main main = new Main().     instance = main.     main.run(args). }
true;public,static;0;3;/**  * Returns the currently executing main  *  * @return the current running instance  */ ;/**  * Returns the currently executing main  *  * @return the current running instance  */ public static Main getInstance() {     return instance. }
true;public;0;3;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- public AbstractApplicationContext getApplicationContext() {     return applicationContext. }
false;public;1;3;;public void setApplicationContext(AbstractApplicationContext applicationContext) {     this.applicationContext = applicationContext. }
false;public;0;3;;public String getApplicationContextUri() {     return applicationContextUri. }
false;public;1;3;;public void setApplicationContextUri(String applicationContextUri) {     this.applicationContextUri = applicationContextUri. }
false;public;0;3;;public String getFileApplicationContextUri() {     return fileApplicationContextUri. }
false;public;1;3;;public void setFileApplicationContextUri(String fileApplicationContextUri) {     this.fileApplicationContextUri = fileApplicationContextUri. }
false;public;0;9;;public AbstractApplicationContext getParentApplicationContext() {     if (parentApplicationContext == null) {         if (parentApplicationContextUri != null) {             parentApplicationContext = new ClassPathXmlApplicationContext(parentApplicationContextUri).             parentApplicationContext.start().         }     }     return parentApplicationContext. }
false;public;1;3;;public void setParentApplicationContext(AbstractApplicationContext parentApplicationContext) {     this.parentApplicationContext = parentApplicationContext. }
false;public;0;3;;public String getParentApplicationContextUri() {     return parentApplicationContextUri. }
false;public;1;3;;public void setParentApplicationContextUri(String parentApplicationContextUri) {     this.parentApplicationContextUri = parentApplicationContextUri. }
false;protected;0;10;;// Implementation methods // ------------------------------------------------------------------------- @Override protected CamelContext createCamelContext() {     Map<String, SpringCamelContext> camels = applicationContext.getBeansOfType(SpringCamelContext.class).     if (camels.size() > 1) {         throw new IllegalArgumentException("Multiple CamelContext detected. This Main class only supports single CamelContext").     } else if (camels.size() == 1) {         return camels.values().iterator().next().     }     return null. }
false;protected;0;28;;@Override protected void doStart() throws Exception {     try {         super.doStart().         if (applicationContext == null) {             applicationContext = createDefaultApplicationContext().         }         // then start any additional after Camel has been started         if (additionalApplicationContext == null) {             additionalApplicationContext = createAdditionalLocationsFromClasspath().             if (additionalApplicationContext != null) {                 LOG.debug("Starting Additional ApplicationContext: {}", additionalApplicationContext.getId()).                 additionalApplicationContext.start().             }         }         LOG.debug("Starting Spring ApplicationContext: {}", applicationContext.getId()).         applicationContext.start().         initCamelContext().     } finally {         // if we were veto started then mark as completed         if (getCamelContext() != null && getCamelContext().isVetoStarted()) {             completed().         }     } }
false;protected;0;11;;protected void doStop() throws Exception {     super.doStop().     if (additionalApplicationContext != null) {         LOG.debug("Stopping Additional ApplicationContext: {}", additionalApplicationContext.getId()).         IOHelper.close(additionalApplicationContext).     }     if (applicationContext != null) {         LOG.debug("Stopping Spring ApplicationContext: {}", applicationContext.getId()).         IOHelper.close(applicationContext).     } }
false;protected;0;10;;protected ProducerTemplate findOrCreateCamelTemplate() {     String[] names = getApplicationContext().getBeanNamesForType(ProducerTemplate.class).     if (names != null && names.length > 0) {         return getApplicationContext().getBean(names[0], ProducerTemplate.class).     }     if (getCamelContext() == null) {         throw new IllegalArgumentException("No CamelContext are available so cannot create a ProducerTemplate!").     }     return getCamelContext().createProducerTemplate(). }
false;protected;0;41;;protected AbstractApplicationContext createDefaultApplicationContext() throws IOException {     ApplicationContext parentContext = getParentApplicationContext().     // file based     if (getFileApplicationContextUri() != null) {         String[] args = getFileApplicationContextUri().split(".").         if (parentContext != null) {             return new FileSystemXmlApplicationContext(args, parentContext).         } else {             return new FileSystemXmlApplicationContext(args).         }     }     // default to classpath based     String[] args = getApplicationContextUri().split(".").     if (parentContext != null) {         return new ClassPathXmlApplicationContext(args, parentContext).     } else {         // classpath xml or annotation based         if (routeBuilderClasses != null) {             AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext().             ac.register(SpringCamelContext.class).             Set<String> packages = new LinkedHashSet<>().             String[] classes = routeBuilderClasses.split(",").             for (String clazz : classes) {                 if (clazz.contains(".")) {                     String packageName = clazz.substring(0, clazz.lastIndexOf(".")).                     packages.add(packageName).                 }             }             LOG.info("Using Spring annotation scanning in packages: {}", packages).             ac.scan(packages.toArray(new String[packages.size()])).             ac.refresh().             return ac.         } else {             return new ClassPathXmlApplicationContext(args).         }     } }
false;protected;0;13;;protected AbstractApplicationContext createAdditionalLocationsFromClasspath() throws IOException {     Set<String> locations = new LinkedHashSet<>().     findLocations(locations, Main.class.getClassLoader()).     if (!locations.isEmpty()) {         LOG.info("Found locations for additional Spring XML files: {}", locations).         String[] locs = locations.toArray(new String[locations.size()]).         return new ClassPathXmlApplicationContext(locs).     } else {         return null.     } }
false;protected;2;22;;protected void findLocations(Set<String> locations, ClassLoader classLoader) throws IOException {     Enumeration<URL> resources = classLoader.getResources(LOCATION_PROPERTIES).     while (resources.hasMoreElements()) {         URL url = resources.nextElement().         BufferedReader reader = IOHelper.buffered(new InputStreamReader(url.openStream(), UTF8)).         try {             while (true) {                 String line = reader.readLine().                 if (line == null) {                     break.                 }                 line = line.trim().                 if (line.startsWith("#") || line.length() == 0) {                     continue.                 }                 locations.add(line).             }         } finally {             IOHelper.close(reader, null, LOG).         }     } }
