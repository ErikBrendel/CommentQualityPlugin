commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
false;public;0;3;;public ApplicationContext getApplicationContext() {     return applicationContext. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     ApplicationEvent event = toApplicationEvent(exchange).     applicationContext.publishEvent(event). }
false;public;0;9;;public Producer createProducer() throws Exception {     ObjectHelper.notNull(applicationContext, "applicationContext").     return new DefaultProducer(this) {          public void process(Exchange exchange) throws Exception {             ApplicationEvent event = toApplicationEvent(exchange).             applicationContext.publishEvent(event).         }     }. }
false;public;1;6;;public EventConsumer createConsumer(Processor processor) throws Exception {     ObjectHelper.notNull(applicationContext, "applicationContext").     EventConsumer answer = new EventConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;1;9;;public void onApplicationEvent(ApplicationEvent event) {     Exchange exchange = createExchange().     exchange.getIn().setBody(event).     try {         getLoadBalancer().process(exchange).     } catch (Exception e) {         throw wrapRuntimeCamelException(e).     } }
false;public;0;6;;public LoadBalancer getLoadBalancer() {     if (loadBalancer == null) {         loadBalancer = createLoadBalancer().     }     return loadBalancer. }
false;public;1;3;;public void setLoadBalancer(LoadBalancer loadBalancer) {     this.loadBalancer = loadBalancer. }
false;public;0;4;;@Override public EventComponent getComponent() {     return (EventComponent) super.getComponent(). }
true;public,synchronized;1;4;// ------------------------------------------------------------------------- ;// Implementation methods // ------------------------------------------------------------------------- public synchronized void consumerStarted(EventConsumer consumer) {     getComponent().consumerStarted(this).     getLoadBalancer().addProcessor(consumer.getAsyncProcessor()). }
false;public,synchronized;1;4;;public synchronized void consumerStopped(EventConsumer consumer) {     getComponent().consumerStopped(this).     getLoadBalancer().removeProcessor(consumer.getAsyncProcessor()). }
false;protected;0;3;;protected LoadBalancer createLoadBalancer() {     return new TopicLoadBalancer(). }
false;protected;1;7;;protected ApplicationEvent toApplicationEvent(Exchange exchange) {     ApplicationEvent event = exchange.getIn().getBody(ApplicationEvent.class).     if (event != null) {         return event.     }     return new CamelEvent(this, exchange). }
