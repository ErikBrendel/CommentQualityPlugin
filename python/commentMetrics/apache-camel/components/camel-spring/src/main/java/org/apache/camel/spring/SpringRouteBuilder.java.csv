# id;timestamp;commentText;codeText;commentWords;codeWords
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1237960948;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1238866818;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1238903231;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1239689417;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1239960779;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1242478650;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1245078234;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1253170425;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1272420623;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1275365481;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1287646849;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1297968761;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1323680223;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1415211488;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template);1540108161;Creates a transaction error handler.__@param template the spring transaction template_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(template)__        return answer__    };creates,a,transaction,error,handler,param,template,the,spring,transaction,template,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,transaction,template,template,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,template,return,answer
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1235562682;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1236311097;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1237804563;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1237960948;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1238866818;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1238903231;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1239689417;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type);1239960779;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T lookup(Class<T> type);1323680223;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return context.getBean(names[0], type)__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,context,get,bean,names,0,type,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T lookup(Class<T> type);1415211488;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return context.getBean(type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,class,t,type,application,context,context,get,application,context,return,context,get,bean,type
SpringRouteBuilder -> public <T> T lookup(Class<T> type);1540108161;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return context.getBean(type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,class,t,type,application,context,context,get,application,context,return,context,get,bean,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(String beanName, Class<T> type);1242478650;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(String beanName, Class<T> type);1245078234;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(String beanName, Class<T> type);1253170425;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(String beanName, Class<T> type);1275365481;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T lookup(String beanName, Class<T> type);1272420623;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T lookup(String beanName, Class<T> type);1287646849;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T lookup(String beanName, Class<T> type);1297968761;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T lookup(String beanName, Class<T> type);1323680223;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T lookup(String beanName, Class<T> type);1415211488;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T lookup(String beanName, Class<T> type);1540108161;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param beanName the name of the bean in the application context_@param type the type of the bean_@return the bean;public <T> T lookup(String beanName, Class<T> type) {_        ApplicationContext context = getApplicationContext()__        return context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,bean,name,the,name,of,the,bean,in,the,application,context,param,type,the,type,of,the,bean,return,the,bean;public,t,t,lookup,string,bean,name,class,t,type,application,context,context,get,application,context,return,context,get,bean,bean,name,type
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1239689417;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1239960779;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1242478650;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1245078234;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1253170425;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1272420623;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1275365481;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1287646849;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1297968761;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1323680223;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1415211488;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager);1540108161;Creates a transaction error handler.__@param transactionManager the spring transaction manager_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {_        TransactionTemplate template = new TransactionTemplate(transactionManager)__        return transactionErrorHandler(template)__    };creates,a,transaction,error,handler,param,transaction,manager,the,spring,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,platform,transaction,manager,transaction,manager,transaction,template,template,new,transaction,template,transaction,manager,return,transaction,error,handler,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1215203209;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(policy.getTemplate())__        return answer__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,policy,get,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1215396115;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(policy.getTemplate())__        return answer__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,policy,get,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1235562682;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(policy.getTemplate())__        return answer__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,policy,get,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1236311097;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(policy.getTemplate())__        return answer__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,policy,get,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1237804563;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder()__        answer.setTransactionTemplate(policy.getTransactionTemplate())__        return answer__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,transaction,error,handler,builder,answer,new,transaction,error,handler,builder,answer,set,transaction,template,policy,get,transaction,template,return,answer
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1237960948;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1238866818;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1238903231;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1239689417;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1239960779;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1242478650;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1245078234;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1253170425;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1272420623;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1275365481;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1287646849;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1297968761;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1323680223;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1415211488;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy);1540108161;Creates a transaction error handler.__@param policy   using this transaction policy (eg: required, supports, ...)_@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {_        return transactionErrorHandler(policy.getTransactionTemplate())__    };creates,a,transaction,error,handler,param,policy,using,this,transaction,policy,eg,required,supports,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,spring,transaction,policy,policy,return,transaction,error,handler,policy,get,transaction,template
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1179416274;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1183375392;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1185553610;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1186522380;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1203830000;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1206897402;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1215203209;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1215396115;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1235562682;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {_        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1236311097;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1237804563;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1237960948;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1238866818;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1238903231;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1239689417;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1239960779;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1242478650;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1245078234;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1253170425;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1272420623;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1275365481;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1287646849;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1297968761;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1323680223;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1415211488;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public void setApplicationContext(ApplicationContext applicationContext);1540108161;Sets the application context to use to lookup beans;public void setApplicationContext(ApplicationContext applicationContext) {        _        this.applicationContext = applicationContext__    };sets,the,application,context,to,use,to,lookup,beans;public,void,set,application,context,application,context,application,context,this,application,context,application,context
SpringRouteBuilder -> public <T> T bean(Class<T> type);1179416274;Looks up the bean with the given type in the application context and returns it, or throws an exception if the_bean is not present or there are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T) context.getBean(names[0])__            }_            else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type);1183375392;Looks up the bean with the given type in the application context and returns it, or throws an exception if the_bean is not present or there are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T) context.getBean(names[0])__            }_            else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type);1185553610;Looks up the bean with the given type in the application context and returns it, or throws an exception if the_bean is not present or there are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T) context.getBean(names[0])__            }_            else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type);1186522380;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type);1203830000;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type);1206897402;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type);1215203209;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type);1215396115;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;public <T> T bean(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;public,t,t,bean,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1179416274;Looks up the bean with the given name in the application context and returns it, or throws an exception if the_bean is not present or is not of the given type__@param type     the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T) context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1183375392;Looks up the bean with the given name in the application context and returns it, or throws an exception if the_bean is not present or is not of the given type__@param type     the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T) context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1185553610;Looks up the bean with the given name in the application context and returns it, or throws an exception if the_bean is not present or is not of the given type__@param type     the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T) context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1186522380;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1203830000;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1206897402;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1215203209;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public <T> T bean(Class<T> type, String beanName);1215396115;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1245078234;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1253170425;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1272420623;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1275365481;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1287646849;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1297968761;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1323680223;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1415211488;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> public TransactionErrorHandlerBuilder transactionErrorHandler();1540108161;Creates a transaction error handler that will lookup in application context for_an exiting transaction manager.__@return the created error handler;public TransactionErrorHandlerBuilder transactionErrorHandler() {_        return new TransactionErrorHandlerBuilder()__    };creates,a,transaction,error,handler,that,will,lookup,in,application,context,for,an,exiting,transaction,manager,return,the,created,error,handler;public,transaction,error,handler,builder,transaction,error,handler,return,new,transaction,error,handler,builder
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type, String beanName);1235562682;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type, String beanName);1236311097;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type, String beanName);1237804563;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type, String beanName);1237960948;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type, String beanName);1238866818;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type, String beanName);1238903231;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T bean(Class<T> type, String beanName);1239689417;Looks up the bean with the given name in the application context and_returns it, or throws an exception if the bean is not present or is not_of the given type__@param type the type of the bean_@param beanName the name of the bean in the application context_@return the bean;@SuppressWarnings("unchecked")_    public <T> T bean(Class<T> type, String beanName) {_        ApplicationContext context = getApplicationContext()__        return (T)context.getBean(beanName, type)__    };looks,up,the,bean,with,the,given,name,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,is,not,of,the,given,type,param,type,the,type,of,the,bean,param,bean,name,the,name,of,the,bean,in,the,application,context,return,the,bean;suppress,warnings,unchecked,public,t,t,bean,class,t,type,string,bean,name,application,context,context,get,application,context,return,t,context,get,bean,bean,name,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(Class<T> type);1242478650;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(Class<T> type);1245078234;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(Class<T> type);1253170425;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(Class<T> type);1272420623;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(Class<T> type);1275365481;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(Class<T> type);1287646849;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> @SuppressWarnings("unchecked")     public <T> T lookup(Class<T> type);1297968761;Looks up the bean with the given type in the application context and_returns it, or throws an exception if the bean is not present or there_are multiple possible beans to choose from for the given type__@param type the type of the bean_@return the bean;@SuppressWarnings("unchecked")_    public <T> T lookup(Class<T> type) {_        ApplicationContext context = getApplicationContext()__        String[] names = context.getBeanNamesForType(type, true, true)__        if (names != null) {_            int count = names.length__            if (count == 1) {_                _                return (T)context.getBean(names[0])__            } else if (count > 1) {_                throw new IllegalArgumentException("Too many beans in the application context of type: " + type + ". Found: " + count)__            }_        }_        throw new IllegalArgumentException("No bean available in the application context of type: " + type)__    };looks,up,the,bean,with,the,given,type,in,the,application,context,and,returns,it,or,throws,an,exception,if,the,bean,is,not,present,or,there,are,multiple,possible,beans,to,choose,from,for,the,given,type,param,type,the,type,of,the,bean,return,the,bean;suppress,warnings,unchecked,public,t,t,lookup,class,t,type,application,context,context,get,application,context,string,names,context,get,bean,names,for,type,type,true,true,if,names,null,int,count,names,length,if,count,1,return,t,context,get,bean,names,0,else,if,count,1,throw,new,illegal,argument,exception,too,many,beans,in,the,application,context,of,type,type,found,count,throw,new,illegal,argument,exception,no,bean,available,in,the,application,context,of,type,type
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1179416274;Returns the application context which has been configured via the {@link #setApplicationContext(ApplicationContext)}_method  or from the underlying {@link SpringCamelContext}__@return;public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext) camelContext__                return springCamelContext.getApplicationContext()__            }_            else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context,return;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1183375392;Returns the application context which has been configured via the {@link #setApplicationContext(ApplicationContext)}_method  or from the underlying {@link SpringCamelContext}__@return;public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext) camelContext__                return springCamelContext.getApplicationContext()__            }_            else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context,return;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1185553610;Returns the application context which has been configured via the {@link #setApplicationContext(ApplicationContext)}_method  or from the underlying {@link SpringCamelContext}__@return;public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext) camelContext__                return springCamelContext.getApplicationContext()__            }_            else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context,return;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1186522380;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext}__@return;public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context,return;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1203830000;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext}__@return;public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context,return;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1206897402;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1215203209;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1215396115;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1235562682;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1236311097;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1237804563;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1237960948;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1238866818;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1238903231;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1239689417;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1239960779;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1242478650;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1245078234;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1253170425;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1272420623;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1275365481;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1287646849;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1297968761;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1323680223;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1415211488;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
SpringRouteBuilder -> public ApplicationContext getApplicationContext();1540108161;Returns the application context which has been configured via the_{@link #setApplicationContext(ApplicationContext)} method or from the_underlying {@link SpringCamelContext};public ApplicationContext getApplicationContext() {_        if (applicationContext == null) {_            CamelContext camelContext = getContext()__            if (camelContext instanceof SpringCamelContext) {_                SpringCamelContext springCamelContext = (SpringCamelContext)camelContext__                return springCamelContext.getApplicationContext()__            } else {_                throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured")__            }_        }_        return applicationContext__    };returns,the,application,context,which,has,been,configured,via,the,link,set,application,context,application,context,method,or,from,the,underlying,link,spring,camel,context;public,application,context,get,application,context,if,application,context,null,camel,context,camel,context,get,context,if,camel,context,instanceof,spring,camel,context,spring,camel,context,spring,camel,context,spring,camel,context,camel,context,return,spring,camel,context,get,application,context,else,throw,new,illegal,argument,exception,this,spring,builder,is,not,being,used,with,a,spring,camel,context,and,there,is,no,application,context,property,configured,return,application,context
