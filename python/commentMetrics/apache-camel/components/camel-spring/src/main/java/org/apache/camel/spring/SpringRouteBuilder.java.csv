commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Looks up the bean with the given name in the application context and  * returns it, or throws an exception if the bean is not present or is not  * of the given type  *  * @param beanName the name of the bean in the application context  * @param type the type of the bean  * @return the bean  */ ;/**  * Looks up the bean with the given name in the application context and  * returns it, or throws an exception if the bean is not present or is not  * of the given type  *  * @param beanName the name of the bean in the application context  * @param type the type of the bean  * @return the bean  */ public <T> T lookup(String beanName, Class<T> type) {     ApplicationContext context = getApplicationContext().     return context.getBean(beanName, type). }
true;public;1;4;/**  * Looks up the bean with the given type in the application context and  * returns it, or throws an exception if the bean is not present or there  * are multiple possible beans to choose from for the given type  *  * @param type the type of the bean  * @return the bean  */ ;/**  * Looks up the bean with the given type in the application context and  * returns it, or throws an exception if the bean is not present or there  * are multiple possible beans to choose from for the given type  *  * @param type the type of the bean  * @return the bean  */ public <T> T lookup(Class<T> type) {     ApplicationContext context = getApplicationContext().     return context.getBean(type). }
true;public;0;12;/**  * Returns the application context which has been configured via the  * {@link #setApplicationContext(ApplicationContext)} method or from the  * underlying {@link SpringCamelContext}  */ ;/**  * Returns the application context which has been configured via the  * {@link #setApplicationContext(ApplicationContext)} method or from the  * underlying {@link SpringCamelContext}  */ public ApplicationContext getApplicationContext() {     if (applicationContext == null) {         CamelContext camelContext = getContext().         if (camelContext instanceof SpringCamelContext) {             SpringCamelContext springCamelContext = (SpringCamelContext) camelContext.             return springCamelContext.getApplicationContext().         } else {             throw new IllegalArgumentException("This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured").         }     }     return applicationContext. }
true;public;1;3;/**  * Sets the application context to use to lookup beans  */ ;/**  * Sets the application context to use to lookup beans  */ public void setApplicationContext(ApplicationContext applicationContext) {     this.applicationContext = applicationContext. }
true;public;0;3;/**  * Creates a transaction error handler that will lookup in application context for  * an exiting transaction manager.  *  * @return the created error handler  */ ;/**  * Creates a transaction error handler that will lookup in application context for  * an exiting transaction manager.  *  * @return the created error handler  */ public TransactionErrorHandlerBuilder transactionErrorHandler() {     return new TransactionErrorHandlerBuilder(). }
true;public;1;3;/**  * Creates a transaction error handler.  *  * @param policy   using this transaction policy (eg: required, supports, ...)  * @return the created error handler  */ ;/**  * Creates a transaction error handler.  *  * @param policy   using this transaction policy (eg: required, supports, ...)  * @return the created error handler  */ public TransactionErrorHandlerBuilder transactionErrorHandler(SpringTransactionPolicy policy) {     return transactionErrorHandler(policy.getTransactionTemplate()). }
true;public;1;5;/**  * Creates a transaction error handler.  *  * @param template the spring transaction template  * @return the created error handler  */ ;/**  * Creates a transaction error handler.  *  * @param template the spring transaction template  * @return the created error handler  */ public TransactionErrorHandlerBuilder transactionErrorHandler(TransactionTemplate template) {     TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder().     answer.setTransactionTemplate(template).     return answer. }
true;public;1;4;/**  * Creates a transaction error handler.  *  * @param transactionManager the spring transaction manager  * @return the created error handler  */ ;/**  * Creates a transaction error handler.  *  * @param transactionManager the spring transaction manager  * @return the created error handler  */ public TransactionErrorHandlerBuilder transactionErrorHandler(PlatformTransactionManager transactionManager) {     TransactionTemplate template = new TransactionTemplate(transactionManager).     return transactionErrorHandler(template). }
