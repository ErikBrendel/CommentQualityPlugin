# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1276783243;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1277815626;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1277888457;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1277891996;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1277900755;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1277921329;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1277963784;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> protected void delayBeforeRedelivery();1238866818;Sleeps before the transaction is set as rollback and the caused exception is rethrown to let the_Spring TransactionManager handle the rollback.;protected void delayBeforeRedelivery() {_        long delay = 0__        if (delayPolicy != null) {_            delay = delayPolicy.getDelay()__        }__        if (delay > 0) {_            try {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Sleeping for: " + delay + " millis until attempting redelivery")__                }_                Thread.sleep(delay)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };sleeps,before,the,transaction,is,set,as,rollback,and,the,caused,exception,is,rethrown,to,let,the,spring,transaction,manager,handle,the,rollback;protected,void,delay,before,redelivery,long,delay,0,if,delay,policy,null,delay,delay,policy,get,delay,if,delay,0,try,if,log,is,debug,enabled,log,debug,sleeping,for,delay,millis,until,attempting,redelivery,thread,sleep,delay,catch,interrupted,exception,e,thread,current,thread,interrupt
TransactionErrorHandler -> protected void delayBeforeRedelivery();1238903231;Sleeps before the transaction is set as rollback and the caused exception is rethrown to let the_Spring TransactionManager handle the rollback.;protected void delayBeforeRedelivery() {_        long delay = 0__        if (delayPolicy != null) {_            delay = delayPolicy.getDelay()__        }__        if (delay > 0) {_            try {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Sleeping for: " + delay + " millis until attempting redelivery")__                }_                Thread.sleep(delay)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };sleeps,before,the,transaction,is,set,as,rollback,and,the,caused,exception,is,rethrown,to,let,the,spring,transaction,manager,handle,the,rollback;protected,void,delay,before,redelivery,long,delay,0,if,delay,policy,null,delay,delay,policy,get,delay,if,delay,0,try,if,log,is,debug,enabled,log,debug,sleeping,for,delay,millis,until,attempting,redelivery,thread,sleep,delay,catch,interrupted,exception,e,thread,current,thread,interrupt
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1339846386;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorService)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1346242774;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorService)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1369038382;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorService)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1373129971;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorService)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1421597907;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile, executorService)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1425318952;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile, executorService)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1426064526;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile, executorService, null)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel);1429547115;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile, executorService, null)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef);1305651037;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef);1307685726;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef);1315218935;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef);1317390202;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef);1328014611;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef);1328016384;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef,             LoggingLevel rollbackLoggingLevel);1328092992;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef,             LoggingLevel rollbackLoggingLevel);1328174311;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef,             LoggingLevel rollbackLoggingLevel);1328265008;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorServiceRef      reference to a {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, String executorServiceRef,_            LoggingLevel rollbackLoggingLevel) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorServiceRef)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,ref,reference,to,a,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,string,executor,service,ref,logging,level,rollback,logging,level,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,retry,while,executor,service,ref,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e);1328092992;Logs the transaction rollback;private void logTransactionRollback(String redelivered, String ids, Throwable e) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e);1328174311;Logs the transaction rollback;private void logTransactionRollback(String redelivered, String ids, Throwable e) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,                                    TransactionTemplate transactionTemplate, Predicate retryWhile);1296495624;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_                                   TransactionTemplate transactionTemplate, Predicate retryWhile) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false, retryWhile)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,retry,while,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,                                    TransactionTemplate transactionTemplate, Predicate retryWhile);1296722296;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_                                   TransactionTemplate transactionTemplate, Predicate retryWhile) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false, retryWhile)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,retry,while,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,                                    TransactionTemplate transactionTemplate, Predicate retryWhile);1297968761;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_                                   TransactionTemplate transactionTemplate, Predicate retryWhile) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false, retryWhile)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,retry,while,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1454232671;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1511424277;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1511424716;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1536517284;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1540108161;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1540108163;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1540108164;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1542904331;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1544427660;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger,              Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,             TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,             LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor);1544427685;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while_@param executorService         the {@link java.util.concurrent.ScheduledExecutorService} to be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel    logging level to use for logging transaction rollback occurred_@param onExceptionOccurredProcessor  a custom {@link org.apache.camel.Processor} to process the {@link org.apache.camel.Exchange} just after an exception was thrown.;public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, _            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,_            LoggingLevel rollbackLoggingLevel, Processor onExceptionOccurredProcessor) {__        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, false, retryWhile,_                executorService, null, onExceptionOccurredProcessor)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred,param,on,exception,occurred,processor,a,custom,link,org,apache,camel,processor,to,process,the,link,org,apache,camel,exchange,just,after,an,exception,was,thrown;public,transaction,error,handler,camel,context,camel,context,processor,output,camel,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,processor,on,exception,occurred,processor,super,camel,context,output,logger,redelivery,processor,redelivery,policy,null,null,false,false,retry,while,executor,service,null,on,exception,occurred,processor,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,template
TransactionErrorHandler -> public Processor getOutput();1238866818;Returns the output processor;public Processor getOutput() {_        return output__    };returns,the,output,processor;public,processor,get,output,return,output
TransactionErrorHandler -> public Processor getOutput();1238903231;Returns the output processor;public Processor getOutput() {_        return output__    };returns,the,output,processor;public,processor,get,output,return,output
TransactionErrorHandler -> public Processor getOutput();1239264195;Returns the output processor;public Processor getOutput() {_        return output__    };returns,the,output,processor;public,processor,get,output,return,output
TransactionErrorHandler -> public Processor getOutput();1239805484;Returns the output processor;public Processor getOutput() {_        return output__    };returns,the,output,processor;public,processor,get,output,return,output
TransactionErrorHandler -> public Processor getOutput();1239960779;Returns the output processor;public Processor getOutput() {_        return output__    };returns,the,output,processor;public,processor,get,output,return,output
TransactionErrorHandler -> public Processor getOutput();1245046727;Returns the output processor;public Processor getOutput() {_        return output__    };returns,the,output,processor;public,processor,get,output,return,output
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,                                    TransactionTemplate transactionTemplate, Predicate retryWhile);1287471778;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_                                   TransactionTemplate transactionTemplate, Predicate retryWhile) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false, retryWhile)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,retry,while,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,                                    TransactionTemplate transactionTemplate, Predicate retryWhile);1290950601;Creates the transaction error handler.__@param camelContext            the camel context_@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template_@param retryWhile              retry while;public TransactionErrorHandler(CamelContext camelContext, Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,_                                   TransactionTemplate transactionTemplate, Predicate retryWhile) {_        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false, retryWhile)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template,param,retry,while,retry,while;public,transaction,error,handler,camel,context,camel,context,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,predicate,retry,while,super,camel,context,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,retry,while,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1328265008;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1339846386;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1346242774;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1369038382;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1373129971;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1421597907;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1425318952;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1426064526;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1429547115;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1454232671;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1511424277;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1511424716;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", new Object[]{transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", new Object[]{transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1536517284;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1540108161;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1540108163;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1540108164;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1542904331;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1544427660;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1544427685;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly", transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}", transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1328265008;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1339846386;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1346242774;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1369038382;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1373129971;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1421597907;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1425318952;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1426064526;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1429547115;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1454232671;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1511424277;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1511424716;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1536517284;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1540108161;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1540108163;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1540108164;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1542904331;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1544427660;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1544427685;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1328265008;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1339846386;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1346242774;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1369038382;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1373129971;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1421597907;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1425318952;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1426064526;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1429547115;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1454232671;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1511424277;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1511424716;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[]{transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1536517284;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1540108161;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1540108163;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1540108164;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1542904331;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1544427660;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1544427685;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> protected void handleException(Exchange exchange);1238866818;Handles when an exception occured during processing. Is used to let the exception policy_deal with it, eg letting an onException handle it.__@param exchange  the current exchange;protected void handleException(Exchange exchange) {_        Exception e = exchange.getException()__        _        exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e)___        _        OnExceptionDefinition exceptionPolicy = getExceptionPolicy(exchange, e)__        if (exceptionPolicy != null) {_            Predicate handledPredicate = exceptionPolicy.getHandledPolicy()___            Processor processor = exceptionPolicy.getErrorHandler()__            if (processor != null) {_                prepareExchangeBeforeOnException(exchange)__                deliverToFaultProcessor(exchange, processor)__                prepareExchangeAfterOnException(exchange, handledPredicate)__            }_        }_    };handles,when,an,exception,occured,during,processing,is,used,to,let,the,exception,policy,deal,with,it,eg,letting,an,on,exception,handle,it,param,exchange,the,current,exchange;protected,void,handle,exception,exchange,exchange,exception,e,exchange,get,exception,exchange,set,property,exchange,e,on,exception,definition,exception,policy,get,exception,policy,exchange,e,if,exception,policy,null,predicate,handled,predicate,exception,policy,get,handled,policy,processor,processor,exception,policy,get,error,handler,if,processor,null,prepare,exchange,before,on,exception,exchange,deliver,to,fault,processor,exchange,processor,prepare,exchange,after,on,exception,exchange,handled,predicate
TransactionErrorHandler -> protected void handleException(Exchange exchange);1238903231;Handles when an exception occured during processing. Is used to let the exception policy_deal with it, eg letting an onException handle it.__@param exchange  the current exchange;protected void handleException(Exchange exchange) {_        Exception e = exchange.getException()__        _        exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e)___        _        OnExceptionDefinition exceptionPolicy = getExceptionPolicy(exchange, e)__        if (exceptionPolicy != null) {_            Predicate handledPredicate = exceptionPolicy.getHandledPolicy()___            Processor processor = exceptionPolicy.getErrorHandler()__            if (processor != null) {_                prepareExchangeBeforeOnException(exchange)__                deliverToFaultProcessor(exchange, processor)__                prepareExchangeAfterOnException(exchange, handledPredicate)__            }_        }_    };handles,when,an,exception,occured,during,processing,is,used,to,let,the,exception,policy,deal,with,it,eg,letting,an,on,exception,handle,it,param,exchange,the,current,exchange;protected,void,handle,exception,exchange,exchange,exception,e,exchange,get,exception,exchange,set,property,exchange,e,on,exception,definition,exception,policy,get,exception,policy,exchange,e,if,exception,policy,null,predicate,handled,predicate,exception,policy,get,handled,policy,processor,processor,exception,policy,get,error,handler,if,processor,null,prepare,exchange,before,on,exception,exchange,deliver,to,fault,processor,exchange,processor,prepare,exchange,after,on,exception,exchange,handled,predicate
TransactionErrorHandler -> protected void handleException(Exchange exchange);1239264195;Handles when an exception occured during processing. Is used to let the exception policy_deal with it, eg letting an onException handle it.__@param exchange  the current exchange;protected void handleException(Exchange exchange) {_        Exception e = exchange.getException()__        _        exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e)___        _        OnExceptionDefinition exceptionPolicy = getExceptionPolicy(exchange, e)__        if (exceptionPolicy != null) {_            Predicate handledPredicate = exceptionPolicy.getHandledPolicy()___            Processor processor = exceptionPolicy.getErrorHandler()__            if (processor != null) {_                prepareExchangeBeforeOnException(exchange)__                deliverToFaultProcessor(exchange, processor)__                prepareExchangeAfterOnException(exchange, handledPredicate)__            }_        }_    };handles,when,an,exception,occured,during,processing,is,used,to,let,the,exception,policy,deal,with,it,eg,letting,an,on,exception,handle,it,param,exchange,the,current,exchange;protected,void,handle,exception,exchange,exchange,exception,e,exchange,get,exception,exchange,set,property,exchange,e,on,exception,definition,exception,policy,get,exception,policy,exchange,e,if,exception,policy,null,predicate,handled,predicate,exception,policy,get,handled,policy,processor,processor,exception,policy,get,error,handler,if,processor,null,prepare,exchange,before,on,exception,exchange,deliver,to,fault,processor,exchange,processor,prepare,exchange,after,on,exception,exchange,handled,predicate
TransactionErrorHandler -> protected void handleException(Exchange exchange);1239805484;Handles when an exception occured during processing. Is used to let the exception policy_deal with it, eg letting an onException handle it.__@param exchange  the current exchange;protected void handleException(Exchange exchange) {_        Exception e = exchange.getException()__        _        exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e)___        _        OnExceptionDefinition exceptionPolicy = getExceptionPolicy(exchange, e)__        if (exceptionPolicy != null) {_            Predicate handledPredicate = exceptionPolicy.getHandledPolicy()___            Processor processor = exceptionPolicy.getErrorHandler()__            if (processor != null) {_                prepareExchangeBeforeOnException(exchange)__                deliverToFaultProcessor(exchange, processor)__                prepareExchangeAfterOnException(exchange, handledPredicate)__            }_        }_    };handles,when,an,exception,occured,during,processing,is,used,to,let,the,exception,policy,deal,with,it,eg,letting,an,on,exception,handle,it,param,exchange,the,current,exchange;protected,void,handle,exception,exchange,exchange,exception,e,exchange,get,exception,exchange,set,property,exchange,e,on,exception,definition,exception,policy,get,exception,policy,exchange,e,if,exception,policy,null,predicate,handled,predicate,exception,policy,get,handled,policy,processor,processor,exception,policy,get,error,handler,if,processor,null,prepare,exchange,before,on,exception,exchange,deliver,to,fault,processor,exchange,processor,prepare,exchange,after,on,exception,exchange,handled,predicate
TransactionErrorHandler -> protected void handleException(Exchange exchange);1239960779;Handles when an exception occured during processing. Is used to let the exception policy_deal with it, eg letting an onException handle it.__@param exchange  the current exchange;protected void handleException(Exchange exchange) {_        Exception e = exchange.getException()__        _        exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e)___        _        OnExceptionDefinition exceptionPolicy = getExceptionPolicy(exchange, e)__        if (exceptionPolicy != null) {_            Predicate handledPredicate = exceptionPolicy.getHandledPolicy()___            Processor processor = exceptionPolicy.getErrorHandler()__            prepareExchangeBeforeOnException(exchange)__            if (processor != null) {_                deliverToFaultProcessor(exchange, processor)__            }_            prepareExchangeAfterOnException(exchange, handledPredicate)__        }_    };handles,when,an,exception,occured,during,processing,is,used,to,let,the,exception,policy,deal,with,it,eg,letting,an,on,exception,handle,it,param,exchange,the,current,exchange;protected,void,handle,exception,exchange,exchange,exception,e,exchange,get,exception,exchange,set,property,exchange,e,on,exception,definition,exception,policy,get,exception,policy,exchange,e,if,exception,policy,null,predicate,handled,predicate,exception,policy,get,handled,policy,processor,processor,exception,policy,get,error,handler,prepare,exchange,before,on,exception,exchange,if,processor,null,deliver,to,fault,processor,exchange,processor,prepare,exchange,after,on,exception,exchange,handled,predicate
TransactionErrorHandler -> protected void handleException(Exchange exchange);1245046727;Handles when an exception occured during processing. Is used to let the exception policy_deal with it, eg letting an onException handle it.__@param exchange  the current exchange;protected void handleException(Exchange exchange) {_        Exception e = exchange.getException()__        _        exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e)___        _        OnExceptionDefinition exceptionPolicy = getExceptionPolicy(exchange, e)__        if (exceptionPolicy != null) {_            Predicate handledPredicate = exceptionPolicy.getHandledPolicy()___            Processor processor = exceptionPolicy.getErrorHandler()__            prepareExchangeBeforeOnException(exchange)__            if (processor != null) {_                deliverToFaultProcessor(exchange, processor)__            }_            prepareExchangeAfterOnException(exchange, handledPredicate)__        }_    };handles,when,an,exception,occured,during,processing,is,used,to,let,the,exception,policy,deal,with,it,eg,letting,an,on,exception,handle,it,param,exchange,the,current,exchange;protected,void,handle,exception,exchange,exchange,exception,e,exchange,get,exception,exchange,set,property,exchange,e,on,exception,definition,exception,policy,get,exception,policy,exchange,e,if,exception,policy,null,predicate,handled,predicate,exception,policy,get,handled,policy,processor,processor,exception,policy,get,error,handler,prepare,exchange,before,on,exception,exchange,if,processor,null,deliver,to,fault,processor,exchange,processor,prepare,exchange,after,on,exception,exchange,handled,predicate
TransactionErrorHandler -> public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1245078234;Creates the transaction error handler.__@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1247416283;Creates the transaction error handler.__@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1256553377;Creates the transaction error handler.__@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,                                    RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,                                    ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate);1259849212;Creates the transaction error handler.__@param output                  outer processor that should use this default error handler_@param logger                  logger to use for logging failures and redelivery attempts_@param redeliveryProcessor     an optional processor to run before redelivery attempt_@param redeliveryPolicy        policy for redelivery_@param handledPolicy           policy for handling failed exception that are moved to the dead letter queue_@param exceptionPolicyStrategy strategy for onException handling_@param transactionTemplate     the transaction template;public TransactionErrorHandler(Processor output, Logger logger, Processor redeliveryProcessor,_                                   RedeliveryPolicy redeliveryPolicy, Predicate handledPolicy,_                                   ExceptionPolicyStrategy exceptionPolicyStrategy, TransactionTemplate transactionTemplate) {_        super(output, logger, redeliveryProcessor, redeliveryPolicy, handledPolicy, null, null, false)__        setExceptionPolicy(exceptionPolicyStrategy)__        this.transactionTemplate = transactionTemplate__    };creates,the,transaction,error,handler,param,output,outer,processor,that,should,use,this,default,error,handler,param,logger,logger,to,use,for,logging,failures,and,redelivery,attempts,param,redelivery,processor,an,optional,processor,to,run,before,redelivery,attempt,param,redelivery,policy,policy,for,redelivery,param,handled,policy,policy,for,handling,failed,exception,that,are,moved,to,the,dead,letter,queue,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,template,the,transaction,template;public,transaction,error,handler,processor,output,logger,logger,processor,redelivery,processor,redelivery,policy,redelivery,policy,predicate,handled,policy,exception,policy,strategy,exception,policy,strategy,transaction,template,transaction,template,super,output,logger,redelivery,processor,redelivery,policy,handled,policy,null,null,false,set,exception,policy,exception,policy,strategy,this,transaction,template,transaction,template
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1277900755;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    if (log.isTraceEnabled()) {_                        log.trace("Asynchronous callback received for exchangeId: " + exchange.getExchangeId())__                    }_                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done TransactionErrorHandler"__            }_        })__        if (!sync) {_            if (log.isTraceEnabled()) {_                log.trace("Waiting for asynchronous callback before continuing for exchangeId: " + exchange.getExchangeId() + " -> " + exchange)__            }_            try {_                latch.await()__            } catch (InterruptedException e) {_                if (log.isDebugEnabled()) {_                    log.debug("Interrupted while waiting for asynchronous callback for exchangeId: " + exchange.getExchangeId(), e)__                }_                _                if (exchange.getException() == null) {_                    exchange.setException(e)__                }_            }_            if (log.isTraceEnabled()) {_                log.trace("Asynchronous callback received, will continue routing exchangeId: " + exchange.getExchangeId() + " -> " + exchange)__            }_        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,if,log,is,trace,enabled,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,if,sync,if,log,is,trace,enabled,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,if,log,is,debug,enabled,log,debug,interrupted,while,waiting,for,asynchronous,callback,for,exchange,id,exchange,get,exchange,id,e,if,exchange,get,exception,null,exchange,set,exception,e,if,log,is,trace,enabled,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1277921329;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1277963784;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1287471778;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1290950601;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1296495624;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1296722296;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1297968761;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1302278910;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1305651037;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1307685726;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1315218935;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1317390202;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1328014611;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1328016384;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1328092992;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1328174311;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1328265008;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1339846386;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1346242774;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        _        _        _        _        _        _        _        super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                _            }_        })__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1369038382;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + this__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,this,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1373129971;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + this__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,this,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1421597907;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + this__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,this,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1425318952;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + this__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,this,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1426064526;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + this__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,this,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1429547115;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1454232671;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1511424277;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1511424716;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1536517284;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1540108161;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1540108163;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1540108164;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        final CountDownLatch latch = new CountDownLatch(1)__        boolean sync = super.process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (!doneSync) {_                    log.trace("Asynchronous callback received for exchangeId: {}", exchange.getExchangeId())__                    latch.countDown()__                }_            }__            @Override_            public String toString() {_                return "Done " + TransactionErrorHandler.this.toString()__            }_        })__        if (!sync) {_            log.trace("Waiting for asynchronous callback before continuing for exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__            try {_                latch.await()__            } catch (InterruptedException e) {_                exchange.setException(e)__            }_            log.trace("Asynchronous callback received, will continue routing exchangeId: {} -> {}",_                    exchange.getExchangeId(), exchange)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,final,count,down,latch,latch,new,count,down,latch,1,boolean,sync,super,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,done,sync,log,trace,asynchronous,callback,received,for,exchange,id,exchange,get,exchange,id,latch,count,down,override,public,string,to,string,return,done,transaction,error,handler,this,to,string,if,sync,log,trace,waiting,for,asynchronous,callback,before,continuing,for,exchange,id,exchange,get,exchange,id,exchange,try,latch,await,catch,interrupted,exception,e,exchange,set,exception,e,log,trace,asynchronous,callback,received,will,continue,routing,exchange,id,exchange,get,exchange,id,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1542904331;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        awaitManager.process(new AsyncProcessorSupport() {_            @Override_            public boolean process(Exchange exchange, AsyncCallback callback) {_                return TransactionErrorHandler.super.process(exchange, callback)__            }_        }, exchange)__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,await,manager,process,new,async,processor,support,override,public,boolean,process,exchange,exchange,async,callback,callback,return,transaction,error,handler,super,process,exchange,callback,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1544427660;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        awaitManager.process(new AsyncProcessorSupport() {_            @Override_            public boolean process(Exchange exchange, AsyncCallback callback) {_                return TransactionErrorHandler.super.process(exchange, callback)__            }_        }, exchange)__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,await,manager,process,new,async,processor,support,override,public,boolean,process,exchange,exchange,async,callback,callback,return,transaction,error,handler,super,process,exchange,callback,exchange
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1544427685;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that means if the async routing engine_did kick in, then this implementation will wait for the task to complete before it continues.__@param exchange the exchange;protected void processByErrorHandler(final Exchange exchange) {_        awaitManager.process(new AsyncProcessorSupport() {_            @Override_            public boolean process(Exchange exchange, AsyncCallback callback) {_                return TransactionErrorHandler.super.process(exchange, callback)__            }_        }, exchange)__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,await,manager,process,new,async,processor,support,override,public,boolean,process,exchange,exchange,async,callback,callback,return,transaction,error,handler,super,process,exchange,callback,exchange
