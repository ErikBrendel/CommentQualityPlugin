commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ErrorHandlerType getType() {     return type. }
true;public;1;3;/**  * The type of the error handler  */ ;/**  * The type of the error handler  */ public void setType(ErrorHandlerType type) {     this.type = type. }
false;public;0;3;;public String getDeadLetterUri() {     return deadLetterUri. }
true;public;1;3;/**  * The dead letter endpoint uri for the Dead Letter error handler.  */ ;/**  * The dead letter endpoint uri for the Dead Letter error handler.  */ public void setDeadLetterUri(String deadLetterUri) {     this.deadLetterUri = deadLetterUri. }
false;public;0;3;;public String getDeadLetterHandleNewException() {     return deadLetterHandleNewException. }
true;public;1;3;/**  * Whether the dead letter channel should handle (and ignore) any new exception that may been thrown during sending the  * message to the dead letter endpoint.  * <p/>  * The default value is <tt>true</tt> which means any such kind of exception is handled and ignored. Set this to <tt>false</tt>  * to let the exception be propagated back on the {@link org.apache.camel.Exchange}. This can be used in situations  * where you use transactions, and want to use Camel's dead letter channel to deal with exceptions during routing,  * but if the dead letter channel itself fails because of a new exception being thrown, then by setting this to <tt>false</tt>  * the new exceptions is propagated back and set on the {@link org.apache.camel.Exchange}, which allows the transaction  * to detect the exception, and rollback.  */ ;/**  * Whether the dead letter channel should handle (and ignore) any new exception that may been thrown during sending the  * message to the dead letter endpoint.  * <p/>  * The default value is <tt>true</tt> which means any such kind of exception is handled and ignored. Set this to <tt>false</tt>  * to let the exception be propagated back on the {@link org.apache.camel.Exchange}. This can be used in situations  * where you use transactions, and want to use Camel's dead letter channel to deal with exceptions during routing,  * but if the dead letter channel itself fails because of a new exception being thrown, then by setting this to <tt>false</tt>  * the new exceptions is propagated back and set on the {@link org.apache.camel.Exchange}, which allows the transaction  * to detect the exception, and rollback.  */ public void setDeadLetterHandleNewException(String deadLetterHandleNewException) {     this.deadLetterHandleNewException = deadLetterHandleNewException. }
false;public;0;3;;public LoggingLevel getLevel() {     return level. }
true;public;1;3;/**  * Logging level to use when using the logging error handler type.  */ ;/**  * Logging level to use when using the logging error handler type.  */ public void setLevel(LoggingLevel level) {     this.level = level. }
false;public;0;3;;public LoggingLevel getRollbackLoggingLevel() {     return rollbackLoggingLevel. }
true;public;1;3;/**  * Sets the logging level to use for logging transactional rollback.  * <p/>  * This option is default WARN.  */ ;/**  * Sets the logging level to use for logging transactional rollback.  * <p/>  * This option is default WARN.  */ public void setRollbackLoggingLevel(LoggingLevel rollbackLoggingLevel) {     this.rollbackLoggingLevel = rollbackLoggingLevel. }
false;public;0;3;;public String getLogName() {     return logName. }
true;public;1;3;/**  * Name of the logger to use for the logging error handler  */ ;/**  * Name of the logger to use for the logging error handler  */ public void setLogName(String logName) {     this.logName = logName. }
false;public;0;3;;public Boolean getUseOriginalMessage() {     return useOriginalMessage. }
true;public;1;3;/**  * Will use the original input message when an {@link org.apache.camel.Exchange} is moved to the dead letter queue.  * <p/>  * <b>Notice:</b> this only applies when all redeliveries attempt have failed and the {@link org.apache.camel.Exchange} is doomed for failure.  * <br/>  * Instead of using the current inprogress {@link org.apache.camel.Exchange} IN body we use the original IN body instead. This allows  * you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN body.  * For instance if you route transform the IN body during routing and then failed. With the original exchange  * store in the dead letter queue it might be easier to manually re submit the {@link org.apache.camel.Exchange} again as the IN body  * is the same as when Camel received it. So you should be able to send the {@link org.apache.camel.Exchange} to the same input.  * <p/>  * By default this feature is off.  */ ;/**  * Will use the original input message when an {@link org.apache.camel.Exchange} is moved to the dead letter queue.  * <p/>  * <b>Notice:</b> this only applies when all redeliveries attempt have failed and the {@link org.apache.camel.Exchange} is doomed for failure.  * <br/>  * Instead of using the current inprogress {@link org.apache.camel.Exchange} IN body we use the original IN body instead. This allows  * you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN body.  * For instance if you route transform the IN body during routing and then failed. With the original exchange  * store in the dead letter queue it might be easier to manually re submit the {@link org.apache.camel.Exchange} again as the IN body  * is the same as when Camel received it. So you should be able to send the {@link org.apache.camel.Exchange} to the same input.  * <p/>  * By default this feature is off.  */ public void setUseOriginalMessage(Boolean useOriginalMessage) {     this.useOriginalMessage = useOriginalMessage. }
false;public;0;3;;public String getTransactionTemplateRef() {     return transactionTemplateRef. }
true;public;1;3;/**  * References to the {@link org.springframework.transaction.support.TransactionTemplate} to use with the transaction error handler.  */ ;/**  * References to the {@link org.springframework.transaction.support.TransactionTemplate} to use with the transaction error handler.  */ public void setTransactionTemplateRef(String transactionTemplateRef) {     this.transactionTemplateRef = transactionTemplateRef. }
false;public;0;3;;public String getTransactionManagerRef() {     return transactionManagerRef. }
true;public;1;3;/**  * References to the {@link org.springframework.transaction.PlatformTransactionManager} to use with the transaction error handler.  */ ;/**  * References to the {@link org.springframework.transaction.PlatformTransactionManager} to use with the transaction error handler.  */ public void setTransactionManagerRef(String transactionManagerRef) {     this.transactionManagerRef = transactionManagerRef. }
false;public;0;3;;public String getOnRedeliveryRef() {     return onRedeliveryRef. }
true;public;1;3;/**  * Sets a reference to a processor that should be processed <b>before</b> a redelivery attempt.  * <p/>  * Can be used to change the {@link org.apache.camel.Exchange} <b>before</b> its being redelivered.  */ ;/**  * Sets a reference to a processor that should be processed <b>before</b> a redelivery attempt.  * <p/>  * Can be used to change the {@link org.apache.camel.Exchange} <b>before</b> its being redelivered.  */ public void setOnRedeliveryRef(String onRedeliveryRef) {     this.onRedeliveryRef = onRedeliveryRef. }
false;public;0;3;;public String getOnExceptionOccurredRef() {     return onExceptionOccurredRef. }
true;public;1;3;/**  * Sets a reference to a processor that should be processed <b>just after</b> an exception occurred.  * Can be used to perform custom logging about the occurred exception at the exact time it happened.  * <p/>  * Important: Any exception thrown from this processor will be ignored.  */ ;/**  * Sets a reference to a processor that should be processed <b>just after</b> an exception occurred.  * Can be used to perform custom logging about the occurred exception at the exact time it happened.  * <p/>  * Important: Any exception thrown from this processor will be ignored.  */ public void setOnExceptionOccurredRef(String onExceptionOccurredRef) {     this.onExceptionOccurredRef = onExceptionOccurredRef. }
false;public;0;3;;public String getOnPrepareFailureRef() {     return onPrepareFailureRef. }
true;public;1;3;/**  * Sets a reference to a processor to prepare the {@link org.apache.camel.Exchange} before  * handled by the failure processor / dead letter channel. This allows for example to enrich the message  * before sending to a dead letter queue.  */ ;/**  * Sets a reference to a processor to prepare the {@link org.apache.camel.Exchange} before  * handled by the failure processor / dead letter channel. This allows for example to enrich the message  * before sending to a dead letter queue.  */ public void setOnPrepareFailureRef(String onPrepareFailureRef) {     this.onPrepareFailureRef = onPrepareFailureRef. }
false;public;0;3;;public String getRetryWhileRef() {     return retryWhileRef. }
true;public;1;3;/**  * Sets a reference to an retry while expression.  * <p/>  * Will continue retrying until expression evaluates to <tt>false</tt>.  */ ;/**  * Sets a reference to an retry while expression.  * <p/>  * Will continue retrying until expression evaluates to <tt>false</tt>.  */ public void setRetryWhileRef(String retryWhileRef) {     this.retryWhileRef = retryWhileRef. }
false;public;0;3;;public String getRedeliveryPolicyRef() {     return redeliveryPolicyRef. }
true;public;1;3;/**  * Sets a reference to a {@link RedeliveryPolicy} to be used for redelivery settings.  */ ;/**  * Sets a reference to a {@link RedeliveryPolicy} to be used for redelivery settings.  */ public void setRedeliveryPolicyRef(String redeliveryPolicyRef) {     this.redeliveryPolicyRef = redeliveryPolicyRef. }
false;public;0;3;;public String getExecutorServiceRef() {     return executorServiceRef. }
true;public;1;3;/**  * Sets a reference to a thread pool to be used by the error handler  */ ;/**  * Sets a reference to a thread pool to be used by the error handler  */ public void setExecutorServiceRef(String executorServiceRef) {     this.executorServiceRef = executorServiceRef. }
false;public;0;3;;public CamelRedeliveryPolicyFactoryBean getRedeliveryPolicy() {     return redeliveryPolicy. }
true;public;1;3;/**  * Sets the redelivery settings  */ ;/**  * Sets the redelivery settings  */ public void setRedeliveryPolicy(CamelRedeliveryPolicyFactoryBean redeliveryPolicy) {     this.redeliveryPolicy = redeliveryPolicy. }
