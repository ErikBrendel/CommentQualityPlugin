# id;timestamp;commentText;codeText;commentWords;codeWords
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1179416274;Create a processor which invokes the given method when an incoming message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        final BeanInfo beanInfo = new BeanInfo(pojo.getClass(), invocationStrategy)___        return new Processor() {_            @Override_			public String toString() {_				return "Processor on " + endpoint__			}__			public void process(Exchange exchange) throws Exception {_				if (log.isDebugEnabled()) {_					log.debug(">>>> invoking method for: " + exchange)__				}_                MethodInvocation invocation = beanInfo.createInvocation(method, pojo, exchange)__            	if (invocation == null) {_            		throw new IllegalStateException("No method invocation could be created")__            	}_                try {_                	invocation.proceed()__                }_                catch (Exception e) {_                    throw e__                }_                catch (Throwable throwable) {_                    throw new Exception(throwable)__                }_            }_        }__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,final,bean,info,bean,info,new,bean,info,pojo,get,class,invocation,strategy,return,new,processor,override,public,string,to,string,return,processor,on,endpoint,public,void,process,exchange,exchange,throws,exception,if,log,is,debug,enabled,log,debug,invoking,method,for,exchange,method,invocation,invocation,bean,info,create,invocation,method,pojo,exchange,if,invocation,null,throw,new,illegal,state,exception,no,method,invocation,could,be,created,try,invocation,proceed,catch,exception,e,throw,e,catch,throwable,throwable,throw,new,exception,throwable
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1183375392;Create a processor which invokes the given method when an incoming message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        final BeanInfo beanInfo = new BeanInfo(pojo.getClass(), invocationStrategy)___        return new Processor() {_            @Override_            public String toString() {_                return "Processor on " + endpoint__            }__            public void process(Exchange exchange) throws Exception {_                if (log.isDebugEnabled()) {_                    log.debug(">>>> invoking method for: " + exchange)__                }_                MethodInvocation invocation = beanInfo.createInvocation(method, pojo, exchange)__                if (invocation == null) {_                    throw new IllegalStateException("No method invocation could be created")__                }_                try {_                    invocation.proceed()__                }_                catch (Exception e) {_                    throw e__                }_                catch (Throwable throwable) {_                    throw new Exception(throwable)__                }_            }_        }__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,final,bean,info,bean,info,new,bean,info,pojo,get,class,invocation,strategy,return,new,processor,override,public,string,to,string,return,processor,on,endpoint,public,void,process,exchange,exchange,throws,exception,if,log,is,debug,enabled,log,debug,invoking,method,for,exchange,method,invocation,invocation,bean,info,create,invocation,method,pojo,exchange,if,invocation,null,throw,new,illegal,state,exception,no,method,invocation,could,be,created,try,invocation,proceed,catch,exception,e,throw,e,catch,throwable,throwable,throw,new,exception,throwable
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1183875004;Create a processor which invokes the given method when an incoming message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        final BeanInfo beanInfo = new BeanInfo(pojo.getClass(), invocationStrategy)___        return new Processor() {_            @Override_            public String toString() {_                return "Processor on " + endpoint__            }__            public void process(Exchange exchange) throws Exception {_                if (log.isDebugEnabled()) {_                    log.debug(">>>> invoking method for: " + exchange)__                }_                MethodInvocation invocation = beanInfo.createInvocation(method, pojo, exchange)__                if (invocation == null) {_                    throw new IllegalStateException("No method invocation could be created")__                }_                try {_                    invocation.proceed()__                }_                catch (Exception e) {_                    throw e__                }_                catch (Throwable throwable) {_                    throw new Exception(throwable)__                }_            }_        }__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,final,bean,info,bean,info,new,bean,info,pojo,get,class,invocation,strategy,return,new,processor,override,public,string,to,string,return,processor,on,endpoint,public,void,process,exchange,exchange,throws,exception,if,log,is,debug,enabled,log,debug,invoking,method,for,exchange,method,invocation,invocation,bean,info,create,invocation,method,pojo,exchange,if,invocation,null,throw,new,illegal,state,exception,no,method,invocation,could,be,created,try,invocation,proceed,catch,exception,e,throw,e,catch,throwable,throwable,throw,new,exception,throwable
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1184113046;Create a processor which invokes the given method when an incoming message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        final BeanInfo beanInfo = new BeanInfo(pojo.getClass(), invocationStrategy)___        return new Processor() {_            @Override_            public String toString() {_                return "Processor on " + endpoint__            }__            public void process(Exchange exchange) throws Exception {_                if (log.isDebugEnabled()) {_                    log.debug(">>>> invoking method for: " + exchange)__                }_                MethodInvocation invocation = beanInfo.createInvocation(method, pojo, exchange)__                if (invocation == null) {_                    throw new IllegalStateException("No method invocation could be created")__                }_                try {_                    invocation.proceed()__                }_                catch (Exception e) {_                    throw e__                }_                catch (Throwable throwable) {_                    throw new Exception(throwable)__                }_            }_        }__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,final,bean,info,bean,info,new,bean,info,pojo,get,class,invocation,strategy,return,new,processor,override,public,string,to,string,return,processor,on,endpoint,public,void,process,exchange,exchange,throws,exception,if,log,is,debug,enabled,log,debug,invoking,method,for,exchange,method,invocation,invocation,bean,info,create,invocation,method,pojo,exchange,if,invocation,null,throw,new,illegal,state,exception,no,method,invocation,could,be,created,try,invocation,proceed,catch,exception,e,throw,e,catch,throwable,throwable,throw,new,exception,throwable
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1186001713;Create a processor which invokes the given method when an incoming message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext().getInvocationStrategy())__        answer.setMethod(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,get,invocation,strategy,answer,set,method,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1186052257;Create a processor which invokes the given method when an incoming message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext().getInvocationStrategy())__        answer.setMethod(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,get,invocation,strategy,answer,set,method,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1186169636;Create a processor which invokes the given method when an incoming message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethod(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1186522380;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethod(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1187256571;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethod(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1187292135;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethod(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1192103744;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1193415115;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1202897391;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1203830000;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1206431352;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1206580265;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1206897402;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1210741044;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1211584070;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1212715525;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1212987666;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1218561609;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1218781401;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1221494389;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1222937702;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint);1222938836;Create a processor which invokes the given method when an incoming_message exchange is received;protected Processor createConsumerProcessor(final Object pojo, final Method method, final Endpoint endpoint) {_        BeanProcessor answer = new BeanProcessor(pojo, getCamelContext())__        answer.setMethodObject(method)__        return answer__    };create,a,processor,which,invokes,the,given,method,when,an,incoming,message,exchange,is,received;protected,processor,create,consumer,processor,final,object,pojo,final,method,method,final,endpoint,endpoint,bean,processor,answer,new,bean,processor,pojo,get,camel,context,answer,set,method,object,method,return,answer
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1179416274;A strategy method to allow implementations to perform some custom JBI based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1183375392;A strategy method to allow implementations to perform some custom JBI based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1183875004;A strategy method to allow implementations to perform some custom JBI based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1184113046;A strategy method to allow implementations to perform some custom JBI based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1186001713;A strategy method to allow implementations to perform some custom JBI based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1186052257;A strategy method to allow implementations to perform some custom JBI based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1186169636;A strategy method to allow implementations to perform some custom JBI based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1186522380;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1187256571;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1187292135;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1192103744;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1193415115;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1202897391;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1203830000;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1206431352;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1206580265;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1206897402;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1210741044;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1211584070;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1212715525;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1212987666;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    ReflectionUtils.setField(field, bean, getEndpointInjectionValue(annotation, field.getType(), field.getName()))__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,reflection,utils,set,field,field,bean,get,endpoint,injection,value,annotation,field,get,type,field,get,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1218561609;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1218781401;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1221494389;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1222937702;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1222938836;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1224614055;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1224664687;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1224699835;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1224749242;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1228160948;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1228758710;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1233174028;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1236068276;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1244021070;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject annotation = field.getAnnotation(EndpointInject.class)__                if (annotation != null) {_                    injectField(field, annotation.uri(), annotation.name(), bean)__                }_                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,annotation,field,get,annotation,endpoint,inject,class,if,annotation,null,inject,field,field,annotation,uri,annotation,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1245920470;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.name(), bean)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1249304191;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.name(), bean)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1249368205;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.name(), bean)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,name,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected void injectFields(final Object bean);1261044391;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1187292135;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            pollingConsumer.start()__            return pollingConsumer__        }_        catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,polling,consumer,start,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1192103744;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            pollingConsumer.start()__            return pollingConsumer__        }_        catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,polling,consumer,start,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1193415115;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        }_        catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1202897391;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        }_        catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1203830000;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        }_        catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1206431352;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        }_        catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1206580265;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1206897402;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1210741044;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1211584070;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1212715525;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1212987666;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1218561609;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1218781401;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1221494389;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw wrapRuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,wrap,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1222937702;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw wrapRuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,wrap,runtime,camel,exception,e
CamelBeanPostProcessor -> protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint);1222938836;Factory method to create a started {@link PollingConsumer} to be injected_into a POJO;protected PollingConsumer createInjectionPollingConsumer(Endpoint endpoint) {_        try {_            PollingConsumer pollingConsumer = endpoint.createPollingConsumer()__            startService(pollingConsumer)__            return pollingConsumer__        } catch (Exception e) {_            throw wrapRuntimeCamelException(e)__        }_    };factory,method,to,create,a,started,link,polling,consumer,to,be,injected,into,a,pojo;protected,polling,consumer,create,injection,polling,consumer,endpoint,endpoint,try,polling,consumer,polling,consumer,endpoint,create,polling,consumer,start,service,polling,consumer,return,polling,consumer,catch,exception,e,throw,wrap,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1187292135;A Factory method to create a started {@link Producer} to be injected into a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            producer.start()__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,producer,start,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1192103744;A Factory method to create a started {@link Producer} to be injected into a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            producer.start()__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,producer,start,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1193415115;A Factory method to create a started {@link Producer} to be injected into a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1202897391;A Factory method to create a started {@link Producer} to be injected into a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1203830000;A Factory method to create a started {@link Producer} to be injected into a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1206431352;A Factory method to create a started {@link Producer} to be injected into a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1206580265;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1206897402;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1210741044;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1211584070;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1212715525;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1212987666;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1218561609;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1218781401;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,new,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1221494389;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw wrapRuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,wrap,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1222937702;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw wrapRuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,wrap,runtime,camel,exception,e
CamelBeanPostProcessor -> protected Producer createInjectionProducer(Endpoint endpoint);1222938836;A Factory method to create a started {@link Producer} to be injected into_a POJO;protected Producer createInjectionProducer(Endpoint endpoint) {_        try {_            Producer producer = endpoint.createProducer()__            startService(producer)__            return producer__        } catch (Exception e) {_            throw wrapRuntimeCamelException(e)__        }_    };a,factory,method,to,create,a,started,link,producer,to,be,injected,into,a,pojo;protected,producer,create,injection,producer,endpoint,endpoint,try,producer,producer,endpoint,create,producer,start,service,producer,return,producer,catch,exception,e,throw,wrap,runtime,camel,exception,e
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1271413339;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1271491902;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1272420623;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1275033153;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1288924009;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1288927250;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1291964692;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1296495624;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1297968761;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && postProcessor.matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1298920856;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1301257798;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1303443126;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1306740264;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1323680223;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1326849968;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected void injectFields(final Object bean, final String beanName);1326850295;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {_            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {_                EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                if (endpointInject != null && getPostProcessor().matchContext(endpointInject.context())) {_                    injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                }__                Produce produce = field.getAnnotation(Produce.class)__                if (produce != null && getPostProcessor().matchContext(produce.context())) {_                    injectField(field, produce.uri(), produce.ref(), bean, beanName)__                }_            }_        })__    };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,reflection,utils,do,with,fields,bean,get,class,new,reflection,utils,field,callback,public,void,do,with,field,field,throws,illegal,argument,exception,illegal,access,exception,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,get,post,processor,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,get,post,processor,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1244021070;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1245920470;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1249304191;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1249368205;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1261044391;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1271413339;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1271491902;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1272420623;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1275033153;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1288927250;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1291964692;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1296495624;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1297968761;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1298920856;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1301257798;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        if (bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1303443126;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        _        if (bean == null || bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,null,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1306740264;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        _        if (bean == null || bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,null,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1323680223;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {_        _        _        _        if (bean == null || bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,null,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1326849968;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {__         _        ClassLoader classLoader = getCamelContext().getClassResolver().getClass().getClassLoader()___        try {_            Class aClass = classLoader.loadClass("org.apache.camel.core.xml.CamelJMXAgentDefinition")__            _        } catch (ClassNotFoundException e) {_           return false__        }__        _        _        _        if (bean == null || bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,class,loader,class,loader,get,camel,context,get,class,resolver,get,class,get,class,loader,try,class,a,class,class,loader,load,class,org,apache,camel,core,xml,camel,jmxagent,definition,catch,class,not,found,exception,e,return,false,if,bean,null,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected boolean canPostProcessBean(Object bean, String beanName);1326850295;Can we post process the given bean?__@param bean the bean_@param beanName the bean name_@return true to process it;protected boolean canPostProcessBean(Object bean, String beanName) {__        _        _        _        if (bean == null || bean instanceof CamelJMXAgentDefinition) {_            return false__        }__        _        return true__    };can,we,post,process,the,given,bean,param,bean,the,bean,param,bean,name,the,bean,name,return,true,to,process,it;protected,boolean,can,post,process,bean,object,bean,string,bean,name,if,bean,null,bean,instanceof,camel,jmxagent,definition,return,false,return,true
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1179416274;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            }_            else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                }_                catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            }_            else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1183375392;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            }_            else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                }_                catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            }_            else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1183875004;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            }_            else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                }_                catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            }_            else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1184113046;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            }_            else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                }_                catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            }_            else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1186001713;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            }_            else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                }_                catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            }_            else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1186052257;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            }_            else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                }_                catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            }_            else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1186169636;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            }_            else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                }_                catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            }_            else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type);1186522380;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name())__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                } catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1187256571;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                try {_                    return endpoint.createProducer()__                } catch (Exception e) {_                    throw new RuntimeCamelException(e)__                }_            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,try,return,endpoint,create,producer,catch,exception,e,throw,new,runtime,camel,exception,e,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1187292135;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1192103744;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1193415115;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1202897391;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1203830000;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1206431352;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1206580265;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1206897402;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1210741044;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1211584070;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(CamelTemplate.class)) {_                return new CamelTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,camel,template,class,return,new,camel,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1212715525;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(DefaultProducerTemplate.class)) {_                return new DefaultProducerTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,default,producer,template,class,return,new,default,producer,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName);1212987666;Creates the value for the injection point for the given annotation;protected Object getEndpointInjectionValue(EndpointInject annotation, Class<?> type, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(annotation.uri(), annotation.name(), injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(DefaultProducerTemplate.class)) {_                return new DefaultProducerTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,value,for,the,injection,point,for,the,given,annotation;protected,object,get,endpoint,injection,value,endpoint,inject,annotation,class,type,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,annotation,uri,annotation,name,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,default,producer,template,class,return,new,default,producer,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName);1218561609;Creates the object to be injected for an {@link org.apache.camel.EndpointInject} or {@link Produce} injection point;protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(endpointUri, endpointRef, injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(DefaultProducerTemplate.class)) {_                return new DefaultProducerTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else if (type.isInterface()) {_                _                try {_                    return ProxyHelper.createProxy(endpoint, type)__                } catch (Exception e) {_                    throw new BeanInstantiationException(type, "Could not instantiate proxy of type " + type.getName() + " on endpoint " + endpoint, e)__                }_            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,object,to,be,injected,for,an,link,org,apache,camel,endpoint,inject,or,link,produce,injection,point;protected,object,get,injection,value,class,type,string,endpoint,uri,string,endpoint,ref,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,endpoint,uri,endpoint,ref,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,default,producer,template,class,return,new,default,producer,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,if,type,is,interface,try,return,proxy,helper,create,proxy,endpoint,type,catch,exception,e,throw,new,bean,instantiation,exception,type,could,not,instantiate,proxy,of,type,type,get,name,on,endpoint,endpoint,e,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName);1218781401;Creates the object to be injected for an {@link org.apache.camel.EndpointInject} or {@link Produce} injection point;protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(endpointUri, endpointRef, injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(DefaultProducerTemplate.class)) {_                return new DefaultProducerTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else if (type.isInterface()) {_                _                try {_                    return ProxyHelper.createProxy(endpoint, type)__                } catch (Exception e) {_                    throw new BeanInstantiationException(type, "Could not instantiate proxy of type " + type.getName() + " on endpoint " + endpoint, e)__                }_            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,object,to,be,injected,for,an,link,org,apache,camel,endpoint,inject,or,link,produce,injection,point;protected,object,get,injection,value,class,type,string,endpoint,uri,string,endpoint,ref,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,endpoint,uri,endpoint,ref,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,default,producer,template,class,return,new,default,producer,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,if,type,is,interface,try,return,proxy,helper,create,proxy,endpoint,type,catch,exception,e,throw,new,bean,instantiation,exception,type,could,not,instantiate,proxy,of,type,type,get,name,on,endpoint,endpoint,e,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName);1221494389;Creates the object to be injected for an {@link org.apache.camel.EndpointInject} or {@link Produce} injection point;protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(endpointUri, endpointRef, injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(DefaultProducerTemplate.class)) {_                return new DefaultProducerTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else if (type.isInterface()) {_                _                try {_                    return ProxyHelper.createProxy(endpoint, type)__                } catch (Exception e) {_                    throw new BeanInstantiationException(type, "Could not instantiate proxy of type " + type.getName() + " on endpoint " + endpoint, e)__                }_            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,object,to,be,injected,for,an,link,org,apache,camel,endpoint,inject,or,link,produce,injection,point;protected,object,get,injection,value,class,type,string,endpoint,uri,string,endpoint,ref,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,endpoint,uri,endpoint,ref,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,default,producer,template,class,return,new,default,producer,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,if,type,is,interface,try,return,proxy,helper,create,proxy,endpoint,type,catch,exception,e,throw,new,bean,instantiation,exception,type,could,not,instantiate,proxy,of,type,type,get,name,on,endpoint,endpoint,e,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName);1222937702;Creates the object to be injected for an {@link org.apache.camel.EndpointInject} or {@link Produce} injection point;protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(endpointUri, endpointRef, injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(DefaultProducerTemplate.class)) {_                return new DefaultProducerTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else if (type.isInterface()) {_                _                try {_                    return ProxyHelper.createProxy(endpoint, type)__                } catch (Exception e) {_                    throw new BeanInstantiationException(type, "Could not instantiate proxy of type " + type.getName() + " on endpoint " + endpoint, e)__                }_            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,object,to,be,injected,for,an,link,org,apache,camel,endpoint,inject,or,link,produce,injection,point;protected,object,get,injection,value,class,type,string,endpoint,uri,string,endpoint,ref,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,endpoint,uri,endpoint,ref,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,default,producer,template,class,return,new,default,producer,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,if,type,is,interface,try,return,proxy,helper,create,proxy,endpoint,type,catch,exception,e,throw,new,bean,instantiation,exception,type,could,not,instantiate,proxy,of,type,type,get,name,on,endpoint,endpoint,e,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
CamelBeanPostProcessor -> protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName);1222938836;Creates the object to be injected for an {@link org.apache.camel.EndpointInject} or {@link Produce} injection point;protected Object getInjectionValue(Class<?> type, String endpointUri, String endpointRef, String injectionPointName) {_        Endpoint endpoint = getEndpointInjection(endpointUri, endpointRef, injectionPointName)__        if (endpoint != null) {_            if (type.isInstance(endpoint)) {_                return endpoint__            } else if (type.isAssignableFrom(Producer.class)) {_                return createInjectionProducer(endpoint)__            } else if (type.isAssignableFrom(DefaultProducerTemplate.class)) {_                return new DefaultProducerTemplate(getCamelContext(), endpoint)__            } else if (type.isAssignableFrom(PollingConsumer.class)) {_                return createInjectionPollingConsumer(endpoint)__            } else if (type.isInterface()) {_                _                try {_                    return ProxyHelper.createProxy(endpoint, type)__                } catch (Exception e) {_                    throw new BeanInstantiationException(type, "Could not instantiate proxy of type " + type.getName() + " on endpoint " + endpoint, e)__                }_            } else {_                throw new IllegalArgumentException("Invalid type: " + type.getName() + " which cannot be injected via @EndpointInject for " + endpoint)__            }_        }_        return null__    };creates,the,object,to,be,injected,for,an,link,org,apache,camel,endpoint,inject,or,link,produce,injection,point;protected,object,get,injection,value,class,type,string,endpoint,uri,string,endpoint,ref,string,injection,point,name,endpoint,endpoint,get,endpoint,injection,endpoint,uri,endpoint,ref,injection,point,name,if,endpoint,null,if,type,is,instance,endpoint,return,endpoint,else,if,type,is,assignable,from,producer,class,return,create,injection,producer,endpoint,else,if,type,is,assignable,from,default,producer,template,class,return,new,default,producer,template,get,camel,context,endpoint,else,if,type,is,assignable,from,polling,consumer,class,return,create,injection,polling,consumer,endpoint,else,if,type,is,interface,try,return,proxy,helper,create,proxy,endpoint,type,catch,exception,e,throw,new,bean,instantiation,exception,type,could,not,instantiate,proxy,of,type,type,get,name,on,endpoint,endpoint,e,else,throw,new,illegal,argument,exception,invalid,type,type,get,name,which,cannot,be,injected,via,endpoint,inject,for,endpoint,return,null
