commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public CamelContext getOrLookupCamelContext() {     if (camelContext == null) {         if (camelId != null) {             LOG.trace("Looking up CamelContext by id: {} from Spring ApplicationContext: {}", camelId, applicationContext).             camelContext = applicationContext.getBean(camelId, CamelContext.class).         } else {             // lookup by type and grab the single CamelContext if exists             LOG.trace("Looking up CamelContext by type from Spring ApplicationContext: {}", applicationContext).             Map<String, CamelContext> contexts = applicationContext.getBeansOfType(CamelContext.class).             if (contexts != null && contexts.size() == 1) {                 camelContext = contexts.values().iterator().next().             }         }     }     return camelContext. }
false;public;2;11;;@Override public boolean canPostProcessBean(Object bean, String beanName) {     // We should also avoid to process the null object bean (in Spring 2.5.x)     if (bean == null || bean instanceof CamelJMXAgentDefinition) {         return false.     }     return super.canPostProcessBean(bean, beanName). }
false;public;0;8;;@Override public CamelContext getCamelContext() {     // so we only want to do this on demand     return delegate.getOrLookupCamelContext(). }
false;protected;3;4;;@Override protected RuntimeException createProxyInstantiationRuntimeException(Class<?> type, Endpoint endpoint, Exception e) {     return new BeanInstantiationException(type, "Could not instantiate proxy of type " + type.getName() + " on endpoint " + endpoint, e). }
false;protected;2;10;;@Override protected boolean isSingleton(Object bean, String beanName) {     // has not been enlisted in Spring application context     if (applicationContext == null || beanName == null) {         return super.isSingleton(bean, beanName).     } else {         return applicationContext.isSingleton(beanName).     } }
false;protected;4;14;;@Override protected void startService(Service service, CamelContext context, Object bean, String beanName) throws Exception {     if (isSingleton(bean, beanName)) {         getCamelContext().addService(service).     } else {         // only start service and do not add it to CamelContext         ServiceHelper.startService(service).         if (prototypeBeans.add(beanName)) {             // do not spam the log with WARN so do this only once per bean name             CamelBeanPostProcessor.LOG.warn("The bean with id [" + beanName + "] is prototype scoped and cannot stop the injected service when bean is destroyed: " + service + ". You may want to stop the service manually from the bean.").         }     } }
false;public;0;49;;@Override public CamelPostProcessorHelper getPostProcessorHelper() {     // lets lazily create the post processor     if (camelPostProcessorHelper == null) {         camelPostProcessorHelper = new CamelPostProcessorHelper() {              @Override             public CamelContext getCamelContext() {                 // so we only want to do this on demand                 return delegate.getOrLookupCamelContext().             }              @Override             protected RuntimeException createProxyInstantiationRuntimeException(Class<?> type, Endpoint endpoint, Exception e) {                 return new BeanInstantiationException(type, "Could not instantiate proxy of type " + type.getName() + " on endpoint " + endpoint, e).             }              @Override             protected boolean isSingleton(Object bean, String beanName) {                 // has not been enlisted in Spring application context                 if (applicationContext == null || beanName == null) {                     return super.isSingleton(bean, beanName).                 } else {                     return applicationContext.isSingleton(beanName).                 }             }              @Override             protected void startService(Service service, CamelContext context, Object bean, String beanName) throws Exception {                 if (isSingleton(bean, beanName)) {                     getCamelContext().addService(service).                 } else {                     // only start service and do not add it to CamelContext                     ServiceHelper.startService(service).                     if (prototypeBeans.add(beanName)) {                         // do not spam the log with WARN so do this only once per bean name                         CamelBeanPostProcessor.LOG.warn("The bean with id [" + beanName + "] is prototype scoped and cannot stop the injected service when bean is destroyed: " + service + ". You may want to stop the service manually from the bean.").                     }                 }             }         }.     }     return camelPostProcessorHelper. }
false;public;2;12;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     try {         return delegate.postProcessBeforeInitialization(bean, beanName).     } catch (Exception e) {         // do not wrap already beans exceptions         if (e instanceof BeansException) {             throw (BeansException) e.         }         throw new GenericBeansException("Error post processing bean: " + beanName, e).     } }
false;public;2;12;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     try {         return delegate.postProcessAfterInitialization(bean, beanName).     } catch (Exception e) {         // do not wrap already beans exceptions         if (e instanceof BeansException) {             throw (BeansException) e.         }         throw new GenericBeansException("Error post processing bean: " + beanName, e).     } }
false;public;1;4;;// Properties // ------------------------------------------------------------------------- @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String getCamelId() {     return camelId. }
false;public;1;3;;public void setCamelId(String camelId) {     this.camelId = camelId. }
