commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;@Override public void afterPropertiesSet() {     if (endpoint == null) {         if (ObjectHelper.isNotEmpty(camelContextId)) {             camelContext = CamelContextResolverHelper.getCamelContextWithId(applicationContext, camelContextId).         }         if (camelContext == null) {             throw new IllegalArgumentException("camelContext or camelContextId must be specified").         }         if (getServiceUrl() == null && getServiceRef() == null) {             throw new IllegalArgumentException("serviceUrl or serviceRef must be specified.").         }         // lookup endpoint or we have the url for it         if (getServiceRef() != null) {             endpoint = camelContext.getRegistry().lookupByNameAndType(getServiceRef(), Endpoint.class).         } else {             endpoint = camelContext.getEndpoint(getServiceUrl()).         }         if (endpoint == null) {             throw new IllegalArgumentException("Could not resolve endpoint: " + getServiceUrl()).         }     }     // binding is enabled by default     boolean bind = getBinding() != null ? getBinding() : true.     try {         // need to start endpoint before we create producer         ServiceHelper.startService(endpoint).         producer = endpoint.createProducer().         // add and start producer         camelContext.addService(producer, true, true).         serviceProxy = ProxyHelper.createProxy(endpoint, bind, producer, getServiceInterface()).     } catch (Exception e) {         throw new FailedToCreateProducerException(endpoint, e).     } }
false;public;0;3;;public void destroy() throws Exception { // we let CamelContext manage the lifecycle of the producer and shut it down when Camel stops }
false;public;0;3;;public Class<?> getServiceInterface() {     return super.getServiceInterface(). }
false;public;0;3;;public String getServiceUrl() {     return super.getServiceUrl(). }
false;public;0;3;;public Object getObject() throws Exception {     return serviceProxy. }
false;public;0;3;;public Class<?> getObjectType() {     return getServiceInterface(). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public String getServiceRef() {     return serviceRef. }
false;public;1;3;;public void setServiceRef(String serviceRef) {     this.serviceRef = serviceRef. }
false;public;0;3;;public Boolean getBinding() {     return binding. }
false;public;1;3;;public void setBinding(Boolean binding) {     this.binding = binding. }
false;public;0;3;;public Endpoint getEndpoint() {     return endpoint. }
false;public;1;3;;public void setEndpoint(Endpoint endpoint) {     this.endpoint = endpoint. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;1;3;;public void setCamelContextId(String contextId) {     this.camelContextId = contextId. }
false;public;1;3;;public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
