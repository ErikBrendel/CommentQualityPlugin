commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String toString() {     return "MainRunner(" + name(main) + " " + Arrays.asList(getArgs()) + ")". }
false;public;0;12;;public void run() {     try {         runMethodWithoutCatchingExceptions().     } catch (NoSuchMethodException e) {         LOG.error("Class: " + name(main) + " does not have a main method: " + e, e).     } catch (IllegalAccessException e) {         LOG.error("Failed to run: " + this + ". Reason: " + e, e).     } catch (InvocationTargetException e) {         Throwable throwable = e.getTargetException().         LOG.error("Failed to run: " + this + ". Reason: " + throwable, throwable).     } }
false;public;0;15;;public void runMethodWithoutCatchingExceptions() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {     if (delay > 0) {         try {             Thread.sleep(delay).         } catch (InterruptedException e) {             Thread.currentThread().interrupt().         }     }     Method method = main.getMethod("main", String[].class).     if (!Modifier.isStatic(method.getModifiers())) {         throw new IllegalArgumentException("The main method is not static!: " + method).     }     Object[] arguments = { getArgs() }.     method.invoke(null, arguments). }
false;public;0;3;;public String[] getArgs() {     return args. }
false;public;1;3;;public void setArgs(String[] args) {     this.args = args. }
false;public;0;3;;public boolean isAsyncRun() {     return asyncRun. }
false;public;1;3;;public void setAsyncRun(boolean asyncRun) {     this.asyncRun = asyncRun. }
false;public;0;3;;public Class<?> getMain() {     return main. }
false;public;1;3;;public void setMain(Class<?> main) {     this.main = main. }
false;public;0;3;;public long getDelay() {     return delay. }
false;public;1;3;;public void setDelay(long delay) {     this.delay = delay. }
false;public;0;11;;public void afterPropertiesSet() throws Exception {     if (main == null) {         throw new IllegalArgumentException("You must specify a main class!").     }     if (isAsyncRun()) {         Thread thread = new Thread(this, "Thread for: " + this).         thread.start().     } else {         runMethodWithoutCatchingExceptions().     } }
