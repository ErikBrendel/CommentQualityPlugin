commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected Class<?> getBeanClass(Element element) {     return type. }
false;protected;0;3;;protected boolean isAssignId() {     return assignId. }
false;protected;1;4;;protected boolean isEligibleAttribute(String attributeName) {     return attributeName != null && !ID_ATTRIBUTE.equals(attributeName) && !attributeName.equals("xmlns") && !attributeName.startsWith("xmlns:"). }
false;protected;2;21;;protected void doParse(Element element, BeanDefinitionBuilder builder) {     NamedNodeMap attributes = element.getAttributes().     for (int x = 0. x < attributes.getLength(). x++) {         Attr attribute = (Attr) attributes.item(x).         String name = attribute.getLocalName().         String fullName = attribute.getName().         // assign id if we want them         if (fullName.equals("id") && isAssignId()) {             if (attribute.getValue() != null) {                 builder.addPropertyValue("id", attribute.getValue()).             }         // assign other attributes if eligible         } else if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {             String propertyName = extractPropertyName(name).             Assert.state(StringUtils.hasText(propertyName), "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.").             builder.addPropertyValue(propertyName, attribute.getValue()).         }     }     postProcess(builder, element). }
true;protected;1;3;/**  * Extract a JavaBean property name from the supplied attribute name.  * <p>The default implementation uses the  * {@link Conventions#attributeNameToPropertyName(String)}  * method to perform the extraction.  * <p>The name returned must obey the standard JavaBean property name  * conventions. For example for a class with a setter method  * '<code>setBingoHallFavourite(String)</code>', the name returned had  * better be '<code>bingoHallFavourite</code>' (with that exact casing).  *  * @param attributeName the attribute name taken straight from the  *                      XML element being parsed (never <code>null</code>)  * @return the extracted JavaBean property name (must never be <code>null</code>)  */ ;/**  * Extract a JavaBean property name from the supplied attribute name.  * <p>The default implementation uses the  * {@link Conventions#attributeNameToPropertyName(String)}  * method to perform the extraction.  * <p>The name returned must obey the standard JavaBean property name  * conventions. For example for a class with a setter method  * '<code>setBingoHallFavourite(String)</code>', the name returned had  * better be '<code>bingoHallFavourite</code>' (with that exact casing).  *  * @param attributeName the attribute name taken straight from the  *                      XML element being parsed (never <code>null</code>)  * @return the extracted JavaBean property name (must never be <code>null</code>)  */ protected String extractPropertyName(String attributeName) {     return Conventions.attributeNameToPropertyName(attributeName). }
true;protected;2;2;/**  * Hook method that derived classes can implement to inspect/change a  * bean definition after parsing is complete.  * <p>The default implementation does nothing.  *  * @param beanDefinition the parsed (and probably totally defined) bean definition being built  * @param element        the XML element that was the source of the bean definition's metadata  */ ;/**  * Hook method that derived classes can implement to inspect/change a  * bean definition after parsing is complete.  * <p>The default implementation does nothing.  *  * @param beanDefinition the parsed (and probably totally defined) bean definition being built  * @param element        the XML element that was the source of the bean definition's metadata  */ protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) { }
