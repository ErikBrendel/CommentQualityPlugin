# id;timestamp;commentText;codeText;commentWords;codeWords
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1205928702;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1206580265;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1235562682;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1253686395;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1269574173;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1292665224;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1292665676;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1296917738;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1297968761;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1326392736;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> protected String extractPropertyName(String attributeName);1540108161;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing).__@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_        return Conventions.attributeNameToPropertyName(attributeName)__    };extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
BeanDefinitionParser -> public BeanDefinitionParser(Class type, boolean assignId);1292665224;Bean definition parser__@param type     the type, can be null_@param assignId whether to allow assigning id from the id attribute on the type_(there must be getter/setter id on type class).;public BeanDefinitionParser(Class type, boolean assignId) {_        this.type = type__        this.assignId = assignId__    };bean,definition,parser,param,type,the,type,can,be,null,param,assign,id,whether,to,allow,assigning,id,from,the,id,attribute,on,the,type,there,must,be,getter,setter,id,on,type,class;public,bean,definition,parser,class,type,boolean,assign,id,this,type,type,this,assign,id,assign,id
BeanDefinitionParser -> public BeanDefinitionParser(Class type, boolean assignId);1292665676;Bean definition parser__@param type     the type, can be null_@param assignId whether to allow assigning id from the id attribute on the type_(there must be getter/setter id on type class).;public BeanDefinitionParser(Class type, boolean assignId) {_        this.type = type__        this.assignId = assignId__    };bean,definition,parser,param,type,the,type,can,be,null,param,assign,id,whether,to,allow,assigning,id,from,the,id,attribute,on,the,type,there,must,be,getter,setter,id,on,type,class;public,bean,definition,parser,class,type,boolean,assign,id,this,type,type,this,assign,id,assign,id
BeanDefinitionParser -> public BeanDefinitionParser(Class type, boolean assignId);1296917738;Bean definition parser__@param type     the type, can be null_@param assignId whether to allow assigning id from the id attribute on the type_(there must be getter/setter id on type class).;public BeanDefinitionParser(Class type, boolean assignId) {_        this.type = type__        this.assignId = assignId__    };bean,definition,parser,param,type,the,type,can,be,null,param,assign,id,whether,to,allow,assigning,id,from,the,id,attribute,on,the,type,there,must,be,getter,setter,id,on,type,class;public,bean,definition,parser,class,type,boolean,assign,id,this,type,type,this,assign,id,assign,id
BeanDefinitionParser -> public BeanDefinitionParser(Class type, boolean assignId);1297968761;Bean definition parser__@param type     the type, can be null_@param assignId whether to allow assigning id from the id attribute on the type_(there must be getter/setter id on type class).;public BeanDefinitionParser(Class type, boolean assignId) {_        this.type = type__        this.assignId = assignId__    };bean,definition,parser,param,type,the,type,can,be,null,param,assign,id,whether,to,allow,assigning,id,from,the,id,attribute,on,the,type,there,must,be,getter,setter,id,on,type,class;public,bean,definition,parser,class,type,boolean,assign,id,this,type,type,this,assign,id,assign,id
BeanDefinitionParser -> protected final void doParse(Element element, BeanDefinitionBuilder builder);1205928702;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property.__@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);protected final void doParse(Element element, BeanDefinitionBuilder builder) {_        NamedNodeMap attributes = element.getAttributes()__        for (int x = 0_ x < attributes.getLength()_ x++) {_            Attr attribute = (Attr) attributes.item(x)__            String name = attribute.getLocalName()__            String fullName = attribute.getName()__            if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {_                String propertyName = extractPropertyName(name)__                Assert.state(StringUtils.hasText(propertyName),_                        "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__                builder.addPropertyValue(propertyName, attribute.getValue())__            }_        }_        postProcess(builder, element)__    };parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;protected,final,void,do,parse,element,element,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,string,name,attribute,get,local,name,string,full,name,attribute,get,name,if,full,name,starts,with,xmlns,full,name,equals,xmlns,is,eligible,attribute,name,string,property,name,extract,property,name,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
BeanDefinitionParser -> protected final void doParse(Element element, BeanDefinitionBuilder builder);1206580265;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property.__@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);protected final void doParse(Element element, BeanDefinitionBuilder builder) {_        NamedNodeMap attributes = element.getAttributes()__        for (int x = 0_ x < attributes.getLength()_ x++) {_            Attr attribute = (Attr) attributes.item(x)__            String name = attribute.getLocalName()__            String fullName = attribute.getName()__            if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {_                String propertyName = extractPropertyName(name)__                Assert.state(StringUtils.hasText(propertyName),_                        "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__                builder.addPropertyValue(propertyName, attribute.getValue())__            }_        }_        postProcess(builder, element)__    };parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;protected,final,void,do,parse,element,element,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,string,name,attribute,get,local,name,string,full,name,attribute,get,name,if,full,name,starts,with,xmlns,full,name,equals,xmlns,is,eligible,attribute,name,string,property,name,extract,property,name,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
BeanDefinitionParser -> protected final void doParse(Element element, BeanDefinitionBuilder builder);1235562682;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property.__@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);protected final void doParse(Element element, BeanDefinitionBuilder builder) {_        NamedNodeMap attributes = element.getAttributes()__        for (int x = 0_ x < attributes.getLength()_ x++) {_            Attr attribute = (Attr) attributes.item(x)__            String name = attribute.getLocalName()__            String fullName = attribute.getName()__            if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {_                String propertyName = extractPropertyName(name)__                Assert.state(StringUtils.hasText(propertyName),_                        "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__                builder.addPropertyValue(propertyName, attribute.getValue())__            }_        }_        postProcess(builder, element)__    };parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;protected,final,void,do,parse,element,element,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,string,name,attribute,get,local,name,string,full,name,attribute,get,name,if,full,name,starts,with,xmlns,full,name,equals,xmlns,is,eligible,attribute,name,string,property,name,extract,property,name,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
BeanDefinitionParser -> protected final void doParse(Element element, BeanDefinitionBuilder builder);1253686395;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property.__@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);protected final void doParse(Element element, BeanDefinitionBuilder builder) {_        NamedNodeMap attributes = element.getAttributes()__        for (int x = 0_ x < attributes.getLength()_ x++) {_            Attr attribute = (Attr) attributes.item(x)__            String name = attribute.getLocalName()__            String fullName = attribute.getName()__            if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {_                String propertyName = extractPropertyName(name)__                Assert.state(StringUtils.hasText(propertyName),_                        "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__                builder.addPropertyValue(propertyName, attribute.getValue())__            }_        }_        postProcess(builder, element)__    };parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;protected,final,void,do,parse,element,element,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,string,name,attribute,get,local,name,string,full,name,attribute,get,name,if,full,name,starts,with,xmlns,full,name,equals,xmlns,is,eligible,attribute,name,string,property,name,extract,property,name,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
BeanDefinitionParser -> protected final void doParse(Element element, BeanDefinitionBuilder builder);1269574173;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property.__@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);protected final void doParse(Element element, BeanDefinitionBuilder builder) {_        NamedNodeMap attributes = element.getAttributes()__        for (int x = 0_ x < attributes.getLength()_ x++) {_            Attr attribute = (Attr) attributes.item(x)__            String name = attribute.getLocalName()__            String fullName = attribute.getName()__            if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {_                String propertyName = extractPropertyName(name)__                Assert.state(StringUtils.hasText(propertyName),_                        "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__                builder.addPropertyValue(propertyName, attribute.getValue())__            }_        }_        postProcess(builder, element)__    };parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;protected,final,void,do,parse,element,element,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,string,name,attribute,get,local,name,string,full,name,attribute,get,name,if,full,name,starts,with,xmlns,full,name,equals,xmlns,is,eligible,attribute,name,string,property,name,extract,property,name,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
BeanDefinitionParser -> protected final void doParse(Element element, BeanDefinitionBuilder builder);1292665224;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property.__@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);protected final void doParse(Element element, BeanDefinitionBuilder builder) {_        NamedNodeMap attributes = element.getAttributes()__        for (int x = 0_ x < attributes.getLength()_ x++) {_            Attr attribute = (Attr) attributes.item(x)__            String name = attribute.getLocalName()__            String fullName = attribute.getName()__            _            if (fullName.equals("id") && assignId) {_                _                if (attribute.getValue() != null) {_                    builder.addPropertyValue("id", attribute.getValue())__                }_                _            } else if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {_                String propertyName = extractPropertyName(name)__                Assert.state(StringUtils.hasText(propertyName),_                        "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__                builder.addPropertyValue(propertyName, attribute.getValue())__            }_        }_        postProcess(builder, element)__    };parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;protected,final,void,do,parse,element,element,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,string,name,attribute,get,local,name,string,full,name,attribute,get,name,if,full,name,equals,id,assign,id,if,attribute,get,value,null,builder,add,property,value,id,attribute,get,value,else,if,full,name,starts,with,xmlns,full,name,equals,xmlns,is,eligible,attribute,name,string,property,name,extract,property,name,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
BeanDefinitionParser -> protected final void doParse(Element element, BeanDefinitionBuilder builder);1292665676;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property.__@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);protected final void doParse(Element element, BeanDefinitionBuilder builder) {_        NamedNodeMap attributes = element.getAttributes()__        for (int x = 0_ x < attributes.getLength()_ x++) {_            Attr attribute = (Attr) attributes.item(x)__            String name = attribute.getLocalName()__            String fullName = attribute.getName()__            _            if (fullName.equals("id") && assignId) {_                if (attribute.getValue() != null) {_                    builder.addPropertyValue("id", attribute.getValue())__                }_            _            } else if (!fullName.startsWith("xmlns:") && !fullName.equals("xmlns") && isEligibleAttribute(name)) {_                String propertyName = extractPropertyName(name)__                Assert.state(StringUtils.hasText(propertyName),_                        "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__                builder.addPropertyValue(propertyName, attribute.getValue())__            }_        }_        postProcess(builder, element)__    };parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;protected,final,void,do,parse,element,element,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,string,name,attribute,get,local,name,string,full,name,attribute,get,name,if,full,name,equals,id,assign,id,if,attribute,get,value,null,builder,add,property,value,id,attribute,get,value,else,if,full,name,starts,with,xmlns,full,name,equals,xmlns,is,eligible,attribute,name,string,property,name,extract,property,name,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
BeanDefinitionParser -> public BeanDefinitionParser(Class<?> type, boolean assignId);1326392736;Bean definition parser__@param type     the type, can be null_@param assignId whether to allow assigning id from the id attribute on the type_(there must be getter/setter id on type class).;public BeanDefinitionParser(Class<?> type, boolean assignId) {_        this.type = type__        this.assignId = assignId__    };bean,definition,parser,param,type,the,type,can,be,null,param,assign,id,whether,to,allow,assigning,id,from,the,id,attribute,on,the,type,there,must,be,getter,setter,id,on,type,class;public,bean,definition,parser,class,type,boolean,assign,id,this,type,type,this,assign,id,assign,id
BeanDefinitionParser -> public BeanDefinitionParser(Class<?> type, boolean assignId);1540108161;Bean definition parser__@param type     the type, can be null_@param assignId whether to allow assigning id from the id attribute on the type_(there must be getter/setter id on type class).;public BeanDefinitionParser(Class<?> type, boolean assignId) {_        this.type = type__        this.assignId = assignId__    };bean,definition,parser,param,type,the,type,can,be,null,param,assign,id,whether,to,allow,assigning,id,from,the,id,attribute,on,the,type,there,must,be,getter,setter,id,on,type,class;public,bean,definition,parser,class,type,boolean,assign,id,this,type,type,this,assign,id,assign,id
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1205928702;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_	};hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1206580265;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {__    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1235562682;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1253686395;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1269574173;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1292665224;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1292665676;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1296917738;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1297968761;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1326392736;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
BeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1540108161;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing.__@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element        the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_    };hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
