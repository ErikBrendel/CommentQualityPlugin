commented;modifiers;parameterAmount;loc;comment;code
false;public;2;2;;public void beforeWrap(RouteContext routeContext, NamedNode definition) { }
false;public;2;62;;public Processor wrap(RouteContext routeContext, Processor processor) {     TransactionErrorHandler answer.     // the goal is to configure the error handler builder on the route as a transacted error handler,     // either its already a transacted or if not we replace it with a transacted one that we configure here     // and wrap the processor in the transacted error handler as we can have transacted routes that change     // propagation behavior, eg: from A required -> B -> requiresNew C (advanced use-case)     // if we should not support this we do not need to wrap the processor as we only need one transacted error handler     // find the existing error handler builder     RouteDefinition route = (RouteDefinition) routeContext.getRoute().     ErrorHandlerBuilder builder = (ErrorHandlerBuilder) route.getErrorHandlerBuilder().     // check if its a ref if so then do a lookup     if (builder instanceof ErrorHandlerBuilderRef) {         // its a reference to a error handler so lookup the reference         ErrorHandlerBuilderRef builderRef = (ErrorHandlerBuilderRef) builder.         String ref = builderRef.getRef().         // and if so then we can safely replace that with our transacted error handler         if (ErrorHandlerBuilderRef.isErrorHandlerBuilderConfigured(ref)) {             LOG.debug("Looking up ErrorHandlerBuilder with ref: {}", ref).             builder = (ErrorHandlerBuilder) ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, ref).         }     }     if (builder != null && builder.supportTransacted()) {         // already a TX error handler then we are good to go         LOG.debug("The ErrorHandlerBuilder configured is already a TransactionErrorHandlerBuilder: {}", builder).         answer = createTransactionErrorHandler(routeContext, processor, builder).         answer.setExceptionPolicy(builder.getExceptionPolicyStrategy()).         // configure our answer based on the existing error handler         builder.configure(routeContext, answer).     } else {         // routes anyway even though the error handler is not transactional, eg ease of configuration         if (builder != null) {             LOG.debug("The ErrorHandlerBuilder configured is not a TransactionErrorHandlerBuilder: {}", builder).         } else {             LOG.debug("No ErrorHandlerBuilder configured, will use default TransactionErrorHandlerBuilder settings").         }         TransactionErrorHandlerBuilder txBuilder = new TransactionErrorHandlerBuilder().         txBuilder.setTransactionTemplate(getTransactionTemplate()).         txBuilder.setSpringTransactionPolicy(this).         if (builder != null) {             // use error handlers from the configured builder             txBuilder.setErrorHandlers(routeContext, builder.getErrorHandlers(routeContext)).         }         answer = createTransactionErrorHandler(routeContext, processor, txBuilder).         answer.setExceptionPolicy(txBuilder.getExceptionPolicyStrategy()).         // configure our answer based on the existing error handler         txBuilder.configure(routeContext, answer).         // set the route to use our transacted error handler builder         route.setErrorHandlerBuilder(txBuilder).     }     // return with wrapped transacted error handler     return answer. }
false;protected;3;9;;protected TransactionErrorHandler createTransactionErrorHandler(RouteContext routeContext, Processor processor, ErrorHandlerBuilder builder) {     TransactionErrorHandler answer.     try {         answer = (TransactionErrorHandler) builder.createErrorHandler(routeContext, processor).     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     return answer. }
false;public;0;10;;public TransactionTemplate getTransactionTemplate() {     if (template == null) {         ObjectHelper.notNull(transactionManager, "transactionManager").         template = new TransactionTemplate(transactionManager).         if (propagationBehaviorName != null) {             template.setPropagationBehaviorName(propagationBehaviorName).         }     }     return template. }
false;public;1;3;;public void setTransactionTemplate(TransactionTemplate template) {     this.template = template. }
false;public;1;3;;public void setTransactionManager(PlatformTransactionManager transactionManager) {     this.transactionManager = transactionManager. }
false;public;0;3;;public PlatformTransactionManager getTransactionManager() {     return transactionManager. }
false;public;1;3;;public void setPropagationBehaviorName(String propagationBehaviorName) {     this.propagationBehaviorName = propagationBehaviorName. }
false;public;0;3;;public String getPropagationBehaviorName() {     return propagationBehaviorName. }
