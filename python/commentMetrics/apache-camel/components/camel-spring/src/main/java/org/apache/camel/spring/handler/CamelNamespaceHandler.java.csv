# id;timestamp;commentText;codeText;commentWords;codeWords
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1422910430;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if ("uri".equals(att.getNodeName()) || "url".equals(att.getNodeName())) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removing whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,uri,equals,att,get,node,name,url,equals,att,get,node,name,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removing,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1422950020;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1423147883;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1423147884;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1423922931;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1424845797;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1427090237;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1461082605;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1461490514;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1464093534;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1465309843;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1465309843;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1465309843;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1465384519;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1467138250;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1470905874;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1479980713;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1484136182;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1485104803;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1486401336;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1487768432;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1489522687;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1489522690;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1497446716;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1497448867;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1511426760;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1511428116;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1524063178;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1536517284;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1536687142;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1536946015;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1540108158;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> public static void doBeforeParse(Node node);1540108159;Prepares the nodes before parsing.;public static void doBeforeParse(Node node) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {__            _            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().startsWith(SPRING_NS + "/v")) {_                doc.renameNode(node, SPRING_NS, node.getNodeName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i))__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,starts,with,v,doc,rename,node,node,node,get,node,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1497446716;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1497448867;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1511426760;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1511428116;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1524063178;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1536517284;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1536687142;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1536946015;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> @Deprecated     protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1540108158;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;@Deprecated_    protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;deprecated,protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1238319359;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1240836238;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1240850097;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1241197351;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1241250876;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1242374586;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1242546974;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1244021070;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1244440695;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1244449987;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1245218692;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1245246198;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1249304191;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1249308562;Uses for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };uses,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1249976012;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1249985984;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId);1249989048;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1249976012;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)__            parserContext.registerComponent(new BeanComponentDefinition(definition, id))__            if (LOG.isDebugEnabled()) {_                LOG.debug("Registered a default ProducerTemplate with id: " + id)__            }_        }__        if (!consumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)__            parserContext.registerComponent(new BeanComponentDefinition(definition, id))__            if (LOG.isDebugEnabled()) {_                LOG.debug("Registered a default ConsumerTemplate with id: " + id)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,parser,context,register,component,new,bean,component,definition,definition,id,if,log,is,debug,enabled,log,debug,registered,a,default,producer,template,with,id,id,if,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,parser,context,register,component,new,bean,component,definition,definition,id,if,log,is,debug,enabled,log,debug,registered,a,default,consumer,template,with,id,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1249985984;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        if (!consumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1249989048;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1251791883;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1251797691;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1253266891;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1253686395;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1255014885;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1255165876;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1261623117;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1262505222;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1262703032;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1265635061;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1266588598;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1267011126;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1267796555;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1267932950;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1268740957;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1268750213;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1269232333;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1269574173;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1269666379;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1270284429;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1271048348;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1271157060;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1272378268;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1272379881;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        _        _        _        boolean canDoTemplate = autoRegisterMap.get("template") != null_                || !parserContext.getRegistry().isBeanNameInUse("template")__        if (!template && canDoTemplate) {_            String id = "template"__            _            Element templateElement = element.getOwnerDocument().createElement("template")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("template")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__        _        _        _        boolean canDoConsumerTemplate = autoRegisterMap.get("consumerTemplate") != null_                || !parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__        if (!consumerTemplate && canDoConsumerTemplate) {_            String id = "consumerTemplate"__            _            Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__            templateElement.setAttribute("id", id)__            BeanDefinitionParser parser = parserMap.get("consumerTemplate")__            BeanDefinition definition = parser.parse(templateElement, parserContext)___            _            autoRegisterBeanDefinition(id, definition, parserContext, contextId)__        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,boolean,can,do,template,auto,register,map,get,template,null,parser,context,get,registry,is,bean,name,in,use,template,if,template,can,do,template,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,boolean,can,do,consumer,template,auto,register,map,get,consumer,template,null,parser,context,get,registry,is,bean,name,in,use,consumer,template,if,consumer,template,can,do,consumer,template,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1274425937;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1275033153;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1275270956;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1275485683;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1275671789;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1276607111;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1279073043;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1279101635;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1281176279;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1281496610;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1281621048;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1284352179;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1287646849;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1289393542;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1292665224;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1296495624;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1296913909;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1297619945;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1297755880;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1298729283;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1303699964;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1306676993;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1306740264;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1307685726;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1326392736;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1329375941;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1329790744;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1329826229;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1329837865;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1374141724;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1378199718;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1381142659;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1392751344;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1392936452;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1415211488;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1422910430;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1422950020;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1423147883;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1423147884;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1423922931;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1424845797;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1427090237;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1461082605;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1461490514;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1464093534;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1465309843;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1465309843;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1465309843;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1465384519;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1467138250;Used for auto registering producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1470905874;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1479980713;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1484136182;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1485104803;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1486401336;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1487768432;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1489522687;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1489522690;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1497446716;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1497448867;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1511426760;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1511428116;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1524063178;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1536517284;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1536687142;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1536946015;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1540108158;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerTemplates(Element element, ParserContext parserContext, String contextId);1540108159;Used for auto registering producer, fluent producer and consumer templates if not already defined in XML.;protected void registerTemplates(Element element, ParserContext parserContext, String contextId) {_        boolean template = false__        boolean fluentTemplate = false__        boolean consumerTemplate = false___        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                String localName = childElement.getLocalName()__                if ("template".equals(localName)) {_                    template = true__                } else if ("fluentTemplate".equals(localName)) {_                    fluentTemplate = true__                } else if ("consumerTemplate".equals(localName)) {_                    consumerTemplate = true__                }_            }_        }__        if (!template) {_            _            _            _            boolean existing = autoRegisterMap.get("template") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("template")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "template"__                _                Element templateElement = element.getOwnerDocument().createElement("template")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("template")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!fluentTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("fluentTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("fluentTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "fluentTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("fluentTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("fluentTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__        if (!consumerTemplate) {_            _            _            _            boolean existing = autoRegisterMap.get("consumerTemplate") != null__            boolean inUse = false__            try {_                inUse = parserContext.getRegistry().isBeanNameInUse("consumerTemplate")__            } catch (BeanCreationException e) {_                _                _                LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored", e)__            }_            if (!inUse || existing) {_                String id = "consumerTemplate"__                _                Element templateElement = element.getOwnerDocument().createElement("consumerTemplate")__                templateElement.setAttribute("id", id)__                BeanDefinitionParser parser = parserMap.get("consumerTemplate")__                BeanDefinition definition = parser.parse(templateElement, parserContext)___                _                autoRegisterBeanDefinition(id, definition, parserContext, contextId)__            }_        }__    };used,for,auto,registering,producer,fluent,producer,and,consumer,templates,if,not,already,defined,in,xml;protected,void,register,templates,element,element,parser,context,parser,context,string,context,id,boolean,template,false,boolean,fluent,template,false,boolean,consumer,template,false,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,string,local,name,child,element,get,local,name,if,template,equals,local,name,template,true,else,if,fluent,template,equals,local,name,fluent,template,true,else,if,consumer,template,equals,local,name,consumer,template,true,if,template,boolean,existing,auto,register,map,get,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,template,element,template,element,element,get,owner,document,create,element,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,fluent,template,boolean,existing,auto,register,map,get,fluent,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,fluent,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,fluent,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,fluent,template,element,template,element,element,get,owner,document,create,element,fluent,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,fluent,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id,if,consumer,template,boolean,existing,auto,register,map,get,consumer,template,null,boolean,in,use,false,try,in,use,parser,context,get,registry,is,bean,name,in,use,consumer,template,catch,bean,creation,exception,e,log,debug,error,checking,is,bean,name,in,use,consumer,template,this,exception,will,be,ignored,e,if,in,use,existing,string,id,consumer,template,element,template,element,element,get,owner,document,create,element,consumer,template,template,element,set,attribute,id,id,bean,definition,parser,parser,parser,map,get,consumer,template,bean,definition,definition,parser,parse,template,element,parser,context,auto,register,bean,definition,id,definition,parser,context,context,id
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1251791883;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1251797691;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1253266891;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1253686395;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1255014885;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1255165876;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1261623117;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1262505222;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1262703032;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1265635061;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1266588598;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1267011126;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1267796555;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1267932950;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1268740957;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1268750213;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1269232333;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1269574173;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1269666379;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1270284429;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1271048348;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1271157060;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1272378268;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1272379881;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1274425937;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1275033153;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1275270956;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1275485683;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1275671789;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1276607111;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1279073043;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1279101635;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1281176279;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1281496610;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element)child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1281621048;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1284352179;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1287646849;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1289393542;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1292665224;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1296495624;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1296913909;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1297619945;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1297755880;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1298729283;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1303699964;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1306676993;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1306740264;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1307685726;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1326392736;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1329375941;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1329790744;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1329826229;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1329837865;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1374141724;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1378199718;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1381142659;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1392751344;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1392936452;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1415211488;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1422910430;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1422950020;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1423147883;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1423147884;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1423922931;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1424845797;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1427090237;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1461082605;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1461490514;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1464093534;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1465309843;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1465309843;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1465309843;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1465384519;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1467138250;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1470905874;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1479980713;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1484136182;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1485104803;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1486401336;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1487768432;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1489522687;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
CamelNamespaceHandler -> protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder);1489522690;Used for auto registering endpoints from the <tt>from</tt> or <tt>to</tt> DSL if they have an id attribute set;protected void registerEndpointsWithIdsDefinedInFromOrToTypes(Element element, ParserContext parserContext, String contextId, Binder<Node> binder) {_        NodeList list = element.getChildNodes()__        int size = list.getLength()__        for (int i = 0_ i < size_ i++) {_            Node child = list.item(i)__            if (child instanceof Element) {_                Element childElement = (Element) child__                Object object = binder.getJAXBNode(child)__                _                if (object instanceof FromDefinition || object instanceof SendDefinition) {_                    registerEndpoint(childElement, parserContext, contextId)__                }_                _                registerEndpointsWithIdsDefinedInFromOrToTypes(childElement, parserContext, contextId, binder)__            }_        }_    };used,for,auto,registering,endpoints,from,the,tt,from,tt,or,tt,to,tt,dsl,if,they,have,an,id,attribute,set;protected,void,register,endpoints,with,ids,defined,in,from,or,to,types,element,element,parser,context,parser,context,string,context,id,binder,node,binder,node,list,list,element,get,child,nodes,int,size,list,get,length,for,int,i,0,i,size,i,node,child,list,item,i,if,child,instanceof,element,element,child,element,element,child,object,object,binder,get,jaxbnode,child,if,object,instanceof,from,definition,object,instanceof,send,definition,register,endpoint,child,element,parser,context,context,id,register,endpoints,with,ids,defined,in,from,or,to,types,child,element,parser,context,context,id,binder
