commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testMatchesPredicate() throws Exception {     matchedEndpoint.expectedMessageCount(1).     notMatchedEndpoint.expectedMessageCount(0).     mySender.doSomething("James").     assertIsSatisfied(matchedEndpoint, notMatchedEndpoint). }
false;public;0;9;;@Test public void testDoesNotMatchPredicate() throws Exception {     matchedEndpoint.expectedMessageCount(0).     notMatchedEndpoint.expectedMessageCount(1).     mySender.doSomething("Rob").     assertIsSatisfied(matchedEndpoint, notMatchedEndpoint). }
false;public;0;10;;@Override @Before public void setUp() throws Exception {     super.setUp().     matchedEndpoint = getMockEndpoint("mock:a").     notMatchedEndpoint = getMockEndpoint("mock:b").     mySender = getMandatoryBean(MySender.class, "mySender"). }
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/example/pojoSender.xml"). }
