commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testTransactionSuccess() throws Exception {     MockEndpoint intercepted = getMockEndpoint("mock:intercepted").     intercepted.expectedBodiesReceived("Hello World").     super.testTransactionSuccess().     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testTransactionRollback() throws Exception {     MockEndpoint intercepted = getMockEndpoint("mock:intercepted").     intercepted.expectedBodiesReceived("Tiger in Action").     super.testTransactionRollback().     assertMockEndpointsSatisfied(). }
false;public;0;19;;public void configure() throws Exception {     interceptSendToEndpoint("direct:(foo|bar)").to("mock:intercepted").     from("direct:okay").transacted().to("direct:foo").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").to("direct:bar").setBody(constant("Donkey in Action")).bean("bookService").     from("direct:foo").to("log:okay").     from("direct:bar").to("mock:fail"). }
false;protected;0;23;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             interceptSendToEndpoint("direct:(foo|bar)").to("mock:intercepted").             from("direct:okay").transacted().to("direct:foo").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").to("direct:bar").setBody(constant("Donkey in Action")).bean("bookService").             from("direct:foo").to("log:okay").             from("direct:bar").to("mock:fail").         }     }. }
