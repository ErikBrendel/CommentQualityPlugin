commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     ctx = new ClassPathXmlApplicationContext("org/apache/camel/spring/handler/ErrorHandlerDefinitionParser.xml"). }
false;public;0;4;;@After public void tearDown() throws Exception {     IOHelper.close(ctx). }
false;public;0;13;;@Test public void testDefaultErrorHandler() {     DefaultErrorHandlerBuilder errorHandler = ctx.getBean("defaultErrorHandler", DefaultErrorHandlerBuilder.class).     assertNotNull(errorHandler).     RedeliveryPolicy policy = errorHandler.getRedeliveryPolicy().     assertNotNull(policy).     assertEquals("Wrong maximumRedeliveries", 2, policy.getMaximumRedeliveries()).     assertEquals("Wrong redeliveryDelay", 0, policy.getRedeliveryDelay()).     assertEquals("Wrong logStackTrace", false, policy.isLogStackTrace()).     errorHandler = ctx.getBean("errorHandler", DefaultErrorHandlerBuilder.class).     assertNotNull(errorHandler). }
false;public;0;8;;@Test public void testTransactionErrorHandler() {     TransactionErrorHandlerBuilder errorHandler = ctx.getBean("transactionErrorHandler", TransactionErrorHandlerBuilder.class).     assertNotNull(errorHandler).     assertNotNull(errorHandler.getTransactionTemplate()).     Processor processor = errorHandler.getOnRedelivery().     assertTrue("It should be MyErrorProcessor", processor instanceof MyErrorProcessor). }
false;public;0;6;;@Test public void testTXErrorHandler() {     TransactionErrorHandlerBuilder errorHandler = ctx.getBean("txEH", TransactionErrorHandlerBuilder.class).     assertNotNull(errorHandler).     assertNotNull(errorHandler.getTransactionTemplate()). }
false;public;0;12;;@Test public void testDeadLetterErrorHandler() {     DeadLetterChannelBuilder errorHandler = ctx.getBean("deadLetterErrorHandler", DeadLetterChannelBuilder.class).     assertNotNull(errorHandler).     assertEquals("Get wrong deadletteruri", "log:dead", errorHandler.getDeadLetterUri()).     RedeliveryPolicy policy = errorHandler.getRedeliveryPolicy().     assertNotNull(policy).     assertEquals("Wrong maximumRedeliveries", 2, policy.getMaximumRedeliveries()).     assertEquals("Wrong redeliveryDelay", 1000, policy.getRedeliveryDelay()).     assertEquals("Wrong logStackTrace", true, policy.isLogHandled()).     assertEquals("Wrong asyncRedeliveryDelayed", true, policy.isAsyncDelayedRedelivery()). }
