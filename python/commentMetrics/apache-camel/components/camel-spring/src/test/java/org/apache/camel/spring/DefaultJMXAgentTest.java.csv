commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;11;;@Override @Before public void setUp() throws Exception {     releaseMBeanServers().     super.setUp().     await().atMost(3, TimeUnit.SECONDS).ignoreExceptions().until(() -> {         mbsc = getMBeanConnection().         return true.     }). }
false;public;0;10;;@Override @After public void tearDown() throws Exception {     try {         releaseMBeanServers().     } finally {         mbsc = null.         super.tearDown().     } }
false;protected;0;7;;protected void releaseMBeanServers() {     List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null).     for (MBeanServer server : servers) {         MBeanServerFactory.releaseMBeanServer(server).     } }
false;public;0;12;;@Test public void testQueryMbeans() throws Exception {     // whats the numbers before, because the JVM can have left overs when unit testing     int before = mbsc.queryNames(new ObjectName("org.apache.camel" + ":type=consumers,*"), null).size().     // start route should enlist the consumer to JMX     context.getRouteController().startRoute("foo").     int after = mbsc.queryNames(new ObjectName("org.apache.camel" + ":type=consumers,*"), null).size().     assertTrue("Should have added consumer to JMX, before: " + before + ", after: " + after, after > before). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/defaultJmxConfig.xml"). }
false;protected;0;6;;protected MBeanServerConnection getMBeanConnection() throws Exception {     if (mbsc == null) {         mbsc = ManagementFactory.getPlatformMBeanServer().     }     return mbsc. }
