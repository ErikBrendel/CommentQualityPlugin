commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/spring/interceptor/transactionalClientDataSource.xml"). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     final DataSource ds = getMandatoryBean(DataSource.class, "dataSource").     jdbc = new JdbcTemplate(ds). }
false;public;0;7;;@Test public void testTransactionSuccess() throws Exception {     template.sendBody("direct:okay", "Hello World").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 3, count). }
false;public;0;13;;@Test public void testTransactionRollback() throws Exception {     try {         template.sendBody("direct:fail", "Hello World").         fail("Should have thrown a RollbackExchangeException").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertTrue(e.getCause().getCause() instanceof RollbackExchangeException).     }     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count). }
false;public;0;18;;public void configure() throws Exception {     // setup the transaction policy     SpringTransactionPolicy required = lookup("PROPAGATION_REQUIRED", SpringTransactionPolicy.class).     // use transaction error handler     errorHandler(transactionErrorHandler(required)).     // must setup policy for each route     from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     // must setup policy for each route     from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").rollback(). }
false;protected;0;24;;protected RouteBuilder createRouteBuilder() throws Exception {     // the standard RouteBuilder     return new SpringRouteBuilder() {          public void configure() throws Exception {             // setup the transaction policy             SpringTransactionPolicy required = lookup("PROPAGATION_REQUIRED", SpringTransactionPolicy.class).             // use transaction error handler             errorHandler(transactionErrorHandler(required)).             // must setup policy for each route             from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             // must setup policy for each route             from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").rollback().         }     }. }
