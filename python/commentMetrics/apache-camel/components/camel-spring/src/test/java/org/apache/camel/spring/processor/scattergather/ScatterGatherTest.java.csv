commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testScatterAndGather() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     // START SNIPPET: e1     // expect the lowest quote     result.expectedBodiesReceived(1).     // END SNIPPET: e1     // START SNIPPET: e2     Map<String, Object> headers = new HashMap<>().     headers.put("listOfVendors", "bean:vendor1, bean:vendor2, bean:vendor3").     headers.put("quoteRequestId", "quoteRequest-1").     template.sendBodyAndHeaders("direct:start", "<quote_request item=\"beer\"/>", headers).     // END SNIPPET: e2     result.assertIsSatisfied(). }
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return createSpringCamelContext(this, "org/apache/camel/spring/processor/scattergather/scatter-gather.xml"). }
