commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testCamelProxy() throws Exception {     AbstractApplicationContext ac = new ClassPathXmlApplicationContext("org/apache/camel/spring/config/CamelProxyTest.xml").     MyProxySender sender = ac.getBean("myProxySender", MyProxySender.class).     String reply = sender.hello("World").     assertEquals("Hello World", reply).     // test sending inOnly message     MyProxySender anotherSender = ac.getBean("myAnotherProxySender", MyProxySender.class).     SpringCamelContext context = ac.getBeansOfType(SpringCamelContext.class).values().iterator().next().     MockEndpoint result = resolveMandatoryEndpoint(context, "mock:result", MockEndpoint.class).     result.expectedBodiesReceived("Hello my friends!").     anotherSender.greeting("Hello my friends!").     result.assertIsSatisfied().     result.reset().     // test sending inOnly message with other sender     MyProxySender myProxySenderWithCamelContextId = ac.getBean("myProxySenderWithCamelContextId", MyProxySender.class).     result.expectedBodiesReceived("Hello my friends again!").     myProxySenderWithCamelContextId.greeting("Hello my friends again!").     result.assertIsSatisfied().     // we're done so let's properly close the application context     IOHelper.close(ac). }
