commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry result = super.createRegistry().     result.bind("NOOP-TX", new NoopPlatformTransactionManager()).     return result. }
false;public;0;9;;@Test public void testMDCTransacted() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     assertEquals("route-a", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).     assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     assertEquals("route-a", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).     assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     assertEquals("route-b", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).     assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")). }
false;public;0;36;;@Override public void configure() throws Exception {     // enable MDC     context.setUseMDCLogging(true).     from("direct:a").routeId("route-a").transacted().process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-a", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).             assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")).         }     }).to("log:foo-before").to("direct:b").to("log:foo-after").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-a", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).             assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")).         }     }).     from("direct:b").routeId("route-b").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-b", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).             assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")).         }     }).to("log:bar").to("mock:result"). }
false;protected;0;41;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable MDC             context.setUseMDCLogging(true).             from("direct:a").routeId("route-a").transacted().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-a", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                     assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")).                 }             }).to("log:foo-before").to("direct:b").to("log:foo-after").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-a", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                     assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")).                 }             }).             from("direct:b").routeId("route-b").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-b", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                     assertEquals(exchange.getIn().getMessageId(), MDC.get("camel.messageId")).                 }             }).to("log:bar").to("mock:result").         }     }. }
