commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     assertEquals("route-a", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).     assertNotNull(MDC.get("camel.transactionKey")). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     assertEquals("route-b", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).     assertNotNull(MDC.get("camel.transactionKey")). }
false;public;0;32;;public void configure() throws Exception {     context.setUseMDCLogging(true).     from("direct:okay").routeId("route-a").transacted().process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-a", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).             assertNotNull(MDC.get("camel.transactionKey")).         }     }).to("log:foo").setBody(constant("Tiger in Action")).bean("bookService").to("log:bar").setBody(constant("Elephant in Action")).bean("bookService").     // marks this route as transacted that will use the single policy defined in the registry     from("direct:fail").routeId("route-b").transacted().process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-b", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).             assertNotNull(MDC.get("camel.transactionKey")).         }     }).to("log:foo2").setBody(constant("Tiger in Action")).bean("bookService").to("log:bar2").setBody(constant("Donkey in Action")).bean("bookService"). }
false;protected;0;36;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             context.setUseMDCLogging(true).             from("direct:okay").routeId("route-a").transacted().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-a", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                     assertNotNull(MDC.get("camel.transactionKey")).                 }             }).to("log:foo").setBody(constant("Tiger in Action")).bean("bookService").to("log:bar").setBody(constant("Elephant in Action")).bean("bookService").             // marks this route as transacted that will use the single policy defined in the registry             from("direct:fail").routeId("route-b").transacted().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-b", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                     assertNotNull(MDC.get("camel.transactionKey")).                 }             }).to("log:foo2").setBody(constant("Tiger in Action")).bean("bookService").to("log:bar2").setBody(constant("Donkey in Action")).bean("bookService").         }     }. }
