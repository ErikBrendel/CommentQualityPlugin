commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract AbstractXmlApplicationContext createApplicationContext().
false;protected;0;7;;@Override protected void setUp() throws Exception {     applicationContext = createApplicationContext().     assertNotNull("Should have created a valid spring context", applicationContext).     super.setUp(). }
false;protected;0;5;;@Override protected void tearDown() throws Exception {     super.tearDown().     IOHelper.close(applicationContext). }
true;public;2;3;/**  * Looks up the mandatory spring bean of the given name and type, failing if  * it is not present or the correct type  */ ;/**  * Looks up the mandatory spring bean of the given name and type, failing if  * it is not present or the correct type  */ public <T> T getMandatoryBean(Class<T> type, String name) {     return applicationContext.getBean(name, type). }
