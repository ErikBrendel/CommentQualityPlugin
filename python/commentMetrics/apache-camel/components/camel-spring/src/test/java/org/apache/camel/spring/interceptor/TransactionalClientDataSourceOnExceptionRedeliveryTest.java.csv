commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;23;;@Test public void testTransactionRollbackWithExchange() throws Exception {     Exchange out = template.send("direct:fail", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count).     assertNotNull(out).     Exception e = out.getException().     assertIsInstanceOf(RuntimeCamelException.class, e).     assertTrue(e.getCause() instanceof IllegalArgumentException).     assertEquals("We don't have Donkeys, only Camels", e.getCause().getMessage()).     assertEquals(true, out.getIn().getHeader(Exchange.REDELIVERED)).     assertEquals(3, out.getIn().getHeader(Exchange.REDELIVERY_COUNTER)).     assertEquals(true, out.getProperty(Exchange.FAILURE_HANDLED)).     assertEquals(false, out.getProperty(Exchange.ERRORHANDLER_HANDLED)). }
false;public;0;20;;public void configure() throws Exception {     onException(IllegalArgumentException.class).maximumRedeliveries(3).     // START SNIPPET: e1     from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     // marks this route as transacted that will use the single policy defined in the registry     from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). // END SNIPPET: e1 }
false;protected;0;24;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             onException(IllegalArgumentException.class).maximumRedeliveries(3).             // START SNIPPET: e1             from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             // marks this route as transacted that will use the single policy defined in the registry             from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         // END SNIPPET: e1         }     }. }
