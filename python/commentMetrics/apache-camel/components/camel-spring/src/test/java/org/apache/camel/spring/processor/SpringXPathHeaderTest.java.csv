commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testChoiceWithHeaderSelectCamel() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:camel").     mock.expectedBodiesReceived("<name>King</name>").     mock.expectedHeaderReceived("type", "Camel").     template.sendBodyAndHeader("direct:in", "<name>King</name>", "type", "Camel").     mock.assertIsSatisfied(). }
false;public;0;9;;@Test public void testChoiceWithNoHeaderSelectDonkey() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:donkey").     mock.expectedBodiesReceived("<name>Kong</name>").     template.sendBody("direct:in", "<name>Kong</name>").     mock.assertIsSatisfied(). }
false;public;0;9;;@Test public void testChoiceWithNoHeaderSelectOther() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:other").     mock.expectedBodiesReceived("<name>Other</name>").     template.sendBody("direct:in", "<name>Other</name>").     mock.assertIsSatisfied(). }
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return createSpringCamelContext(this, "org/apache/camel/spring/processor/SpringXPathHeaderTest-context.xml"). }
