commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/remoting/echo-pojo-direct.xml"). }
false;public;0;5;;@Test public void testPojoOk() throws Exception {     String out = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Claus Claus", out). }
false;public;0;10;;@Test public void testPojoKabom() throws Exception {     try {         template.requestBody("direct:start", "Kabom", String.class).         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(MyEchoRuntimeException.class, e.getCause()).         assertEquals("Damn something went wrong", e.getCause().getMessage()).     } }
false;public;0;14;;@Test public void testPojoBeanKabom() throws Exception {     try {         // use the pojo directly to call the injected endpoint and have the         // original runtime exception thrown         EchoPojoDirect echoPojoDirect = applicationContext.getBean("myPojoDirect", EchoPojoDirect.class).         String out = echoPojoDirect.onEcho("Kabom").         assertNotNull(out).         fail("Should have thrown exception").     } catch (RuntimeException e) {         assertIsInstanceOf(MyEchoRuntimeException.class, e).         assertEquals("Damn something went wrong", e.getMessage()).     } }
