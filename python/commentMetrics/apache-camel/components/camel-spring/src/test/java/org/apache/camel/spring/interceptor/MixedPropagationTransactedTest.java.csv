commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/spring/interceptor/mixedPropagationTransactedTest.xml"). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     // create database and insert dummy data     final DataSource ds = getMandatoryBean(DataSource.class, "dataSource").     jdbc = new JdbcTemplate(ds). }
false;public;0;8;;@Test public void testRequiredOnly() throws Exception {     template.sendBody("direct:required", "Tiger in Action").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals(new Integer(1), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Tiger in Action")).     assertEquals("Number of books", 2, count). }
false;public;0;9;;@Test public void testRequired2Only() throws Exception {     template.sendBody("direct:required2", "Tiger in Action").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     // we do 2x the book service so we should get 2 tiger books     assertEquals(new Integer(2), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Tiger in Action")).     assertEquals("Number of books", 3, count). }
false;public;0;8;;@Test public void testRequiresNewOnly() throws Exception {     template.sendBody("direct:new", "Elephant in Action").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals(new Integer(1), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Elephant in Action")).     assertEquals("Number of books", 2, count). }
false;public;0;8;;@Test public void testRequiredAndRequiresNew() throws Exception {     template.sendBody("direct:requiredAndNew", "Tiger in Action").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals(new Integer(2), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Tiger in Action")).     assertEquals("Number of books", 3, count). }
false;public;0;16;;@Test public void testRequiredOnlyRollback() throws Exception {     try {         template.sendBody("direct:required", "Donkey in Action").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         // expected as we fail         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertTrue(e.getCause().getCause() instanceof IllegalArgumentException).         assertEquals("We don't have Donkeys, only Camels", e.getCause().getCause().getMessage()).     }     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals(new Integer(0), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Donkey in Action")).     assertEquals("Number of books", 1, count). }
false;public;0;16;;@Test public void testRequiresNewOnlyRollback() throws Exception {     try {         template.sendBody("direct:new", "Donkey in Action").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         // expected as we fail         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertTrue(e.getCause().getCause() instanceof IllegalArgumentException).         assertEquals("We don't have Donkeys, only Camels", e.getCause().getCause().getMessage()).     }     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals(new Integer(0), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Donkey in Action")).     assertEquals("Number of books", 1, count). }
false;public;0;17;;@Test public void testRequiredAndNewRollback() throws Exception {     try {         template.sendBody("direct:requiredAndNewRollback", "Tiger in Action").     } catch (RuntimeCamelException e) {         // expeced as we fail         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertTrue(e.getCause().getCause() instanceof IllegalArgumentException).         assertEquals("We don't have Donkeys, only Camels", e.getCause().getCause().getMessage()).     }     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals(new Integer(1), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Tiger in Action")).     assertEquals(new Integer(0), jdbc.queryForObject("select count(*) from books where title = ?", Integer.class, "Donkey in Action")).     // the tiger in action should be committed, but our 2nd route should rollback     assertEquals("Number of books", 2, count). }
false;public;0;22;;public void configure() throws Exception {     from("direct:required").transacted("PROPATATION_REQUIRED").bean("bookService").     from("direct:required2").transacted("PROPATATION_REQUIRED").bean("bookService").bean("bookService").     from("direct:new").transacted("PROPAGATION_REQUIRES_NEW").bean("bookService").     from("direct:requiredAndNew").to("direct:required", "direct:new").     from("direct:requiredAndNewRollback").to("direct:required").setBody(constant("Donkey in Action")).to("direct:new"). }
false;protected;0;26;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             from("direct:required").transacted("PROPATATION_REQUIRED").bean("bookService").             from("direct:required2").transacted("PROPATATION_REQUIRED").bean("bookService").bean("bookService").             from("direct:new").transacted("PROPAGATION_REQUIRES_NEW").bean("bookService").             from("direct:requiredAndNew").to("direct:required", "direct:new").             from("direct:requiredAndNewRollback").to("direct:required").setBody(constant("Donkey in Action")).to("direct:new").         }     }. }
