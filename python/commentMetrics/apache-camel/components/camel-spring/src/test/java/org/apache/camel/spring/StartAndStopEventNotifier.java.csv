commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;1;15;;@Override public void notify(CamelEvent event) throws Exception {     // (CamelContextStartedEvent) is send     if (event.getType() == Type.CamelContextStarted) {         log.info("Sending a message on startup...").         template.sendBody("file:target/startandstop/start.txt", "Starting").     } else if (event.getType() == Type.CamelContextStopping) {         // Note: there is also a CamelContextStoppedEvent which is send         // afterwards, when Camel has been fully stopped.         log.info("Sending a message on stopping...").         template.sendBody("file:target/startandstop/stop.txt", "Stopping").     } }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return true. }
false;protected;0;4;;protected void doStart() throws Exception {     template = camelContext.createProducerTemplate().     template.start(). }
false;protected;0;3;;protected void doStop() throws Exception {     template.stop(). }
