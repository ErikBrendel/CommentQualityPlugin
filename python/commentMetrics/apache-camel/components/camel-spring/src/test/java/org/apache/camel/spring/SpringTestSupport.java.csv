# id;timestamp;commentText;codeText;commentWords;codeWords
SpringTestSupport -> protected Class excludeRoute();1245218692;Template method used to exclude a {@link org.apache.camel.Routes} from the test camel context;protected Class excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,routes,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class excludeRoute();1247064147;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class excludeRoute();1258057678;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1245218692;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = (ExcludingPackageScanClassResolver)routeExcludingContext.getBean("excludingResolver")__        excludingResolver.setExcludedClasses(new HashSet<Class>(Arrays.asList(excludeRoutes())))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,excluding,package,scan,class,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,resolver,set,excluded,classes,new,hash,set,class,arrays,as,list,exclude,routes,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1247064147;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = (ExcludingPackageScanClassResolver)routeExcludingContext.getBean("excludingResolver")__        excludingResolver.setExcludedClasses(new HashSet<Class>(Arrays.asList(excludeRoutes())))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,excluding,package,scan,class,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,resolver,set,excluded,classes,new,hash,set,class,arrays,as,list,exclude,routes,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1258057678;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = (ExcludingPackageScanClassResolver)routeExcludingContext.getBean("excludingResolver")__        excludingResolver.setExcludedClasses(new HashSet<Class>(Arrays.asList(excludeRoutes())))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,excluding,package,scan,class,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,resolver,set,excluded,classes,new,hash,set,class,arrays,as,list,exclude,routes,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1258064053;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = (ExcludingPackageScanClassResolver)routeExcludingContext.getBean("excludingResolver")__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,excluding,package,scan,class,resolver,route,excluding,context,get,bean,excluding,resolver,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1297968761;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = (ExcludingPackageScanClassResolver)routeExcludingContext.getBean("excludingResolver")__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,excluding,package,scan,class,resolver,route,excluding,context,get,bean,excluding,resolver,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1304765032;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = (ExcludingPackageScanClassResolver)routeExcludingContext.getBean("excludingResolver")__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,excluding,package,scan,class,resolver,route,excluding,context,get,bean,excluding,resolver,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1304777891;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = (ExcludingPackageScanClassResolver)routeExcludingContext.getBean("excludingResolver")__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,excluding,package,scan,class,resolver,route,excluding,context,get,bean,excluding,resolver,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1323680223;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1324569391;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1329345879;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1329744445;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1329968193;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1330173455;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludeRoutes()))__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1343393250;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1392400400;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1495703392;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1495704737;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1524063178;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1535627650;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1540108158;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1540108159;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1540108161;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1540108164;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1540108165;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected ApplicationContext getRouteExcludingApplicationContext();1540472504;Create a parent context that initializes a_{@link org.apache.camel.spi.PackageScanClassResolver} to exclude a set of given classes from_being resolved. Typically this is used at test time to exclude certain routes,_which might otherwise be just noisy, from being discovered and initialized._<p/>_To use this filtering mechanism it is necessary to provide the_{@link ApplicationContext} returned from here as the parent context to_your test context e.g.__<pre>_protected AbstractXmlApplicationContext createApplicationContext() {_return new ClassPathXmlApplicationContext(new String[] {&quot_test-context.xml&quot_}, getRouteExcludingApplicationContext())___</pre>__This will, in turn, call the template methods <code>excludedRoutes</code>_and <code>excludedRoute</code> to determine the classes to be excluded from scanning.__@see org.apache.camel.spring.config.scan.SpringComponentScanTest for an example._@return ApplicationContext a parent {@link ApplicationContext} configured_to exclude certain classes from package scanning;protected ApplicationContext getRouteExcludingApplicationContext() {_        GenericApplicationContext routeExcludingContext = new GenericApplicationContext()__        routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__        routeExcludingContext.refresh()___        ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__        List<Class<?>> excluded = Arrays.asList(excludeRoutes())__        excludingResolver.setExcludedClasses(new HashSet<>(excluded))___        return routeExcludingContext__    };create,a,parent,context,that,initializes,a,link,org,apache,camel,spi,package,scan,class,resolver,to,exclude,a,set,of,given,classes,from,being,resolved,typically,this,is,used,at,test,time,to,exclude,certain,routes,which,might,otherwise,be,just,noisy,from,being,discovered,and,initialized,p,to,use,this,filtering,mechanism,it,is,necessary,to,provide,the,link,application,context,returned,from,here,as,the,parent,context,to,your,test,context,e,g,pre,protected,abstract,xml,application,context,create,application,context,return,new,class,path,xml,application,context,new,string,quot,test,context,xml,quot,get,route,excluding,application,context,pre,this,will,in,turn,call,the,template,methods,code,excluded,routes,code,and,code,excluded,route,code,to,determine,the,classes,to,be,excluded,from,scanning,see,org,apache,camel,spring,config,scan,spring,component,scan,test,for,an,example,return,application,context,a,parent,link,application,context,configured,to,exclude,certain,classes,from,package,scanning;protected,application,context,get,route,excluding,application,context,generic,application,context,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,exclude,routes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,return,route,excluding,context
SpringTestSupport -> protected Class<?> excludeRoute();1258064053;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1297968761;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1304765032;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1304777891;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1323680223;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1324569391;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1329345879;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1329744445;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1329968193;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1330173455;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1343393250;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1392400400;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1495703392;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1495704737;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1524063178;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1535627650;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1540108158;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1540108159;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1540108161;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1540108164;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1540108165;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?> excludeRoute();1540472504;Template method used to exclude a {@link org.apache.camel.Route} from the test camel context;protected Class<?> excludeRoute() {_        return null__    };template,method,used,to,exclude,a,link,org,apache,camel,route,from,the,test,camel,context;protected,class,exclude,route,return,null
SpringTestSupport -> protected Class<?>[] excludeRoutes();1258064053;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1297968761;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1304765032;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1304777891;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1323680223;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1324569391;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1329345879;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1329744445;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1329968193;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1330173455;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1343393250;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1392400400;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1495703392;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1495704737;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1524063178;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1535627650;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1540108158;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1540108159;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1540108161;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1540108164;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1540108165;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class<?>[] excludeRoutes();1540472504;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class<?>[] excludeRoutes() {_        Class<?> excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1179416274;Looks up the mandatory spring bean of the given name and type, failing if it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        }_        else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1183375392;Looks up the mandatory spring bean of the given name and type, failing if it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        }_        else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1186522380;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1189091341;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1189094548;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1203821224;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1206580265;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1218169108;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1245218692;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1247064147;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1258057678;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1258064053;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1297968761;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1304765032;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1304777891;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        Object value = applicationContext.getBean(name)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        if (type.isInstance(value)) {_            return type.cast(value)__        } else {_            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type " + ObjectHelper.className(value))__            return null__        }_    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,object,value,application,context,get,bean,name,assert,not,null,no,spring,bean,found,for,name,name,value,if,type,is,instance,value,return,type,cast,value,else,fail,spring,bean,name,is,not,an,instanceof,type,get,name,but,is,of,type,object,helper,class,name,value,return,null
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1323680223;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1324569391;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1329345879;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1329744445;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1329968193;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1330173455;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1343393250;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1392400400;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1495703392;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1495704737;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1524063178;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1535627650;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1540108158;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1540108159;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1540108161;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1540108164;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1540108165;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> public <T> T getMandatoryBean(Class<T> type, String name);1540472504;Looks up the mandatory spring bean of the given name and type, failing if_it is not present or the correct type;public <T> T getMandatoryBean(Class<T> type, String name) {_        T value = applicationContext.getBean(name, type)__        assertNotNull("No spring bean found for name <" + name + ">", value)__        return value__    };looks,up,the,mandatory,spring,bean,of,the,given,name,and,type,failing,if,it,is,not,present,or,the,correct,type;public,t,t,get,mandatory,bean,class,t,type,string,name,t,value,application,context,get,bean,name,type,assert,not,null,no,spring,bean,found,for,name,name,value,return,value
SpringTestSupport -> protected Class[] excludeRoutes();1245218692;Template method used to exclude {@link org.apache.camel.Routes} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class[] excludeRoutes() {_        Class excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,routes,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class[] excludeRoutes();1247064147;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class[] excludeRoutes() {_        Class excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
SpringTestSupport -> protected Class[] excludeRoutes();1258057678;Template method used to exclude {@link org.apache.camel.Route} from the test time context_route scanning__@return Class[] the classes to be excluded from test time context route scanning;protected Class[] excludeRoutes() {_        Class excludedRoute = excludeRoute()__        return excludedRoute != null ? new Class[] {excludedRoute} : new Class[0]__    };template,method,used,to,exclude,link,org,apache,camel,route,from,the,test,time,context,route,scanning,return,class,the,classes,to,be,excluded,from,test,time,context,route,scanning;protected,class,exclude,routes,class,excluded,route,exclude,route,return,excluded,route,null,new,class,excluded,route,new,class,0
