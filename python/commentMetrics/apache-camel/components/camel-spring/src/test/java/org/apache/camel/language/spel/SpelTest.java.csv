commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSpelExpressions() throws Exception {     assertExpression("#{exchange}", exchange).     assertExpression("#{exchange.getIn().body}", "<hello id='m123'>world!</hello>").     assertExpression("#{getRequest().body}", "<hello id='m123'>world!</hello>").     assertExpression("#{request.body}", "<hello id='m123'>world!</hello>").     assertExpression("#{request.Headers['foo']}", "abc").     assertExpression("#{getRequest().Headers['foo']}", "abc").     assertExpression("#{request.Headers['foo'] == 'abc'}", true).     assertExpression("#{request.headers['bar'] == 123}", true).     assertExpression("#{request.headers['bar'] > 10}", true).     assertExpression("#{6 / -3}", -2). }
false;public;0;6;;@Test public void testSpelPredicates() throws Exception {     assertPredicate("#{request.headers['foo'].startsWith('a')}").     assertPredicate("#{request.headers['foo'] == 'abc'}").     assertPredicateFails("#{request.headers['foo'] == 'badString'}"). }
false;public;0;5;;@Test public void testGetOutFalseKeepsNullOutMessage() throws Exception {     assertExpression("exchange.hasOut()", false).     assertFalse(exchange.hasOut()). }
false;public;0;5;;@Test public void testResponseCreatesOutMessage() throws Exception {     assertExpression("#{response.body}", null).     assertTrue(exchange.hasOut()). }
false;protected;0;3;;protected String getLanguageName() {     return "spel". }
