commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/spring/interceptor/springTransactionalClientDataSourceMinimalConfiguration.xml"). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     // create database and insert dummy data     final DataSource ds = getMandatoryBean(DataSource.class, "dataSource").     jdbc = new JdbcTemplate(ds). }
false;public;0;7;;@Test public void testTransactionSuccess() throws Exception {     template.sendBody("direct:okay", "Hello World").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 3, count). }
false;public;0;15;;@Test public void testTransactionRollback() throws Exception {     try {         template.sendBody("direct:fail", "Hello World").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         // expected as we fail         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertTrue(e.getCause().getCause() instanceof IllegalArgumentException).         assertEquals("We don't have Donkeys, only Camels", e.getCause().getCause().getMessage()).     }     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count). }
