commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/SpringMDCTest.xml"). }
false;public;0;9;;@Test public void testMDC() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testMDCTwoMessages() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World", "Bye World").     template.sendBody("direct:a", "Hello World").     template.sendBody("direct:a", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertEquals("route-a", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertEquals("route-b", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")). }
