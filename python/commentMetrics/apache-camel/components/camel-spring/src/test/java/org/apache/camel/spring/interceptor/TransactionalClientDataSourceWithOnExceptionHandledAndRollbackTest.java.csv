commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testTransactionRollback() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:error").     mock.expectedMessageCount(1).     try {         template.requestBody("direct:fail", "Hello World", String.class).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {     // expected     }     assertMockEndpointsSatisfied().     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count). }
false;public;0;21;;public void configure() throws Exception {     // use required as transaction policy     SpringTransactionPolicy required = lookup("PROPAGATION_REQUIRED", SpringTransactionPolicy.class).     // configure to use transaction error handler and pass on the required as it will fetch     // the transaction manager from it that it needs     errorHandler(transactionErrorHandler(required)).     onException(IllegalArgumentException.class).handled(true).to("mock:error").rollback().     from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). }
false;protected;0;25;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             // use required as transaction policy             SpringTransactionPolicy required = lookup("PROPAGATION_REQUIRED", SpringTransactionPolicy.class).             // configure to use transaction error handler and pass on the required as it will fetch             // the transaction manager from it that it needs             errorHandler(transactionErrorHandler(required)).             onException(IllegalArgumentException.class).handled(true).to("mock:error").rollback().             from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         }     }. }
