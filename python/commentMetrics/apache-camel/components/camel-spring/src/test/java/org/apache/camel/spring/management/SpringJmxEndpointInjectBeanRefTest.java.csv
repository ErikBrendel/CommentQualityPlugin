commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/management/SpringJmxEndpointInjectBeanRefTest.xml"). }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;16;;@Test public void testJmxEndpointInjectBean() throws Exception {     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"seda\"").     assertTrue(mbeanServer.isRegistered(on)).     on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"seda://foo\"").     assertTrue(mbeanServer.isRegistered(on)).     String uri = (String) mbeanServer.getAttribute(on, "EndpointUri").     assertEquals("seda://foo", uri).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
