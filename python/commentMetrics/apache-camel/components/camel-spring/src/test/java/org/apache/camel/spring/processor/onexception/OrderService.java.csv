# id;timestamp;commentText;codeText;commentWords;codeWords
OrderService -> public Object orderFailed(@Headers Map in, @Body String payload, @OutHeaders Map out);1224610510;This method creates the response to the caller if the order could not be processed_@param in      the in headers_@param payload the in payload_@param out     the out headers_@return the out payload;public Object orderFailed(@Headers Map in, @Body String payload, @OutHeaders Map out) {_            out.put("customerid", in.get("customerid"))__            out.put("orderid", "failed")__            return "Order ERROR"__        };this,method,creates,the,response,to,the,caller,if,the,order,could,not,be,processed,param,in,the,in,headers,param,payload,the,in,payload,param,out,the,out,headers,return,the,out,payload;public,object,order,failed,headers,map,in,body,string,payload,out,headers,map,out,out,put,customerid,in,get,customerid,out,put,orderid,failed,return,order,error
OrderService -> public Object orderFailed(@Headers Map in, @Body String payload, @OutHeaders Map out);1224749242;This method creates the response to the caller if the order could not be_processed__@param in the in headers_@param payload the in payload_@param out the out headers_@return the out payload;public Object orderFailed(@Headers Map in, @Body String payload, @OutHeaders Map out) {_        out.put("customerid", in.get("customerid"))__        out.put("orderid", "failed")__        return "Order ERROR"__    };this,method,creates,the,response,to,the,caller,if,the,order,could,not,be,processed,param,in,the,in,headers,param,payload,the,in,payload,param,out,the,out,headers,return,the,out,payload;public,object,order,failed,headers,map,in,body,string,payload,out,headers,map,out,out,put,customerid,in,get,customerid,out,put,orderid,failed,return,order,error
OrderService -> public Object orderFailed(@Headers Map in, @Body String payload, @OutHeaders Map out);1230199048;This method creates the response to the caller if the order could not be_processed__@param in the in headers_@param payload the in payload_@param out the out headers_@return the out payload;public Object orderFailed(@Headers Map in, @Body String payload, @OutHeaders Map out) {_        out.put("customerid", in.get("customerid"))__        out.put("orderid", "failed")__        return "Order ERROR"__    };this,method,creates,the,response,to,the,caller,if,the,order,could,not,be,processed,param,in,the,in,headers,param,payload,the,in,payload,param,out,the,out,headers,return,the,out,payload;public,object,order,failed,headers,map,in,body,string,payload,out,headers,map,out,out,put,customerid,in,get,customerid,out,put,orderid,failed,return,order,error
OrderService -> public Object handleOrder(@Headers Map in, @Body String payload, @OutHeaders Map out)         throws OrderFailedException;1224749242;This method handle our order input and return the order__@param in the in headers_@param payload the in payload_@param out the out headers_@return the out payload_@throws OrderFailedException is thrown if the order can not be processed;public Object handleOrder(@Headers Map in, @Body String payload, @OutHeaders Map out)_        throws OrderFailedException {_        out.put("customerid", in.get("customerid"))__        if ("Order: kaboom".equals(payload)) {_            throw new OrderFailedException("Can not order: kaboom")__        } else {_            out.put("orderid", "123")__            return "Order OK"__        }_    };this,method,handle,our,order,input,and,return,the,order,param,in,the,in,headers,param,payload,the,in,payload,param,out,the,out,headers,return,the,out,payload,throws,order,failed,exception,is,thrown,if,the,order,can,not,be,processed;public,object,handle,order,headers,map,in,body,string,payload,out,headers,map,out,throws,order,failed,exception,out,put,customerid,in,get,customerid,if,order,kaboom,equals,payload,throw,new,order,failed,exception,can,not,order,kaboom,else,out,put,orderid,123,return,order,ok
OrderService -> public Object handleOrder(@Headers Map in, @Body String payload, @OutHeaders Map out)         throws OrderFailedException;1230199048;This method handle our order input and return the order__@param in the in headers_@param payload the in payload_@param out the out headers_@return the out payload_@throws OrderFailedException is thrown if the order cannot be processed;public Object handleOrder(@Headers Map in, @Body String payload, @OutHeaders Map out)_        throws OrderFailedException {_        out.put("customerid", in.get("customerid"))__        if ("Order: kaboom".equals(payload)) {_            throw new OrderFailedException("Cannot order: kaboom")__        } else {_            out.put("orderid", "123")__            return "Order OK"__        }_    };this,method,handle,our,order,input,and,return,the,order,param,in,the,in,headers,param,payload,the,in,payload,param,out,the,out,headers,return,the,out,payload,throws,order,failed,exception,is,thrown,if,the,order,cannot,be,processed;public,object,handle,order,headers,map,in,body,string,payload,out,headers,map,out,throws,order,failed,exception,out,put,customerid,in,get,customerid,if,order,kaboom,equals,payload,throw,new,order,failed,exception,cannot,order,kaboom,else,out,put,orderid,123,return,order,ok
