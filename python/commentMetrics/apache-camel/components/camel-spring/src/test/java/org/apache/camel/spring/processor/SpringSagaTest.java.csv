commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testSendAMessageWithinASaga() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:end").     resultEndpoint.expectedBodiesReceived("correct").     MockEndpoint completionEndpoint = getMockEndpoint("mock:completion").     completionEndpoint.expectedMessageCount(1).     completionEndpoint.expectedHeaderReceived("myOptionKey", "myOptionValue").     completionEndpoint.expectedHeaderReceived("myOptionKey2", "myOptionValue2").     sendBody("direct:start", "correct").     resultEndpoint.assertIsSatisfied().     completionEndpoint.assertIsSatisfied(). }
false;public;0;16;;@Test public void testCompensationWithinASaga() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:end").     resultEndpoint.expectedMessageCount(1).     resultEndpoint.setResultWaitTime(100).     MockEndpoint compensationEndpoint = getMockEndpoint("mock:compensation").     compensationEndpoint.expectedMessageCount(1).     compensationEndpoint.expectedHeaderReceived("myOptionKey", "myOptionValue").     compensationEndpoint.expectedHeaderReceived("myOptionKey2", "myOptionValue2").     sendBody("direct:start", "fail").     compensationEndpoint.assertIsSatisfied().     resultEndpoint.assertIsNotSatisfied(). }
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return createSpringCamelContext(this, "org/apache/camel/spring/processor/saga.xml"). }
