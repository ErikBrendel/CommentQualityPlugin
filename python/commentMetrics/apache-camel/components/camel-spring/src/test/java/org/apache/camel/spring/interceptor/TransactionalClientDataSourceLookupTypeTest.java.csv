commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;public void configure() throws Exception {     // START SNIPPET: e1     // lookup the transaction policy     SpringTransactionPolicy required = lookup(SpringTransactionPolicy.class).     // Notice: transactionErrorHandler is in SpringRouteBuilder     if (useTransactionErrorHandler) {         // useTransactionErrorHandler is only used for unit testing to reuse code         // for doing a 2nd test without this transaction error handler, so ignore         // this. For spring based transaction, end users are encouraged to use the         // transaction error handler instead of the default DeadLetterChannel.         errorHandler(transactionErrorHandler(required)).     }     // END SNIPPET: e1     // START SNIPPET: e2     // set the required policy for this route     from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     // set the required policy for this route     from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). // END SNIPPET: e2 }
false;protected;0;35;;protected RouteBuilder createRouteBuilder() throws Exception {     // the standard RouteBuilder     return new SpringRouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // lookup the transaction policy             SpringTransactionPolicy required = lookup(SpringTransactionPolicy.class).             // Notice: transactionErrorHandler is in SpringRouteBuilder             if (useTransactionErrorHandler) {                 // useTransactionErrorHandler is only used for unit testing to reuse code                 // for doing a 2nd test without this transaction error handler, so ignore                 // this. For spring based transaction, end users are encouraged to use the                 // transaction error handler instead of the default DeadLetterChannel.                 errorHandler(transactionErrorHandler(required)).             }             // END SNIPPET: e1             // START SNIPPET: e2             // set the required policy for this route             from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             // set the required policy for this route             from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         // END SNIPPET: e2         }     }. }
