commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return createSpringCamelContext(this, "org/apache/camel/spring/processor/idempotent/fileConsumerIdempotentTest.xml"). }
false;public;0;22;;@SuppressWarnings("unchecked") @Override @Before public void setUp() throws Exception {     deleteDirectory("target/fileidempotent").     createDirectory("target/fileidempotent").     File file = new File("target/fileidempotent/.filestore.dat").     FileOutputStream fos = new FileOutputStream(file).     // insert existing name to the file repo, so we should skip this file     String name = FileUtil.normalizePath(new File("target/fileidempotent/report.txt").getAbsolutePath()).     fos.write(name.getBytes()).     fos.write(LS.getBytes()).     fos.close().     super.setUp().     // add a file to the repo     repo = context.getRegistry().lookupByNameAndType("fileStore", IdempotentRepository.class). }
false;public;0;20;;@Test public void testIdempotentLoad() throws Exception {     // send two files (report.txt exists already in idempotent repo)     template.sendBodyAndHeader("file://target/fileidempotent/", "Hello World", Exchange.FILE_NAME, "report.txt").     template.sendBodyAndHeader("file://target/fileidempotent/", "Bye World", Exchange.FILE_NAME, "report2.txt").     // consume the file the first time     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     assertMockEndpointsSatisfied().     // wait for the exchange to be done, as it only append to idempotent repo after success     oneExchangeDone.matchesMockWaitTime().     String name = FileUtil.normalizePath(new File("target/fileidempotent/report.txt").getAbsolutePath()).     assertTrue("Should contain file: " + name, repo.contains(name)).     String name2 = FileUtil.normalizePath(new File("target/fileidempotent/report2.txt").getAbsolutePath()).     assertTrue("Should contain file: " + name2, repo.contains(name2)). }
