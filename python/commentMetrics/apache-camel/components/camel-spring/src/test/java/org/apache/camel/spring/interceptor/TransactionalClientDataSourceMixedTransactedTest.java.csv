commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testTransactionRollback() throws Exception {     // through the onException clause below we've marked the exceptions containing the message     // "Donkey" as being handled so that we don't count with any exception on the client side.     template.sendBody("direct:fail", "Hello World").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     // should get 2 books as the first operation will succeed and we are not transacted     assertEquals("Number of books", 2, count). }
false;public;0;16;;public void configure() throws Exception {     // ignore failure if its something with Donkey     onException(IllegalArgumentException.class).onWhen(exceptionMessage().contains("Donkey")).handled(true).     from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").     from("direct:fail").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             // ignore failure if its something with Donkey             onException(IllegalArgumentException.class).onWhen(exceptionMessage().contains("Donkey")).handled(true).             from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").             from("direct:fail").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         }     }. }
