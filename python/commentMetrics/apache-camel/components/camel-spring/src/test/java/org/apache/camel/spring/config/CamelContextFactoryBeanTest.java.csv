commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     // disable JMX     System.setProperty(JmxSystemPropertyKeys.DISABLED, "true").     super.setUp(). }
false;public;0;10;;@Override @After public void tearDown() throws Exception {     super.tearDown().     // enable JMX     System.clearProperty(JmxSystemPropertyKeys.DISABLED).     // we're done so let's properly close the application context     IOHelper.close(applicationContext). }
false;public;0;7;;@Test public void testClassPathRouteLoading() throws Exception {     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/camelContextFactoryBean.xml").     CamelContext context = (CamelContext) applicationContext.getBean("camel").     assertValidContext(context). }
false;public;0;7;;@Test public void testClassPathRouteLoadingUsingNamespaces() throws Exception {     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/camelContextFactoryBean.xml").     CamelContext context = applicationContext.getBean("camel3", CamelContext.class).     assertValidContext(context). }
false;public;0;12;;@Test public void testGenericApplicationContextUsingNamespaces() throws Exception {     applicationContext = new GenericApplicationContext().     XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader((BeanDefinitionRegistry) applicationContext).     xmlReader.loadBeanDefinitions(new ClassPathResource("org/apache/camel/spring/camelContextFactoryBean.xml")).     // lets refresh to inject the applicationContext into beans     applicationContext.refresh().     CamelContext context = applicationContext.getBean("camel3", CamelContext.class).     assertValidContext(context). }
false;public;0;22;;@Test public void testXMLRouteLoading() throws Exception {     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/camelContextFactoryBean.xml").     CamelContext context = applicationContext.getBean("camel2", CamelContext.class).     assertNotNull("No context found!", context).     List<Route> routes = context.getRoutes().     LOG.debug("Found routes: " + routes).     assertNotNull("Should have found some routes", routes).     assertEquals("One Route should be found", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Processor processor = consumerRoute.getProcessor().         assertNotNull(processor).         assertEndpointUri(key, "seda://test.c").     } }
false;public;0;9;;@Test public void testRouteBuilderRef() throws Exception {     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/camelContextRouteBuilderRef.xml").     CamelContext context = applicationContext.getBean("camel5", CamelContext.class).     assertNotNull("No context found!", context).     assertValidContext(context). }
false;public;0;14;;@Test public void testAutoStartup() throws Exception {     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/camelContextFactoryBean.xml").     SpringCamelContext context = applicationContext.getBean("camel4", SpringCamelContext.class).     assertFalse(context.isAutoStartup()).     // there is 1 route but its not started     assertEquals(1, context.getRoutes().size()).     context = applicationContext.getBean("camel3", SpringCamelContext.class).     assertTrue(context.isAutoStartup()).     // there is 1 route but and its started     assertEquals(1, context.getRoutes().size()). }
