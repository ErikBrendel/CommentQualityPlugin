commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testTransactionRollback() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:error").     mock.expectedMessageCount(1).     String out = template.requestBody("direct:fail", "Hello World", String.class).     assertEquals("Sorry", out).     assertMockEndpointsSatisfied().     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count). }
false;public;0;14;;public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).to("mock:error").transform(constant("Sorry")).markRollbackOnly().     from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).to("mock:error").transform(constant("Sorry")).markRollbackOnly().             from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         }     }. }
