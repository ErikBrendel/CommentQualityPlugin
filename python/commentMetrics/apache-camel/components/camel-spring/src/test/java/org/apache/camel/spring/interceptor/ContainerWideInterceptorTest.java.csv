commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     ac = new ClassPathXmlApplicationContext("/org/apache/camel/spring/interceptor/ContainerWideInterceptorTest.xml").     camel1 = ac.getBean("camel1", CamelContext.class).     camel2 = ac.getBean("camel2", CamelContext.class).     myInterceptor = ac.getBean("myInterceptor", ContainerWideInterceptor.class). }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     super.tearDown().     camel2.stop().     camel1.stop(). }
false;public;0;18;;@Test public void testOne() throws Exception {     int start = myInterceptor.getCount().     MockEndpoint result = camel1.getEndpoint("mock:result", MockEndpoint.class).     result.expectedBodiesReceived("Hello World").     ProducerTemplate template = camel1.createProducerTemplate().     template.start().     template.sendBody("direct:one", "Hello World").     template.stop().     result.assertIsSatisfied().     // lets see if the counter is +1 since last (has 1 step in the route)     int delta = myInterceptor.getCount() - start.     assertEquals("Should have been counted +1", 1, delta). }
false;public;0;18;;@Test public void testTwo() throws Exception {     int start = myInterceptor.getCount().     MockEndpoint result = camel2.getEndpoint("mock:result", MockEndpoint.class).     result.expectedBodiesReceived("Bye World").     ProducerTemplate template = camel2.createProducerTemplate().     template.start().     template.sendBody("direct:two", "Bye World").     template.stop().     result.assertIsSatisfied().     // lets see if the counter is +2 since last (has 2 steps in the route)     int delta = myInterceptor.getCount() - start.     assertEquals("Should have been counted +2", 2, delta). }
