commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     super.setUp().     if (context != null) {         context.stop().     }     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/config/scan/componentScan.xml").     context = applicationContext.getBean("camelScan", ModelCamelContext.class).     template = context.createProducerTemplate(). }
false;public;0;8;;@Override @After public void tearDown() throws Exception {     // we're done so let's properly close the application context     IOHelper.close(applicationContext).     super.tearDown(). }
false;public;0;10;;@Test public void testExcludedRoute() throws InterruptedException {     assertEquals(1, context.getRoutes().size()).     MockEndpoint mock = getMockEndpoint("mock:definitelyShouldNeverReceiveExchange").     mock.expectedMessageCount(0).     sendBody("seda:shouldNeverRecieveExchange", "dropped like a hot rock").     mock.await(500, TimeUnit.MILLISECONDS).     mock.assertIsSatisfied(). }
false;public;0;7;;@Test public void testSpringComponentScanFeature() throws InterruptedException {     template.sendBody("direct:start", "request").     MockEndpoint mock = getMockEndpoint("mock:end").     mock.expectedMessageCount(1).     mock.assertIsSatisfied(). }
