commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     super.setUp().     // create database and insert dummy data     final DataSource ds = getMandatoryBean(DataSource.class, "dataSource").     jdbc = new JdbcTemplate(ds). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/issues/SpringTransactionErrorHandlerAndContextScopedOnExceptionIssueTest.xml"). }
false;public;0;17;;@Test public void testSpringTXOnExceptionIssueCommit() throws Exception {     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count).     // we succeeded so no message to on exception     getMockEndpoint("mock:onException").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Lion in Action").     assertMockEndpointsSatisfied().     // we did commit so there should be 2 books     count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 2, count). }
false;public;0;24;;@Test public void testSpringTXOnExceptionIssueRollback() throws Exception {     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count).     getMockEndpoint("mock:onException").expectedMessageCount(1).     // we failed so no message to result     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Donkey in Action").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertEquals("We don't have Donkeys, only Camels", e.getCause().getCause().getMessage()).     }     assertMockEndpointsSatisfied().     // we did rollback so there should be 1 books     count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count). }
