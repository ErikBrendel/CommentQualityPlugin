commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testTransactionRollback() throws Exception {     try {         template.sendBody("direct:fail", "Hello World").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         // expected as we fail         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertEquals("We don't have Donkeys, only Camels", e.getCause().getMessage()).     }     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     // should get 2 books as the first operation will succeed and we are not transacted     assertEquals("Number of books", 2, count). }
false;public;0;9;;public void configure() throws Exception {     from("direct:okay").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     from("direct:fail").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             from("direct:okay").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             from("direct:fail").setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         }     }. }
