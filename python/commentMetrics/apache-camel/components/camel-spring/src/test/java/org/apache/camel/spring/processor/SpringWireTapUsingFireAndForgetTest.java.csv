commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return createSpringCamelContext(this, "org/apache/camel/spring/processor/SpringWireTapUsingFireAndForgetTest.xml"). }
false;public;0;21;;@Test public void testFireAndForgetUsingExpression() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // should be different exchange instances     Exchange e1 = result.getReceivedExchanges().get(0).     Exchange e2 = foo.getReceivedExchanges().get(0).     assertNotSame("Should not be same Exchange", e1, e2).     // should have same from endpoint     assertEquals("direct://start", e1.getFromEndpoint().getEndpointUri()).     assertEquals("direct://start", e2.getFromEndpoint().getEndpointUri()). }
false;public;0;22;;@Test public void testFireAndForgetUsingProcessor() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedBodiesReceived("Bye World").     foo.expectedHeaderReceived("foo", "bar").     template.sendBody("direct:start2", "Hello World").     assertMockEndpointsSatisfied().     // should be different exchange instances     Exchange e1 = result.getReceivedExchanges().get(0).     Exchange e2 = foo.getReceivedExchanges().get(0).     assertNotSame("Should not be same Exchange", e1, e2).     // should have same from endpoint     assertEquals("direct://start2", e1.getFromEndpoint().getEndpointUri()).     assertEquals("direct://start2", e2.getFromEndpoint().getEndpointUri()). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // here we prepare the new exchange by setting the payload on the exchange     // on the IN message.     exchange.getIn().setBody("Bye World").     exchange.getIn().setHeader("foo", "bar"). }
