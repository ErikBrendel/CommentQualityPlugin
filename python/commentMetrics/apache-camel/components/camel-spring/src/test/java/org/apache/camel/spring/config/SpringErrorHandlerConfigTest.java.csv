commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/config/SpringErrorHandlerConfigTest.xml"). }
false;public;0;9;;@Test public void testOk() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:dlc").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testDLC() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:dlc").expectedBodiesReceived("Kaboom").     template.sendBody("direct:start", "Kaboom").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Damn"). }
false;public;0;18;;@Test public void testDefaultEH() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:dlc").expectedMessageCount(0).     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Damn").         }     }).     assertMockEndpointsSatisfied().     assertTrue(exchange.isFailed()).     assertEquals("Damn cannot do this", exchange.getException(IllegalArgumentException.class).getMessage()).     assertEquals(true, exchange.getIn().getHeader(Exchange.REDELIVERED)).     assertEquals(2, exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER)). }
