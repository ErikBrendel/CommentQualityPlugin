commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testSendingCamelExchangeToEndpointResultsInValidApplicationEventAfterTheRefreshEvent() throws Exception {     MockEndpoint result = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     result.expectedMessageCount(2).     template.sendBodyAndHeader(uri, expectedBody, "cheese", 123).     result.assertIsSatisfied().     // lets test we receive the context refreshed event     Exchange exchange = result.getReceivedExchanges().get(0).     Object body = exchange.getIn().getBody(ContextRefreshedEvent.class).     log.info("Received body: " + body).     assertNotNull(body).     // lets test we receive the camel event     exchange = result.getReceivedExchanges().get(1).     body = exchange.getIn().getBody().     log.info("Received body: " + body).     CamelEvent event = assertIsInstanceOf(CamelEvent.class, body).     Object actualBody = event.getExchange().getIn().getBody().     assertEquals("Received event body", expectedBody, actualBody). }
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/event/camelContext.xml"). }
