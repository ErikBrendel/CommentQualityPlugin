commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/file/SpringFileLanguageCBRTest.xml"). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/cbr").     super.setUp(). }
false;public;0;10;;@Test public void testTxt() throws Exception {     getMockEndpoint("mock:txt").expectedMessageCount(1).     getMockEndpoint("mock:dat").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBodyAndHeader("file://target/cbr", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testDat() throws Exception {     getMockEndpoint("mock:txt").expectedMessageCount(0).     getMockEndpoint("mock:dat").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBodyAndHeader("file://target/cbr", "Bye World", Exchange.FILE_NAME, "bye.dat").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testOther() throws Exception {     getMockEndpoint("mock:txt").expectedMessageCount(0).     getMockEndpoint("mock:dat").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(1).     template.sendBodyAndHeader("file://target/cbr", "Hi World", Exchange.FILE_NAME, "hi.foo").     assertMockEndpointsSatisfied(). }
