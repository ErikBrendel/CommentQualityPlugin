commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testLogMask() throws Exception {     final AbstractXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/component/log/SpringLogMaskTest-context.xml").     SpringCamelContext context = SpringCamelContext.springCamelContext(applicationContext, true).     context.start().     MockEndpoint mock = context.getEndpoint("mock:mask", MockEndpoint.class).     ProducerTemplate template = context.createProducerTemplate().     template.sendBodyAndHeader("direct:mask", "password=passw0rd@", "headerPassword", "#header-password$").     template.sendBodyAndProperty("direct:mask", "password=passw0rd@", "propertyPassphrase", "#property-passphrase$").     context.stop().     mock.expectedMessageCount(2). }
false;public;0;12;;@Test public void testLogMaskDisabled() throws Exception {     final AbstractXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/component/log/SpringLogMaskTest-context.xml").     SpringCamelContext context = SpringCamelContext.springCamelContext(applicationContext, true).     context.start().     MockEndpoint mock = context.getEndpoint("mock:no-mask", MockEndpoint.class).     ProducerTemplate template = context.createProducerTemplate().     template.sendBodyAndHeader("direct:no-mask", "password=passw0rd@", "headerPassword", "#header-password$").     template.sendBodyAndProperty("direct:no-mask", "password=passw0rd@", "propertyPassphrase", "#property-passphrase$").     context.stop().     mock.expectedMessageCount(2). }
false;public;0;11;;@Test public void testCustomLogMask() throws Exception {     final AbstractXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/component/log/SpringCustomLogMaskTest-context.xml").     SpringCamelContext context = SpringCamelContext.springCamelContext(applicationContext, true).     MockMaskingFormatter customFormatter = applicationContext.getBean(MaskingFormatter.CUSTOM_LOG_MASK_REF, MockMaskingFormatter.class).     context.start().     ProducerTemplate template = context.createProducerTemplate().     template.sendBodyAndHeader("direct:mock", "password=passw0rd@", "headerPassword", "#header-password$").     context.stop().     Assert.assertTrue(customFormatter.received.contains("password=passw0rd@")). }
false;public;1;5;;@Override public String format(String source) {     received = source.     return source. }
