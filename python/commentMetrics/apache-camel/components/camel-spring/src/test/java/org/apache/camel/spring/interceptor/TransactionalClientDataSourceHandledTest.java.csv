commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testTransactionRollback() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:error").     mock.expectedMessageCount(1).     template.sendBody("direct:fail", "Hello World").     assertMockEndpointsSatisfied().     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     // there should be 2 books as the first insert operation succeeded     assertEquals("Number of books", 2, count). }
false;public;0;21;;public void configure() throws Exception {     // START SNIPPET: e1     // on exception is also supported     // so if an IllegalArgumentException is thrown then we route it to the mock:error     // since we mark it as handled then the exchange will NOT rollback     onException(IllegalArgumentException.class).handled(true).to("mock:error").     from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). // END SNIPPET: e1 }
false;protected;0;25;;protected RouteBuilder createRouteBuilder() throws Exception {     return new SpringRouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // on exception is also supported             // so if an IllegalArgumentException is thrown then we route it to the mock:error             // since we mark it as handled then the exchange will NOT rollback             onException(IllegalArgumentException.class).handled(true).to("mock:error").             from("direct:okay").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             from("direct:fail").transacted().setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         // END SNIPPET: e1         }     }. }
