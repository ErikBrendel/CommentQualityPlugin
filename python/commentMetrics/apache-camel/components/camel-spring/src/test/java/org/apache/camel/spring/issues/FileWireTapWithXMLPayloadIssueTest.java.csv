commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/xmldata").     super.setUp().     template.sendBodyAndHeader("file://target/xmldata", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<sample>\n<test>Helloooo</test>\n</sample>", Exchange.FILE_NAME, "hello.xml"). }
false;public;0;15;;@Test public void testWireTapXpathExpression() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     MockEndpoint tap = getMockEndpoint("mock:wiretap").     tap.expectedMessageCount(1).     assertMockEndpointsSatisfied().     String dataResult = mock.getReceivedExchanges().get(0).getIn().getBody(String.class).     String dataTap = tap.getReceivedExchanges().get(0).getIn().getBody(String.class).     assertEquals(dataResult, dataTap). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/issues/FileWireTapWithXMLPayloadIssueTest.xml"). }
