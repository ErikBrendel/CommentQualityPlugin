commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testLogEipMask() throws Exception {     final AbstractXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/logEipMaskTest.xml").     SpringCamelContext context = SpringCamelContext.springCamelContext(applicationContext, true).     MockEndpoint mock = context.getEndpoint("mock:foo", MockEndpoint.class).     mock.expectedMessageCount(1).     context.start().     context.createProducerTemplate().sendBody("direct:foo", "mask password=\"my passw0rd!\"").     context.createProducerTemplate().sendBody("direct:noMask", "no-mask password=\"my passw0rd!\"").     mock.assertIsSatisfied().     context.stop(). }
false;public;0;10;;@Test public void testCustomFormatter() throws Exception {     final AbstractXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/logEipCustomFormatterTest.xml").     SpringCamelContext context = SpringCamelContext.springCamelContext(applicationContext, true).     context.start().     MockMaskingFormatter customFormatter = applicationContext.getBean(MaskingFormatter.CUSTOM_LOG_MASK_REF, MockMaskingFormatter.class).     context.createProducerTemplate().sendBody("direct:foo", "mock password=\"my passw0rd!\"").     Assert.assertEquals("Got mock password=\"my passw0rd!\"", customFormatter.received).     context.stop(). }
false;public;1;5;;@Override public String format(String source) {     received = source.     return source. }
