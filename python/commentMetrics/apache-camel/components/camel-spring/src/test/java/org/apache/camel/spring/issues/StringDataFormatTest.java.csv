commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/issues/stringDataFormatTest.xml"). }
false;public;0;14;;@Test public void testMarshalString() throws Exception {     // include a UTF-8 char in the text \u0E08 is a Thai elephant     String body = "Hello Thai Elephant \u0E08".     MockEndpoint mock = getMockEndpoint("mock:marshal").     mock.expectedMessageCount(1).     byte[] out = (byte[]) template.requestBody("direct:marshal", body).     assertMockEndpointsSatisfied().     String result = new String(out, "UTF-8").     assertEquals(body, result). }
false;public;0;13;;@Test public void testUnMarshalString() throws Exception {     // include a UTF-8 char in the text \u0E08 is a Thai elephant     byte[] body = "Hello Thai Elephant \u0E08".getBytes().     MockEndpoint mock = getMockEndpoint("mock:unmarshal").     mock.expectedMessageCount(1).     String out = (String) template.requestBody("direct:unmarshal", body).     assertMockEndpointsSatisfied().     assertEquals(new String(body, "UTF-8"), out). }
