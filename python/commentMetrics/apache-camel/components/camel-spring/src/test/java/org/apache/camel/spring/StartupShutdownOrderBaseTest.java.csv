commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void assertValid() {     assertThat(closed).as("AutoCloseable bean should be closed").isTrue(). }
false;public;0;5;;@Override public void close() {     assertThat(camelIsStopped(context)).as("AutoCloseable bean should be stopped after Camel").isTrue().     closed = true. }
false;;1;4;;@Bean AutoCloseableBean autoCloseableBean(final ApplicationContext context) {     return new AutoCloseableBean(context). }
false;;1;4;;@Bean BeanWithShutdownMethod beanWithCloseMethod(final ApplicationContext context) {     return new BeanWithShutdownMethod(context). }
false;;1;4;;@Bean DisposeBean disposedBean(final ApplicationContext context) {     return new DisposeBean(context). }
false;;1;4;;@Bean InitBean initBean(final ApplicationContext context) {     return new InitBean(context). }
false;;1;4;;@Bean Lifecycle lifecycleBean(final ApplicationContext context) {     return new LifecycleBean(context). }
false;public;0;4;;@Override public void assertValid() {     assertThat(shutdown).as("Bean with shutdown method should be shutdown").isTrue(). }
false;public;0;4;;public void shutdown() {     assertThat(camelIsStopped(context)).as("@Bean with close() method should be stopped after Camel").isTrue().     shutdown = true. }
false;public;0;4;;@Override public void assertValid() {     assertThat(disposed).as("DisposableBean should be disposed").isTrue(). }
false;public;0;5;;@Override public void destroy() throws Exception {     assertThat(camelIsStopped(context)).as("DisposableBean should be stopped after Camel").isTrue().     disposed = true. }
false;public;0;5;;@Override public void afterPropertiesSet() throws Exception {     assertThat(camelIsStopped(context)).as("initializing bean should be started before Camel").isTrue().     initialized = true. }
false;public;0;4;;@Override public void assertValid() {     assertThat(initialized).as("InitializingBean should be initialized").isTrue(). }
false;public;0;5;;@Override public void assertValid() {     assertThat(started).as("Lifecycle should have been started").isTrue().     assertThat(stopped).as("Lifecycle should be stopped").isTrue(). }
false;public;0;4;;@Override public int getPhase() {     return 0. }
false;public;0;4;;@Override public boolean isAutoStartup() {     return true. }
false;public;0;4;;@Override public boolean isRunning() {     return started. }
false;public;0;5;;@Override public void start() {     assertThat(camelIsStopped(context)).as("lifecycle bean should be started before Camel").isTrue().     started = true. }
false;public;0;5;;@Override public void stop() {     assertThat(camelIsStopped(context)).as("lifecycle bean should be stopped after Camel").isTrue().     stopped = true. }
false;public;1;5;;@Override public void stop(final Runnable callback) {     stop().     callback.run(). }
false;;0;1;;void assertValid().
false;public;0;14;;@Test public void camelContextShouldBeStartedLastAndStoppedFirst() {     final ConfigurableApplicationContext context = createContext().     final ServiceSupport camelContext = (ServiceSupport) context.getBean(CamelContext.class).     final Map<String, TestState> testStates = context.getBeansOfType(TestState.class).     assertThat(camelContext.isStarted()).as("Camel context should be started").isTrue().     context.close().     assertThat(camelContext.isStopped()).as("Camel context should be stopped").isTrue().     testStates.values().stream().forEach(TestState::assertValid). }
false;abstract;0;1;;abstract ConfigurableApplicationContext createContext().
false;static;1;3;;static ServiceSupport camel(final ApplicationContext context) {     return (ServiceSupport) context.getBean(CamelContext.class). }
false;static;1;3;;static boolean camelIsStarted(final ApplicationContext context) {     return camel(context).isStarted(). }
false;static;1;3;;static boolean camelIsStopped(final ApplicationContext context) {     return !camelIsStarted(context). }
