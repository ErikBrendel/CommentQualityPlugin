commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) {     Message in = exchange.getIn().     in.setHeader("name", "James").     in.setBody(body). }
false;public;0;23;;@Test public void testXMLRouteLoading() throws Exception {     applicationContext = createApplicationContext().     SpringCamelContext context = applicationContext.getBeansOfType(SpringCamelContext.class).values().iterator().next().     assertValidContext(context).     // now lets send a message     ProducerTemplate template = context.createProducerTemplate().     template.start().     template.send("direct:start", new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             in.setHeader("name", "James").             in.setBody(body).         }     }).     template.stop().     MyProcessor myProcessor = applicationContext.getBean("myProcessor", MyProcessor.class).     List<Exchange> list = myProcessor.getExchanges().     assertEquals("Should have received a single exchange: " + list, 1, list.size()). }
false;protected;1;9;;protected void assertValidContext(SpringCamelContext context) {     assertNotNull("No context found!", context).     List<Route> routes = context.getRoutes().     assertNotNull("Should have some routes defined", routes).     assertEquals("Number of routes defined", 1, routes.size()).     Route route = routes.get(0).     log.debug("Found route: " + route). }
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/routingUsingProcessor.xml"). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     IOHelper.close(applicationContext). }
