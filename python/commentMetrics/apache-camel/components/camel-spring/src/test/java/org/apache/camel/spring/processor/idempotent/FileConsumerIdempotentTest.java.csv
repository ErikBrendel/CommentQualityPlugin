commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return createSpringCamelContext(this, "org/apache/camel/spring/processor/idempotent/fileConsumerIdempotentTest.xml"). }
false;public;0;9;;@SuppressWarnings("unchecked") @Override @Before public void setUp() throws Exception {     deleteDirectory("target/fileidempotent").     super.setUp().     repo = context.getRegistry().lookupByNameAndType("fileStore", IdempotentRepository.class). }
false;public;0;28;;@Test public void testIdempotent() throws Exception {     // send a file     template.sendBodyAndHeader("file://target/fileidempotent/", "Hello World", Exchange.FILE_NAME, "report.txt").     // consume the file the first time     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     assertMockEndpointsSatisfied().     // reset mock and set new expectations     mock.reset().     mock.expectedMessageCount(0).     // sleep to let the consumer try to poll the file     mock.setResultMinimumWaitTime(50).     // move file back     File file = new File("target/fileidempotent/done/report.txt").     File renamed = new File("target/fileidempotent/report.txt").     file.renameTo(renamed).     // should NOT consume the file again, let 2 secs pass to let the consumer try to consume it but it should not     assertMockEndpointsSatisfied().     String name = FileUtil.normalizePath(new File("target/fileidempotent/report.txt").getAbsolutePath()).     assertTrue("Should contain file: " + name, repo.contains(name)). }
