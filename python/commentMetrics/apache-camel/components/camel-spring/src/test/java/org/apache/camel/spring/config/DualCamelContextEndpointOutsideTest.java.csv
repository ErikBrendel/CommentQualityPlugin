commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/spring/config/DualCamelContextEndpointOutsideTest.xml"). }
false;public;0;26;;@Test public void testDualCamelContextEndpoint() throws Exception {     CamelContext camelA = applicationContext.getBean("camel-A", CamelContext.class).     assertNotNull(camelA).     CamelContext camelB = applicationContext.getBean("camel-B", CamelContext.class).     assertNotNull(camelB).     MockEndpoint mockA = camelA.getEndpoint("mock:mock1", MockEndpoint.class).     mockA.expectedBodiesReceived("Hello A").     MockEndpoint mockB = camelB.getEndpoint("mock:mock2", MockEndpoint.class).     mockB.expectedBodiesReceived("Hello B").     ProducerTemplate producer1 = camelA.createProducerTemplate().     producer1.sendBody("direct:start1", "Hello A").     ProducerTemplate producer2 = camelB.createProducerTemplate().     producer2.sendBody("direct:start2", "Hello B").     // make sure we properly stop the services we created     ServiceHelper.stopService(producer1, producer2).     mockA.assertIsSatisfied().     mockB.assertIsSatisfied(). }
