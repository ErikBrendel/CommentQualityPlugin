commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;// START SNIPPET: e3 ;// START SNIPPET: e3 @Test public void testTransactionSuccess() throws Exception {     template.sendBody("direct:okay", "Hello World").     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 3, count). }
true;public;0;15;// START SNIPPET: e4 ;// END SNIPPET: e3 // START SNIPPET: e4 @Test public void testTransactionRollback() throws Exception {     try {         template.sendBody("direct:fail", "Hello World").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         // expected as we fail         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertTrue(e.getCause().getCause() instanceof IllegalArgumentException).         assertEquals("We don't have Donkeys, only Camels", e.getCause().getCause().getMessage()).     }     int count = jdbc.queryForObject("select count(*) from books", Integer.class).     assertEquals("Number of books", 1, count). }
false;public;0;28;;public void configure() throws Exception {     // START SNIPPET: e1     // lookup the transaction policy     SpringTransactionPolicy required = lookup("PROPAGATION_REQUIRED", SpringTransactionPolicy.class).     // Notice: transactionErrorHandler is in SpringRouteBuilder     if (isUseTransactionErrorHandler()) {         // useTransactionErrorHandler is only used for unit testing to reuse code         // for doing a 2nd test without this transaction error handler, so ignore         // this. For spring based transaction, end users are encouraged to use the         // transaction error handler instead of the default DeadLetterChannel.         errorHandler(transactionErrorHandler(required)).     }     // END SNIPPET: e1     // START SNIPPET: e2     // set the required policy for this route     from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").     // set the required policy for this route     from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService"). // END SNIPPET: e2 }
false;protected;0;35;;// END SNIPPET: e4 protected RouteBuilder createRouteBuilder() throws Exception {     // the standard RouteBuilder     return new SpringRouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // lookup the transaction policy             SpringTransactionPolicy required = lookup("PROPAGATION_REQUIRED", SpringTransactionPolicy.class).             // Notice: transactionErrorHandler is in SpringRouteBuilder             if (isUseTransactionErrorHandler()) {                 // useTransactionErrorHandler is only used for unit testing to reuse code                 // for doing a 2nd test without this transaction error handler, so ignore                 // this. For spring based transaction, end users are encouraged to use the                 // transaction error handler instead of the default DeadLetterChannel.                 errorHandler(transactionErrorHandler(required)).             }             // END SNIPPET: e1             // START SNIPPET: e2             // set the required policy for this route             from("direct:okay").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Elephant in Action")).bean("bookService").             // set the required policy for this route             from("direct:fail").policy(required).setBody(constant("Tiger in Action")).bean("bookService").setBody(constant("Donkey in Action")).bean("bookService").         // END SNIPPET: e2         }     }. }
