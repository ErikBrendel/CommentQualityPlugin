commented;modifiers;parameterAmount;loc;comment;code
true;public;0;82;/**  * Getting the s3 aws client that is used.  * @return Amazon S3 Client.  */ ;/**  * Getting the s3 aws client that is used.  * @return Amazon S3 Client.  */ public AmazonS3 getS3Client() {     AmazonS3 client = null.     AmazonS3ClientBuilder clientBuilder = null.     AmazonS3EncryptionClientBuilder encClientBuilder = null.     ClientConfiguration clientConfiguration = null.     if (configuration.hasProxyConfiguration()) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         clientConfiguration.setMaxConnections(maxConnections).     } else {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setMaxConnections(maxConnections).     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (!configuration.isUseEncryption()) {             clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else if (configuration.isUseEncryption()) {             StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials()).             encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).withEncryptionMaterials(encryptionMaterialsProvider).         } else {             clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider).         }         if (!configuration.isUseEncryption()) {             if (ObjectHelper.isNotEmpty(configuration.getRegion())) {                 clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).             }             clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess()).             client = clientBuilder.build().         } else {             if (ObjectHelper.isNotEmpty(configuration.getRegion())) {                 encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).             }             encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess()).             client = encClientBuilder.build().         }     } else {         if (!configuration.isUseEncryption()) {             clientBuilder = AmazonS3ClientBuilder.standard().         } else if (configuration.isUseEncryption()) {             StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials()).             encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider).         } else {             clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).         }         if (!configuration.isUseEncryption()) {             if (ObjectHelper.isNotEmpty(configuration.getRegion())) {                 clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).             }             clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess()).             client = clientBuilder.build().         } else {             if (ObjectHelper.isNotEmpty(configuration.getRegion())) {                 encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).             }             encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess()).             client = encClientBuilder.build().         }     }     return client. }
