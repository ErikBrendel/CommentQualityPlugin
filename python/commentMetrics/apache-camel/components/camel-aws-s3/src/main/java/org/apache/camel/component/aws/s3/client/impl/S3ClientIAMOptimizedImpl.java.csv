commented;modifiers;parameterAmount;loc;comment;code
true;public;0;54;/**  * Getting the s3 aws client that is used.  * @return Amazon S3 Client.  */ ;/**  * Getting the s3 aws client that is used.  * @return Amazon S3 Client.  */ public AmazonS3 getS3Client() {     AmazonS3 client = null.     AmazonS3ClientBuilder clientBuilder = null.     AmazonS3EncryptionClientBuilder encClientBuilder = null.     ClientConfiguration clientConfiguration = null.     if (configuration.hasProxyConfiguration()) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         clientConfiguration.setMaxConnections(maxConnections).     } else {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setMaxConnections(maxConnections).     }     if (configuration.getAccessKey() != null || configuration.getSecretKey() != null) {         LOG.trace("Do not pass in unnecessary static credentials when selecting the IAM credential option.").     }     if (!configuration.isUseEncryption()) {         clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(new InstanceProfileCredentialsProvider(false)).     } else if (configuration.isUseEncryption()) {         StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials()).         encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider).withCredentials(new InstanceProfileCredentialsProvider(false)).     } else {         clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(new InstanceProfileCredentialsProvider(false)).     }     if (!configuration.isUseEncryption()) {         if (ObjectHelper.isNotEmpty(configuration.getRegion())) {             clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).         }         clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess()).         client = clientBuilder.build().     } else {         if (ObjectHelper.isNotEmpty(configuration.getRegion())) {             encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).         }         encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess()).         client = encClientBuilder.build().     }     return client. }
