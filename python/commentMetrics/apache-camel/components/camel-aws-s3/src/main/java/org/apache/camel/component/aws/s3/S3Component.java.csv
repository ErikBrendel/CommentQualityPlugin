commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;29;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     final S3Configuration configuration = this.configuration.copy().     setProperties(configuration, parameters).     if (remaining == null || remaining.trim().length() == 0) {         throw new IllegalArgumentException("Bucket name must be specified.").     }     if (remaining.startsWith("arn:")) {         remaining = remaining.substring(remaining.lastIndexOf(":") + 1, remaining.length()).     }     configuration.setBucketName(remaining).     if (ObjectHelper.isEmpty(configuration.getAccessKey())) {         setAccessKey(accessKey).     }     if (ObjectHelper.isEmpty(configuration.getSecretKey())) {         setSecretKey(secretKey).     }     if (ObjectHelper.isEmpty(configuration.getRegion())) {         setRegion(region).     }     if (!configuration.isUseIAMCredentials() && configuration.getAmazonS3Client() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null)) {         throw new IllegalArgumentException("useIAMCredentials is set to false, AmazonS3Client or accessKey and secretKey must be specified").     }     S3Endpoint endpoint = new S3Endpoint(uri, this, configuration).     setProperties(endpoint, parameters).     return endpoint. }
false;public;0;3;;public S3Configuration getConfiguration() {     return configuration. }
true;public;1;3;/**  * The AWS S3 default configuration  */ ;/**  * The AWS S3 default configuration  */ public void setConfiguration(S3Configuration configuration) {     this.configuration = configuration. }
false;public;0;3;;public String getAccessKey() {     return configuration.getAccessKey(). }
true;public;1;3;/**  * Amazon AWS Access Key  */ ;/**  * Amazon AWS Access Key  */ public void setAccessKey(String accessKey) {     configuration.setAccessKey(accessKey). }
false;public;0;3;;public String getSecretKey() {     return configuration.getSecretKey(). }
true;public;1;3;/**  * Amazon AWS Secret Key  */ ;/**  * Amazon AWS Secret Key  */ public void setSecretKey(String secretKey) {     configuration.setSecretKey(secretKey). }
false;public;0;3;;public String getRegion() {     return configuration.getRegion(). }
true;public;1;3;/**  * The region where the bucket is located. This option is used in the  * `com.amazonaws.services.s3.model.CreateBucketRequest`.  */ ;/**  * The region where the bucket is located. This option is used in the  * `com.amazonaws.services.s3.model.CreateBucketRequest`.  */ public void setRegion(String region) {     configuration.setRegion(region). }
