commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;String getCamelBucket() {     return "mycamelbucket". }
false;public;0;10;;@Before public void setup() throws Exception {     super.setUp().     testFile = FileUtil.createTempFile("test", "file", new File("target/tmp")).     FileWriter writer = new FileWriter(testFile).     writer.write("This is my bucket content.").     writer.close(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     FileUtil.deleteFile(testFile). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").     exchange.getIn().setBody(testFile). }
false;public;0;22;;@Test public void sendFile() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = templateKeep.send("direct:startKeep", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").             exchange.getIn().setBody(testFile).         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0), true).     PutObjectRequest putObjectRequest = client.putObjectRequests.get(0).     assertEquals(getCamelBucket(), putObjectRequest.getBucketName()).     assertResponseMessage(exchange.getIn()).     assertFileExists(testFile.getAbsolutePath()). }
false;;2;23;;void assertResultExchange(Exchange resultExchange, boolean delete) {     assertIsInstanceOf(InputStream.class, resultExchange.getIn().getBody()).     if (!delete) {         // assert on the file content only in case the "deleteAfterWrite" option is NOT enabled         // in which case we would still have the file and thereby could assert on it's content         assertEquals("This is my bucket content.", resultExchange.getIn().getBody(String.class)).     }     assertEquals(getCamelBucket(), resultExchange.getIn().getHeader(S3Constants.BUCKET_NAME)).     assertEquals("CamelUnitTest", resultExchange.getIn().getHeader(S3Constants.KEY)).     // not enabled on this bucket     assertNull(resultExchange.getIn().getHeader(S3Constants.VERSION_ID)).     assertNull(resultExchange.getIn().getHeader(S3Constants.LAST_MODIFIED)).     assertNull(resultExchange.getIn().getHeader(S3Constants.E_TAG)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_TYPE)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_ENCODING)).     assertEquals(0L, resultExchange.getIn().getHeader(S3Constants.CONTENT_LENGTH)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_DISPOSITION)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_MD5)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CACHE_CONTROL)).     assertNotNull(resultExchange.getIn().getHeader(S3Constants.USER_METADATA)).     assertEquals(0, resultExchange.getIn().getHeader(S3Constants.S3_HEADERS, Map.class).size()). }
false;;1;4;;void assertResponseMessage(Message message) {     assertEquals("3a5c8b1ad448bca04584ecb55b836264", message.getHeader(S3Constants.E_TAG)).     assertNull(message.getHeader(S3Constants.VERSION_ID)). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     client = new AmazonS3ClientMock().     registry.bind("amazonS3Client", client).     return registry. }
false;public;0;13;;@Override public void configure() throws Exception {     String awsEndpoint = "aws-s3://" + getCamelBucket() + "?amazonS3Client=#amazonS3Client&region=us-west-1".     from("direct:startKeep").to(awsEndpoint + "&deleteAfterWrite=false").     from("direct:startDelete").to(awsEndpoint + "&deleteAfterWrite=true").     from(awsEndpoint + "&maxMessagesPerPoll=5").to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String awsEndpoint = "aws-s3://" + getCamelBucket() + "?amazonS3Client=#amazonS3Client&region=us-west-1".             from("direct:startKeep").to(awsEndpoint + "&deleteAfterWrite=false").             from("direct:startDelete").to(awsEndpoint + "&deleteAfterWrite=true").             from(awsEndpoint + "&maxMessagesPerPoll=5").to("mock:result").         }     }. }
