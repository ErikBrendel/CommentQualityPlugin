commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").     exchange.getIn().setBody("This is my bucket content."). }
false;public;0;17;;@Test public void sendInOnly() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").             exchange.getIn().setBody("This is my bucket content.").         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)).     assertResponseMessage(exchange.getIn()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").     exchange.getIn().setBody("This is my bucket content."). }
false;public;0;17;;@Test public void sendInOut() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").             exchange.getIn().setBody("This is my bucket content.").         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)).     assertResponseMessage(exchange.getOut()). }
false;private;1;15;;private void assertResultExchange(Exchange resultExchange) {     assertIsInstanceOf(InputStream.class, resultExchange.getIn().getBody()).     assertEquals("This is my bucket content.", resultExchange.getIn().getBody(String.class)).     assertEquals("mycamelbucket", resultExchange.getIn().getHeader(S3Constants.BUCKET_NAME)).     assertEquals("CamelUnitTest", resultExchange.getIn().getHeader(S3Constants.KEY)).     // not enabled on this bucket     assertNull(resultExchange.getIn().getHeader(S3Constants.VERSION_ID)).     assertNull(resultExchange.getIn().getHeader(S3Constants.LAST_MODIFIED)).     assertNull(resultExchange.getIn().getHeader(S3Constants.E_TAG)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_TYPE)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_ENCODING)).     assertEquals(0L, resultExchange.getIn().getHeader(S3Constants.CONTENT_LENGTH)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_DISPOSITION)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CONTENT_MD5)).     assertNull(resultExchange.getIn().getHeader(S3Constants.CACHE_CONTROL)). }
false;private;1;4;;private void assertResponseMessage(Message message) {     assertEquals("3a5c8b1ad448bca04584ecb55b836264", message.getHeader(S3Constants.E_TAG)).     assertNull(message.getHeader(S3Constants.VERSION_ID)). }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/aws/s3/S3ComponentSpringTest-context.xml"). }
