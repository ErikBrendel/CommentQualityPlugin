commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;String getCamelBucket() {     return "mycamelbucket". }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").     exchange.getIn().setBody("Peppe"). }
false;public;0;20;;@Test public void sendString() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = templateSendString.send("direct:sendString", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(S3Constants.KEY, "CamelUnitTest").             exchange.getIn().setBody("Peppe").         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0), true).     PutObjectRequest putObjectRequest = client.putObjectRequests.get(0).     assertEquals(getCamelBucket(), putObjectRequest.getBucketName()).     assertResponseMessage(exchange.getIn()). }
false;;2;3;;void assertResultExchange(Exchange resultExchange, boolean delete) {     assertIsInstanceOf(String.class, resultExchange.getIn().getBody()). }
false;;1;4;;void assertResponseMessage(Message message) {     assertEquals("3a5c8b1ad448bca04584ecb55b836264", message.getHeader(S3Constants.E_TAG)).     assertNull(message.getHeader(S3Constants.VERSION_ID)). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     client = new AmazonS3ClientMock().     registry.bind("amazonS3Client", client).     return registry. }
false;public;0;7;;@Override public void configure() throws Exception {     String awsEndpoint = "aws-s3://" + getCamelBucket() + "?amazonS3Client=#amazonS3Client&region=us-west-1".     from("direct:sendString").to(awsEndpoint + "&deleteAfterWrite=false").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String awsEndpoint = "aws-s3://" + getCamelBucket() + "?amazonS3Client=#amazonS3Client&region=us-west-1".             from("direct:sendString").to(awsEndpoint + "&deleteAfterWrite=false").to("mock:result").         }     }. }
