commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(S3Constants.KEY, "camelKey"). }
false;public;0;15;;@Test public void sendIn() throws Exception {     result.expectedMessageCount(1).     template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(S3Constants.KEY, "camelKey").         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)). }
false;private;1;3;;private void assertResultExchange(Exchange resultExchange) {     assertEquals(resultExchange.getIn().getBody(), true). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     client = new AmazonS3ClientMock().     registry.bind("amazonS3Client", client).     return registry. }
false;public;0;9;;@Override public void configure() throws Exception {     String awsEndpoint = "aws-s3://mycamelbucket?amazonS3Client=#amazonS3Client&region=us-west-1&operation=deleteObject".     from("direct:start").to(awsEndpoint).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String awsEndpoint = "aws-s3://mycamelbucket?amazonS3Client=#amazonS3Client&region=us-west-1&operation=deleteObject".             from("direct:start").to(awsEndpoint).to("mock:result").         }     }. }
