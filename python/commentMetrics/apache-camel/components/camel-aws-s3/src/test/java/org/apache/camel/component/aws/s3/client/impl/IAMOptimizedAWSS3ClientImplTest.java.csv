commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void iamOptimizedAWSS3ClientImplNoEncryption() {     S3ClientIAMOptimizedImpl iamOptimizedAWSS3Client = new S3ClientIAMOptimizedImpl(getS3ConfigurationNoEncryption(), MAX_CONNECTIONS).     AmazonS3 s3Client = iamOptimizedAWSS3Client.getS3Client().     Assert.assertNotNull(s3Client).     Assert.assertFalse(s3Client instanceof AmazonS3EncryptionClient). }
false;public;0;7;;@Test public void iamOptimizedAWSS3ClientImplUseEncryption() {     S3ClientIAMOptimizedImpl iamOptimizedAWSS3Client = new S3ClientIAMOptimizedImpl(getS3ConfigurationUseEncryption(), MAX_CONNECTIONS).     AmazonS3 s3Client = iamOptimizedAWSS3Client.getS3Client().     Assert.assertNotNull(s3Client).     Assert.assertTrue(s3Client instanceof AmazonS3EncryptionClient). }
false;private;0;6;;private S3Configuration getS3ConfigurationNoEncryption() {     S3Configuration s3Configuration = mock(S3Configuration.class).     when(s3Configuration.getRegion()).thenReturn("US_EAST_1").     when(s3Configuration.isUseEncryption()).thenReturn(false).     return s3Configuration. }
false;private;0;6;;private S3Configuration getS3ConfigurationUseEncryption() {     S3Configuration s3Configuration = mock(S3Configuration.class).     when(s3Configuration.getRegion()).thenReturn("US_EAST_1").     when(s3Configuration.isUseEncryption()).thenReturn(true).     return s3Configuration. }
