commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void sendIn() throws Exception {     result.expectedMessageCount(1).     template.sendBody("direct:listObjects", ExchangePattern.InOnly, "").     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)). }
false;private;1;6;;private void assertResultExchange(Exchange resultExchange) {     ObjectListing list = resultExchange.getIn().getBody(ObjectListing.class).     assertEquals(1, list.getObjectSummaries().size()).     assertEquals("Myfile", list.getObjectSummaries().get(0).getKey()).     assertEquals("test", list.getObjectSummaries().get(0).getBucketName()). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     client = new AmazonS3ClientMock().     registry.bind("amazonS3Client", client).     return registry. }
false;public;0;9;;@Override public void configure() throws Exception {     String awsEndpoint = "aws-s3://mycamelbucket?amazonS3Client=#amazonS3Client&region=us-west-1&operation=listObjects".     from("direct:listObjects").to(awsEndpoint).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String awsEndpoint = "aws-s3://mycamelbucket?amazonS3Client=#amazonS3Client&region=us-west-1&operation=listObjects".             from("direct:listObjects").to(awsEndpoint).to("mock:result").         }     }. }
