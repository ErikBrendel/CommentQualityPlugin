commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody(testMessage). }
false;public;0;24;;@Test public void testPut() throws Exception {     final long priority = BeanstalkComponent.DEFAULT_PRIORITY.     final int delay = BeanstalkComponent.DEFAULT_DELAY.     final int timeToRun = BeanstalkComponent.DEFAULT_TIME_TO_RUN.     final byte[] payload = Helper.stringToBytes(testMessage).     final long jobId = 111.     when(client.put(priority, delay, timeToRun, payload)).thenReturn(jobId).     final Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(PutCommand.class)).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new // TODO: SetBodyProcessor(?)     Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody(testMessage).         }     }).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).put(priority, delay, timeToRun, payload). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody(testMessage). }
false;public;0;24;;@Test public void testPutOut() throws Exception {     final long priority = BeanstalkComponent.DEFAULT_PRIORITY.     final int delay = BeanstalkComponent.DEFAULT_DELAY.     final int timeToRun = BeanstalkComponent.DEFAULT_TIME_TO_RUN.     final byte[] payload = Helper.stringToBytes(testMessage).     final long jobId = 111.     when(client.put(priority, delay, timeToRun, payload)).thenReturn(jobId).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(PutCommand.class)).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOut, new // TODO: SetBodyProcessor(?)     Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody(testMessage).         }     }).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getOut().getHeader(Headers.JOB_ID, Long.class)).     verify(client).put(priority, delay, timeToRun, payload). }
false;public;1;6;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.PRIORITY, priority).     exchange.getIn().setHeader(Headers.DELAY, delay).     exchange.getIn().setHeader(Headers.TIME_TO_RUN, timeToRun).     exchange.getIn().setBody(testMessage). }
false;public;0;27;;@Test public void testPutWithHeaders() throws Exception {     final long priority = 111.     final int delay = 5.     final int timeToRun = 65.     final byte[] payload = Helper.stringToBytes(testMessage).     final long jobId = 111.     when(client.put(priority, delay, timeToRun, payload)).thenReturn(jobId).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(PutCommand.class)).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new // TODO: SetBodyProcessor(?)     Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.PRIORITY, priority).             exchange.getIn().setHeader(Headers.DELAY, delay).             exchange.getIn().setHeader(Headers.TIME_TO_RUN, timeToRun).             exchange.getIn().setBody(testMessage).         }     }).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).put(priority, delay, timeToRun, payload). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.JOB_ID, jobId). }
false;public;0;23;;@Test public void testBury() throws Exception {     final long priority = BeanstalkComponent.DEFAULT_PRIORITY.     final long jobId = 111.     endpoint.setCommand(BeanstalkCommand.bury).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(BuryCommand.class)).     when(client.bury(jobId, priority)).thenReturn(true).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.JOB_ID, jobId).         }     }).     assertEquals("Op result", Boolean.TRUE, exchange.getIn().getHeader(Headers.RESULT, Boolean.class)).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).bury(jobId, priority). }
false;public;1;2;;public void process(Exchange exchange) { }
false;public;0;17;;@Test public void testBuryNoJobId() throws Exception {     endpoint.setCommand(BeanstalkCommand.bury).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(BuryCommand.class)).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {         }     }).     assertTrue("Exchange failed", exchange.isFailed()).     verify(client, never()).bury(anyLong(), anyLong()). }
false;public;1;4;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.PRIORITY, priority).     exchange.getIn().setHeader(Headers.JOB_ID, jobId). }
false;public;0;24;;@Test public void testBuryWithHeaders() throws Exception {     final long priority = 1000.     final long jobId = 111.     endpoint.setCommand(BeanstalkCommand.bury).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(BuryCommand.class)).     when(client.bury(jobId, priority)).thenReturn(true).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.PRIORITY, priority).             exchange.getIn().setHeader(Headers.JOB_ID, jobId).         }     }).     assertEquals("Op result", Boolean.TRUE, exchange.getIn().getHeader(Headers.RESULT, Boolean.class)).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).bury(jobId, priority). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.JOB_ID, jobId). }
false;public;0;22;;@Test public void testDelete() throws Exception {     final long jobId = 111.     endpoint.setCommand(BeanstalkCommand.delete).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(DeleteCommand.class)).     when(client.delete(jobId)).thenReturn(true).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.JOB_ID, jobId).         }     }).     assertEquals("Op result", Boolean.TRUE, exchange.getIn().getHeader(Headers.RESULT, Boolean.class)).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).delete(jobId). }
false;public;1;2;;public void process(Exchange exchange) { }
false;public;0;17;;@Test public void testDeleteNoJobId() throws Exception {     endpoint.setCommand(BeanstalkCommand.delete).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(DeleteCommand.class)).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {         }     }).     assertTrue("Exchange failed", exchange.isFailed()).     verify(client, never()).delete(anyLong()). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.JOB_ID, jobId). }
false;public;0;24;;@Test public void testRelease() throws Exception {     final long priority = BeanstalkComponent.DEFAULT_PRIORITY.     final int delay = BeanstalkComponent.DEFAULT_DELAY.     final long jobId = 111.     endpoint.setCommand(BeanstalkCommand.release).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(ReleaseCommand.class)).     when(client.release(jobId, priority, delay)).thenReturn(true).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.JOB_ID, jobId).         }     }).     assertEquals("Op result", Boolean.TRUE, exchange.getIn().getHeader(Headers.RESULT, Boolean.class)).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).release(jobId, priority, delay). }
false;public;1;2;;public void process(Exchange exchange) { }
false;public;0;17;;@Test public void testReleaseNoJobId() throws Exception {     endpoint.setCommand(BeanstalkCommand.release).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(ReleaseCommand.class)).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {         }     }).     assertTrue("Exchange failed", exchange.isFailed()).     verify(client, never()).release(anyLong(), anyLong(), anyInt()). }
false;public;1;5;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.JOB_ID, jobId).     exchange.getIn().setHeader(Headers.PRIORITY, priority).     exchange.getIn().setHeader(Headers.DELAY, delay). }
false;public;0;26;;@Test public void testReleaseWithHeaders() throws Exception {     final long priority = 1001.     final int delay = 124.     final long jobId = 111.     endpoint.setCommand(BeanstalkCommand.release).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(ReleaseCommand.class)).     when(client.release(jobId, priority, delay)).thenReturn(true).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.JOB_ID, jobId).             exchange.getIn().setHeader(Headers.PRIORITY, priority).             exchange.getIn().setHeader(Headers.DELAY, delay).         }     }).     assertEquals("Op result", Boolean.TRUE, exchange.getIn().getHeader(Headers.RESULT, Boolean.class)).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).release(jobId, priority, delay). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.JOB_ID, jobId). }
false;public;0;22;;@Test public void testTouch() throws Exception {     final long jobId = 111.     endpoint.setCommand(BeanstalkCommand.touch).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(TouchCommand.class)).     when(client.touch(jobId)).thenReturn(true).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.JOB_ID, jobId).         }     }).     assertEquals("Op result", Boolean.TRUE, exchange.getIn().getHeader(Headers.RESULT, Boolean.class)).     assertEquals("Job ID in exchange", Long.valueOf(jobId), exchange.getIn().getHeader(Headers.JOB_ID, Long.class)).     verify(client).touch(jobId). }
false;public;1;2;;public void process(Exchange exchange) { }
false;public;0;17;;@Test public void testTouchNoJobId() throws Exception {     endpoint.setCommand(BeanstalkCommand.touch).     Producer producer = endpoint.createProducer().     assertNotNull("Producer", producer).     assertThat("Producer class", producer, instanceOf(BeanstalkProducer.class)).     assertThat("Processor class", ((BeanstalkProducer) producer).getCommand(), instanceOf(TouchCommand.class)).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {         }     }).     assertTrue("Exchange failed", exchange.isFailed()).     verify(client, never()).touch(anyLong()). }
false;public;0;22;;@Test public void testHeaderOverride() throws Exception {     final long priority = 1020.     final int delay = 50.     final int timeToRun = 75.     final byte[] payload = Helper.stringToBytes(testMessage).     final long jobId = 113.     when(client.put(priority, delay, timeToRun, payload)).thenReturn(jobId).     resultEndpoint.expectedMessageCount(1).     resultEndpoint.allMessages().body().isEqualTo(testMessage).     resultEndpoint.allMessages().header(Headers.JOB_ID).isEqualTo(jobId).     direct.sendBodyAndHeader(testMessage, Headers.TIME_TO_RUN, timeToRun).     resultEndpoint.assertIsSatisfied().     final Long jobIdIn = resultEndpoint.getReceivedExchanges().get(0).getIn().getHeader(Headers.JOB_ID, Long.class).     assertNotNull("Job ID in 'In' message", jobIdIn).     verify(client).put(priority, delay, timeToRun, payload). }
false;public;0;25;;@Test public void test1BeanstalkException() throws Exception {     final long priority = 1020.     final int delay = 50.     final int timeToRun = 75.     final byte[] payload = Helper.stringToBytes(testMessage).     final long jobId = 113.     when(client.put(priority, delay, timeToRun, payload)).thenThrow(new BeanstalkException("test")).thenReturn(jobId).     resultEndpoint.expectedMessageCount(1).     resultEndpoint.allMessages().body().isEqualTo(testMessage).     resultEndpoint.allMessages().header(Headers.JOB_ID).isEqualTo(jobId).     direct.sendBodyAndHeader(testMessage, Headers.TIME_TO_RUN, timeToRun).     resultEndpoint.assertIsSatisfied().     final Long jobIdIn = resultEndpoint.getReceivedExchanges().get(0).getIn().getHeader(Headers.JOB_ID, Long.class).     assertNotNull("Job ID in 'In' message", jobIdIn).     verify(client, times(1)).close().     verify(client, times(2)).put(priority, delay, timeToRun, payload). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setHeader(Headers.JOB_ID, jobId). }
false;public;0;19;;@Test public void test2BeanstalkException() throws Exception {     final long jobId = 111.     when(client.touch(jobId)).thenThrow(new BeanstalkException("test")).     endpoint.setCommand(BeanstalkCommand.touch).     final Exchange exchange = template.send(endpoint, ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader(Headers.JOB_ID, jobId).         }     }).     assertTrue("Exchange failed", exchange.isFailed()).     verify(client, times(2)).touch(jobId).     verify(client, times(1)).close(). }
false;public;0;4;;@Override public void configure() {     from("direct:start").to("beanstalk:tube?jobPriority=1020&jobDelay=50&jobTimeToRun=65").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("beanstalk:tube?jobPriority=1020&jobDelay=50&jobTimeToRun=65").to("mock:result").         }     }. }
