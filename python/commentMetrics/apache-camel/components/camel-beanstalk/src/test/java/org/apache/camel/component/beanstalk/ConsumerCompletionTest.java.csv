commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void process(Exchange exchange) throws InterruptedException {     if (shouldIdie) {         throw new InterruptedException("die").     } }
false;public;0;32;;@Test public void testDeleteOnComplete() throws Exception {     if (!canTest()) {         return.     }     final long jobId = 111.     final byte[] payload = Helper.stringToBytes(testMessage).     final Job jobMock = mock(Job.class).     when(jobMock.getJobId()).thenReturn(jobId).     when(jobMock.getData()).thenReturn(payload).     when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null).     when(client.statsJob(anyLong())).thenReturn(null).     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMinimumMessageCount(1).     result.expectedBodiesReceived(testMessage).     result.expectedHeaderReceived(Headers.JOB_ID, jobId).     result.message(0).header(Headers.JOB_ID).isEqualTo(jobId).     context.getRouteController().startRoute("foo").     result.assertIsSatisfied().     verify(client, atLeastOnce()).reserve(anyInt()).     verify(client, atLeastOnce()).statsJob(anyLong()).     verify(client).delete(jobId). }
false;public;0;30;;@Test public void testReleaseOnFailure() throws Exception {     shouldIdie = true.     final long jobId = 111.     final long priority = BeanstalkComponent.DEFAULT_PRIORITY.     final int delay = BeanstalkComponent.DEFAULT_DELAY.     final byte[] payload = Helper.stringToBytes(testMessage).     final Job jobMock = mock(Job.class).     when(jobMock.getJobId()).thenReturn(jobId).     when(jobMock.getData()).thenReturn(payload).     when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null).     when(client.statsJob(anyLong())).thenReturn(null).     when(client.release(anyInt(), anyLong(), anyInt())).thenReturn(true).     NotifyBuilder notify = new NotifyBuilder(context).whenFailed(1).create().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(0).     context.getRouteController().startRoute("foo").     assertTrue(notify.matches(5, TimeUnit.SECONDS)).     verify(client, atLeastOnce()).reserve(anyInt()).     verify(client, atLeastOnce()).statsJob(anyLong()).     verify(client).release(jobId, priority, delay). }
false;public;0;31;;@Test public void testBeanstalkException() throws Exception {     if (!canTest()) {         return.     }     shouldIdie = false.     final Job jobMock = mock(Job.class).     final long jobId = 111.     final byte[] payload = Helper.stringToBytes(testMessage).     when(jobMock.getJobId()).thenReturn(jobId).     when(jobMock.getData()).thenReturn(payload).     when(client.reserve(anyInt())).thenThrow(new BeanstalkException("test")).thenReturn(jobMock).     when(client.statsJob(anyInt())).thenReturn(null).     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     result.expectedBodiesReceived(testMessage).     result.expectedHeaderReceived(Headers.JOB_ID, jobId).     result.message(0).header(Headers.JOB_ID).isEqualTo(jobId).     context.getRouteController().startRoute("foo").     result.assertIsSatisfied().     verify(client, atLeast(1)).reserve(anyInt()).     verify(client, times(1)).close(). }
false;public;0;5;;@Override public void configure() {     from("beanstalk:tube?consumer.onFailure=release").routeId("foo").process(processor).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from("beanstalk:tube?consumer.onFailure=release").routeId("foo").process(processor).to("mock:result").         }     }. }
