commented;modifiers;parameterAmount;loc;comment;code
true;public;0;16;/**  * Returns the {@link Client} instance ready for writing  * operations, e.g. "put".  * <p/>  * <code>use(tube)</code> is applied during this call.  *  * @return {@link Client} instance  * @throws IllegalArgumentException the exception is raised when this ConnectionSettings  *                                  has more than one tube.  */ ;/**  * Returns the {@link Client} instance ready for writing  * operations, e.g. "put".  * <p/>  * <code>use(tube)</code> is applied during this call.  *  * @return {@link Client} instance  * @throws IllegalArgumentException the exception is raised when this ConnectionSettings  *                                  has more than one tube.  */ public Client newWritingClient() throws IllegalArgumentException {     if (tubes.length > 1) {         throw new IllegalArgumentException("There must be only one tube specified for Beanstalk producer").     }     final String tube = tubes.length > 0 ? tubes[0] : BeanstalkComponent.DEFAULT_TUBE.     final ClientImpl client = new ClientImpl(host, port).     /* FIXME: There is a problem in JavaBeanstalkClient 1.4.4 (at least in 1.4.4),            when using uniqueConnectionPerThread=false. The symptom is that ProtocolHandler            breaks the protocol, reading incomplete messages. To be investigated. */     // client.setUniqueConnectionPerThread(false).     client.useTube(tube).     return client. }
true;public;1;12;/**  * Returns the {@link Client} instance for reading operations with all  * the tubes aleady watched  * <p/>  * <code>watch(tube)</code> is applied for every tube during this call.  *  * @param useBlockIO configuration param to {@link Client}  * @return {@link Client} instance  */ ;/**  * Returns the {@link Client} instance for reading operations with all  * the tubes aleady watched  * <p/>  * <code>watch(tube)</code> is applied for every tube during this call.  *  * @param useBlockIO configuration param to {@link Client}  * @return {@link Client} instance  */ public Client newReadingClient(boolean useBlockIO) {     final ClientImpl client = new ClientImpl(host, port, useBlockIO).     // client.setUniqueConnectionPerThread(false).     for (String tube : tubes) {         client.watch(tube).     }     return client. }
false;public;1;8;;@Override public boolean equals(final Object obj) {     if (obj instanceof ConnectionSettings) {         final ConnectionSettings other = (ConnectionSettings) obj.         return other.host.equals(host) && other.port == port && Arrays.equals(other.tubes, tubes).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return 41 * (41 * (41 + host.hashCode()) + port) + Arrays.hashCode(tubes). }
false;public;0;4;;@Override public String toString() {     return "beanstalk://" + host + ":" + port + "/" + Arrays.toString(tubes). }
