commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void run() {     client = getEndpoint().getConnection().newReadingClient(useBlockIO). }
false;public;0;52;;@Override public Exchange call() throws Exception {     if (client == null) {         throw new RuntimeCamelException("Beanstalk client not initialized").     }     try {         final Job job = client.reserve(noWait).         if (job == null) {             return null.         }         if (log.isDebugEnabled()) {             log.debug(String.format("Received job ID %d (data length %d)", job.getJobId(), job.getData().length)).         }         final Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly).         exchange.getIn().setHeader(Headers.JOB_ID, job.getJobId()).         exchange.getIn().setBody(job.getData(), byte[].class).         Map<String, String> jobStats = client.statsJob(job.getJobId()).         if (jobStats != null && !jobStats.isEmpty()) {             for (String key : STATS_KEY_STR) {                 if (jobStats.containsKey(key)) {                     exchange.getIn().setHeader(Headers.PREFIX + key, jobStats.get(key).trim()).                 }             }             if (jobStats.containsKey("pri")) {                 exchange.getIn().setHeader(Headers.PRIORITY, Long.parseLong(jobStats.get("pri").trim())).             }             for (String key : STATS_KEY_INT) {                 if (jobStats.containsKey(key)) {                     exchange.getIn().setHeader(Headers.PREFIX + key, Integer.parseInt(jobStats.get(key).trim())).                 }             }         }         if (!awaitJob) {             client.delete(job.getJobId()).         } else {             exchange.addOnCompletion(sync).         }         return exchange.     } catch (BeanstalkException e) {         getExceptionHandler().handleException("Beanstalk client error", e).         resetClient().         return null.     } }
false;protected;0;14;;@Override protected int poll() throws Exception {     int messagesPolled = 0.     while (isPollAllowed()) {         final Exchange exchange = executor.submit(pollTask).get().         if (exchange == null) {             break.         }         ++messagesPolled.         getProcessor().process(exchange).     }     return messagesPolled. }
false;public;0;3;;public BeanstalkCommand getOnFailure() {     return onFailure. }
false;public;1;3;;public void setOnFailure(BeanstalkCommand onFailure) {     this.onFailure = onFailure. }
false;public;0;3;;public boolean isUseBlockIO() {     return useBlockIO. }
false;public;1;3;;public void setUseBlockIO(boolean useBlockIO) {     this.useBlockIO = useBlockIO. }
false;public;0;3;;public boolean isAwaitJob() {     return awaitJob. }
false;public;1;3;;public void setAwaitJob(boolean awaitJob) {     this.awaitJob = awaitJob. }
false;public;0;4;;@Override public BeanstalkEndpoint getEndpoint() {     return (BeanstalkEndpoint) super.getEndpoint(). }
false;protected;0;7;;@Override protected void doStart() throws Exception {     executor = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, "Beanstalk-Consumer").     executor.execute(initTask).     sync = new Sync().     super.doStart(). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     super.doStop().     if (executor != null) {         getEndpoint().getCamelContext().getExecutorServiceManager().shutdown(executor).     } }
false;protected;0;6;;protected void resetClient() {     if (client != null) {         client.close().     }     initTask.run(). }
false;public;1;8;;@Override public void onComplete(final Exchange exchange) {     try {         executor.submit(new RunCommand(successCommand, exchange)).get().     } catch (Exception e) {         log.error(String.format("Could not run completion of exchange %s", exchange), e).     } }
false;public;1;8;;@Override public void onFailure(final Exchange exchange) {     try {         executor.submit(new RunCommand(failureCommand, exchange)).get().     } catch (Exception e) {         log.error(String.format("%s could not run failure of exchange %s", failureCommand.getClass().getName(), exchange), e).     } }
false;public;0;15;;@Override public void run() {     try {         try {             command.act(client, exchange).         } catch (BeanstalkException e) {             log.warn(String.format("Post-processing %s of exchange %s failed, retrying.", command.getClass().getName(), exchange), e).             resetClient().             command.act(client, exchange).         }     } catch (final Exception e) {         log.error(String.format("%s could not post-process exchange %s", command.getClass().getName(), exchange), e).         exchange.setException(e).     } }
