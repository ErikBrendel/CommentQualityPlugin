commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getConnectionSettings() {     return connectionSettings. }
false;public;0;3;;public ConnectionSettings getConnection() {     return conn. }
false;public;0;3;;public ConnectionSettings getConn() {     return conn. }
false;public;0;3;;public BeanstalkCommand getCommand() {     return command. }
true;public;1;3;/**  * put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header.  * delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header  * kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.  */ ;/**  * put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header.  * delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header  * kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.  */ public void setCommand(BeanstalkCommand command) {     this.command = command. }
false;public;0;3;;public long getJobPriority() {     return jobPriority. }
true;public;1;3;/**  * Job priority. (0 is the highest, see Beanstalk protocol)  */ ;/**  * Job priority. (0 is the highest, see Beanstalk protocol)  */ public void setJobPriority(long jobPriority) {     this.jobPriority = jobPriority. }
false;public;0;3;;public int getJobDelay() {     return jobDelay. }
true;public;1;3;/**  * Job delay in seconds.  */ ;/**  * Job delay in seconds.  */ public void setJobDelay(int jobDelay) {     this.jobDelay = jobDelay. }
false;public;0;3;;public int getJobTimeToRun() {     return jobTimeToRun. }
true;public;1;3;/**  * Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol)  */ ;/**  * Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol)  */ public void setJobTimeToRun(int jobTimeToRun) {     this.jobTimeToRun = jobTimeToRun. }
false;public;0;3;;public BeanstalkCommand getOnFailure() {     return onFailure. }
true;public;1;3;/**  * Command to use when processing failed.  */ ;/**  * Command to use when processing failed.  */ public void setOnFailure(BeanstalkCommand onFailure) {     this.onFailure = onFailure. }
false;public;0;3;;public boolean isUseBlockIO() {     return useBlockIO. }
true;public;1;3;/**  * Whether to use blockIO.  */ ;/**  * Whether to use blockIO.  */ public void setUseBlockIO(boolean useBlockIO) {     this.useBlockIO = useBlockIO. }
false;public;0;3;;public boolean isAwaitJob() {     return awaitJob. }
true;public;1;3;/**  * Whether to wait for job to complete before ack the job from beanstalk  */ ;/**  * Whether to wait for job to complete before ack the job from beanstalk  */ public void setAwaitJob(boolean awaitJob) {     this.awaitJob = awaitJob. }
true;public;0;21;/**  * Creates Camel producer.  * <p/>  * Depending on the command parameter (see {@link BeanstalkComponent} URI) it  * will create one of the producer implementations.  *  * @return {@link Producer} instance  * @throws IllegalArgumentException when {@link ConnectionSettings} cannot  *                                  create a writable {@link Client}  */ ;/**  * Creates Camel producer.  * <p/>  * Depending on the command parameter (see {@link BeanstalkComponent} URI) it  * will create one of the producer implementations.  *  * @return {@link Producer} instance  * @throws IllegalArgumentException when {@link ConnectionSettings} cannot  *                                  create a writable {@link Client}  */ @Override public Producer createProducer() throws Exception {     Command cmd.     if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {         cmd = new PutCommand(this).     } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {         cmd = new ReleaseCommand(this).     } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {         cmd = new BuryCommand(this).     } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {         cmd = new TouchCommand(this).     } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {         cmd = new DeleteCommand(this).     } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {         cmd = new KickCommand(this).     } else {         throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command)).     }     return new BeanstalkProducer(this, cmd). }
false;public;1;9;;@Override public Consumer createConsumer(Processor processor) throws Exception {     BeanstalkConsumer consumer = new BeanstalkConsumer(this, processor).     consumer.setAwaitJob(isAwaitJob()).     consumer.setOnFailure(getOnFailure()).     consumer.setUseBlockIO(isUseBlockIO()).     configureConsumer(consumer).     return consumer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
