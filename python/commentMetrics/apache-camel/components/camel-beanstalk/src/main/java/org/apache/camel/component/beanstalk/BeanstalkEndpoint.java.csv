# id;timestamp;commentText;codeText;commentWords;codeWords
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1416561667;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1425140025;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1427402378;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1429879148;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1451237124;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1460966546;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1485947385;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1540108163;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1547480087;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setJobDelay(int jobDelay);1547566882;Job delay in seconds.;public void setJobDelay(int jobDelay) {_        this.jobDelay = jobDelay__    };job,delay,in,seconds;public,void,set,job,delay,int,job,delay,this,job,delay,job,delay
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1416561667;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1425140025;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1427402378;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1429879148;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1451237124;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1460966546;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1485947385;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1540108163;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1547480087;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setOnFailure(BeanstalkCommand onFailure);1547566882;Command to use when processing failed.;public void setOnFailure(BeanstalkCommand onFailure) {_        this.onFailure = onFailure__    };command,to,use,when,processing,failed;public,void,set,on,failure,beanstalk,command,on,failure,this,on,failure,on,failure
BeanstalkEndpoint -> public void setCommand(BeanstalkCommand command);1429879148;put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header._delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header_kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.;public void setCommand(BeanstalkCommand command) {_        this.command = command__    };put,means,to,put,the,job,into,beanstalk,job,body,is,specified,in,the,camel,message,body,job,id,will,be,returned,in,beanstalk,job,id,message,header,delete,release,touch,or,bury,expect,job,id,in,the,message,header,beanstalk,job,id,result,of,the,operation,is,returned,in,beanstalk,result,message,header,kick,expects,the,number,of,jobs,to,kick,in,the,message,body,and,returns,the,number,of,jobs,actually,kicked,out,in,the,message,header,beanstalk,result;public,void,set,command,beanstalk,command,command,this,command,command
BeanstalkEndpoint -> public void setCommand(BeanstalkCommand command);1451237124;put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header._delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header_kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.;public void setCommand(BeanstalkCommand command) {_        this.command = command__    };put,means,to,put,the,job,into,beanstalk,job,body,is,specified,in,the,camel,message,body,job,id,will,be,returned,in,beanstalk,job,id,message,header,delete,release,touch,or,bury,expect,job,id,in,the,message,header,beanstalk,job,id,result,of,the,operation,is,returned,in,beanstalk,result,message,header,kick,expects,the,number,of,jobs,to,kick,in,the,message,body,and,returns,the,number,of,jobs,actually,kicked,out,in,the,message,header,beanstalk,result;public,void,set,command,beanstalk,command,command,this,command,command
BeanstalkEndpoint -> public void setCommand(BeanstalkCommand command);1460966546;put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header._delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header_kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.;public void setCommand(BeanstalkCommand command) {_        this.command = command__    };put,means,to,put,the,job,into,beanstalk,job,body,is,specified,in,the,camel,message,body,job,id,will,be,returned,in,beanstalk,job,id,message,header,delete,release,touch,or,bury,expect,job,id,in,the,message,header,beanstalk,job,id,result,of,the,operation,is,returned,in,beanstalk,result,message,header,kick,expects,the,number,of,jobs,to,kick,in,the,message,body,and,returns,the,number,of,jobs,actually,kicked,out,in,the,message,header,beanstalk,result;public,void,set,command,beanstalk,command,command,this,command,command
BeanstalkEndpoint -> public void setCommand(BeanstalkCommand command);1485947385;put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header._delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header_kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.;public void setCommand(BeanstalkCommand command) {_        this.command = command__    };put,means,to,put,the,job,into,beanstalk,job,body,is,specified,in,the,camel,message,body,job,id,will,be,returned,in,beanstalk,job,id,message,header,delete,release,touch,or,bury,expect,job,id,in,the,message,header,beanstalk,job,id,result,of,the,operation,is,returned,in,beanstalk,result,message,header,kick,expects,the,number,of,jobs,to,kick,in,the,message,body,and,returns,the,number,of,jobs,actually,kicked,out,in,the,message,header,beanstalk,result;public,void,set,command,beanstalk,command,command,this,command,command
BeanstalkEndpoint -> public void setCommand(BeanstalkCommand command);1540108163;put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header._delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header_kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.;public void setCommand(BeanstalkCommand command) {_        this.command = command__    };put,means,to,put,the,job,into,beanstalk,job,body,is,specified,in,the,camel,message,body,job,id,will,be,returned,in,beanstalk,job,id,message,header,delete,release,touch,or,bury,expect,job,id,in,the,message,header,beanstalk,job,id,result,of,the,operation,is,returned,in,beanstalk,result,message,header,kick,expects,the,number,of,jobs,to,kick,in,the,message,body,and,returns,the,number,of,jobs,actually,kicked,out,in,the,message,header,beanstalk,result;public,void,set,command,beanstalk,command,command,this,command,command
BeanstalkEndpoint -> public void setCommand(BeanstalkCommand command);1547480087;put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header._delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header_kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.;public void setCommand(BeanstalkCommand command) {_        this.command = command__    };put,means,to,put,the,job,into,beanstalk,job,body,is,specified,in,the,camel,message,body,job,id,will,be,returned,in,beanstalk,job,id,message,header,delete,release,touch,or,bury,expect,job,id,in,the,message,header,beanstalk,job,id,result,of,the,operation,is,returned,in,beanstalk,result,message,header,kick,expects,the,number,of,jobs,to,kick,in,the,message,body,and,returns,the,number,of,jobs,actually,kicked,out,in,the,message,header,beanstalk,result;public,void,set,command,beanstalk,command,command,this,command,command
BeanstalkEndpoint -> public void setCommand(BeanstalkCommand command);1547566882;put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header._delete, release, touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header_kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.;public void setCommand(BeanstalkCommand command) {_        this.command = command__    };put,means,to,put,the,job,into,beanstalk,job,body,is,specified,in,the,camel,message,body,job,id,will,be,returned,in,beanstalk,job,id,message,header,delete,release,touch,or,bury,expect,job,id,in,the,message,header,beanstalk,job,id,result,of,the,operation,is,returned,in,beanstalk,result,message,header,kick,expects,the,number,of,jobs,to,kick,in,the,message,body,and,returns,the,number,of,jobs,actually,kicked,out,in,the,message,header,beanstalk,result;public,void,set,command,beanstalk,command,command,this,command,command
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1416561667;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1425140025;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1427402378;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1429879148;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1451237124;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1460966546;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1485947385;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1540108163;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1547480087;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> public void setJobPriority(long jobPriority);1547566882;Job priority. (0 is the highest, see Beanstalk protocol);public void setJobPriority(long jobPriority) {_        this.jobPriority = jobPriority__    };job,priority,0,is,the,highest,see,beanstalk,protocol;public,void,set,job,priority,long,job,priority,this,job,priority,job,priority
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1415211488;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command)) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command)) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command)) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command)) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command)) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command)) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1416561667;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1425140025;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1427402378;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1429879148;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1451237124;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1460966546;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1485947385;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1540108163;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1547480087;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> @Override     public Producer createProducer() throws Exception;1547566882;Creates Camel producer._<p/>_Depending on the command parameter (see {@link BeanstalkComponent} URI) it_will create one of the producer implementations.__@return {@link Producer} instance_@throws IllegalArgumentException when {@link ConnectionSettings} cannot_create a writable {@link Client};@Override_    public Producer createProducer() throws Exception {_        Command cmd__        if (BeanstalkComponent.COMMAND_PUT.equals(command.name())) {_            cmd = new PutCommand(this)__        } else if (BeanstalkComponent.COMMAND_RELEASE.equals(command.name())) {_            cmd = new ReleaseCommand(this)__        } else if (BeanstalkComponent.COMMAND_BURY.equals(command.name())) {_            cmd = new BuryCommand(this)__        } else if (BeanstalkComponent.COMMAND_TOUCH.equals(command.name())) {_            cmd = new TouchCommand(this)__        } else if (BeanstalkComponent.COMMAND_DELETE.equals(command.name())) {_            cmd = new DeleteCommand(this)__        } else if (BeanstalkComponent.COMMAND_KICK.equals(command.name())) {_            cmd = new KickCommand(this)__        } else {_            throw new IllegalArgumentException(String.format("Unknown command for Beanstalk endpoint: %s", command))__        }__        return new BeanstalkProducer(this, cmd)__    };creates,camel,producer,p,depending,on,the,command,parameter,see,link,beanstalk,component,uri,it,will,create,one,of,the,producer,implementations,return,link,producer,instance,throws,illegal,argument,exception,when,link,connection,settings,cannot,create,a,writable,link,client;override,public,producer,create,producer,throws,exception,command,cmd,if,beanstalk,component,equals,command,name,cmd,new,put,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,release,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,bury,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,touch,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,delete,command,this,else,if,beanstalk,component,equals,command,name,cmd,new,kick,command,this,else,throw,new,illegal,argument,exception,string,format,unknown,command,for,beanstalk,endpoint,s,command,return,new,beanstalk,producer,this,cmd
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1416561667;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1425140025;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1427402378;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1429879148;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1451237124;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1460966546;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1485947385;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1540108163;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1547480087;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setJobTimeToRun(int jobTimeToRun);1547566882;Job time to run in seconds. (when 0, the beanstalkd daemon raises it to 1 automatically, see Beanstalk protocol);public void setJobTimeToRun(int jobTimeToRun) {_        this.jobTimeToRun = jobTimeToRun__    };job,time,to,run,in,seconds,when,0,the,beanstalkd,daemon,raises,it,to,1,automatically,see,beanstalk,protocol;public,void,set,job,time,to,run,int,job,time,to,run,this,job,time,to,run,job,time,to,run
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1416561667;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1425140025;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1427402378;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1429879148;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1451237124;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1460966546;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1485947385;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1540108163;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1547480087;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setAwaitJob(boolean awaitJob);1547566882;Whether to wait for job to complete before ack the job from beanstalk;public void setAwaitJob(boolean awaitJob) {_        this.awaitJob = awaitJob__    };whether,to,wait,for,job,to,complete,before,ack,the,job,from,beanstalk;public,void,set,await,job,boolean,await,job,this,await,job,await,job
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1416561667;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1425140025;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1427402378;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1429879148;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1451237124;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1460966546;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1485947385;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1540108163;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1547480087;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
BeanstalkEndpoint -> public void setUseBlockIO(boolean useBlockIO);1547566882;Whether to use blockIO.;public void setUseBlockIO(boolean useBlockIO) {_        this.useBlockIO = useBlockIO__    };whether,to,use,block,io;public,void,set,use,block,io,boolean,use,block,io,this,use,block,io,use,block,io
