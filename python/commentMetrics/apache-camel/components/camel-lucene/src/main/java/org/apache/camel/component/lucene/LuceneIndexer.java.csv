commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;public void index(Exchange exchange) throws Exception {     LOG.debug("Indexing {}", exchange).     openIndexWriter().     Map<String, Object> headers = exchange.getIn().getHeaders().     add("exchangeId", exchange.getExchangeId(), true).     for (Entry<String, Object> entry : headers.entrySet()) {         String field = entry.getKey().         String value = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, entry.getValue()).         add(field, value, true).     }     add("contents", exchange.getIn().getMandatoryBody(String.class), true).     closeIndexWriter(). }
false;public;0;3;;public NIOFSDirectory getNiofsDirectory() {     return niofsDirectory. }
false;public;1;3;;public void setNiofsDirectory(NIOFSDirectory niofsDirectory) {     this.niofsDirectory = niofsDirectory. }
false;public;0;3;;public File getSourceDirectory() {     return sourceDirectory. }
false;public;1;3;;public void setSourceDirectory(File sourceDirectory) {     this.sourceDirectory = sourceDirectory. }
false;public;0;3;;public Analyzer getAnalyzer() {     return analyzer. }
false;public;1;3;;public void setAnalyzer(Analyzer analyzer) {     this.analyzer = analyzer. }
false;private;3;10;;private void add(String field, String value, boolean analyzed) throws IOException {     if (LOG.isTraceEnabled()) {         LOG.trace("Adding field: {}", field).         LOG.trace("       value: {}", value).     }     Document doc = new Document().     doc.add(new Field(field, value, analyzed ? TOKENIZED_FIELD_TYPE : NON_TOKENIZED_FIELD_TYPE)).     indexWriter.addDocument(doc). }
false;private;1;31;;private void add(File file) throws IOException {     if (file.canRead()) {         if (file.isDirectory()) {             String[] files = file.list().             if (files != null) {                 for (String child : files) {                     add(new File(file.getAbsolutePath() + "/" + child)).                 }             }         } else {             LOG.trace("Adding {}", file).             String contents.             try (InputStream is = new FileInputStream(file)) {                 ByteArrayOutputStream bos = new ByteArrayOutputStream().                 IOHelper.copy(IOHelper.buffered(is), bos).                 contents = new String(bos.toByteArray()).             }             openIndexWriter().             add("path", file.getPath(), false).             add("contents", contents, true).             closeIndexWriter().             LOG.trace("Added {} successfully", file).         }     } else {         LOG.warn("Directory/File " + file.getAbsolutePath() + " could not be read." + " This directory will not be indexed. Please check permissions and rebuild indexes.").     } }
false;private;0;6;;private void openIndexWriter() throws IOException {     IndexWriterConfig indexWriterConfig.     // use create or append so we can reuse existing index if already exists     indexWriterConfig = new IndexWriterConfig(getAnalyzer()).setOpenMode(OpenMode.CREATE_OR_APPEND).     indexWriter = new IndexWriter(niofsDirectory, indexWriterConfig). }
false;private;0;4;;private void closeIndexWriter() throws IOException {     indexWriter.commit().     indexWriter.close(). }
false;private,static;1;11;;private static FieldType createFieldType(boolean tokenized) {     FieldType answer = new FieldType().     // answer.setIndexed(true).     answer.setStored(true).     answer.setTokenized(tokenized).     // freeze the answer so that it becomes immutable     answer.freeze().     return answer. }
