commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;public void open(File indexDirectory, Analyzer analyzer) throws IOException {     if (indexDirectory != null) {         indexReader = DirectoryReader.open(new NIOFSDirectory(indexDirectory.toPath())).     } else {         indexReader = DirectoryReader.open(new NIOFSDirectory(new File("./indexDirectory").toPath())).     }     indexSearcher = new IndexSearcher(indexReader).     this.analyzer = analyzer. }
false;public;0;4;;public void close() throws IOException {     indexReader.close().     analyzer.close(). }
false;public;2;3;;public Hits search(String searchPhrase, int maxNumberOfHits) throws Exception {     return search(searchPhrase, maxNumberOfHits, LuceneConstants.LUCENE_VERSION, false). }
false;public;4;20;;public Hits search(String searchPhrase, int maxNumberOfHits, Version luceneVersion, boolean returnLuceneDocs) throws Exception {     Hits searchHits = new Hits().     int numberOfHits = doSearch(searchPhrase, maxNumberOfHits, luceneVersion).     searchHits.setNumberOfHits(numberOfHits).     for (ScoreDoc hit : hits) {         Document selectedDocument = indexSearcher.doc(hit.doc).         Hit aHit = new Hit().         if (returnLuceneDocs) {             aHit.setDocument(selectedDocument).         }         aHit.setHitLocation(hit.doc).         aHit.setScore(hit.score).         aHit.setData(selectedDocument.get("contents")).         searchHits.getHit().add(aHit).     }     return searchHits. }
false;private;3;12;;private int doSearch(String searchPhrase, int maxNumberOfHits, Version luceneVersion) throws NullPointerException, ParseException, IOException {     LOG.trace("*** Search Phrase: {} ***", searchPhrase).     QueryParser parser = new QueryParser("contents", analyzer).     Query query = parser.parse(searchPhrase).     TopScoreDocCollector collector = TopScoreDocCollector.create(maxNumberOfHits).     indexSearcher.search(query, collector).     hits = collector.topDocs().scoreDocs.     LOG.trace("*** Search generated {} hits ***", hits.length).     return hits.length. }
