commented;modifiers;parameterAmount;loc;comment;code
false;public;3;30;;public void parseURI(URI uri, Map<String, Object> parameters, LuceneComponent component) throws Exception {     String protocol = uri.getScheme().     if (!protocol.equalsIgnoreCase("lucene")) {         throw new IllegalArgumentException("Unrecognized Lucene protocol: " + protocol + " for uri: " + uri).     }     setUri(uri).     setAuthority(uri.getAuthority()).     if (!isValidAuthority()) {         throw new URISyntaxException(uri.toASCIIString(), "Incorrect URI syntax and/or Operation specified for the Lucene endpoint." + " Please specify the syntax as \"lucene:[Endpoint Name]:[Operation]?[Query]\"").     }     setHost(retrieveTokenFromAuthority("hostname")).     String op = retrieveTokenFromAuthority("operation").     if (op != null) {         op = op.toLowerCase().     }     setOperation(LuceneOperation.valueOf(op)).     sourceDirectory = component.resolveAndRemoveReferenceParameter(parameters, "srcDir", File.class, null).     indexDirectory = component.resolveAndRemoveReferenceParameter(parameters, "indexDir", File.class, new File("file:///./indexDirectory")).     analyzer = component.resolveAndRemoveReferenceParameter(parameters, "analyzer", Analyzer.class, new StandardAnalyzer()).     setMaxHits(component.getAndRemoveParameter(parameters, "maxHits", Integer.class, 10)). }
false;private;0;9;;private boolean isValidAuthority() throws URISyntaxException {     if ((!authority.contains(":")) || ((authority.split(":")[0]) == null) || ((!authority.split(":")[1].equalsIgnoreCase("insert")) && (!authority.split(":")[1].equalsIgnoreCase("query")))) {         return false.     }     return true. }
false;private;1;10;;private String retrieveTokenFromAuthority(String token) throws URISyntaxException {     String retval.     if (token.equalsIgnoreCase("hostname")) {         retval = uri.getAuthority().split(":")[0].     } else {         retval = uri.getAuthority().split(":")[1].     }     return retval. }
false;public;0;3;;public URI getUri() {     return uri. }
false;public;1;3;;public void setUri(URI uri) {     this.uri = uri. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * The URL to the lucene server  */ ;/**  * The URL to the lucene server  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public LuceneOperation getOperation() {     return operation. }
true;public;1;3;/**  * Operation to do such as insert or query.  */ ;/**  * Operation to do such as insert or query.  */ public void setOperation(LuceneOperation operation) {     this.operation = operation. }
false;public;0;3;;public String getAuthority() {     return authority. }
false;public;1;3;;public void setAuthority(String authority) {     this.authority = authority. }
false;public;0;3;;public File getSourceDirectory() {     return sourceDirectory. }
true;public;1;3;/**  * An optional directory containing files to be used to be analyzed and added to the index at producer startup.  */ ;/**  * An optional directory containing files to be used to be analyzed and added to the index at producer startup.  */ public void setSourceDirectory(File sourceDirectory) {     this.sourceDirectory = sourceDirectory. }
false;public;0;3;;public File getIndexDirectory() {     return indexDirectory. }
true;public;1;3;/**  * A file system directory in which index files are created upon analysis of the document by the specified analyzer  */ ;/**  * A file system directory in which index files are created upon analysis of the document by the specified analyzer  */ public void setIndexDirectory(File indexDirectory) {     this.indexDirectory = indexDirectory. }
false;public;0;3;;public Analyzer getAnalyzer() {     return analyzer. }
true;public;1;3;/**  * An Analyzer builds TokenStreams, which analyze text. It thus represents a policy for extracting index terms from text.  * The value for analyzer can be any class that extends the abstract class org.apache.lucene.analysis.Analyzer.  * Lucene also offers a rich set of analyzers out of the box  */ ;/**  * An Analyzer builds TokenStreams, which analyze text. It thus represents a policy for extracting index terms from text.  * The value for analyzer can be any class that extends the abstract class org.apache.lucene.analysis.Analyzer.  * Lucene also offers a rich set of analyzers out of the box  */ public void setAnalyzer(Analyzer analyzer) {     this.analyzer = analyzer. }
false;public;0;3;;public int getMaxHits() {     return maxHits. }
true;public;1;3;/**  * An integer value that limits the result set of the search operation  */ ;/**  * An integer value that limits the result set of the search operation  */ public void setMaxHits(int maxHits) {     this.maxHits = maxHits. }
false;public;1;3;;public void setLuceneVersion(Version luceneVersion) {     this.luceneVersion = luceneVersion. }
false;public;0;3;;public Version getLuceneVersion() {     return luceneVersion. }
