commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;10;;@Override protected void bindToRegistry(Registry registry) throws Exception {     registry.bind("std", new File("target/stdindexDir")).     registry.bind("load_dir", new File("src/test/resources/sources")).     registry.bind("stdAnalyzer", new StandardAnalyzer()).     registry.bind("simple", new File("target/simpleindexDir")).     registry.bind("simpleAnalyzer", new SimpleAnalyzer()).     registry.bind("whitespace", new File("target/whitespaceindexDir")).     registry.bind("whitespaceAnalyzer", new WhitespaceAnalyzer()). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     // Set the property of the charset encoding     exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").     Message in = exchange.getIn().     in.setBody(quote, String.class). }
false;private;1;12;;private void sendRequest(final String quote) throws Exception {     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             // Set the property of the charset encoding             exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").             Message in = exchange.getIn().             in.setBody(quote, String.class).         }     }). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     // Set the property of the charset encoding     exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").     Message in = exchange.getIn().     in.setHeader("QUERY", ""). }
false;private;0;11;;private void sendQuery() throws Exception {     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             // Set the property of the charset encoding             exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").             Message in = exchange.getIn().             in.setHeader("QUERY", "").         }     }). }
false;public;0;8;;public void configure() {     from("direct:start").to("lucene:stdQuotesIndex:insert?analyzer=#stdAnalyzer&indexDir=#std&srcDir=#load_dir").to("lucene:simpleQuotesIndex:insert?analyzer=#simpleAnalyzer&indexDir=#simple&srcDir=#load_dir").to("lucene:whitespaceQuotesIndex:insert?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&srcDir=#load_dir").to("mock:result"). }
false;public;0;26;;@Test public void testLuceneIndexProducer() throws Exception {     MockEndpoint mockEndpoint = getMockEndpoint("mock:result").     context.stop().     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").to("lucene:stdQuotesIndex:insert?analyzer=#stdAnalyzer&indexDir=#std&srcDir=#load_dir").to("lucene:simpleQuotesIndex:insert?analyzer=#simpleAnalyzer&indexDir=#simple&srcDir=#load_dir").to("lucene:whitespaceQuotesIndex:insert?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&srcDir=#load_dir").to("mock:result").         }     }).     context.start().     LOG.debug("------------Beginning LuceneIndexProducer Test---------------").     for (String quote : humorousQuotes) {         sendRequest(quote).     }     mockEndpoint.assertIsSatisfied().     LOG.debug("------------Completed LuceneIndexProducer Test---------------").     context.stop(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     Hits hits = exchange.getIn().getBody(Hits.class).     printResults(hits). }
false;private;1;8;;private void printResults(Hits hits) {     LOG.debug("Number of hits: " + hits.getNumberOfHits()).     for (int i = 0. i < hits.getNumberOfHits(). i++) {         LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).         LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).         LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).     } }
false;public;0;23;;public void configure() {     from("direct:start").setHeader("QUERY", constant("Seinfeld")).to("lucene:searchIndex:query?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&maxHits=20").to("direct:next").     from("direct:next").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Hits hits = exchange.getIn().getBody(Hits.class).             printResults(hits).         }          private void printResults(Hits hits) {             LOG.debug("Number of hits: " + hits.getNumberOfHits()).             for (int i = 0. i < hits.getNumberOfHits(). i++) {                 LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).                 LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).                 LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).             }         }     }).to("mock:searchResult"). }
false;public;0;38;;@Test public void testLucenePhraseQueryProducer() throws Exception {     MockEndpoint mockSearchEndpoint = getMockEndpoint("mock:searchResult").     context.stop().     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").setHeader("QUERY", constant("Seinfeld")).to("lucene:searchIndex:query?analyzer=#whitespaceAnalyzer&indexDir=#whitespace&maxHits=20").to("direct:next").             from("direct:next").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Hits hits = exchange.getIn().getBody(Hits.class).                     printResults(hits).                 }                  private void printResults(Hits hits) {                     LOG.debug("Number of hits: " + hits.getNumberOfHits()).                     for (int i = 0. i < hits.getNumberOfHits(). i++) {                         LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).                         LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).                         LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).                     }                 }             }).to("mock:searchResult").         }     }).     context.start().     LOG.debug("------------Beginning LuceneQueryProducer Phrase Test---------------").     sendQuery().     mockSearchEndpoint.assertIsSatisfied().     LOG.debug("------------Completed LuceneQueryProducer Phrase Test---------------").     context.stop(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     Hits hits = exchange.getIn().getBody(Hits.class).     printResults(hits). }
false;private;1;8;;private void printResults(Hits hits) {     LOG.debug("Number of hits: " + hits.getNumberOfHits()).     for (int i = 0. i < hits.getNumberOfHits(). i++) {         LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).         LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).         LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).     } }
false;public;0;23;;public void configure() {     from("direct:start").setHeader("QUERY", constant("Grouc?? Marx")).to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20").to("direct:next").     from("direct:next").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Hits hits = exchange.getIn().getBody(Hits.class).             printResults(hits).         }          private void printResults(Hits hits) {             LOG.debug("Number of hits: " + hits.getNumberOfHits()).             for (int i = 0. i < hits.getNumberOfHits(). i++) {                 LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).                 LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).                 LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).             }         }     }).to("mock:searchResult"). }
false;public;0;38;;@Test public void testLuceneWildcardQueryProducer() throws Exception {     MockEndpoint mockSearchEndpoint = getMockEndpoint("mock:searchResult").     context.stop().     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").setHeader("QUERY", constant("Grouc?? Marx")).to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20").to("direct:next").             from("direct:next").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Hits hits = exchange.getIn().getBody(Hits.class).                     printResults(hits).                 }                  private void printResults(Hits hits) {                     LOG.debug("Number of hits: " + hits.getNumberOfHits()).                     for (int i = 0. i < hits.getNumberOfHits(). i++) {                         LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).                         LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).                         LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).                     }                 }             }).to("mock:searchResult").         }     }).     context.start().     LOG.debug("------------Beginning  LuceneQueryProducer Wildcard Test---------------").     sendQuery().     mockSearchEndpoint.assertIsSatisfied().     LOG.debug("------------Completed LuceneQueryProducer Wildcard Test---------------").     context.stop(). }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     Hits hits = exchange.getIn().getBody(Hits.class).     if (hits == null) {         HashMap<String, String> map = new HashMap<>().         map.put("NO_LUCENE_DOCS_ERROR", "NO LUCENE DOCS FOUND").         exchange.getContext().setGlobalOptions(map).     }     LOG.debug("Number of hits: " + hits.getNumberOfHits()). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     Hits hits = exchange.getIn().getBody(Hits.class).     try {         printResults(hits).     } catch (Exception e) {         LOG.error(e.getMessage()).         exchange.getOut().setBody(null).     } }
false;private;1;11;;private void printResults(Hits hits) throws Exception {     LOG.debug("Number of hits: " + hits.getNumberOfHits()).     for (int i = 0. i < hits.getNumberOfHits(). i++) {         LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).         LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).         LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).         if (hits.getHit().get(i).getDocument() == null) {             throw new Exception("Failed to return lucene documents").         }     } }
false;public;0;43;;public void configure() {     from("direct:start").setHeader("QUERY", constant("Grouc?? Marx")).setHeader("RETURN_LUCENE_DOCS", constant("true")).to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20").to("direct:next").     from("direct:next").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Hits hits = exchange.getIn().getBody(Hits.class).             try {                 printResults(hits).             } catch (Exception e) {                 LOG.error(e.getMessage()).                 exchange.getOut().setBody(null).             }         }          private void printResults(Hits hits) throws Exception {             LOG.debug("Number of hits: " + hits.getNumberOfHits()).             for (int i = 0. i < hits.getNumberOfHits(). i++) {                 LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).                 LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).                 LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).                 if (hits.getHit().get(i).getDocument() == null) {                     throw new Exception("Failed to return lucene documents").                 }             }         }     }).to("mock:searchResult").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Hits hits = exchange.getIn().getBody(Hits.class).             if (hits == null) {                 HashMap<String, String> map = new HashMap<>().                 map.put("NO_LUCENE_DOCS_ERROR", "NO LUCENE DOCS FOUND").                 exchange.getContext().setGlobalOptions(map).             }             LOG.debug("Number of hits: " + hits.getNumberOfHits()).         }     }). }
false;public;0;59;;@Test public void testReturnLuceneDocsQueryProducer() throws Exception {     MockEndpoint mockSearchEndpoint = getMockEndpoint("mock:searchResult").     context.stop().     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").setHeader("QUERY", constant("Grouc?? Marx")).setHeader("RETURN_LUCENE_DOCS", constant("true")).to("lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20").to("direct:next").             from("direct:next").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Hits hits = exchange.getIn().getBody(Hits.class).                     try {                         printResults(hits).                     } catch (Exception e) {                         LOG.error(e.getMessage()).                         exchange.getOut().setBody(null).                     }                 }                  private void printResults(Hits hits) throws Exception {                     LOG.debug("Number of hits: " + hits.getNumberOfHits()).                     for (int i = 0. i < hits.getNumberOfHits(). i++) {                         LOG.debug("Hit " + i + " Index Location:" + hits.getHit().get(i).getHitLocation()).                         LOG.debug("Hit " + i + " Score:" + hits.getHit().get(i).getScore()).                         LOG.debug("Hit " + i + " Data:" + hits.getHit().get(i).getData()).                         if (hits.getHit().get(i).getDocument() == null) {                             throw new Exception("Failed to return lucene documents").                         }                     }                 }             }).to("mock:searchResult").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Hits hits = exchange.getIn().getBody(Hits.class).                     if (hits == null) {                         HashMap<String, String> map = new HashMap<>().                         map.put("NO_LUCENE_DOCS_ERROR", "NO LUCENE DOCS FOUND").                         exchange.getContext().setGlobalOptions(map).                     }                     LOG.debug("Number of hits: " + hits.getNumberOfHits()).                 }             }).         }     }).     context.start().     LOG.debug("------------Beginning  LuceneQueryProducer Wildcard with Return Lucene Docs Test---------------").     sendQuery().     mockSearchEndpoint.assertIsSatisfied().     Map<String, String> errorMap = mockSearchEndpoint.getCamelContext().getGlobalOptions().     LOG.debug("------------Completed LuceneQueryProducer Wildcard with Return Lucene Docs Test---------------").     context.stop().     assertTrue(errorMap.get("NO_LUCENE_DOCS_ERROR") == null). }
