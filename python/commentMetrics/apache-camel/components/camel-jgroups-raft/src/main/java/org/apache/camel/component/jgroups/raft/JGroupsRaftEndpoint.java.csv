commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new JGroupsRaftProducer(this, resolvedRaftHandle, clusterName). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return new JGroupsRaftConsumer(this, processor, resolvedRaftHandle, clusterName, enableRoleChangeEvents). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;6;;@Override public Exchange createExchange() {     Exchange exchange = super.createExchange().     populateJGroupsRaftHeaders(exchange).     return exchange. }
false;public;1;10;;public void populateJGroupsRaftHeaders(Exchange exchange) {     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_COMMIT_INDEX, resolvedRaftHandle.commitIndex()).     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_CURRENT_TERM, resolvedRaftHandle.currentTerm()).     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_IS_LEADER, resolvedRaftHandle.isLeader()).     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_LAST_APPLIED, resolvedRaftHandle.lastApplied()).     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_LEADER_ADDRESS, resolvedRaftHandle.leader()).     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_LOG_SIZE, resolvedRaftHandle.logSize()).     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_LOG_SIZE_BYTE, resolvedRaftHandle.logSizeInBytes()).     exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_RAFT_ID, resolvedRaftHandle.raftId()). }
false;protected;0;6;;@Override protected void doStart() throws Exception {     LOG.info("Resolving JGroupsraft handle {}", getEndpointUri()).     super.doStart().     resolvedRaftHandle = resolveHandle(). }
false;protected;0;14;;@Override protected void doStop() throws Exception {     LOG.info("Closing JGroupsraft Channel {}", getEndpointUri()).     if (resolvedRaftHandle != null && resolvedRaftHandle.channel() != null) {         resolvedRaftHandle.channel().close().         LOG.info("Closed JGroupsraft Channel {}", getEndpointUri()).     }     LOG.info("Closing Log {}", getEndpointUri()).     if (resolvedRaftHandle != null && resolvedRaftHandle.log() != null) {         resolvedRaftHandle.log().close().         LOG.info("Closed Log Channel {}", getEndpointUri()).     }     super.doStop(). }
false;private;0;12;;private RaftHandle resolveHandle() throws Exception {     if (raftHandle != null) {         LOG.trace("Raft Handle resolved as passed by Component: {}", raftHandle).         return raftHandle.     }     if (channelProperties != null && !channelProperties.isEmpty()) {         LOG.trace("Raft Handle created with configured channelProperties: {} and state machine: {}", channelProperties, stateMachine).         return new RaftHandle(new JChannel(channelProperties).name(raftId), stateMachine).raftId(raftId).     }     LOG.trace("Raft Handle created with defaults: {}, {},", JGroupsRaftConstants.DEFAULT_JGROUPSRAFT_CONFIG, stateMachine).     return new RaftHandle(new JChannel(JGroupsRaftConstants.DEFAULT_JGROUPSRAFT_CONFIG).name(raftId), stateMachine).raftId(raftId). }
true;public;0;6;/**  * Connect shared RaftHandle channel, called by producer and consumer.  * @throws Exception  */ ;/**  * Connect shared RaftHandle channel, called by producer and consumer.  * @throws Exception  */ public void connect() throws Exception {     connectCount.incrementAndGet().     LOG.trace("Connecting JGroups-raft Channel {} with cluster name: {}, raftHandle: {} and using config: {}", getEndpointUri(), clusterName, resolvedRaftHandle, channelProperties == null ? "default" : channelProperties).     resolvedRaftHandle.channel().connect(clusterName). }
true;public;0;6;/**  * Disconnect shared RaftHandle channel, called by producer and consumer.  */ ;/**  * Disconnect shared RaftHandle channel, called by producer and consumer.  */ public void disconnect() {     if (connectCount.decrementAndGet() == 0) {         LOG.trace("Disconnecting JGroupsraft Channel {}", getEndpointUri()).         resolvedRaftHandle.channel().disconnect().     } }
false;public;0;3;;public String getClusterName() {     return clusterName. }
true;public;1;3;/**  * The name of the JGroupsraft cluster the component should connect to.  */ ;/**  * The name of the JGroupsraft cluster the component should connect to.  */ public void setClusterName(String clusterName) {     this.clusterName = clusterName. }
false;public;0;3;;public boolean isEnableRoleChangeEvents() {     return enableRoleChangeEvents. }
true;public;1;3;/**  * If set to true, the consumer endpoint will receive roleChange event as well (not just connecting and/or using the state machine).  * By default it is set to false.  */ ;/**  * If set to true, the consumer endpoint will receive roleChange event as well (not just connecting and/or using the state machine).  * By default it is set to false.  */ public void setEnableRoleChangeEvents(boolean enableRoleChangeEvents) {     this.enableRoleChangeEvents = enableRoleChangeEvents. }
false;public;0;3;;public String getChannelProperties() {     return channelProperties. }
false;public;1;3;;public void setChannelProperties(String channelProperties) {     this.channelProperties = channelProperties. }
false;public;0;3;;public String getRaftId() {     return raftId. }
false;public;1;3;;public void setRaftId(String raftId) {     this.raftId = raftId. }
false;public;0;3;;public RaftHandle getRaftHandle() {     return raftHandle. }
false;public;1;3;;public void setRaftHandle(RaftHandle raftHandle) {     this.raftHandle = raftHandle. }
false;public;0;3;;public StateMachine getStateMachine() {     return stateMachine. }
false;public;1;3;;public void setStateMachine(StateMachine stateMachine) {     this.stateMachine = stateMachine. }
false;public;0;3;;public RaftHandle getResolvedRaftHandle() {     return resolvedRaftHandle. }
