commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;@Override public void roleChanged(Role role) {     LOG.trace("New Role {} received.", role).     Exchange exchange = endpoint.createExchange().     switch(role) {         case Leader:             exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.LEADER).             processExchange(role, exchange).             break.         case Follower:             exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.FOLLOWER).             processExchange(role, exchange).             break.         case Candidate:             exchange.getIn().setHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.CANDIDATE).             processExchange(role, exchange).             break.         default:             throw new JGroupsRaftException("Role [" + role + "] unknown.").     } }
false;public;1;4;;@Override public void done(boolean doneSync) { // noop }
false;private;2;13;;private void processExchange(Role role, Exchange exchange) {     try {         LOG.debug("Processing Role: {}", role).         processor.process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {             // noop             }         }).     } catch (Exception e) {         throw new JGroupsRaftException("Error in consumer while dispatching exchange containing role " + role, e).     } }
