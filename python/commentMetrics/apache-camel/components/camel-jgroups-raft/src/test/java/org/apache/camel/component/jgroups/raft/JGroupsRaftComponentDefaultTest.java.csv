commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void configure() throws Exception {     JGroupsRaftComponent defaultComponent = new JGroupsRaftComponent().     context().addComponent("my-default-jgroupsraft", defaultComponent).     from("my-default-jgroupsraft:" + CLUSTER_NAME + "?raftId=A").to("mock:default"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             JGroupsRaftComponent defaultComponent = new JGroupsRaftComponent().             context().addComponent("my-default-jgroupsraft", defaultComponent).             from("my-default-jgroupsraft:" + CLUSTER_NAME + "?raftId=A").to("mock:default").         }     }. }
false;public;0;15;;@Test public void shouldCreateHandleWithDefaults() {     JGroupsRaftEndpoint endpoint = getMandatoryEndpoint(CONFIGURED_ENDPOINT_URI, JGroupsRaftEndpoint.class).     JGroupsRaftComponent component = (JGroupsRaftComponent) endpoint.getComponent().     assertNotNull(component).     assertNotNull(endpoint.getResolvedRaftHandle()).     assertNotNull(endpoint.getResolvedRaftHandle().channel().getProtocolStack().findProtocol("RAFT")).     assertTrue(component.getStateMachine() instanceof NopStateMachine).     assertTrue(endpoint.getStateMachine() instanceof NopStateMachine).     assertNull(component.getChannelProperties()).     assertNull(endpoint.getChannelProperties()).     assertEquals("A", endpoint.getRaftId()).     assertEquals("A", endpoint.getRaftId()). }
