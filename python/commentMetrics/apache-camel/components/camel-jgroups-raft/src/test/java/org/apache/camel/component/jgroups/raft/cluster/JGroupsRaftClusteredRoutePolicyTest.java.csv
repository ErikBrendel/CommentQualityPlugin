commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void test() throws Exception {     JChannel chA = new JChannel("raftABC.xml").name("A").     RaftHandle handleA = new RaftHandle(chA, new NopStateMachine()).raftId("A").     CamelContext contextA = createContext("A", handleA).     JChannel chB = new JChannel("raftABC.xml").name("B").     RaftHandle handleB = new RaftHandle(chB, new NopStateMachine()).raftId("B").     CamelContext contextB = createContext("B", handleB).     JChannel chC = new JChannel("raftABC.xml").name("C").     RaftHandle handleC = new RaftHandle(chC, new NopStateMachine()).raftId("C").     CamelContext contextC = createContext("C", handleC).     lcc.add(contextA).     rn.add("route-A").     lcc.add(contextB).     rn.add("route-B").     lcc.add(contextC).     rn.add("route-C").     contextA.start().     contextB.start().     contextC.start().     waitForLeader(50, handleA, handleB, handleC).     assertEquals(1, countActiveFromEndpoints(lcc, rn)).     contextA.stop().     waitForLeader(50, handleA, handleB, handleC).     assertEquals(1, countActiveFromEndpoints(lcc, rn)).     contextB.stop().     chA = new JChannel("raftABC.xml").name("A").     handleA = new RaftHandle(chA, new NopStateMachine()).raftId("A").     contextA = createContext("A", handleA).     contextA.start().     waitForLeader(50, handleA, handleB, handleC).     assertEquals(1, countActiveFromEndpoints(lcc, rn)). }
false;public;0;7;;@Override public void configure() throws Exception {     from("timer:master?delay=1s&period=1s").routeId("route-" + id).routePolicy(ClusteredRoutePolicy.forNamespace("jgr")).log("From ${routeId}"). }
false;private;2;23;;private CamelContext createContext(String id, RaftHandle rh) throws Exception {     JGroupsRaftClusterService service = new JGroupsRaftClusterService().     service.setId(id).     service.setRaftId(id).     service.setRaftHandle(rh).     service.setJgroupsClusterName("JGroupsRaftClusteredRoutePolicyTest").     DefaultCamelContext context = new DefaultCamelContext().     context.disableJMX().     context.setName("context-" + id).     context.addService(service).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:master?delay=1s&period=1s").routeId("route-" + id).routePolicy(ClusteredRoutePolicy.forNamespace("jgr")).log("From ${routeId}").         }     }).     return context. }
false;private;2;13;;private int countActiveFromEndpoints(ArrayList<CamelContext> lcc, ArrayList<String> rn) throws NoSuchFieldException, IllegalAccessException {     int result = 0.     if (lcc.size() != rn.size()) {         throw new UnsupportedOperationException("CamelContext list and Route ids list must have the same number of elements!").     }     for (int i = 0. i < lcc.size(). i++) {         ServiceStatus status = lcc.get(i).getRouteController().getRouteStatus(rn.get(i)).         if (ServiceStatus.Starting.equals(status) || ServiceStatus.Started.equals(status)) {             result++.         }     }     return result. }
