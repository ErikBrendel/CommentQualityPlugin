commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from(CONFIGURED_ENDPOINT_URI).to("mock:out").     from(CONFIGURED_ENDPOINT_URI2).to("mock:out2").     from(CONFIGURED_ENDPOINT_URI3).to("mock:out3"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(CONFIGURED_ENDPOINT_URI).to("mock:out").             from(CONFIGURED_ENDPOINT_URI2).to("mock:out2").             from(CONFIGURED_ENDPOINT_URI3).to("mock:out3").         }     }. }
false;public;0;44;;@Test public void shouldReceiveChangeRoleEvents() throws Exception {     JGroupsRaftEndpoint endpoint = getMandatoryEndpoint(CONFIGURED_ENDPOINT_URI, JGroupsRaftEndpoint.class).     JGroupsRaftEndpoint endpoint2 = getMandatoryEndpoint(CONFIGURED_ENDPOINT_URI2, JGroupsRaftEndpoint.class).     JGroupsRaftEndpoint endpoint3 = getMandatoryEndpoint(CONFIGURED_ENDPOINT_URI3, JGroupsRaftEndpoint.class).     waitForLeader(5, endpoint.getResolvedRaftHandle(), endpoint2.getResolvedRaftHandle(), endpoint3.getResolvedRaftHandle()).     MockEndpoint mock = getMockEndpoint("mock:out").     MockEndpoint mock2 = getMockEndpoint("mock:out2").     MockEndpoint mock3 = getMockEndpoint("mock:out3").     Exchange leaderEventExchange = null.     for (Exchange exc : mock.getReceivedExchanges()) {         LOG.info("mock" + exc.getIn().getHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.class)).         if (leaderEventExchange != null) {             break.         }         if (JGroupsRaftEventType.LEADER.equals(exc.getIn().getHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.class))) {             leaderEventExchange = exc.         }     }     for (Exchange exc : mock2.getReceivedExchanges()) {         LOG.info("mock2" + exc.getIn().getHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.class)).         if (leaderEventExchange != null) {             break.         }         if (JGroupsRaftEventType.LEADER.equals(exc.getIn().getHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.class))) {             leaderEventExchange = exc.         }     }     for (Exchange exc : mock3.getReceivedExchanges()) {         LOG.info("mock3" + exc.getIn().getHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.class)).         if (leaderEventExchange != null) {             break.         }         if (JGroupsRaftEventType.LEADER.equals(exc.getIn().getHeader(JGroupsRaftConstants.HEADER_JGROUPSRAFT_EVENT_TYPE, JGroupsRaftEventType.class))) {             leaderEventExchange = exc.         }     }     checkHeaders(leaderEventExchange). }
