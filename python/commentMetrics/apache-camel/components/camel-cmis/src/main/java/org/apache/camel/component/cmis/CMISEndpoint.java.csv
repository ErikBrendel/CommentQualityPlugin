commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public Producer createProducer() throws Exception {     return this.queryMode ? new CMISQueryProducer(this, sessionFacadeFactory) : new CMISProducer(this, sessionFacadeFactory). }
false;public;1;7;;@Override public Consumer createConsumer(Processor processor) throws Exception {     CMISConsumer consumer = new CMISConsumer(this, processor, sessionFacadeFactory).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public boolean isQueryMode() {     return queryMode. }
true;public;1;3;/**  * If true, will execute the cmis query from the message body and return result, otherwise will create a node in the cmis repository  */ ;/**  * If true, will execute the cmis query from the message body and return result, otherwise will create a node in the cmis repository  */ public void setQueryMode(boolean queryMode) {     this.queryMode = queryMode. }
false;public;0;3;;public String getCmsUrl() {     return cmsUrl. }
false;public;0;3;;public CMISSessionFacade getSessionFacade() {     return sessionFacade. }
true;public;1;3;/**  * Session configuration  */ ;/**  * Session configuration  */ public void setSessionFacade(CMISSessionFacade sessionFacade) {     this.sessionFacade = sessionFacade. }
false;public;0;3;;public Map<String, Object> getProperties() {     return properties. }
false;public;1;3;;public void setProperties(Map<String, Object> properties) {     this.properties = properties. }
false;public;0;3;;public CMISSessionFacadeFactory getSessionFacadeFactory() {     return sessionFacadeFactory. }
true;public;1;3;/**  * To use a custom CMISSessionFacadeFactory to create the CMISSessionFacade instances  */ ;/**  * To use a custom CMISSessionFacadeFactory to create the CMISSessionFacade instances  */ public void setSessionFacadeFactory(CMISSessionFacadeFactory sessionFacadeFactory) {     this.sessionFacadeFactory = sessionFacadeFactory. }
