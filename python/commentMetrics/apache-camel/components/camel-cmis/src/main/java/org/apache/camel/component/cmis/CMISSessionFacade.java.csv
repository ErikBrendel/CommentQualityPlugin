commented;modifiers;parameterAmount;loc;comment;code
false;;0;13;;void initSession() {     Map<String, String> parameter = new HashMap<>().     parameter.put(SessionParameter.BINDING_TYPE, BindingType.ATOMPUB.value()).     parameter.put(SessionParameter.ATOMPUB_URL, this.url).     parameter.put(SessionParameter.USER, this.username).     parameter.put(SessionParameter.PASSWORD, this.password).     if (this.repositoryId != null) {         parameter.put(SessionParameter.REPOSITORY_ID, this.repositoryId).         this.session = SessionFactoryLocator.getSessionFactory().createSession(parameter).     } else {         this.session = SessionFactoryLocator.getSessionFactory().getRepositories(parameter).get(0).createSession().     } }
false;public;1;6;;public int poll(CMISConsumer cmisConsumer) throws Exception {     if (query != null) {         return pollWithQuery(cmisConsumer).     }     return pollTree(cmisConsumer). }
false;private;1;6;;private int pollTree(CMISConsumer cmisConsumer) throws Exception {     Folder rootFolder = session.getRootFolder().     RecursiveTreeWalker treeWalker = new RecursiveTreeWalker(cmisConsumer, readContent, readCount, pageSize).     return treeWalker.processFolderRecursively(rootFolder). }
false;private;1;30;;private int pollWithQuery(CMISConsumer cmisConsumer) throws Exception {     int count = 0.     int pageNumber = 0.     boolean finished = false.     ItemIterable<QueryResult> itemIterable = executeQuery(query).     while (!finished) {         ItemIterable<QueryResult> currentPage = itemIterable.skipTo(count).getPage().         LOG.debug("Processing page {}", pageNumber).         for (QueryResult item : currentPage) {             Map<String, Object> properties = CMISHelper.propertyDataToMap(item.getProperties()).             Object objectTypeId = item.getPropertyValueById(PropertyIds.OBJECT_TYPE_ID).             InputStream inputStream = null.             if (readContent && CamelCMISConstants.CMIS_DOCUMENT.equals(objectTypeId)) {                 inputStream = getContentStreamFor(item).             }             cmisConsumer.sendExchangeWithPropsAndBody(properties, inputStream).             count++.             if (count == readCount) {                 finished = true.                 break.             }         }         pageNumber++.         if (!currentPage.getHasMoreItems()) {             finished = true.         }     }     return count. }
true;public;3;32;// some duplication ;// some duplication public List<Map<String, Object>> retrieveResult(Boolean retrieveContent, Integer readSize, ItemIterable<QueryResult> itemIterable) {     List<Map<String, Object>> result = new ArrayList<>().     boolean queryForContent = retrieveContent != null ? retrieveContent : readContent.     int documentsToRead = readSize != null ? readSize : readCount.     int count = 0.     int pageNumber = 0.     boolean finished = false.     while (!finished) {         ItemIterable<QueryResult> currentPage = itemIterable.skipTo(count).getPage().         LOG.debug("Processing page {}", pageNumber).         for (QueryResult item : currentPage) {             Map<String, Object> properties = CMISHelper.propertyDataToMap(item.getProperties()).             if (queryForContent) {                 InputStream inputStream = getContentStreamFor(item).                 properties.put(CamelCMISConstants.CAMEL_CMIS_CONTENT_STREAM, inputStream).             }             result.add(properties).             count++.             if (count == documentsToRead) {                 finished = true.                 break.             }         }         pageNumber++.         if (!currentPage.getHasMoreItems()) {             finished = true.         }     }     return result. }
false;public;1;5;;public ItemIterable<QueryResult> executeQuery(String query) {     OperationContext operationContext = session.createOperationContext().     operationContext.setMaxItemsPerPage(pageSize).     return session.query(query, false, operationContext). }
false;public;1;8;;public Document getDocument(QueryResult queryResult) {     if (CamelCMISConstants.CMIS_DOCUMENT.equals(queryResult.getPropertyValueById(PropertyIds.OBJECT_TYPE_ID)) || CamelCMISConstants.CMIS_DOCUMENT.equals(queryResult.getPropertyValueById(PropertyIds.BASE_TYPE_ID))) {         String objectId = (String) queryResult.getPropertyById(PropertyIds.OBJECT_ID).getFirstValue().         return (org.apache.chemistry.opencmis.client.api.Document) session.getObject(objectId).     }     return null. }
false;public;1;10;;public InputStream getContentStreamFor(QueryResult item) {     Document document = getDocument(item).     if (document != null) {         ContentStream contentStream = document.getContentStream().         if (contentStream != null) {             return contentStream.getStream().         }     }     return null. }
false;public;1;3;;public CmisObject getObjectByPath(String path) {     return session.getObjectByPath(path). }
false;public;1;7;;public boolean isObjectTypeVersionable(String objectType) {     if (CamelCMISConstants.CMIS_DOCUMENT.equals(getCMISTypeFor(objectType))) {         ObjectType typeDefinition = session.getTypeDefinition(objectType).         return ((DocumentType) typeDefinition).isVersionable().     }     return false. }
false;public;0;11;;public boolean supportsSecondaries() {     if (session.getRepositoryInfo().getCmisVersion() == CmisVersion.CMIS_1_0) {         return false.     }     for (ObjectType type : session.getTypeChildren(null, false)) {         if (BaseTypeId.CMIS_SECONDARY.value().equals(type.getId())) {             return true.         }     }     return false. }
false;public;3;4;;public ContentStream createContentStream(String fileName, byte[] buf, String mimeType) throws Exception {     return buf != null ? session.getObjectFactory().createContentStream(fileName, buf.length, mimeType, new ByteArrayInputStream(buf)) : null. }
false;public;1;4;;public String getCMISTypeFor(String customOrCMISType) {     ObjectType objectBaseType = session.getTypeDefinition(customOrCMISType).getBaseType().     return objectBaseType == null ? customOrCMISType : objectBaseType.getId(). }
false;public;1;3;;public Set<String> getPropertiesFor(String objectType) {     return session.getTypeDefinition(objectType).getPropertyDefinitions().keySet(). }
false;public;0;3;;public OperationContext createOperationContext() {     return session.createOperationContext(). }
true;public;1;3;/**  * Username for the cmis repository  */ ;/**  * Username for the cmis repository  */ public void setUsername(String username) {     this.username = username. }
true;public;1;3;/**  * Password for the cmis repository  */ ;/**  * Password for the cmis repository  */ public void setPassword(String password) {     this.password = password. }
true;public;1;3;/**  * The Id of the repository to use. If not specified the first available repository is used  */ ;/**  * The Id of the repository to use. If not specified the first available repository is used  */ public void setRepositoryId(String repositoryId) {     this.repositoryId = repositoryId. }
true;public;1;3;/**  * If set to true, the content of document node will be retrieved in addition to the properties  */ ;/**  * If set to true, the content of document node will be retrieved in addition to the properties  */ public void setReadContent(boolean readContent) {     this.readContent = readContent. }
true;public;1;3;/**  * Max number of nodes to read  */ ;/**  * Max number of nodes to read  */ public void setReadCount(int readCount) {     this.readCount = readCount. }
true;public;1;3;/**  * The cmis query to execute against the repository.  * If not specified, the consumer will retrieve every node from the content repository by iterating the content tree recursively  */ ;/**  * The cmis query to execute against the repository.  * If not specified, the consumer will retrieve every node from the content repository by iterating the content tree recursively  */ public void setQuery(String query) {     this.query = query. }
true;public;1;3;/**  * Number of nodes to retrieve per page  */ ;/**  * Number of nodes to retrieve per page  */ public void setPageSize(int pageSize) {     this.pageSize = pageSize. }
