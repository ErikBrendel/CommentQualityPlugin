commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CMISEndpoint getEndpoint() {     return (CMISEndpoint) super.getEndpoint(). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     CmisObject cmisObject = createNode(exchange).     log.debug("Created node with id: {}", cmisObject.getId()).     // copy the header of in message to the out message     exchange.getOut().copyFrom(exchange.getIn()).     exchange.getOut().setBody(cmisObject.getId()). }
false;private;1;26;;private Map<String, Object> filterTypeProperties(Map<String, Object> properties) throws Exception {     Map<String, Object> result = new HashMap<>(properties.size()).     String objectTypeName = CamelCMISConstants.CMIS_DOCUMENT.     if (properties.containsKey(PropertyIds.OBJECT_TYPE_ID)) {         objectTypeName = (String) properties.get(PropertyIds.OBJECT_TYPE_ID).     }     Set<String> types = new HashSet<>().     types.addAll(getSessionFacade().getPropertiesFor(objectTypeName)).     if (getSessionFacade().supportsSecondaries() && properties.containsKey(PropertyIds.SECONDARY_OBJECT_TYPE_IDS)) {         @SuppressWarnings("unchecked")         Collection<String> secondaryTypes = (Collection<String>) properties.get(PropertyIds.SECONDARY_OBJECT_TYPE_IDS).         for (String secondaryType : secondaryTypes) {             types.addAll(getSessionFacade().getPropertiesFor(secondaryType)).         }     }     for (Map.Entry<String, Object> entry : properties.entrySet()) {         if (types.contains(entry.getKey())) {             result.put(entry.getKey(), entry.getValue()).         }     }     return result. }
false;private;1;20;;private CmisObject createNode(Exchange exchange) throws Exception {     validateRequiredHeader(exchange, PropertyIds.NAME).     Message message = exchange.getIn().     String parentFolderPath = parentFolderPathFor(message).     Folder parentFolder = getFolderOnPath(exchange, parentFolderPath).     Map<String, Object> cmisProperties = filterTypeProperties(message.getHeaders()).     if (isDocument(exchange)) {         String fileName = message.getHeader(PropertyIds.NAME, String.class).         String mimeType = getMimeType(message).         byte[] buf = getBodyData(message).         ContentStream contentStream = getSessionFacade().createContentStream(fileName, buf, mimeType).         return storeDocument(parentFolder, cmisProperties, contentStream).     } else if (isFolder(message)) {         return storeFolder(parentFolder, cmisProperties).     } else {         // other types         return storeDocument(parentFolder, cmisProperties, null).     } }
false;private;2;7;;private Folder getFolderOnPath(Exchange exchange, String path) throws Exception {     try {         return (Folder) getSessionFacade().getObjectByPath(path).     } catch (CmisObjectNotFoundException e) {         throw new RuntimeExchangeException("Path not found " + path, exchange, e).     } }
false;private;1;16;;private String parentFolderPathFor(Message message) throws Exception {     String customPath = message.getHeader(CamelCMISConstants.CMIS_FOLDER_PATH, String.class).     if (customPath != null) {         return customPath.     }     if (isFolder(message)) {         String path = (String) message.getHeader(PropertyIds.PATH).         String name = (String) message.getHeader(PropertyIds.NAME).         if (path != null && path.length() > name.length()) {             return path.substring(0, path.length() - name.length()).         }     }     return "/". }
false;private;1;7;;private boolean isFolder(Message message) throws Exception {     String baseTypeId = message.getHeader(PropertyIds.OBJECT_TYPE_ID, String.class).     if (baseTypeId != null) {         return CamelCMISConstants.CMIS_FOLDER.equals(getSessionFacade().getCMISTypeFor(baseTypeId)).     }     return message.getBody() == null. }
false;private;2;7;;private Folder storeFolder(Folder parentFolder, Map<String, Object> cmisProperties) throws Exception {     if (!cmisProperties.containsKey(PropertyIds.OBJECT_TYPE_ID)) {         cmisProperties.put(PropertyIds.OBJECT_TYPE_ID, CamelCMISConstants.CMIS_FOLDER).     }     log.debug("Creating folder with properties: {}", cmisProperties).     return parentFolder.createFolder(cmisProperties). }
false;private;3;12;;private Document storeDocument(Folder parentFolder, Map<String, Object> cmisProperties, ContentStream contentStream) throws Exception {     if (!cmisProperties.containsKey(PropertyIds.OBJECT_TYPE_ID)) {         cmisProperties.put(PropertyIds.OBJECT_TYPE_ID, CamelCMISConstants.CMIS_DOCUMENT).     }     VersioningState versioningState = VersioningState.NONE.     if (getSessionFacade().isObjectTypeVersionable((String) cmisProperties.get(PropertyIds.OBJECT_TYPE_ID))) {         versioningState = VersioningState.MAJOR.     }     log.debug("Creating document with properties: {}", cmisProperties).     return parentFolder.createDocument(cmisProperties, contentStream, versioningState). }
false;private;2;3;;private void validateRequiredHeader(Exchange exchange, String name) throws NoSuchHeaderException {     ExchangeHelper.getMandatoryHeader(exchange, name, String.class). }
false;private;1;7;;private boolean isDocument(Exchange exchange) throws Exception {     String baseTypeId = exchange.getIn().getHeader(PropertyIds.OBJECT_TYPE_ID, String.class).     if (baseTypeId != null) {         return CamelCMISConstants.CMIS_DOCUMENT.equals(getSessionFacade().getCMISTypeFor(baseTypeId)).     }     return exchange.getIn().getBody() != null. }
false;private;1;3;;private byte[] getBodyData(Message message) {     return message.getBody(byte[].class). }
false;private;1;7;;private String getMimeType(Message message) throws NoSuchHeaderException {     String mimeType = message.getHeader(PropertyIds.CONTENT_STREAM_MIME_TYPE, String.class).     if (mimeType == null) {         mimeType = MessageHelper.getContentType(message).     }     return mimeType. }
false;private;0;11;;private CMISSessionFacade getSessionFacade() throws Exception {     if (sessionFacade == null) {         CMISSessionFacade sessionFacade = sessionFacadeFactory.create(getEndpoint()).         sessionFacade.initSession().         // make sure to set sessionFacade to the field after successful initialisation         // so that it has a valid session         this.sessionFacade = sessionFacade.     }     return sessionFacade. }
