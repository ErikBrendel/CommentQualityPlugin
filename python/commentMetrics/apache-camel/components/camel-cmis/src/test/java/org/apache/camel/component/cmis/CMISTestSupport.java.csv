commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getUrl() {     return String.format(CMIS_ENDPOINT_TEST_SERVER, port). }
false;protected;1;7;;protected Exchange createExchangeWithInBody(String body) {     DefaultExchange exchange = new DefaultExchange(context).     if (body != null) {         exchange.getIn().setBody(body).     }     return exchange. }
false;protected;1;4;;protected CmisObject retrieveCMISObjectByIdFromServer(String nodeId) throws Exception {     Session session = createSession().     return session.getObject(nodeId). }
false;protected;0;17;;protected void deleteAllContent() {     Session session = createSession().     Folder rootFolder = session.getRootFolder().     ItemIterable<CmisObject> children = rootFolder.getChildren().     for (CmisObject cmisObject : children) {         if ("cmis:folder".equals(cmisObject.getPropertyValue(PropertyIds.OBJECT_TYPE_ID))) {             List<String> notDeltedIdList = ((Folder) cmisObject).deleteTree(true, UnfileObject.DELETE, true).             if (notDeltedIdList != null && notDeltedIdList.size() > 0) {                 throw new RuntimeException("Cannot empty repo").             }         } else {             cmisObject.delete(true).         }     }     session.getBinding().close(). }
false;protected;0;9;;protected Session createSession() {     SessionFactory sessionFactory = SessionFactoryImpl.newInstance().     Map<String, String> parameter = new HashMap<>().     parameter.put(SessionParameter.ATOMPUB_URL, getUrl()).     parameter.put(SessionParameter.BINDING_TYPE, BindingType.ATOMPUB.value()).     Repository repository = sessionFactory.getRepositories(parameter).get(0).     return repository.createSession(). }
false;protected;1;6;;protected String getDocumentContentAsString(String nodeId) throws Exception {     CmisObject cmisObject = retrieveCMISObjectByIdFromServer(nodeId).     Document doc = (Document) cmisObject.     InputStream inputStream = doc.getContentStream().getStream().     return readFromStream(inputStream). }
false;protected;1;11;;protected String readFromStream(InputStream in) throws Exception {     StringBuilder result = new StringBuilder().     BufferedReader br = new BufferedReader(new InputStreamReader(in)).     String strLine.     while ((strLine = br.readLine()) != null) {         result.append(strLine).     }     in.close().     return result.toString(). }
false;protected;1;4;;protected Folder createFolderWithName(String folderName) {     Folder rootFolder = createSession().getRootFolder().     return createChildFolderWithName(rootFolder, folderName). }
false;protected;2;6;;protected Folder createChildFolderWithName(Folder parent, String childName) {     Map<String, String> newFolderProps = new HashMap<>().     newFolderProps.put(PropertyIds.OBJECT_TYPE_ID, "cmis:folder").     newFolderProps.put(PropertyIds.NAME, childName).     return parent.createFolder(newFolderProps). }
false;protected;3;12;;protected void createTextDocument(Folder newFolder, String content, String fileName) throws UnsupportedEncodingException {     byte[] buf = content.getBytes("UTF-8").     ByteArrayInputStream input = new ByteArrayInputStream(buf).     ContentStream contentStream = createSession().getObjectFactory().createContentStream(fileName, buf.length, "text/plain. charset=UTF-8", input).     Map<String, Object> properties = new HashMap<>().     properties.put(PropertyIds.OBJECT_TYPE_ID, "cmis:document").     properties.put(PropertyIds.NAME, fileName).     newFolder.createDocument(properties, contentStream, VersioningState.NONE). }
false;public,static;0;7;;@BeforeClass public static void startServer() throws Exception {     port = AvailablePortFinder.getNextAvailable(26500).     cmisServer = new Server(port).     cmisServer.setHandler(new WebAppContext(OPEN_CMIS_SERVER_WAR_PATH, "/chemistry-opencmis-server-inmemory")).     cmisServer.start(). }
false;public,static;0;4;;@AfterClass public static void stopServer() throws Exception {     cmisServer.stop(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteAllContent().     super.setUp(). }
