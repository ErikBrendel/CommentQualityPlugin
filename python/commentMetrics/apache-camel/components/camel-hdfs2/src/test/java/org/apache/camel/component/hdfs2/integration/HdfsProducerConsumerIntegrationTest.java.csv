commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;@Override public void configure() {     from("direct:start").to("hdfs2://localhost:9000/tmp/test/test-camel-simple-write-file?fileSystemType=HDFS&splitStrategy=BYTES:5,IDLE:1000").     from("hdfs2://localhost:9000/tmp/test/test-camel-simple-write-file?pattern=*&initialDelay=2000&fileSystemType=HDFS&chunkSize=5").to("mock:result"). }
false;public;0;31;;@Test public void testSimpleSplitWriteRead() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("hdfs2://localhost:9000/tmp/test/test-camel-simple-write-file?fileSystemType=HDFS&splitStrategy=BYTES:5,IDLE:1000").             from("hdfs2://localhost:9000/tmp/test/test-camel-simple-write-file?pattern=*&initialDelay=2000&fileSystemType=HDFS&chunkSize=5").to("mock:result").         }     }).     context.start().     Set<String> sent = new HashSet<>().     for (int i = 0. i < 10. ++i) {         String text = "CIAO" + i.         sent.add(text).         template.sendBody("direct:start", text).     }     MockEndpoint resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(10).     resultEndpoint.assertIsSatisfied().     List<Exchange> exchanges = resultEndpoint.getExchanges().     for (Exchange exchange : exchanges) {         String text = exchange.getIn().getBody(String.class).         sent.remove(text).     }     assertThat(sent.isEmpty(), is(true)). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     fileNames.add(exchange.getIn().getHeader(Exchange.FILE_NAME, String.class)).     latch.countDown(). }
false;public;0;8;;@Override public void configure() {     // difference in chunkSize only to allow multiple consumers     from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=128").to("mock:result").     from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=256").to("mock:result").     from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=512").to("mock:result").     from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=1024").to("mock:result"). }
false;public;0;43;;@Test public // see https://issues.apache.org/jira/browse/CAMEL-7318 void testMultipleConsumers() throws Exception {     Path p = new Path("hdfs://localhost:9000/tmp/test/multiple-consumers").     FileSystem fs = FileSystem.get(p.toUri(), new Configuration()).     fs.mkdirs(p).     for (int i = 1. i <= ITERATIONS. i++) {         FSDataOutputStream os = fs.create(new Path(p, String.format("file-%03d.txt", i))).         os.write(String.format("hello (%03d)\n", i).getBytes()).         os.close().     }     final Set<String> fileNames = new HashSet<>().     final CountDownLatch latch = new CountDownLatch(ITERATIONS).     MockEndpoint resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             fileNames.add(exchange.getIn().getHeader(Exchange.FILE_NAME, String.class)).             latch.countDown().         }     }).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() {             // difference in chunkSize only to allow multiple consumers             from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=128").to("mock:result").             from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=256").to("mock:result").             from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=512").to("mock:result").             from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=1024").to("mock:result").         }     }).     context.start().     resultEndpoint.expectedMessageCount(ITERATIONS).     latch.await(30, TimeUnit.SECONDS).     resultEndpoint.assertIsSatisfied().     assertThat(fileNames.size(), equalTo(ITERATIONS)). }
false;public;0;12;;@Override @After public void tearDown() throws Exception {     super.tearDown().     Thread.sleep(250).     Configuration conf = new Configuration().     Path dir = new Path("hdfs://localhost:9000/tmp/test").     FileSystem fs = FileSystem.get(dir.toUri(), conf).     fs.delete(dir, true).     fs.delete(new Path("hdfs://localhost:9000/tmp/test/multiple-consumers"), true). }
