commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;18;;@Override @Before public void setUp() throws Exception {     super.setUp().     Configuration conf = new Configuration().     conf.addResource("hdfs-test.xml").     Path file = new Path("hdfs://localhost:9000/tmp/test/test-camel-simple-write-file1").     FileSystem fs = FileSystem.get(file.toUri(), conf).     if (fs.exists(file)) {         fs.delete(file, true).     }     FSDataOutputStream out = fs.create(file).     for (int i = 0. i < 10. ++i) {         out.write("PIPPO".getBytes("UTF-8")).     }     out.close(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start1").to("hdfs2://localhost:9000/tmp/test/test-camel-simple-write-file1?append=true&fileSystemType=HDFS"). }
false;public;0;28;;@Test public void testAppend() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start1").to("hdfs2://localhost:9000/tmp/test/test-camel-simple-write-file1?append=true&fileSystemType=HDFS").         }     }).     startCamelContext().     for (int i = 0. i < 10. ++i) {         template.sendBody("direct:start1", "PIPPQ").     }     Configuration conf = new Configuration().     Path file = new Path("hdfs://localhost:9000/tmp/test/test-camel-simple-write-file1").     FileSystem fs = FileSystem.get(file.toUri(), conf).     FSDataInputStream in = fs.open(file).     byte[] buffer = new byte[5].     int ret = 0.     for (int i = 0. i < 20. ++i) {         ret = in.read(buffer).         System.out.println("> " + new String(buffer)).     }     ret = in.read(buffer).     assertEquals(-1, ret).     in.close(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start1").to("hdfs2://localhost:9000/tmp/test-dynamic/?append=true&fileSystemType=HDFS"). }
false;public;0;28;;@Test public void testAppendWithDynamicFileName() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start1").to("hdfs2://localhost:9000/tmp/test-dynamic/?append=true&fileSystemType=HDFS").         }     }).     startCamelContext().     for (int i = 0. i < ITERATIONS. ++i) {         template.sendBodyAndHeader("direct:start1", "HELLO", Exchange.FILE_NAME, "camel-hdfs2.log").     }     Configuration conf = new Configuration().     Path file = new Path("hdfs://localhost:9000/tmp/test-dynamic/camel-hdfs2.log").     FileSystem fs = FileSystem.get(file.toUri(), conf).     FSDataInputStream in = fs.open(file).     byte[] buffer = new byte[5].     for (int i = 0. i < ITERATIONS. ++i) {         assertEquals(5, in.read(buffer)).         System.out.println("> " + new String(buffer)).     }     int ret = in.read(buffer).     assertEquals(-1, ret).     in.close(). }
false;public;0;13;;@Override @After public void tearDown() throws Exception {     super.tearDown().     Thread.sleep(250).     Configuration conf = new Configuration().     Path dir = new Path("hdfs://localhost:9000/tmp/test").     FileSystem fs = FileSystem.get(dir.toUri(), conf).     fs.delete(dir, true).     dir = new Path("hdfs://localhost:9000/tmp/test-dynamic").     fs.delete(dir, true). }
