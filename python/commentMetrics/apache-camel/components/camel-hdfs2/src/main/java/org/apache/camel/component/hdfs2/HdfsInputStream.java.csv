commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;16;;public static HdfsInputStream createInputStream(String hdfsPath, HdfsConfiguration configuration) throws IOException {     HdfsInputStream ret = new HdfsInputStream().     ret.fileType = configuration.getFileType().     ret.actualPath = hdfsPath.     ret.suffixedPath = ret.actualPath + '.' + configuration.getOpenedSuffix().     ret.suffixedReadPath = ret.actualPath + '.' + configuration.getReadSuffix().     ret.chunkSize = configuration.getChunkSize().     HdfsInfo info = HdfsInfoFactory.newHdfsInfo(ret.actualPath).     if (info.getFileSystem().rename(new Path(ret.actualPath), new Path(ret.suffixedPath))) {         ret.in = ret.fileType.createInputStream(ret.suffixedPath, configuration).         ret.opened = true.     } else {         ret.opened = false.     }     return ret. }
false;public,final;0;9;;@Override public final void close() throws IOException {     if (opened) {         IOUtils.closeStream(in).         HdfsInfo info = HdfsInfoFactory.newHdfsInfo(actualPath).         info.getFileSystem().rename(new Path(suffixedPath), new Path(suffixedReadPath)).         opened = false.     } }
true;public,final;2;15;/**  * Reads next record/chunk specific to give file type.  * @param key  * @param value  * @return number of bytes read. 0 is correct number of bytes (empty file), -1 indicates no record was read  */ ;/**  * Reads next record/chunk specific to give file type.  * @param key  * @param value  * @return number of bytes read. 0 is correct number of bytes (empty file), -1 indicates no record was read  */ public final long next(Holder<Object> key, Holder<Object> value) {     long nb = fileType.next(this, key, value).     // null value.value is the only indication that no (new) record/chunk was read     if (nb == 0 && numOfReadMessages.get() > 0) {         // we've read all chunks from file, which size is exact multiple the chunk size         return -1.     }     if (value.value != null) {         numOfReadBytes.addAndGet(nb).         numOfReadMessages.incrementAndGet().         return nb.     }     return -1. }
false;public,final;0;3;;public final long getNumOfReadBytes() {     return numOfReadBytes.longValue(). }
false;public,final;0;3;;public final long getNumOfReadMessages() {     return numOfReadMessages.longValue(). }
false;public,final;0;3;;public final String getActualPath() {     return actualPath. }
false;public,final;0;3;;public final int getChunkSize() {     return chunkSize. }
false;public,final;0;3;;public final Closeable getIn() {     return in. }
false;public;0;3;;public boolean isOpened() {     return opened. }
