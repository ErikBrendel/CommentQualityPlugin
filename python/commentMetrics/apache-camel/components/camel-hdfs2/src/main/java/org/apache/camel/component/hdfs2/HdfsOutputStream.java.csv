commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;31;;public static HdfsOutputStream createOutputStream(String hdfsPath, HdfsConfiguration configuration) throws IOException {     HdfsOutputStream ret = new HdfsOutputStream().     ret.fileType = configuration.getFileType().     ret.actualPath = hdfsPath.     ret.info = new HdfsInfo(ret.actualPath).     ret.suffixedPath = ret.actualPath + '.' + configuration.getOpenedSuffix().     if (configuration.isWantAppend() || configuration.isAppend()) {         if (!ret.info.getFileSystem().exists(new Path(ret.actualPath))) {             configuration.setAppend(false).         } else {             configuration.setAppend(true).             ret.info = new HdfsInfo(ret.suffixedPath).             ret.info.getFileSystem().rename(new Path(ret.actualPath), new Path(ret.suffixedPath)).         }     } else {         if (ret.info.getFileSystem().exists(new Path(ret.actualPath))) {             // only check if not directory             if (!ret.info.getFileSystem().isDirectory(new Path(ret.actualPath))) {                 if (configuration.isOverwrite()) {                     ret.info.getFileSystem().delete(new Path(ret.actualPath), true).                 } else {                     throw new RuntimeCamelException("The file already exists").                 }             }         }     }     ret.out = ret.fileType.createOutputStream(ret.suffixedPath, configuration).     ret.opened = true.     return ret. }
false;public;0;8;;@Override public void close() throws IOException {     if (opened) {         IOUtils.closeStream(out).         info.getFileSystem().rename(new Path(suffixedPath), new Path(actualPath)).         opened = false.     } }
false;public;3;11;;public void append(Object key, Object value, TypeConverter typeConverter) {     try {         busy.set(true).         long nb = fileType.append(this, key, value, typeConverter).         numOfWrittenBytes.addAndGet(nb).         numOfWrittenMessages.incrementAndGet().         lastAccess.set(System.currentTimeMillis()).     } finally {         busy.set(false).     } }
false;public;0;3;;public long getNumOfWrittenBytes() {     return numOfWrittenBytes.longValue(). }
false;public;0;3;;public long getNumOfWrittenMessages() {     return numOfWrittenMessages.longValue(). }
false;public;0;3;;public long getLastAccess() {     return lastAccess.longValue(). }
false;public;0;3;;public String getActualPath() {     return actualPath. }
false;public;0;3;;public AtomicBoolean isBusy() {     return busy. }
false;public;0;3;;public Closeable getOut() {     return out. }
