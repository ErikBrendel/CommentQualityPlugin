commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testFullName() throws Exception {     String json = "{\"person\" : {\"firstname\" : \"foo\", \"middlename\" : \"foo2\", \"lastname\" : \"bar\"}}".     getMockEndpoint("mock:result").expectedBodiesReceived("foo foo2 bar").     template.sendBody("direct:start", json).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Test public void testFirstAndLastName() throws Exception {     String json = "{\"person\" : {\"firstname\" : \"foo\", \"lastname\" : \"bar\"}}".     getMockEndpoint("mock:result").expectedBodiesReceived("foo bar").     template.sendBody("direct:start", json).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() {     from("direct:start").bean(FullNameBean.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").bean(FullNameBean.class).to("mock:result").         }     }. }
true;public,static;3;8;// middle name is optional ;// middle name is optional public static String getName(@JsonPath("person.firstname") String first, @JsonPath(value = "person.middlename", suppressExceptions = true) String middle, @JsonPath("person.lastname") String last) {     if (middle != null) {         return first + " " + middle + " " + last.     }     return first + " " + last. }
