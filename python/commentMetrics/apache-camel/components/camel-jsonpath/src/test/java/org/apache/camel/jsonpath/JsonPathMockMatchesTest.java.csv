commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:result").         }     }. }
false;public;0;17;;@Test public void testMockMatches() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     // cheap     mock.message(0).predicate().jsonpath("$.store.book[?(@.price < 10)]").     // average     mock.message(2).predicate().jsonpath("$.store.book[?(@.price < 30)]").     // expensive     mock.message(1).predicate().jsonpath("$.store.book[?(@.price > 30)]").     template.sendBody("direct:start", new File("src/test/resources/cheap.json")).     template.sendBody("direct:start", new File("src/test/resources/expensive.json")).     template.sendBody("direct:start", new File("src/test/resources/average.json")).     mock.assertIsSatisfied(). }
false;public;0;17;;@Test public void testMockNotMatches() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     // cheap     mock.message(0).predicate().jsonpath("$.store.book[?(@.price < 10)]").     // average     mock.message(1).predicate().jsonpath("$.store.book[?(@.price < 30)]").     // expensive     mock.message(2).predicate().jsonpath("$.store.book[?(@.price > 30)]").     template.sendBody("direct:start", new File("src/test/resources/cheap.json")).     template.sendBody("direct:start", new File("src/test/resources/expensive.json")).     template.sendBody("direct:start", new File("src/test/resources/average.json")).     mock.assertIsNotSatisfied(). }
