commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@AfterClass public static void setDefaultCharsetBack() {     switchToDefaultCharset(DEFAULT_CHARSET.displayName()). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").transform().jsonpath("$.store.book[0].title", String.class).to("mock:title").     from("direct:second").transform().jsonpath("$.store.book[1].title", String.class).to("mock:title"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().jsonpath("$.store.book[0].title", String.class).to("mock:title").             from("direct:second").transform().jsonpath("$.store.book[1].title", String.class).to("mock:title").         }     }. }
false;public;0;16;;@Test public void testPriceResultTypeOnGenericFileUTF8() throws Exception {     switchToDefaultCharset("UTF-8").     getMockEndpoint("mock:title").expectedMessageCount(2).     getMockEndpoint("mock:title").message(0).body().isEqualTo(MESSAGE1).     getMockEndpoint("mock:title").message(1).body().isEqualTo(MESSAGE2).     template.sendBody("direct:start", FileConsumer.asGenericFile("src/test/resources/germanbooks-utf8.json", new File("src/test/resources/germanbooks-utf8.json"), "UTF-8", false)).     template.sendBody("direct:second", FileConsumer.asGenericFile("src/test/resources/germanbooks-utf8.json", new File("src/test/resources/germanbooks-utf8.json"), "UTF-8", false)).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testPriceResultTypeOnGenericFileUTF8OnWindows() throws Exception {     switchToDefaultCharset("windows-1252").     getMockEndpoint("mock:title").expectedMessageCount(2).     getMockEndpoint("mock:title").message(0).body().isEqualTo(MESSAGE1).     getMockEndpoint("mock:title").message(1).body().isEqualTo(MESSAGE2).     template.sendBody("direct:start", FileConsumer.asGenericFile("src/test/resources/germanbooks-utf8.json", new File("src/test/resources/germanbooks-utf8.json"), "UTF-8", false)).     template.sendBody("direct:second", FileConsumer.asGenericFile("src/test/resources/germanbooks-utf8.json", new File("src/test/resources/germanbooks-utf8.json"), "UTF-8", false)).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testPriceResultTypeOnGenericFileISO88591() throws Exception {     switchToDefaultCharset("ISO-8859-1").     getMockEndpoint("mock:title").expectedMessageCount(2).     getMockEndpoint("mock:title").message(0).body().isEqualTo(MESSAGE1).     getMockEndpoint("mock:title").message(1).body().isEqualTo(MESSAGE2).     template.sendBody("direct:start", FileConsumer.asGenericFile("src/test/resources/germanbooks-iso-8859-1.json", new File("src/test/resources/germanbooks-iso-8859-1.json"), "ISO-8859-1", false)).     template.sendBody("direct:second", FileConsumer.asGenericFile("src/test/resources/germanbooks-iso-8859-1.json", new File("src/test/resources/germanbooks-iso-8859-1.json"), "ISO-8859-1", false)).     assertMockEndpointsSatisfied(). }
false;private,static;1;9;;private static void switchToDefaultCharset(String charset) {     try {         Field defaultCharset = Charset.class.getDeclaredField("defaultCharset").         defaultCharset.setAccessible(true).         defaultCharset.set(null, Charset.forName(charset)).     } catch (Exception e) {     // Do nothing here     } }
