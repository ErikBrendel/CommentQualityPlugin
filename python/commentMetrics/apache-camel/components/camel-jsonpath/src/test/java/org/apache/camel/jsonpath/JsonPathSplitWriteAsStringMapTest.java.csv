commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").split().jsonpathWriteAsString("$.content").to("mock:line").to("log:line").end(). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split().jsonpathWriteAsString("$.content").to("mock:line").to("log:line").end().         }     }. }
false;public;0;18;;@Test public void testSplitToJSon() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:line").     // we only get 1 map (because we split via: $.content) but each entry is converted to a json string     mock.expectedMessageCount(1).     template.sendBody("direct:start", new File("src/test/resources/content-map.json")).     assertMockEndpointsSatisfied().     Map map = mock.getReceivedExchanges().get(0).getIn().getBody(Map.class).     String foo = (String) map.get("foo").     assertEquals("{\"action\":\"CU\",\"id\":123,\"modifiedTime\":\"2015-07-28T11:40:09.520+02:00\"}", foo).     String bar = (String) map.get("bar").     assertEquals("{\"action\":\"CU\",\"id\":456,\"modifiedTime\":\"2015-07-28T11:42:29.510+02:00\"}", bar). }
