commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Override public void configure() throws Exception {     from("direct:start").choice().when().jsonpath("$.store.book[?(@.price < 10)]").to("mock:cheap").when().jsonpath("$.store.book[?(@.price < 30)]").to("mock:average").otherwise().to("mock:expensive").     from("direct:bicycle").choice().when().method(new BeanPredicate()).to("mock:cheap").otherwise().to("mock:expensive").     from("direct:bicycle2").choice().when(PredicateBuilder.isLessThan(ExpressionBuilder.languageExpression("jsonpath", "$.store.bicycle.price"), ExpressionBuilder.constantExpression(100))).to("mock:cheap").otherwise().to("mock:expensive"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when().jsonpath("$.store.book[?(@.price < 10)]").to("mock:cheap").when().jsonpath("$.store.book[?(@.price < 30)]").to("mock:average").otherwise().to("mock:expensive").             from("direct:bicycle").choice().when().method(new BeanPredicate()).to("mock:cheap").otherwise().to("mock:expensive").             from("direct:bicycle2").choice().when(PredicateBuilder.isLessThan(ExpressionBuilder.languageExpression("jsonpath", "$.store.bicycle.price"), ExpressionBuilder.constantExpression(100))).to("mock:cheap").otherwise().to("mock:expensive").         }     }. }
false;public;1;3;;public boolean checkPrice(@JsonPath("$.store.bicycle.price") double price) {     return price < 100. }
false;public;0;6;;@Test public void testCheapBicycle() throws Exception {     sendMessageToBicycleRoute("direct:bicycle").     resetMocks().     sendMessageToBicycleRoute("direct:bicycle2"). }
false;private;1;9;;private void sendMessageToBicycleRoute(String startPoint) throws Exception {     getMockEndpoint("mock:cheap").expectedMessageCount(1).     getMockEndpoint("mock:average").expectedMessageCount(0).     getMockEndpoint("mock:expensive").expectedMessageCount(0).     template.sendBody(startPoint, new File("src/test/resources/cheap.json")).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testCheap() throws Exception {     getMockEndpoint("mock:cheap").expectedMessageCount(1).     getMockEndpoint("mock:average").expectedMessageCount(0).     getMockEndpoint("mock:expensive").expectedMessageCount(0).     template.sendBody("direct:start", new File("src/test/resources/cheap.json")).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testAverage() throws Exception {     getMockEndpoint("mock:cheap").expectedMessageCount(0).     getMockEndpoint("mock:average").expectedMessageCount(1).     getMockEndpoint("mock:expensive").expectedMessageCount(0).     template.sendBody("direct:start", new File("src/test/resources/average.json")).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testExpensive() throws Exception {     getMockEndpoint("mock:cheap").expectedMessageCount(0).     getMockEndpoint("mock:average").expectedMessageCount(0).     getMockEndpoint("mock:expensive").expectedMessageCount(1).     template.sendBody("direct:start", new File("src/test/resources/expensive.json")).     assertMockEndpointsSatisfied(). }
