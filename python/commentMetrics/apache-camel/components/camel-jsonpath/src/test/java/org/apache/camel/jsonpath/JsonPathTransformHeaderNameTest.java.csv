commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").transform().jsonpath("$.store.book[*].author", false, null, "myHeader").to("mock:authors"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().jsonpath("$.store.book[*].author", false, null, "myHeader").to("mock:authors").         }     }. }
false;public;0;13;;@Test public void testAuthors() throws Exception {     getMockEndpoint("mock:authors").expectedMessageCount(1).     Object file = new File("src/test/resources/books.json").     template.sendBodyAndHeader("direct:start", "Hello World", "myHeader", file).     assertMockEndpointsSatisfied().     List<?> authors = getMockEndpoint("mock:authors").getReceivedExchanges().get(0).getIn().getBody(List.class).     assertEquals("Nigel Rees", authors.get(0)).     assertEquals("Evelyn Waugh", authors.get(1)). }
