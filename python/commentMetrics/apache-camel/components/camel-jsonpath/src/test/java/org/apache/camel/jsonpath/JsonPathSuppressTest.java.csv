commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMiddle() throws Exception {     String json = "{\"person\" : {\"firstname\" : \"foo\", \"middlename\" : \"foo2\", \"lastname\" : \"bar\"}}".     getMockEndpoint("mock:middle").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBody("direct:start", json).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testNoMiddle() throws Exception {     String json = "{\"person\" : {\"firstname\" : \"foo\", \"lastname\" : \"bar\"}}".     getMockEndpoint("mock:middle").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(1).     template.sendBody("direct:start", json).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").choice().when().jsonpath("person.middlename", true).to("mock:middle").otherwise().to("mock:other"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when().jsonpath("person.middlename", true).to("mock:middle").otherwise().to("mock:other").         }     }. }
