commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new TwilioProducer(this). }
false;public;1;11;;@Override public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final TwilioConsumer consumer = new TwilioConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected void afterConfigureProperties() { // Do nothing }
false;public;2;5;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     // Since the proxy methods are static     return null. }
false;public;3;15;;public Object execute(Object executor, ApiMethod method, Map<String, Object> properties) {     if (!EXECUTOR_METHOD_MAP.containsKey(method.getName())) {         throw new IllegalArgumentException("Invalid method name " + method.getName()).     }     String methodName = EXECUTOR_METHOD_MAP.get(method.getName()).     try {         TypeConverter typeConverter = getCamelContext().getTypeConverter().         for (Map.Entry<String, Object> p : properties.entrySet()) {             IntrospectionSupport.setProperty(typeConverter, executor, p.getKey(), p.getValue()).         }         return doExecute(executor, methodName, properties).     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;protected;3;4;;protected Object doExecute(Object executor, String methodName, Map<String, Object> properties) throws Exception {     Method method = executor.getClass().getDeclaredMethod(methodName, TwilioRestClient.class).     return method.invoke(executor, properties.getOrDefault("client", getRestClient())). }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<TwilioConfiguration> getPropertiesHelper() {     return TwilioPropertiesHelper.getHelper(). }
false;protected;0;4;;@Override protected String getThreadProfileName() {     return TwilioConstants.THREAD_PROFILE_NAME. }
false;public;0;3;;public TwilioRestClient getRestClient() {     return component.getRestClient(). }
