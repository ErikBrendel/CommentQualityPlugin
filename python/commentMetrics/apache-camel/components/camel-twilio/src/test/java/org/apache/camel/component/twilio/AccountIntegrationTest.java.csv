commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testFetcher() throws Exception {     final Account result = requestBody("direct://FETCHER", null).     assertNotNull("fetcher result not null", result).     assertNotNull("fetcher result sid not null", result.getSid()).     LOG.debug("fetcher: " + result). }
false;public;0;9;;@Test public void testFetcherWithPathSid() throws Exception {     final Account result = requestBodyAndHeaders("direct://FETCHER", null, headers("CamelTwilioPathSid", ((TwilioComponent) context().getComponent("twilio")).getAccountSid())).     assertNotNull("fetcher result not null", result).     assertNotNull("fetcher result sid not null", result.getSid()).     LOG.debug("fetcher: " + result). }
false;public;0;10;;@Test public void testReader() throws Exception {     final ResourceSet<Account> result = requestBody("direct://READER", null).     assertNotNull("reader result not null", result).     result.forEach(account -> {         assertNotNull("reader result account not null", account).         LOG.debug("reader: " + account).     }). }
false;public;0;11;;@Test public void testReaderWithStatusActive() throws Exception {     final ResourceSet<Account> result = requestBodyAndHeaders("direct://READER", null, headers("CamelTwilioStatus", "active")).     assertNotNull("reader result not null", result).     result.forEach(account -> {         assertEquals("reader result account active", Account.Status.ACTIVE, account.getStatus()).         LOG.debug("reader: " + account).     }). }
false;private,static;2;5;;private static Map<String, Object> headers(String name, Object value) {     Map<String, Object> headers = new HashMap<>().     headers.put(name, value).     return headers. }
false;public;0;10;;public void configure() {     // test route for fetcher     from("direct://FETCHER").to("twilio://" + PATH_PREFIX + "/fetch").     // test route for reader     from("direct://READER").to("twilio://" + PATH_PREFIX + "/read"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for fetcher             from("direct://FETCHER").to("twilio://" + PATH_PREFIX + "/fetch").             // test route for reader             from("direct://READER").to("twilio://" + PATH_PREFIX + "/read").         }     }. }
