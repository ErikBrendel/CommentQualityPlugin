commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpEndpoint getEndpoint() {     return (HttpEndpoint) super.getEndpoint(). }
false;public;0;3;;public Exchange receive() {     return doReceive(-1). }
false;public;1;3;;public Exchange receive(long timeout) {     return doReceive((int) timeout). }
false;public;0;3;;public Exchange receiveNoWait() {     return doReceive(-1). }
false;protected;1;55;;protected Exchange doReceive(int timeout) {     Exchange exchange = endpoint.createExchange().     HttpRequestBase method = createMethod(exchange).     HttpClientContext httpClientContext = new HttpClientContext().     // set optional timeout in millis     if (timeout > 0) {         RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(timeout).build().         httpClientContext.setRequestConfig(requestConfig).     }     HttpEntity responeEntity = null.     try {         // execute request         HttpResponse response = executeMethod(method, httpClientContext).         int responseCode = response.getStatusLine().getStatusCode().         responeEntity = response.getEntity().         Object body = HttpHelper.readResponseBodyFromInputStream(responeEntity.getContent(), exchange).         // lets store the result in the output message.         Message message = exchange.getOut().         message.setBody(body).         // lets set the headers         Header[] headers = response.getAllHeaders().         HeaderFilterStrategy strategy = endpoint.getHeaderFilterStrategy().         for (Header header : headers) {             String name = header.getName().             // mapping the content-type             if (name.toLowerCase().equals("content-type")) {                 name = Exchange.CONTENT_TYPE.             }             String value = header.getValue().             if (strategy != null && !strategy.applyFilterToExternalHeaders(name, value, exchange)) {                 message.setHeader(name, value).             }         }         message.setHeader(Exchange.HTTP_RESPONSE_CODE, responseCode).         if (response.getStatusLine() != null) {             message.setHeader(Exchange.HTTP_RESPONSE_TEXT, response.getStatusLine().getReasonPhrase()).         }         return exchange.     } catch (IOException e) {         throw new RuntimeCamelException(e).     } finally {         if (responeEntity != null) {             try {                 EntityUtils.consume(responeEntity).             } catch (IOException e) {             // nothing what we can do             }         }     } }
true;protected;2;11;/**  * Strategy when executing the method (calling the remote server).  *  * @param httpRequest the http Request to execute  * @return the response  * @throws IOException can be thrown  */ ;/**  * Strategy when executing the method (calling the remote server).  *  * @param httpRequest the http Request to execute  * @return the response  * @throws IOException can be thrown  */ protected HttpResponse executeMethod(HttpRequestBase httpRequest, HttpClientContext httpClientContext) throws IOException {     if (getEndpoint().isAuthenticationPreemptive()) {         BasicScheme basicAuth = new BasicScheme().         httpClientContext.setAttribute("preemptive-auth", basicAuth).     }     if (httpContext != null) {         httpClientContext = new HttpClientContext(httpContext).     }     return httpClient.execute(httpRequest, httpClientContext). }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public HttpClient getHttpClient() {     return httpClient. }
false;public;1;3;;public void setHttpClient(HttpClient httpClient) {     this.httpClient = httpClient. }
false;protected;1;4;;// Implementation methods // ------------------------------------------------------------------------- protected HttpRequestBase createMethod(Exchange exchange) {     String uri = HttpHelper.createURL(exchange, endpoint).     return new HttpGet(uri). }
false;protected;0;2;;protected void doStart() throws Exception { }
false;protected;0;2;;protected void doStop() throws Exception { }
