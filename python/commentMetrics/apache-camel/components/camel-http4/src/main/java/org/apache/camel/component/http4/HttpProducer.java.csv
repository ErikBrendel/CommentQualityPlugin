# id;timestamp;commentText;codeText;commentWords;codeWords
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1270895897;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        is = GZIPHelper.toGZIPInputStream(contentEncoding, is)__        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,is,gziphelper,to,gzipinput,stream,content,encoding,is,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1272422140;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        is = GZIPHelper.toGZIPInputStream(contentEncoding, is)__        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,is,gziphelper,to,gzipinput,stream,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1273066657;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1274269216;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1274409143;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1274693059;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1275467440;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1277084925;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1277098463;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1279109002;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpRequest.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,request,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1279785771;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, charset)__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1280242270;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, IOConverter.normalizeCharset(charset))__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,ioconverter,normalize,charset,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1280458025;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, IOConverter.normalizeCharset(charset))__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,ioconverter,normalize,charset,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1286874251;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            int index = contentType.indexOf("charset=")__            if (index > 0) {_                String charset = contentType.substring(index + 8)__                exchange.setProperty(Exchange.CHARSET_NAME, IOConverter.normalizeCharset(charset))__            }_        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,int,index,content,type,index,of,charset,if,index,0,string,charset,content,type,substring,index,8,exchange,set,property,exchange,ioconverter,normalize,charset,charset,return,do,extract,response,body,is,exchange
HttpProducer -> protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException;1292821748;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response as a stream_@throws IOException can be thrown;protected static InputStream extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            String contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        return doExtractResponseBody(is, exchange)__    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,as,a,stream,throws,ioexception,can,be,thrown;protected,static,input,stream,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,header,http,request,get,first,header,content,type,if,header,null,string,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,return,do,extract,response,body,is,exchange
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1434555340;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__        } else {_            InputStream response = null__            if (!ignoreResponseBody) {_                response = doExtractResponseBodyAsStream(is, exchange)__            }_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1436601457;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__        } else {_            InputStream response = null__            if (!ignoreResponseBody) {_                response = doExtractResponseBodyAsStream(is, exchange)__            }_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1437293796;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__        } else {_            InputStream response = null__            if (!ignoreResponseBody) {_                response = doExtractResponseBodyAsStream(is, exchange)__            }_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1437656675;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__        } else {_            InputStream response = null__            if (!ignoreResponseBody) {_                response = doExtractResponseBodyAsStream(is, exchange)__            }_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1439455823;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__        } else {_            InputStream response = null__            if (!ignoreResponseBody) {_                response = doExtractResponseBodyAsStream(is, exchange)__            }_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1270895897;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1272422140;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1273066657;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1274269216;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1274409143;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1274693059;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1275467440;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1277084925;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1277098463;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1279109002;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1279785771;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1280242270;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1280458025;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1286874251;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1292821748;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1293443624;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1293640856;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1296408582;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1296495624;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1296567562;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1297975937;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1300702380;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1307184009;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1307685726;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1310661470;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1311006392;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1317112374;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1317198435;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1317831874;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1318145682;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1324569391;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1326499990;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1330101303;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1333787762;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1344346363;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1346246562;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1346495356;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1346830376;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1351760677;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1356694393;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1363621467;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1376549254;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1377538763;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1378206923;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1383138956;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1383750143;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1388443957;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1390577892;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1395076208;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1415211488;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1419210510;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1429854079;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1432715489;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1433062681;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1434555340;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1436601457;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1437293796;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1437656675;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1439455823;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1447337192;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1455014108;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1459531600;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1460017809;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1460018538;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1460100358;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1463551507;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1463554851;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1476946116;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1488812702;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1500074866;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1523604059;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<String, String>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,string,string,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1523994367;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1528394755;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1536220089;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1536220090;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1536605520;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1540108158;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1540108160;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1540108161;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1540108163;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders);1547808740;Extracts the response headers__@param responseHeaders the headers_@return the extracted headers or <tt>null</tt> if no headers existed;protected static Map<String, String> extractResponseHeaders(Header[] responseHeaders) {_        if (responseHeaders == null || responseHeaders.length == 0) {_            return null__        }__        Map<String, String> answer = new HashMap<>()__        for (Header header : responseHeaders) {_            answer.put(header.getName(), header.getValue())__        }__        return answer__    };extracts,the,response,headers,param,response,headers,the,headers,return,the,extracted,headers,or,tt,null,tt,if,no,headers,existed;protected,static,map,string,string,extract,response,headers,header,response,headers,if,response,headers,null,response,headers,length,0,return,null,map,string,string,answer,new,hash,map,for,header,header,response,headers,answer,put,header,get,name,header,get,value,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1270895897;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                String data = in.getBody(String.class)__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class)__                    if (charset == null) {_                        charset = HTTP.DEFAULT_CONTENT_CHARSET__                    }__                    answer = new StringEntity(data, charset)__                    ((StringEntity) answer).setContentEncoding(charset)__                    if (contentType != null) {_                        ((StringEntity) answer).setContentType(contentType)__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,string,data,in,get,body,string,class,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,string,charset,exchange,get,property,exchange,string,class,if,charset,null,charset,http,answer,new,string,entity,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1272422140;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                String data = in.getBody(String.class)__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class)__                    if (charset == null) {_                        charset = HTTP.DEFAULT_CONTENT_CHARSET__                    }__                    answer = new StringEntity(data, charset)__                    ((StringEntity) answer).setContentEncoding(charset)__                    if (contentType != null) {_                        ((StringEntity) answer).setContentType(contentType)__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,string,data,in,get,body,string,class,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,string,charset,exchange,get,property,exchange,string,class,if,charset,null,charset,http,answer,new,string,entity,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1273066657;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                String data = in.getBody(String.class)__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class)__                    if (charset == null) {_                        charset = HTTP.DEFAULT_CONTENT_CHARSET__                    }__                    answer = new StringEntity(data, charset)__                    ((StringEntity) answer).setContentEncoding(charset)__                    if (contentType != null) {_                        ((StringEntity) answer).setContentType(contentType)__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,string,data,in,get,body,string,class,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,string,charset,exchange,get,property,exchange,string,class,if,charset,null,charset,http,answer,new,string,entity,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1274269216;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                String data = in.getBody(String.class)__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class)__                    if (charset == null) {_                        charset = HTTP.DEFAULT_CONTENT_CHARSET__                    }__                    answer = new StringEntity(data, charset)__                    ((StringEntity) answer).setContentEncoding(charset)__                    if (contentType != null) {_                        ((StringEntity) answer).setContentType(contentType)__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,string,data,in,get,body,string,class,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,string,charset,exchange,get,property,exchange,string,class,if,charset,null,charset,http,answer,new,string,entity,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1274409143;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                String data = in.getBody(String.class)__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class)__                    if (charset == null) {_                        charset = HTTP.DEFAULT_CONTENT_CHARSET__                    }__                    answer = new StringEntity(data, charset)__                    ((StringEntity) answer).setContentEncoding(charset)__                    if (contentType != null) {_                        ((StringEntity) answer).setContentType(contentType)__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,string,data,in,get,body,string,class,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,string,charset,exchange,get,property,exchange,string,class,if,charset,null,charset,http,answer,new,string,entity,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1274693059;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                String data = in.getBody(String.class)__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class)__                    if (charset == null) {_                        charset = HTTP.DEFAULT_CONTENT_CHARSET__                    }__                    answer = new StringEntity(data, charset)__                    ((StringEntity) answer).setContentEncoding(charset)__                    if (contentType != null) {_                        ((StringEntity) answer).setContentType(contentType)__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,string,data,in,get,body,string,class,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,string,charset,exchange,get,property,exchange,string,class,if,charset,null,charset,http,answer,new,string,entity,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1275467440;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                String data = in.getBody(String.class)__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class)__                    if (charset == null) {_                        charset = HTTP.DEFAULT_CONTENT_CHARSET__                    }__                    answer = new StringEntity(data, charset)__                    ((StringEntity) answer).setContentEncoding(charset)__                    if (contentType != null) {_                        ((StringEntity) answer).setContentType(contentType)__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,string,data,in,get,body,string,class,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,string,charset,exchange,get,property,exchange,string,class,if,charset,null,charset,http,answer,new,string,entity,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange);1277084925;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder;protected HttpEntity createRequestEntity(Exchange exchange) {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)__                    if (data instanceof File) {_                        answer = new FileEntity((File)data, contentType)__                    } else if (data instanceof String) {_                        String charset = IOConverter.getCharsetName(exchange)__                        answer = new StringEntity((String)data, charset)__                        ((StringEntity) answer).setContentEncoding(charset)__                        if (contentType != null) {_                            ((StringEntity) answer).setContentType(contentType)__                        }_                    } else {                        _                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder;protected,http,entity,create,request,entity,exchange,exchange,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,answer,new,file,entity,file,data,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,answer,new,string,entity,string,data,charset,string,entity,answer,set,content,encoding,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,else,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1293640856;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1296408582;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1296495624;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1296567562;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1297975937;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1300702380;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1307184009;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1307685726;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1310661470;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1311006392;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1317112374;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        _        String schema = "http"__        if (uri.getScheme().equals("https4")) {_            schema = "https"__        }_        _        StringBuilder builder = new StringBuilder(schema).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,schema,http,if,uri,get,scheme,equals,https4,schema,https,string,builder,builder,new,string,builder,schema,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1317198435;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1317831874;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1318145682;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1324569391;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1326499990;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1330101303;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1333787762;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1344346363;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1346246562;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1346495356;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1346830376;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException;1351760677;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, CamelExchangeException {_        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        if (queryString == null) {_            queryString = uri.getQuery()__        }_        _        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        if (uri.getScheme() == null || uri.getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }_        _        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }_        _        LOG.debug(" The uri used by http request is " + builder.toString())__       __        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,camel,exchange,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,uri,get,query,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,if,uri,get,scheme,null,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,log,debug,the,uri,used,by,http,request,is,builder,to,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,return,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1270895897;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1272422140;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1273066657;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1274269216;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1274409143;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1274693059;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1275467440;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1277084925;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1277098463;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1279109002;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1279785771;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1280242270;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1280458025;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1286874251;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1292821748;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1293443624;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1293640856;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1296408582;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1296495624;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1296567562;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1297975937;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1300702380;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1307184009;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1307685726;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1310661470;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1311006392;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1317112374;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1317198435;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1317831874;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1318145682;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1324569391;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1326499990;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1330101303;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        return httpClient.execute(httpRequest)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1333787762;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1344346363;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1346246562;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1346495356;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1346830376;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1351760677;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1356694393;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1363621467;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1376549254;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1377538763;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1378206923;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1383138956;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1383750143;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        if (httpContext != null) {_            return httpClient.execute(httpRequest, httpContext)__        } else {_            return httpClient.execute(httpRequest)__        }_    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,if,http,context,null,return,http,client,execute,http,request,http,context,else,return,http,client,execute,http,request
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1388443957;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1390577892;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1395076208;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1415211488;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1419210510;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1429854079;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1432715489;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1433062681;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1434555340;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1436601457;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1437293796;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1437656675;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1439455823;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1447337192;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1455014108;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1459531600;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1460017809;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1460018538;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1460100358;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1463551507;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1463554851;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1476946116;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1488812702;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1500074866;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1523604059;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1523994367;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1528394755;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1536220089;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1536220090;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1536605520;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1540108158;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1540108160;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1540108161;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1540108163;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException;1547808740;Strategy when executing the method (calling the remote server).__@param httpRequest the http Request to execute_@return the response_@throws IOException can be thrown;protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {_        HttpContext localContext = new BasicHttpContext()__        if (getEndpoint().isAuthenticationPreemptive()) {_            BasicScheme basicAuth = new BasicScheme()__            localContext.setAttribute("preemptive-auth", basicAuth)__        }_        if (httpContext != null) {_            localContext = new BasicHttpContext(httpContext)__        }_        return httpClient.execute(httpRequest, localContext)__    };strategy,when,executing,the,method,calling,the,remote,server,param,http,request,the,http,request,to,execute,return,the,response,throws,ioexception,can,be,thrown;protected,http,response,execute,method,http,uri,request,http,request,throws,ioexception,http,context,local,context,new,basic,http,context,if,get,endpoint,is,authentication,preemptive,basic,scheme,basic,auth,new,basic,scheme,local,context,set,attribute,preemptive,auth,basic,auth,if,http,context,null,local,context,new,basic,http,context,http,context,return,http,client,execute,http,request,local,context
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1293443624;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return doDeserializeJavaObjectFromResponse(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,do,deserialize,java,object,from,response,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1293640856;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1296408582;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1296495624;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1296567562;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1297975937;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1300702380;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1307184009;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1307685726;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1310661470;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1311006392;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1317112374;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1317198435;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1317831874;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1318145682;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1324569391;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1326499990;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1330101303;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1333787762;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1344346363;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1346246562;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1346495356;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1346830376;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1351760677;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1356694393;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1363621467;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1376549254;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1377538763;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1378206923;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1383138956;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1383750143;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1388443957;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1390577892;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1395076208;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1415211488;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1419210510;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1429854079;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1432715489;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException;1433062681;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected static Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        InputStream response = doExtractResponseBodyAsStream(is, exchange)__        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            return HttpHelper.deserializeJavaObjectFromStream(response)__        } else {_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,static,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,input,stream,response,do,extract,response,body,as,stream,is,exchange,if,content,type,null,content,type,equals,http,constants,return,http,helper,deserialize,java,object,from,stream,response,else,return,response
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1277098463;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1279109002;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1279785771;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1280242270;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1280458025;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1286874251;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1292821748;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException;1293443624;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws org.apache.camel.InvalidPayloadException_is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException, InvalidPayloadException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,invalid,payload,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1270895897;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1272422140;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1273066657;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1274269216;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1274409143;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1274693059;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1275467440;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException;1277084925;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid;protected HttpRequestBase createMethod(Exchange exchange) throws URISyntaxException {_        String url = HttpProducerHelper.createURL(exchange, getEndpoint())__        URI uri = new URI(url)___        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), requestEntity != null)___        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = getEndpoint().getHttpUri().getRawQuery()__        }__        StringBuilder builder = new StringBuilder(uri.getScheme()).append("://").append(uri.getHost())___        if (uri.getPort() != -1) {_            builder.append(":").append(uri.getPort())__        }__        if (uri.getPath() != null) {_            builder.append(uri.getRawPath())__        }__        if (queryString != null) {_            builder.append('?')__            builder.append(queryString)__        }__        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString())___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No Content-Type provided for URL: " + url + " with exchange: " + exchange)__                }_            }_        }__        return httpRequest__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid;protected,http,request,base,create,method,exchange,exchange,throws,urisyntax,exception,string,url,http,producer,helper,create,url,exchange,get,endpoint,uri,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,producer,helper,create,method,exchange,get,endpoint,request,entity,null,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,get,endpoint,get,http,uri,get,raw,query,string,builder,builder,new,string,builder,uri,get,scheme,append,append,uri,get,host,if,uri,get,port,1,builder,append,append,uri,get,port,if,uri,get,path,null,builder,append,uri,get,raw,path,if,query,string,null,builder,append,builder,append,query,string,http,request,base,http,request,method,to,use,create,method,builder,to,string,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,http,request,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,if,log,is,debug,enabled,log,debug,no,content,type,provided,for,url,url,with,exchange,exchange,return,http,request
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1277098463;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String)data, charset)__                        if (contentType != null) {_                            ((StringEntity)answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1279109002;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String)data, charset)__                        if (contentType != null) {_                            ((StringEntity)answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1279785771;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String)data, charset)__                        if (contentType != null) {_                            ((StringEntity)answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1280242270;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String)data, charset)__                        if (contentType != null) {_                            ((StringEntity)answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1280458025;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String)data, charset)__                        if (contentType != null) {_                            ((StringEntity)answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1286874251;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String)data, charset)__                        if (contentType != null) {_                            ((StringEntity)answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1292821748;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String)data, charset)__                        if (contentType != null) {_                            ((StringEntity)answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity)answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException;1293443624;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws org.apache.camel.InvalidPayloadException_is thrown if message body cannot_be converted to a type supported by HttpClient;protected HttpEntity createRequestEntity(Exchange exchange) throws InvalidPayloadException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    _                    if (data instanceof File || data instanceof GenericFile) {_                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        answer = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            ((StringEntity) answer).setContentType(contentType)__                        }_                    }__                    _                    if (answer == null) {_                        _                        in.getMandatoryBody(InputStream.class)__                        answer = new InputStreamEntity(in.getBody(InputStream.class), -1)__                        if (contentType != null) {_                            ((InputStreamEntity) answer).setContentType(contentType)__                        }_                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new RuntimeCamelException(e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,org,apache,camel,invalid,payload,exception,is,thrown,if,message,body,cannot,be,converted,to,a,type,supported,by,http,client;protected,http,entity,create,request,entity,exchange,exchange,throws,invalid,payload,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,answer,new,string,entity,string,data,charset,if,content,type,null,string,entity,answer,set,content,type,content,type,if,answer,null,in,get,mandatory,body,input,stream,class,answer,new,input,stream,entity,in,get,body,input,stream,class,1,if,content,type,null,input,stream,entity,answer,set,content,type,content,type,catch,unsupported,encoding,exception,e,throw,new,runtime,camel,exception,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1293640856;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1296408582;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1296495624;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1296567562;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1297975937;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1300702380;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1307184009;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1307685726;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1310661470;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1311006392;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1317112374;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1317198435;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOConverter.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,ioconverter,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1317831874;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1318145682;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1324569391;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1326499990;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1330101303;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1333787762;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1344346363;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1346246562;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, ContentType.parse(contentType))__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,parse,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1346495356;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentType = ExchangeHelper.getContentType(exchange)___                    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            answer = new FileEntity(file, contentType)__                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        entity.setContentType(contentType)__                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,exchange,helper,get,content,type,exchange,if,content,type,null,http,constants,equals,content,type,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,answer,new,file,entity,file,content,type,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,entity,set,content,type,content,type,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1346830376;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1351760677;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1356694393;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1363621467;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1376549254;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1377538763;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1378206923;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1383138956;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    if (contentTypeString != null) {_                        contentType = ContentType.parse(contentTypeString)__                    }_                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,parse,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1383750143;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        contentType = ContentType.create(contentTypeString)__                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1388443957;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        contentType = ContentType.create(contentTypeString)__                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1390577892;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        contentType = ContentType.create(contentTypeString)__                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1395076208;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        contentType = ContentType.create(contentTypeString)__                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1415211488;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1419210510;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1429854079;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1432715489;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null__                    _                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }_                                        _                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1433062681;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1434555340;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1436601457;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1437293796;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1437656675;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1439455823;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1447337192;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1455014108;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1459531600;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1460017809;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1460018538;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1460100358;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1463551507;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1463554851;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1476946116;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1488812702;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1500074866;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1523604059;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1523994367;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1528394755;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1536220089;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        String length = in.getHeader(Exchange.CONTENT_LENGTH, String.class)__                        InputStreamEntity entity = null__                        if (exchange.getProperty(Exchange.IGNORE_CONTENT_LENGTH_HEADER, Boolean.FALSE, Boolean.class) ||_                                ObjectHelper.isEmpty(length)) {_                            entity = new InputStreamEntity(is, -1)__                        } else {_                            entity = new InputStreamEntity(is, Long.parseLong(length))__                        }_                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,string,length,in,get,header,exchange,string,class,input,stream,entity,entity,null,if,exchange,get,property,exchange,boolean,false,boolean,class,object,helper,is,empty,length,entity,new,input,stream,entity,is,1,else,entity,new,input,stream,entity,is,long,parse,long,length,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1536220090;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        _                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        _                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1536605520;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        _                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        _                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1540108158;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType != null ? contentType.toString() : null)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        _                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        _                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,null,content,type,to,string,null,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1540108160;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType != null ? contentType.toString() : null)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        _                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        _                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,null,content,type,to,string,null,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1540108161;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = IOHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType != null ? contentType.toString() : null)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        _                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        _                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,iohelper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,null,content,type,to,string,null,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1540108163;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = ExchangeHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType != null ? contentType.toString() : null)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        _                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        _                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,exchange,helper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,null,content,type,to,string,null,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException;1547808740;Creates a holder object for the data to send to the remote server.__@param exchange the exchange with the IN message with data to send_@return the data holder_@throws CamelExchangeException is thrown if error creating RequestEntity;protected HttpEntity createRequestEntity(Exchange exchange) throws CamelExchangeException {_        Message in = exchange.getIn()__        if (in.getBody() == null) {_            return null__        }__        HttpEntity answer = in.getBody(HttpEntity.class)__        if (answer == null) {_            try {_                Object data = in.getBody()__                if (data != null) {_                    String contentTypeString = ExchangeHelper.getContentType(exchange)__                    ContentType contentType = null___                    _                    _                    _                    if (contentTypeString != null) {_                        _                        if (contentTypeString.indexOf("charset") > 0 || contentTypeString.indexOf("_") > 0) {_                            contentType = ContentType.parse(contentTypeString)__                        } else {_                            contentType = ContentType.create(contentTypeString)__                        }_                    }__                    if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {_                        if (!getEndpoint().getComponent().isAllowJavaSerializedObject()) {_                            throw new CamelExchangeException("Content-type " + org.apache.camel.http.common.HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT + " is not allowed", exchange)__                        }_                        _                        Serializable obj = in.getMandatoryBody(Serializable.class)__                        _                        ByteArrayOutputStream bos = new ByteArrayOutputStream()__                        HttpHelper.writeObjectToStream(bos, obj)__                        ByteArrayEntity entity = new ByteArrayEntity(bos.toByteArray())__                        entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__                        IOHelper.close(bos)__                        answer = entity__                    } else if (data instanceof File || data instanceof GenericFile) {_                        _                        File file = in.getBody(File.class)__                        if (file != null) {_                            if (contentType != null) {_                                answer = new FileEntity(file, contentType)__                            } else {_                                answer = new FileEntity(file)__                            }_                        }_                    } else if (data instanceof String) {_                        _                        _                        _                        _                        String charset = ExchangeHelper.getCharsetName(exchange, false)__                        if (charset == null && contentType != null) {_                            _                            Charset cs = contentType.getCharset()__                            if (cs != null) {_                                charset = cs.name()__                            }_                        }_                        StringEntity entity = new StringEntity((String) data, charset)__                        entity.setContentType(contentType != null ? contentType.toString() : null)__                        answer = entity__                    }__                    _                    if (answer == null) {_                        _                        InputStream is = in.getMandatoryBody(InputStream.class)__                        _                        InputStreamEntity entity = new InputStreamEntity(is, -1)__                        _                        if (contentType != null) {_                            entity.setContentType(contentType.toString())__                        }_                        answer = entity__                    }_                }_            } catch (UnsupportedEncodingException e) {_                throw new CamelExchangeException("Error creating RequestEntity from message body", exchange, e)__            } catch (IOException e) {_                throw new CamelExchangeException("Error serializing message body", exchange, e)__            }_        }_        return answer__    };creates,a,holder,object,for,the,data,to,send,to,the,remote,server,param,exchange,the,exchange,with,the,in,message,with,data,to,send,return,the,data,holder,throws,camel,exchange,exception,is,thrown,if,error,creating,request,entity;protected,http,entity,create,request,entity,exchange,exchange,throws,camel,exchange,exception,message,in,exchange,get,in,if,in,get,body,null,return,null,http,entity,answer,in,get,body,http,entity,class,if,answer,null,try,object,data,in,get,body,if,data,null,string,content,type,string,exchange,helper,get,content,type,exchange,content,type,content,type,null,if,content,type,string,null,if,content,type,string,index,of,charset,0,content,type,string,index,of,0,content,type,content,type,parse,content,type,string,else,content,type,content,type,create,content,type,string,if,content,type,string,null,http,constants,equals,content,type,string,if,get,endpoint,get,component,is,allow,java,serialized,object,throw,new,camel,exchange,exception,content,type,org,apache,camel,http,common,http,constants,is,not,allowed,exchange,serializable,obj,in,get,mandatory,body,serializable,class,byte,array,output,stream,bos,new,byte,array,output,stream,http,helper,write,object,to,stream,bos,obj,byte,array,entity,entity,new,byte,array,entity,bos,to,byte,array,entity,set,content,type,http,constants,iohelper,close,bos,answer,entity,else,if,data,instanceof,file,data,instanceof,generic,file,file,file,in,get,body,file,class,if,file,null,if,content,type,null,answer,new,file,entity,file,content,type,else,answer,new,file,entity,file,else,if,data,instanceof,string,string,charset,exchange,helper,get,charset,name,exchange,false,if,charset,null,content,type,null,charset,cs,content,type,get,charset,if,cs,null,charset,cs,name,string,entity,entity,new,string,entity,string,data,charset,entity,set,content,type,content,type,null,content,type,to,string,null,answer,entity,if,answer,null,input,stream,is,in,get,mandatory,body,input,stream,class,input,stream,entity,entity,new,input,stream,entity,is,1,if,content,type,null,entity,set,content,type,content,type,to,string,answer,entity,catch,unsupported,encoding,exception,e,throw,new,camel,exchange,exception,error,creating,request,entity,from,message,body,exchange,e,catch,ioexception,e,throw,new,camel,exchange,exception,error,serializing,message,body,exchange,e,return,answer
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1356694393;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1363621467;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1376549254;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1377538763;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1378206923;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1383138956;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1383750143;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1388443957;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1390577892;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1395076208;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1415211488;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1419210510;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1429854079;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1432715489;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1433062681;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1434555340;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1436601457;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1437293796;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1437656675;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1439455823;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1447337192;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1455014108;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1459531600;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1460017809;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1460018538;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1460100358;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1463551507;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1463554851;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1476946116;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1488812702;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1500074866;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1523604059;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1523994367;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1528394755;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1536220089;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1536220090;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1536605520;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1540108158;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        LOG.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                LOG.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1540108160;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        log.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                log.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1540108161;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        log.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                log.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1540108163;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        log.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                log.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected HttpRequestBase createMethod(Exchange exchange) throws Exception;1547808740;Creates the HttpMethod to use to call the remote server, either its GET or POST.__@param exchange the exchange_@return the created method as either GET or POST_@throws URISyntaxException is thrown if the URI is invalid_@throws Exception is thrown if error creating RequestEntity;protected HttpRequestBase createMethod(Exchange exchange) throws Exception {_        _        String url = HttpHelper.createURL(exchange, getEndpoint())__        URI uri = HttpHelper.createURI(exchange, url, getEndpoint())__        _        url = uri.toASCIIString()___        _        String rewriteUrl = HttpHelper.urlRewrite(exchange, url, getEndpoint(), this)__        if (rewriteUrl != null) {_            _            url = rewriteUrl__            uri = new URI(url)__        }__        _        HttpEntity requestEntity = createRequestEntity(exchange)__        HttpMethods methodToUse = HttpMethodHelper.createMethod(exchange, getEndpoint(), requestEntity != null)__        HttpRequestBase method = methodToUse.createMethod(url)___        _        if (getEndpoint().isDeleteWithBody() && "DELETE".equals(method.getMethod())) {_            method = new HttpDeleteWithBodyMethod(url, requestEntity)__        }__        log.trace("Using URL: {} with method: {}", url, method)___        if (methodToUse.isEntityEnclosing()) {_            ((HttpEntityEnclosingRequestBase) method).setEntity(requestEntity)__            if (requestEntity != null && requestEntity.getContentType() == null) {_                log.debug("No Content-Type provided for URL: {} with exchange: {}", url, exchange)__            }_        }__        _        if (method.getURI().getScheme() == null || method.getURI().getHost() == null) {_            throw new IllegalArgumentException("Invalid uri: " + uri_                    + ". If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: " + getEndpoint())__        }__        return method__    };creates,the,http,method,to,use,to,call,the,remote,server,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,as,either,get,or,post,throws,urisyntax,exception,is,thrown,if,the,uri,is,invalid,throws,exception,is,thrown,if,error,creating,request,entity;protected,http,request,base,create,method,exchange,exchange,throws,exception,string,url,http,helper,create,url,exchange,get,endpoint,uri,uri,http,helper,create,uri,exchange,url,get,endpoint,url,uri,to,asciistring,string,rewrite,url,http,helper,url,rewrite,exchange,url,get,endpoint,this,if,rewrite,url,null,url,rewrite,url,uri,new,uri,url,http,entity,request,entity,create,request,entity,exchange,http,methods,method,to,use,http,method,helper,create,method,exchange,get,endpoint,request,entity,null,http,request,base,method,method,to,use,create,method,url,if,get,endpoint,is,delete,with,body,delete,equals,method,get,method,method,new,http,delete,with,body,method,url,request,entity,log,trace,using,url,with,method,url,method,if,method,to,use,is,entity,enclosing,http,entity,enclosing,request,base,method,set,entity,request,entity,if,request,entity,null,request,entity,get,content,type,null,log,debug,no,content,type,provided,for,url,with,exchange,url,exchange,if,method,get,uri,get,scheme,null,method,get,uri,get,host,null,throw,new,illegal,argument,exception,invalid,uri,uri,if,you,are,forwarding,bridging,http,endpoints,then,enable,the,bridge,endpoint,option,on,the,endpoint,get,endpoint,return,method
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1447337192;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            InputStream response = null__            if (!ignoreResponseBody) {_                response = doExtractResponseBodyAsStream(is, exchange)__            }_            return response__        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1455014108;Extracts the response from the method as a InputStream.__@param httpRequest the method that was executed_@return the response either as a stream, or as a deserialized java object_@throws IOException can be thrown;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpRequest.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream,param,http,request,the,method,that,was,executed,return,the,response,either,as,a,stream,or,as,a,deserialized,java,object,throws,ioexception,can,be,thrown;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,request,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1459531600;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1460017809;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1460018538;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1460100358;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1463551507;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1463554851;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1476946116;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1488812702;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1500074866;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1523604059;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1523994367;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1528394755;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1536220089;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1536220090;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1536605520;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1540108158;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1540108160;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1540108161;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1540108163;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
HttpProducer -> protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException;1547808740;Extracts the response from the method as a InputStream.;protected Object extractResponseBody(HttpRequestBase httpRequest, HttpResponse httpResponse, Exchange exchange, boolean ignoreResponseBody) throws IOException, ClassNotFoundException {_        HttpEntity entity = httpResponse.getEntity()__        if (entity == null) {_            return null__        }__        InputStream is = entity.getContent()__        if (is == null) {_            return null__        }__        Header header = httpResponse.getFirstHeader(Exchange.CONTENT_ENCODING)__        String contentEncoding = header != null ? header.getValue() : null___        if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {_            is = GZIPHelper.uncompressGzip(contentEncoding, is)__        }_        _        String contentType = null__        header = httpResponse.getFirstHeader("content-type")__        if (header != null) {_            contentType = header.getValue()__            _            HttpHelper.setCharsetFromContentType(contentType, exchange)__        }_        _        if (contentType != null && contentType.equals(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)) {_            _            if (getEndpoint().getComponent().isAllowJavaSerializedObject() || getEndpoint().isTransferException()) {_                return HttpHelper.deserializeJavaObjectFromStream(is, exchange.getContext())__            } else {_                _                return null__            }_        } else {_            if (!getEndpoint().isDisableStreamCache()) {_                _                InputStream response = null__                if (!ignoreResponseBody) {_                    response = doExtractResponseBodyAsStream(is, exchange)__                }_                return response__            } else {_                _                return is__            }_        }_    };extracts,the,response,from,the,method,as,a,input,stream;protected,object,extract,response,body,http,request,base,http,request,http,response,http,response,exchange,exchange,boolean,ignore,response,body,throws,ioexception,class,not,found,exception,http,entity,entity,http,response,get,entity,if,entity,null,return,null,input,stream,is,entity,get,content,if,is,null,return,null,header,header,http,response,get,first,header,exchange,string,content,encoding,header,null,header,get,value,null,if,exchange,get,property,exchange,boolean,false,boolean,class,is,gziphelper,uncompress,gzip,content,encoding,is,string,content,type,null,header,http,response,get,first,header,content,type,if,header,null,content,type,header,get,value,http,helper,set,charset,from,content,type,content,type,exchange,if,content,type,null,content,type,equals,http,constants,if,get,endpoint,get,component,is,allow,java,serialized,object,get,endpoint,is,transfer,exception,return,http,helper,deserialize,java,object,from,stream,is,exchange,get,context,else,return,null,else,if,get,endpoint,is,disable,stream,cache,input,stream,response,null,if,ignore,response,body,response,do,extract,response,body,as,stream,is,exchange,return,response,else,return,is
