commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;4;;@Converter public static HttpEntity toHttpEntity(byte[] data, Exchange exchange) throws Exception {     return asHttpEntity(data, exchange). }
false;public,static;2;4;;@Converter public static HttpEntity toHttpEntity(InputStream inStream, Exchange exchange) throws Exception {     return asHttpEntity(inStream, exchange). }
false;public,static;2;10;;@Converter public static HttpEntity toHttpEntity(String str, Exchange exchange) throws Exception {     if (exchange != null && GZIPHelper.isGzip(exchange.getIn())) {         byte[] data = exchange.getContext().getTypeConverter().convertTo(byte[].class, str).         return asHttpEntity(data, exchange).     } else {         // will use the default StringRequestEntity         return null.     } }
false;private,static;2;18;;private static HttpEntity asHttpEntity(InputStream in, Exchange exchange) throws IOException {     InputStreamEntity entity.     if (!exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {         String contentEncoding = exchange.getIn().getHeader(Exchange.CONTENT_ENCODING, String.class).         InputStream stream = GZIPHelper.compressGzip(contentEncoding, in).         entity = new InputStreamEntity(stream, stream instanceof ByteArrayInputStream ? stream.available() != 0 ? stream.available() : -1 : -1).     } else {         entity = new InputStreamEntity(in, -1).     }     if (exchange != null) {         String contentEncoding = exchange.getIn().getHeader(Exchange.CONTENT_ENCODING, String.class).         String contentType = ExchangeHelper.getContentType(exchange).         entity.setContentEncoding(contentEncoding).         entity.setContentType(contentType).     }     return entity. }
false;private,static;2;19;;private static HttpEntity asHttpEntity(byte[] data, Exchange exchange) throws Exception {     AbstractHttpEntity entity.     if (exchange != null && !exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {         String contentEncoding = exchange.getIn().getHeader(Exchange.CONTENT_ENCODING, String.class).         InputStream stream = GZIPHelper.compressGzip(contentEncoding, data).         entity = new InputStreamEntity(stream, stream instanceof ByteArrayInputStream ? stream.available() != 0 ? stream.available() : -1 : -1).     } else {         // create the Repeatable HttpEntity         entity = new ByteArrayEntity(data).     }     if (exchange != null) {         String contentEncoding = exchange.getIn().getHeader(Exchange.CONTENT_ENCODING, String.class).         String contentType = ExchangeHelper.getContentType(exchange).         entity.setContentEncoding(contentEncoding).         entity.setContentType(contentType).     }     return entity. }
