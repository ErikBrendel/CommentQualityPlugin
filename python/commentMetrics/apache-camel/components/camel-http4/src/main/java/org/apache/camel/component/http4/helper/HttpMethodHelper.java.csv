# id;timestamp;commentText;codeText;commentWords;codeWords
HttpMethodHelper -> public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1437656675;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpMethodHelper -> public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1457082923;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpMethodHelper -> public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1487854167;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        if (ObjectHelper.isNotEmpty(endpoint.getHttpMethod())) {_        	answer = HttpMethods.valueOf(endpoint.getHttpMethod())__        } else {_            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,object,helper,is,not,empty,endpoint,get,http,method,answer,http,methods,value,of,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpMethodHelper -> public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1487854168;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        if (ObjectHelper.isNotEmpty(endpoint.getHttpMethod())) {_            answer = HttpMethods.valueOf(endpoint.getHttpMethod())__        } else {_            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,object,helper,is,not,empty,endpoint,get,http,method,answer,http,methods,value,of,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpMethodHelper -> public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1487927619;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = HttpMethods.valueOf(endpoint.getHttpMethod().name())__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,http,methods,value,of,endpoint,get,http,method,name,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpMethodHelper -> public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1521541903;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = HttpMethods.valueOf(endpoint.getHttpMethod().name())__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,http,methods,value,of,endpoint,get,http,method,name,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
