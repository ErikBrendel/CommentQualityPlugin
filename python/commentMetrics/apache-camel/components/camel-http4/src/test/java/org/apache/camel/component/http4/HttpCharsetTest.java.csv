commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/", new BasicValidationHandler("POST", null, getBody(), getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setProperty(Exchange.CHARSET_NAME, charset).     exchange.getIn().setBody(getBody()). }
false;public;0;11;;@Test public void sendCharsetInExchangeProperty() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setProperty(Exchange.CHARSET_NAME, charset).             exchange.getIn().setBody(getBody()).         }     }).     assertExchange(exchange). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setProperty(Exchange.CHARSET_NAME, charset).     exchange.getIn().setBody(getBody().getBytes(charset)). }
false;public;0;11;;@Test public void sendByteArrayCharsetInExchangeProperty() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setProperty(Exchange.CHARSET_NAME, charset).             exchange.getIn().setBody(getBody().getBytes(charset)).         }     }).     assertExchange(exchange). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setProperty(Exchange.CHARSET_NAME, charset).     exchange.getIn().setBody(new ByteArrayInputStream(getBody().getBytes(charset))). }
false;public;0;11;;@Test public void sendInputStreamCharsetInExchangeProperty() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setProperty(Exchange.CHARSET_NAME, charset).             exchange.getIn().setBody(new ByteArrayInputStream(getBody().getBytes(charset))).         }     }).     assertExchange(exchange). }
false;protected;0;12;;protected String getBody() {     char lattinSmallLetterAWithDiaeresis = 0x00E4.     char lattinSmallLetterOWithDiaeresis = 0x00F6.     char lattinSmallLetterUWithDiaeresis = 0x00FC.     char lattinSmallLetterSharpS = 0x00DF.     return "hl=de&q=camel+" + lattinSmallLetterAWithDiaeresis + lattinSmallLetterOWithDiaeresis + lattinSmallLetterUWithDiaeresis + lattinSmallLetterSharpS. }
