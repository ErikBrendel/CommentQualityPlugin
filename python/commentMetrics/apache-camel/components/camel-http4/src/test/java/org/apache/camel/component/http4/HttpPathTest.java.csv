commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/search", new BasicValidationHandler("GET", null, null, getExpectedContent())).registerHandler("/test%20/path", new BasicValidationHandler("GET", null, null, getExpectedContent())).registerHandler("/testWithQueryParams", new BasicValidationHandler("GET", "abc=123", null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;9;;@Test public void httpPath() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_PATH, "search"). }
false;public;0;10;;@Test public void httpPathHeader() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_PATH, "search").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_PATH, "testWithQueryParams"). }
false;public;0;10;;@Test public void httpPathHeaderWithStaticQueryParams() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "?abc=123", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_PATH, "testWithQueryParams").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_PATH, "/testWithQueryParams"). }
false;public;0;10;;@Test public void httpPathHeaderWithBaseSlashesAndWithStaticQueryParams() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/" + "?abc=123", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_PATH, "/testWithQueryParams").         }     }).     assertExchange(exchange). }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;9;;@Test public void httpEscapedCharacters() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/test%20/path", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertExchange(exchange). }
