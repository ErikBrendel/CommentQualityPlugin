commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/search", new BasicValidationHandler("GET", null, null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search").     from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search"). }
false;public;0;18;;@Test public void testHttpConnectionWithTwoRoutesAndOneWithDefaultPort() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search").             from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search").         }     }).     context.start().     Exchange exchange = template.request("direct:start", null).     // note: the default portnumber will appear in the error message     assertRefused(exchange, ":80"). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + ":80/search").     from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search"). }
false;public;0;18;;@Test public void testHttpConnectionWithTwoRoutesAndAllPortsSpecified() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + ":80/search").             from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search").         }     }).     context.start().     Exchange exchange = template.request("direct:start", null).     // specifying the defaultportnumber helps     assertRefused(exchange, ":80"). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search").     from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search"). }
false;public;0;19;;@Test public void testHttpConnectionRefusedStoppedServer() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search").             from("direct:dummy").to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search").         }     }).     context.start().     localServer.stop().     Exchange exchange = template.request("direct:start", null).     assertRefused(exchange, ":80"). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search"). }
false;public;0;17;;@Test public void testHttpConnectionRefusedRunningServer() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("http4://" + localServer.getInetAddress().getHostName() + "/search").         }     }).     context.start().     // server is runnning, but connecting to other port     Exchange exchange = template.request("direct:start", null).     assertRefused(exchange, ":80"). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return true. }
false;private;2;9;;private void assertRefused(Exchange exchange, String portExt) {     Map<String, Object> headers = exchange.getOut().getHeaders().     // no http response:     assertNull(headers.get(Exchange.HTTP_RESPONSE_CODE)).     // and got an exception:     assertIsInstanceOf(HttpHostConnectException.class, exchange.getException()).     // with message:     assertEquals("Connection to http://127.0.0.1" + portExt + " refused", exchange.getException().getMessage()). }
