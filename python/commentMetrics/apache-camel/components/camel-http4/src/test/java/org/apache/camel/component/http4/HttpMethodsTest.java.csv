commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/get", new BasicValidationHandler("GET", null, null, getExpectedContent())).registerHandler("/patch", new BasicValidationHandler("PATCH", null, null, getExpectedContent())).registerHandler("/patch1", new BasicValidationHandler("PATCH", null, "rocks camel?", getExpectedContent())).registerHandler("/post", new BasicValidationHandler("POST", null, null, getExpectedContent())).registerHandler("/post1", new BasicValidationHandler("POST", null, "rocks camel?", getExpectedContent())).registerHandler("/put", new BasicValidationHandler("PUT", null, null, getExpectedContent())).registerHandler("/trace", new BasicValidationHandler("TRACE", null, null, getExpectedContent())).registerHandler("/options", new BasicValidationHandler("OPTIONS", null, null, getExpectedContent())).registerHandler("/delete", new BasicValidationHandler("DELETE", null, null, getExpectedContent())).registerHandler("/delete1", new BasicValidationHandler("DELETE", null, null, getExpectedContent())).registerHandler("/head", new BasicValidationHandler("HEAD", null, null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;10;;@Test public void httpGet() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/get", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "POST"). }
false;public;0;11;;@Test public void httpGetWithUriParam() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/get?httpMethod=GET", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "POST").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "PATCH"). }
false;public;0;20;;@Test public void httpPatch() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/patch?throwExceptionOnFailure=false", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "PATCH").         }     }).     assertNotNull(exchange).     assertTrue(exchange.hasOut()).     Message out = exchange.getOut().     Map<String, Object> headers = out.getHeaders().     assertEquals(HttpStatus.SC_OK, headers.get(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("OK", headers.get(Exchange.HTTP_RESPONSE_TEXT)).     assertEquals("12", headers.get("Content-Length")).     assertNotNull("Should have Content-Type header", headers.get("Content-Type")).     assertEquals("camel rocks!", out.getBody(String.class)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("rocks camel?"). }
false;public;0;18;;@Test public void httpPatchWithBody() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/patch1?throwExceptionOnFailure=false", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("rocks camel?").         }     }).     assertNotNull(exchange).     assertTrue(exchange.hasOut()).     Message out = exchange.getOut().     Map<String, Object> headers = out.getHeaders().     assertEquals(HttpStatus.SC_METHOD_FAILURE, headers.get(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("0", headers.get("Content-Length")).     assertEquals("", out.getBody(String.class)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "POST"). }
false;public;0;11;;@Test public void httpPost() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/post", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "POST").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("rocks camel?"). }
false;public;0;11;;@Test public void httpPostWithBody() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/post1", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("rocks camel?").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "PUT"). }
false;public;0;11;;@Test public void httpPut() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/put", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "PUT").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "TRACE"). }
false;public;0;11;;@Test public void httpTrace() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/trace", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "TRACE").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS"). }
false;public;0;11;;@Test public void httpOptions() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/options", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "DELETE"). }
false;public;0;11;;@Test public void httpDelete() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/delete", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "DELETE").         }     }).     assertExchange(exchange). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "DELETE").     exchange.getIn().setBody("rocks camel?"). }
false;public;0;14;;@Test public void httpDeleteWithBody() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/delete1?deleteWithBody=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "DELETE").             exchange.getIn().setBody("rocks camel?").         }     }).     assertExchange(exchange). // the http4 server will not provide body on HTTP DELETE so we cannot test the server side }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "HEAD"). }
false;public;0;16;;@Test public void httpHead() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/head", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "HEAD").         }     }).     assertNotNull(exchange).     Message out = exchange.getOut().     assertNotNull(out).     assertHeaders(out.getHeaders()).     assertNull(out.getBody(String.class)). }
