commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/", new BasicValidationHandler("GET", null, null, getExpectedContent())).registerHandler("/query", new BasicRawQueryValidationHandler("GET", "x=%3B", null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_URI, "http://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/"). }
false;public;0;10;;@Test public void notBridgeEndpoint() throws Exception {     Exchange exchange = template.request("http4://host/?bridgeEndpoint=false", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_URI, "http://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/").         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_URI, "http://host:8080/"). }
false;public;0;10;;@Test public void bridgeEndpoint() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/?bridgeEndpoint=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_URI, "http://host:8080/").         }     }).     assertExchange(exchange). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_URI, "http://host:8080/").     exchange.getIn().setHeader(Exchange.HTTP_QUERY, "x=%3B"). }
false;public;0;11;;@Test public void bridgeEndpointWithQuery() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/query?bridgeEndpoint=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_URI, "http://host:8080/").             exchange.getIn().setHeader(Exchange.HTTP_QUERY, "x=%3B").         }     }).     assertExchange(exchange). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_URI, "http://host:8080/").     exchange.getIn().setHeader(Exchange.HTTP_RAW_QUERY, "x=%3B").     exchange.getIn().setHeader(Exchange.HTTP_QUERY, "x=."). }
false;public;0;12;;@Test public void bridgeEndpointWithRawQueryAndQuery() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/query?bridgeEndpoint=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_URI, "http://host:8080/").             exchange.getIn().setHeader(Exchange.HTTP_RAW_QUERY, "x=%3B").             exchange.getIn().setHeader(Exchange.HTTP_QUERY, "x=.").         }     }).     assertExchange(exchange). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_URI, "/<>{}"). }
false;public;0;12;;@Test public void unsafeCharsInHttpURIHeader() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/?bridgeEndpoint=true", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_URI, "/<>{}").         }     }).     assertNull(exchange.getException()).     assertExchange(exchange). }
