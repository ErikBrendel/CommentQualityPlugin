commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     try {         Thread.sleep(1000).     } catch (InterruptedException e) {     // ignore     }     response.setStatusCode(HttpStatus.SC_OK).     response.setEntity(new StringEntity("" + counter.incrementAndGet())). }
false;public;0;24;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/", new HttpRequestHandler() {          public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {             try {                 Thread.sleep(1000).             } catch (InterruptedException e) {             // ignore             }             response.setStatusCode(HttpStatus.SC_OK).             response.setEntity(new StringEntity("" + counter.incrementAndGet())).         }     }).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;3;;public String call() throws Exception {     return template.requestBody("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort(), null, String.class). }
false;private;2;27;;private void doSendMessages(int files, int poolSize) throws Exception {     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     // we access the responses Map below only inside the main thread,     // so no need for a thread-safe Map implementation     Map<Integer, Future<String>> responses = new HashMap<>().     for (int i = 0. i < files. i++) {         final int index = i.         Future<String> out = executor.submit(new Callable<String>() {              public String call() throws Exception {                 return template.requestBody("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort(), null, String.class).             }         }).         responses.put(index, out).     }     assertEquals(files, responses.size()).     // get all responses     Set<String> unique = new HashSet<>().     for (Future<String> future : responses.values()) {         unique.add(future.get()).     }     // should be 'files' unique responses     assertEquals("Should be " + files + " unique responses", files, unique.size()).     executor.shutdownNow(). }
