commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before @Override public void setUp() throws Exception {     Map<String, String> expectedHeaders = new HashMap<>().     expectedHeaders.put("Content-Type", "image/jpeg").     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/post", new BasicValidationHandler("POST", null, getBody(), getExpectedContent())).registerHandler("/post1", new HeaderValidationHandler("POST", null, null, getExpectedContent(), expectedHeaders)).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;0;3;;public String getProtocolString() {     return protocolString. }
false;public;1;3;;public void setProtocolString(String protocol) {     protocolString = protocol. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // without this property, camel use the os default encoding     // to create the byte array for the StringRequestEntity     exchange.setProperty(Exchange.CHARSET_NAME, charset).     exchange.getIn().setBody(getBody()). }
false;public;0;13;;@Test public void httpPostWithStringBody() throws Exception {     Exchange exchange = template.request(getProtocolString() + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/post", new Processor() {          public void process(Exchange exchange) throws Exception {             // without this property, camel use the os default encoding             // to create the byte array for the StringRequestEntity             exchange.setProperty(Exchange.CHARSET_NAME, charset).             exchange.getIn().setBody(getBody()).         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(getBody().getBytes(charset)). }
false;public;0;10;;@Test public void httpPostWithByteArrayBody() throws Exception {     Exchange exchange = template.request(getProtocolString() + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/post", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(getBody().getBytes(charset)).         }     }).     assertExchange(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(new ByteArrayInputStream(getBody().getBytes(charset))). }
false;public;0;10;;@Test public void httpPostWithInputStreamBody() throws Exception {     Exchange exchange = template.request(getProtocolString() + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/post", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(new ByteArrayInputStream(getBody().getBytes(charset))).         }     }).     assertExchange(exchange). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(new File("src/test/data/logo.jpeg")).     exchange.getIn().setHeader("Content-Type", "image/jpeg"). }
false;public;0;12;;@Test public void httpPostWithImage() throws Exception {     Exchange exchange = template.send(getProtocolString() + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/post1", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(new File("src/test/data/logo.jpeg")).             exchange.getIn().setHeader("Content-Type", "image/jpeg").         }     }).     assertExchange(exchange). }
false;protected;0;3;;protected String getBody() {     return "hl=de&q=camel+rocks". }
