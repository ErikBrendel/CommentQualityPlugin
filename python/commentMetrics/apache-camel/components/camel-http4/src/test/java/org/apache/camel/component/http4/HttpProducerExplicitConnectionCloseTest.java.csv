commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/myget", new BasicValidationHandler("GET", null, null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;0;16;;@Test public void noDataDefaultIsGet() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     component.setConnectionTimeToLive(1000L).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget?connectionClose=true").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody(null).     producer.start().     producer.process(exchange).     producer.stop().     assertEquals(HTTP.CONN_CLOSE, exchange.getOut().getHeader("connection")).     assertExchange(exchange). }
