commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/search", new BasicValidationHandler("GET", null, null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;0;6;;@Test public void httpConnectionOk() throws Exception {     Exchange exchange = template.request("direct:start", null).     assertExchange(exchange). }
false;public;0;16;;@Test public void httpConnectionNotOk() throws Exception {     // stop server so there are no connection     // and wait for it to terminate     localServer.stop().     localServer.awaitTermination(5000, TimeUnit.MILLISECONDS).     Exchange exchange = template.request("direct:start", null).     assertTrue(exchange.isFailed()).     ConnectException cause = assertIsInstanceOf(ConnectException.class, exchange.getException()).     assertTrue(cause.getMessage().contains("failed")).     assertEquals(true, exchange.getIn().getHeader(Exchange.REDELIVERED)).     assertEquals(4, exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER)). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").onException(ConnectException.class).maximumRedeliveries(4).backOffMultiplier(2).redeliveryDelay(100).maximumRedeliveryDelay(5000).useExponentialBackOff().end().to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(ConnectException.class).maximumRedeliveries(4).backOffMultiplier(2).redeliveryDelay(100).maximumRedeliveryDelay(5000).useExponentialBackOff().end().to("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/search").         }     }. }
