commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void setUpHttpAgentSystemProperty() throws Exception {     // the 'http.agent' java system-property corresponds to the http 'User-Agent' header     defaultSystemHttpAgent = System.setProperty("http.agent", "myCoolCamelCaseAgent"). }
false;public,static;0;8;;@AfterClass public static void resetHttpAgentSystemProperty() throws Exception {     if (defaultSystemHttpAgent != null) {         System.setProperty("http.agent", String.valueOf(defaultSystemHttpAgent)).     } else {         System.clearProperty("http.agent").     } }
false;public;0;17;;@Before @Override public void setUp() throws Exception {     Map<String, String> expectedHeaders = new HashMap<>().     expectedHeaders.put("User-Agent", "myCoolCamelCaseAgent").     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("*", new HeaderValidationHandler("GET", null, null, getExpectedContent(), expectedHeaders)).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;10;;@Test public void httpGetWithProxyFromSystemProperties() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "?useSystemProperties=true", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertExchange(exchange). }
