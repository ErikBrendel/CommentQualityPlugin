commented;modifiers;parameterAmount;loc;comment;code
false;public;3;12;;@Override public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     Header contentLengthHeader = request.getFirstHeader(Exchange.CONTENT_LENGTH).     String contentLength = contentLengthHeader != null ? contentLengthHeader.getValue() : "".     Header transferEncodingHeader = request.getFirstHeader(Exchange.TRANSFER_ENCODING).     String transferEncoding = transferEncodingHeader != null ? transferEncodingHeader.getValue() : "".     // Content-Length should match byte array     assertEquals("35", contentLength).     assertEquals("", transferEncoding).     response.setStatusCode(HttpStatus.SC_OK). }
false;public;3;12;;@Override public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     Header contentLengthHeader = request.getFirstHeader(Exchange.CONTENT_LENGTH).     String contentLength = contentLengthHeader != null ? contentLengthHeader.getValue() : "".     Header transferEncodingHeader = request.getFirstHeader(Exchange.TRANSFER_ENCODING).     String transferEncoding = transferEncodingHeader != null ? transferEncodingHeader.getValue() : "".     // Request Body Chunked if no Content-Length set.     assertEquals("", contentLength).     assertEquals("chunked", transferEncoding).     response.setStatusCode(HttpStatus.SC_OK). }
false;public;0;42;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/content-streamed", new HttpRequestHandler() {          @Override         public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {             Header contentLengthHeader = request.getFirstHeader(Exchange.CONTENT_LENGTH).             String contentLength = contentLengthHeader != null ? contentLengthHeader.getValue() : "".             Header transferEncodingHeader = request.getFirstHeader(Exchange.TRANSFER_ENCODING).             String transferEncoding = transferEncodingHeader != null ? transferEncodingHeader.getValue() : "".             // Request Body Chunked if no Content-Length set.             assertEquals("", contentLength).             assertEquals("chunked", transferEncoding).             response.setStatusCode(HttpStatus.SC_OK).         }     }).registerHandler("/content-not-streamed", new HttpRequestHandler() {          @Override         public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {             Header contentLengthHeader = request.getFirstHeader(Exchange.CONTENT_LENGTH).             String contentLength = contentLengthHeader != null ? contentLengthHeader.getValue() : "".             Header transferEncodingHeader = request.getFirstHeader(Exchange.TRANSFER_ENCODING).             String transferEncoding = transferEncodingHeader != null ? transferEncodingHeader.getValue() : "".             // Content-Length should match byte array             assertEquals("35", contentLength).             assertEquals("", transferEncoding).             response.setStatusCode(HttpStatus.SC_OK).         }     }).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_LENGTH, "1000").     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json").     exchange.getIn().setBody(new ByteArrayInputStreamCache(new ByteArrayInputStream(bodyContent.getBytes()))). }
false;public;0;17;;@Test public void testContentLengthStream() throws Exception {     Exchange out = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/content-streamed?bridgeEndpoint=true", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.CONTENT_LENGTH, "1000").             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json").             exchange.getIn().setBody(new ByteArrayInputStreamCache(new ByteArrayInputStream(bodyContent.getBytes()))).         }     }).     assertNotNull(out).     assertFalse("Should not fail", out.isFailed()). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_LENGTH, "1000").     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json").     exchange.getIn().setBody(bodyContent.getBytes()). }
false;public;0;17;;@Test public void testContentLengthNotStreamed() throws Exception {     Exchange out = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/content-not-streamed?bridgeEndpoint=true", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.CONTENT_LENGTH, "1000").             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json").             exchange.getIn().setBody(bodyContent.getBytes()).         }     }).     assertNotNull(out).     assertFalse("Should not fail", out.isFailed()). }
