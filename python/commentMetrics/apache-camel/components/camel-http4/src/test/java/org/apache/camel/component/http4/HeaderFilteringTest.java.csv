commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void shouldFilterIncomingHttpHeadersInProducer() throws Exception {     final HttpComponent http = new HttpComponent().     final DefaultCamelContext context = new DefaultCamelContext().     final Producer producer = http.createProducer(context, "http://localhost:" + port, "GET", "/test", null, null, "application/json", "application/json", new RestConfiguration(), Collections.emptyMap()).     final DefaultExchange exchange = new DefaultExchange(context).     final DefaultMessage in = new DefaultMessage(context).     in.setHeader("Host", "www.not-localhost.io").     in.setBody(BODY).     exchange.setIn(in).     try {         producer.process(exchange).     } catch (final HttpOperationFailedException e) {         fail(e.getMessage() + "\n%s", e.getResponseBody()).     } }
false;public;0;8;;@Before public void startHttpServer() throws IOException {     server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0).     server.createContext("/test", this::handleTest).     server.start().     port = server.getAddress().getPort(). }
false;public;0;4;;@After public void stopHttpServer() {     server.stop(0). }
false;;1;20;;void handleTest(final HttpExchange exchange) throws IOException {     try (final OutputStream responseBody = exchange.getResponseBody()) {         try {             assertThat(exchange.getRequestBody()).hasSameContentAs(new ByteArrayInputStream(BODY.getBytes(StandardCharsets.UTF_8))).             assertThat(exchange.getRequestHeaders()).containsEntry("Host", Collections.singletonList("localhost:" + port)).             exchange.sendResponseHeaders(200, 0).         } catch (final AssertionError error) {             final StringWriter out = new StringWriter().             error.printStackTrace(new PrintWriter(out)).             final String failure = out.toString().             final byte[] failureBytes = failure.getBytes(StandardCharsets.UTF_8).             exchange.sendResponseHeaders(500, failureBytes.length).             responseBody.write(failureBytes).         }     } }
