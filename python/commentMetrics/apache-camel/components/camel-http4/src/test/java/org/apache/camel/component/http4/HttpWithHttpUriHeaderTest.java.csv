commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/", new BasicValidationHandler("GET", null, null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_URI, "http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/"). }
false;public;0;10;;@Test public void notBridgeEndpointWithDefault() throws Exception {     Exchange exchange = template.request("http4://host/", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_URI, "http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/").         }     }).     assertExchange(exchange). }
