commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/myget", new BasicValidationHandler("GET", null, null, getExpectedContent())).registerHandler("/mypost", new BasicValidationHandler("POST", null, null, getExpectedContent())).registerHandler("/myget2", new BasicValidationHandler("GET", "q=Camel", null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;0;14;;@Test public void noDataDefaultIsGet() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody(null).     producer.start().     producer.process(exchange).     producer.stop().     assertExchange(exchange). }
false;public;0;15;;@Test public void dataDefaultIsPost() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/mypost").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("This is some data to post").     producer.start().     producer.process(exchange).     producer.stop().     assertExchange(exchange). }
false;public;0;14;;@Test public void withMethodPostInHeader() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/mypost").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("").     exchange.getIn().setHeader(Exchange.HTTP_METHOD, POST).     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;14;;@Test public void withMethodGetInHeader() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("").     exchange.getIn().setHeader(Exchange.HTTP_METHOD, GET).     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;14;;@Test public void withMethodCommonHttpGetInHeader() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("").     exchange.getIn().setHeader(Exchange.HTTP_METHOD, org.apache.camel.http.common.HttpMethods.GET).     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;13;;@Test public void withEndpointQuery() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget2?q=Camel").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("").     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;14;;@Test public void withQueryInHeader() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget2").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("").     exchange.getIn().setHeader(Exchange.HTTP_QUERY, "q=Camel").     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;14;;@Test public void withHttpURIInHeader() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget2").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("").     exchange.getIn().setHeader(Exchange.HTTP_URI, "http://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget2?q=Camel").     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;14;;@Test public void withQueryInHeaderOverrideEndpoint() throws Exception {     HttpComponent component = context.getComponent("http4", HttpComponent.class).     HttpEndpoint endpoiont = (HttpEndpoint) component.createEndpoint("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myget2?q=Donkey").     HttpProducer producer = new HttpProducer(endpoiont).     Exchange exchange = producer.createExchange().     exchange.getIn().setBody("").     exchange.getIn().setHeader(Exchange.HTTP_QUERY, "q=Camel").     producer.start().     producer.process(exchange).     producer.stop(). }
