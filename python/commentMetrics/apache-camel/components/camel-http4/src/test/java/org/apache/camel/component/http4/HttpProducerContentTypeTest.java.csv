commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;@Override public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     String contentType = request.getFirstHeader(Exchange.CONTENT_TYPE).getValue().     assertEquals(CONTENT_TYPE, contentType).     response.setEntity(new StringEntity(contentType, "ASCII")).     response.setStatusCode(HttpStatus.SC_OK). }
false;public;0;24;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/content", new HttpRequestHandler() {          @Override         public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {             String contentType = request.getFirstHeader(Exchange.CONTENT_TYPE).getValue().             assertEquals(CONTENT_TYPE, contentType).             response.setEntity(new StringEntity(contentType, "ASCII")).             response.setStatusCode(HttpStatus.SC_OK).         }     }).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, CONTENT_TYPE).     exchange.getIn().setBody("This is content"). }
false;public;0;17;;@Test public void testContentTypeWithBoundary() throws Exception {     Exchange out = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/content", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, CONTENT_TYPE).             exchange.getIn().setBody("This is content").         }     }).     assertNotNull(out).     assertFalse("Should not fail", out.isFailed()).     assertEquals(CONTENT_TYPE, out.getOut().getBody(String.class)). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, CONTENT_TYPE).     exchange.getIn().setBody("This is content"). }
false;public;0;17;;@Test public void testContentTypeWithBoundaryWithIgnoreResponseBody() throws Exception {     Exchange out = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/content?ignoreResponseBody=true", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, CONTENT_TYPE).             exchange.getIn().setBody("This is content").         }     }).     assertNotNull(out).     assertFalse("Should not fail", out.isFailed()).     assertNull(out.getOut().getBody()). }
