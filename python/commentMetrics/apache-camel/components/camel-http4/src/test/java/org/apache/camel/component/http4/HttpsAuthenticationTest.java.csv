commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/", new AuthenticationValidationHandler("GET", null, null, getExpectedContent(), user, password)).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("x509HostnameVerifier", new NoopHostnameVerifier()).     return registry. }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;11;;@Test public void httpsGetWithAuthentication() throws Exception {     Exchange exchange = template.request("https4://127.0.0.1:" + localServer.getLocalPort() + "/?authUsername=camel&authPassword=password&x509HostnameVerifier=#x509HostnameVerifier", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertExchange(exchange). }
false;protected;0;11;;@Override protected HttpProcessor getBasicHttpProcessor() {     List<HttpRequestInterceptor> requestInterceptors = new ArrayList<>().     requestInterceptors.add(new RequestBasicAuth()).     List<HttpResponseInterceptor> responseInterceptors = new ArrayList<>().     responseInterceptors.add(new ResponseContent()).     responseInterceptors.add(new ResponseBasicUnauthorized()).     ImmutableHttpProcessor httpproc = new ImmutableHttpProcessor(requestInterceptors, responseInterceptors).     return httpproc. }
