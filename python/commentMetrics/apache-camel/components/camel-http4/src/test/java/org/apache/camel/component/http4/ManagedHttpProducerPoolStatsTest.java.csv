commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;3;5;;@Override public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     response.setEntity(new StringEntity("OK", "ASCII")).     response.setStatusCode(HttpStatus.SC_OK). }
false;public;0;20;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/myapp", new HttpRequestHandler() {          @Override         public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {             response.setEntity(new StringEntity("OK", "ASCII")).             response.setStatusCode(HttpStatus.SC_OK).         }     }).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;45;;@Test public void testPoolStats() throws Exception {     // turn on registering jmx always so the producer is also registered     context.getManagementStrategy().getManagementAgent().setRegisterAlways(true).     String uri = "http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/myapp".     Exchange out = template.request(uri, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertNotNull(out).     assertEquals("OK", out.getOut().getBody(String.class)).     // look up stats     HttpEndpoint http = context.getEndpoint(uri, HttpEndpoint.class).     assertNotNull(http).     int max = http.getClientConnectionsPoolStatsMax().     int avail = http.getClientConnectionsPoolStatsAvailable().     int leased = http.getClientConnectionsPoolStatsLeased().     int pending = http.getClientConnectionsPoolStatsPending().     assertEquals(200, max).     assertEquals(1, avail).     assertEquals(0, leased).     assertEquals(0, pending).     // should be in JMX too     MBeanServer mbeanServer = getMBeanServer().     String id = context.getManagementName().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=" + id + ",type=endpoints,name=\"" + uri + "\"").     assertTrue(mbeanServer.isRegistered(on)).     max = (int) mbeanServer.getAttribute(on, "ClientConnectionsPoolStatsMax").     assertEquals(200, max).     avail = (int) mbeanServer.getAttribute(on, "ClientConnectionsPoolStatsAvailable").     assertEquals(1, avail).     leased = (int) mbeanServer.getAttribute(on, "ClientConnectionsPoolStatsLeased").     assertEquals(0, leased).     pending = (int) mbeanServer.getAttribute(on, "ClientConnectionsPoolStatsPending").     assertEquals(0, pending). }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
