commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("x509HostnameVerifier", new NoopHostnameVerifier()).     registry.bind("sslContextParameters", new SSLContextParameters()).     registry.bind("sslContextParameters2", new SSLContextParameters()).     return registry. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:foo").to("https4://127.0.0.1:" + localServer.getLocalPort() + "/mail?x509HostnameVerifier=x509HostnameVerifier&sslContextParameters=#sslContextParameters").     from("direct:bar").to("https4://127.0.0.1:" + localServer.getLocalPort() + "/mail?x509HostnameVerifier=x509HostnameVerifier&sslContextParameters=#sslContextParameters2"). }
false;public;0;21;;@Test public void httpsTwoDifferentSSLContextNotSupported() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("https4://127.0.0.1:" + localServer.getLocalPort() + "/mail?x509HostnameVerifier=x509HostnameVerifier&sslContextParameters=#sslContextParameters").             from("direct:bar").to("https4://127.0.0.1:" + localServer.getLocalPort() + "/mail?x509HostnameVerifier=x509HostnameVerifier&sslContextParameters=#sslContextParameters2").         }     }).     try {         context.start().         fail("Should have thrown exception").     } catch (FailedToCreateRouteException e) {         IllegalArgumentException iae = (IllegalArgumentException) e.getCause().getCause().         assertNotNull(iae).         assertTrue(iae.getMessage().startsWith("Only same instance of SSLContextParameters is supported.")).     } }
