commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     HttpComponent http = context.getComponent("http4", HttpComponent.class).     http.setHttpBinding(new MyBinding()).     // must start component     http.start().     return context. }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("other", new MyOtherBinding()).     jndi.bind("myStrategy", new MyHeaderFilterStrategy()).     return jndi. }
false;public;0;18;;@Test public void testDoNotMessWithComponent() throws Exception {     // get default     HttpEndpoint end = context.getEndpoint("http4://www.google.com", HttpEndpoint.class).     assertIsInstanceOf(MyBinding.class, end.getHttpBinding()).     // use a endpoint specific binding     HttpEndpoint end2 = context.getEndpoint("http4://www.google.com?httpBinding=#other", HttpEndpoint.class).     assertIsInstanceOf(MyOtherBinding.class, end2.getHttpBinding()).     // and the default option has not been messed with     HttpEndpoint end3 = context.getEndpoint("http4://www.google.com", HttpEndpoint.class).     assertIsInstanceOf(MyBinding.class, end3.getHttpBinding()).     // test the headerFilterStrategy     HttpEndpoint end4 = context.getEndpoint("http4://www.google.com?headerFilterStrategy=#myStrategy", HttpEndpoint.class).     assertIsInstanceOf(MyHeaderFilterStrategy.class, end4.getHeaderFilterStrategy()). }
