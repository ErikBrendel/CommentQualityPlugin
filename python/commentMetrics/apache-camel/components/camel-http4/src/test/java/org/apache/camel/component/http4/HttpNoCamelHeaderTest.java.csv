commented;modifiers;parameterAmount;loc;comment;code
false;public;3;16;;@Override public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     response.setStatusCode(HttpStatus.SC_OK).     Object header = request.getFirstHeader(Exchange.FILE_NAME).     assertNull("There should be no Camel header", header).     for (Header h : request.getAllHeaders()) {         if (h.getName().startsWith("Camel") || h.getName().startsWith("org.apache.camel")) {             assertNull("There should be no Camel header", h).         }     }     // set ar regular and Camel header     response.setHeader("MyApp", "dude").     response.setHeader(Exchange.TO_ENDPOINT, "foo"). }
false;public;0;31;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/hello", new HttpRequestHandler() {          @Override         public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {             response.setStatusCode(HttpStatus.SC_OK).             Object header = request.getFirstHeader(Exchange.FILE_NAME).             assertNull("There should be no Camel header", header).             for (Header h : request.getAllHeaders()) {                 if (h.getName().startsWith("Camel") || h.getName().startsWith("org.apache.camel")) {                     assertNull("There should be no Camel header", h).                 }             }             // set ar regular and Camel header             response.setHeader("MyApp", "dude").             response.setHeader(Exchange.TO_ENDPOINT, "foo").         }     }).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "text/plain").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     exchange.getIn().setBody("This is content"). }
false;public;0;18;;@Test public void testNoCamelHeader() throws Exception {     Exchange out = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/hello", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "text/plain").             exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").             exchange.getIn().setBody("This is content").         }     }).     assertNotNull(out).     assertFalse("Should not fail", out.isFailed()).     assertEquals("dude", out.getOut().getHeader("MyApp")).     assertNull(out.getOut().getHeader(Exchange.TO_ENDPOINT)). }
