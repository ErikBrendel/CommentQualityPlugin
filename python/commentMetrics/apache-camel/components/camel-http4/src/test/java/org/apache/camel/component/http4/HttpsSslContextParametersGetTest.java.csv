commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/mail/", new BasicValidationHandler("GET", null, null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("sslContextParameters", new SSLContextParameters()).     return registry. }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;11;;@Test public void httpsGet() throws Exception {     Exchange exchange = template.request("https4://127.0.0.1:" + localServer.getLocalPort() + "/mail/?x509HostnameVerifier=x509HostnameVerifier&sslContextParameters=#sslContextParameters", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertExchange(exchange). }
