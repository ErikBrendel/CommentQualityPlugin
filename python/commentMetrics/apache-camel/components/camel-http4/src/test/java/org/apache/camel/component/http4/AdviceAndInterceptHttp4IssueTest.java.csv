commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testHttp4WithoutHttpClientParameter() throws Exception {     doTestHttp4Parameter(simpleProvider). }
false;public;0;4;;@Test public void testHttp4WithHttpClientParameter() throws Exception {     doTestHttp4Parameter(providerWithParameter). }
false;public;0;4;;@Override public boolean isUseAdviceWith() {     return true. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return true. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to(provider).to("mock:result"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     messageIntercepted = true. }
false;public;0;12;;@Override public void configure() throws Exception {     interceptSendToEndpoint("http4:fakeHTTPADDRESS.com:80*").skipSendToOriginalEndpoint().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             messageIntercepted = true.         }     }).to("mock:advised"). }
false;private;1;38;;private void doTestHttp4Parameter(final String provider) throws Exception {     messageIntercepted = false.     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(provider).to("mock:result").         }     }).     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("http4:fakeHTTPADDRESS.com:80*").skipSendToOriginalEndpoint().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     messageIntercepted = true.                 }             }).to("mock:advised").         }     }).     context.start().     getMockEndpoint("mock:advised").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertTrue(messageIntercepted). }
