commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/moes", new DrinkValidationHandler("GET", null, null, "drink")).registerHandler("/joes", new DrinkValidationHandler("GET", null, null, "drink")).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:moes").toD("http4://localhost:" + localServer.getLocalPort() + "/moes?throwExceptionOnFailure=false&drink=${header.drink}").     from("direct:joes").toD("http4://localhost:" + localServer.getLocalPort() + "/joes?throwExceptionOnFailure=false&drink=${header.drink}"). }
false;protected;0;13;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:moes").toD("http4://localhost:" + localServer.getLocalPort() + "/moes?throwExceptionOnFailure=false&drink=${header.drink}").             from("direct:joes").toD("http4://localhost:" + localServer.getLocalPort() + "/joes?throwExceptionOnFailure=false&drink=${header.drink}").         }     }. }
false;public;0;15;;@Test public void testDynamicAware() throws Exception {     String out = fluentTemplate.to("direct:moes").withHeader("drink", "beer").request(String.class).     assertEquals("Drinking beer", out).     out = fluentTemplate.to("direct:joes").withHeader("drink", "wine").request(String.class).     assertEquals("Drinking wine", out).     // and there should only be one http endpoint as they are both on same host     boolean found = context.getEndpointMap().containsKey("http4://localhost:" + localServer.getLocalPort() + "?throwExceptionOnFailure=false").     assertTrue("Should find static uri", found).     // we only have 2xdirect and 1xhttp4     assertEquals(3, context.getEndpointMap().size()). }
