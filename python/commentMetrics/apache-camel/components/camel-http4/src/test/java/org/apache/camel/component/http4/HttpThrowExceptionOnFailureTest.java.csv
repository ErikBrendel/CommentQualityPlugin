commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before @Override public void setUp() throws Exception {     localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/", new BasicValidationHandler("GET", null, null, getExpectedContent())).create().     localServer.start().     super.setUp(). }
false;public;0;9;;@After @Override public void tearDown() throws Exception {     super.tearDown().     if (localServer != null) {         localServer.stop().     } }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;16;;@Test public void httpGetWhichReturnsHttp501() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/XXX?throwExceptionOnFailure=false", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertNotNull(exchange).     Message out = exchange.getOut().     assertNotNull(out).     Map<String, Object> headers = out.getHeaders().     assertEquals(HttpStatus.SC_NOT_IMPLEMENTED, headers.get(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("0", headers.get("Content-Length")). }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;12;;@Test public void httpGetWhichReturnsHttp501ShouldThrowAnException() throws Exception {     Exchange reply = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/XXX?throwExceptionOnFailure=true", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     Exception e = reply.getException().     assertNotNull("Should have thrown an exception", e).     HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e).     assertEquals(501, cause.getStatusCode()). }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;18;;@Test public void httpGetWhichReturnsHttp501WithIgnoreResponseBody() throws Exception {     Exchange exchange = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/XXX?throwExceptionOnFailure=false&ignoreResponseBody=true", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     assertNotNull(exchange).     Message out = exchange.getOut().     assertNotNull(out).     assertNull(out.getBody()).     Map<String, Object> headers = out.getHeaders().     assertEquals(HttpStatus.SC_NOT_IMPLEMENTED, headers.get(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("0", headers.get("Content-Length")). }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;13;;@Test public void httpGetWhichReturnsHttp501ShouldThrowAnExceptionWithIgnoreResponseBody() throws Exception {     Exchange reply = template.request("http4://" + localServer.getInetAddress().getHostName() + ":" + localServer.getLocalPort() + "/XXX?throwExceptionOnFailure=true&ignoreResponseBody=true", new Processor() {          public void process(Exchange exchange) throws Exception {         }     }).     Exception e = reply.getException().     assertNotNull("Should have thrown an exception", e).     HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e).     assertEquals(501, cause.getStatusCode()). }
