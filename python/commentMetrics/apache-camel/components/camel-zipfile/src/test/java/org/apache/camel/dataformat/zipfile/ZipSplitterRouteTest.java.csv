commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testSplitter() throws InterruptedException {     MockEndpoint processZipEntry = getMockEndpoint("mock:processZipEntry").     processZipEntry.expectedBodiesReceivedInAnyOrder("chau", "hi", "hola", "another_chiau", "another_hi").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     // Unzip file and Split it according to FileEntry     from("file:src/test/resources/org/apache/camel/dataformat/zipfile/data?consumer.delay=1000&noop=true").log("Start processing big file: ${header.CamelFileName}").split(new ZipSplitter()).streaming().to("log:entry").convertBodyTo(String.class).to("mock:processZipEntry").end().log("Done processing big file: ${header.CamelFileName}"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // Unzip file and Split it according to FileEntry             from("file:src/test/resources/org/apache/camel/dataformat/zipfile/data?consumer.delay=1000&noop=true").log("Start processing big file: ${header.CamelFileName}").split(new ZipSplitter()).streaming().to("log:entry").convertBodyTo(String.class).to("mock:processZipEntry").end().log("Done processing big file: ${header.CamelFileName}").         }     }. }
