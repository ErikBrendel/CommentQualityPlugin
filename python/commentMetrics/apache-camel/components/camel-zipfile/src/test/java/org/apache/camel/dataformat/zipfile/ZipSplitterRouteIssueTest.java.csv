commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/zip").     super.setUp(). }
false;public;0;8;;@Test public void testSplitter() throws Exception {     getMockEndpoint("mock:entry").expectedMessageCount(2).     template.sendBody("direct:decompressFiles", new File("src/test/resources/data.zip")).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSplitterWithWrongFile() throws Exception {     getMockEndpoint("mock:entry").expectedMessageCount(0).     getMockEndpoint("mock:errors").expectedMessageCount(1).     // Send a file which is not exit     template.sendBody("direct:decompressFiles", new File("src/test/resources/data")).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:errors")).     from("direct:decompressFiles").split(new ZipSplitter()).streaming().shareUnitOfWork().to("log:entry").to("mock:entry"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:errors")).             from("direct:decompressFiles").split(new ZipSplitter()).streaming().shareUnitOfWork().to("log:entry").to("mock:entry").         }     }. }
