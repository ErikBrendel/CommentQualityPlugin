commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;public FluentProducerTemplate getObject() throws Exception {     CamelContext context = getCamelContext().     if (defaultEndpoint != null) {         Endpoint endpoint = context.getEndpoint(defaultEndpoint).         if (endpoint == null) {             throw new IllegalArgumentException("No endpoint found for URI: " + defaultEndpoint).         } else {             template = new DefaultFluentProducerTemplate(context).             template.setDefaultEndpoint(endpoint).         }     } else {         template = new DefaultFluentProducerTemplate(context).     }     // set custom cache size if provided     if (maximumCacheSize != null) {         template.setMaximumCacheSize(maximumCacheSize).     }     // must start it so its ready to use     ServiceHelper.startService(template).     return template. }
false;public;0;3;;public Class<DefaultFluentProducerTemplate> getObjectType() {     return DefaultFluentProducerTemplate.class. }
false;public;0;3;;public void destroy() throws Exception {     ServiceHelper.stopService(template). }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public String getDefaultEndpoint() {     return defaultEndpoint. }
true;public;1;3;/**  * Sets the default endpoint URI used by default for sending message exchanges  */ ;/**  * Sets the default endpoint URI used by default for sending message exchanges  */ public void setDefaultEndpoint(String defaultEndpoint) {     this.defaultEndpoint = defaultEndpoint. }
false;public;0;3;;public Integer getMaximumCacheSize() {     return maximumCacheSize. }
true;public;1;3;/**  * Sets a custom maximum cache size to use in the backing cache pools.  *  * @param maximumCacheSize the custom maximum cache size  */ ;/**  * Sets a custom maximum cache size to use in the backing cache pools.  *  * @param maximumCacheSize the custom maximum cache size  */ public void setMaximumCacheSize(Integer maximumCacheSize) {     this.maximumCacheSize = maximumCacheSize. }
