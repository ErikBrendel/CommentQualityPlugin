commented;modifiers;parameterAmount;loc;comment;code
false;public;0;43;;public ExecutorService getObject() throws Exception {     int size = CamelContextHelper.parseInteger(getCamelContext(), poolSize).     if (size <= 0) {         throw new IllegalArgumentException("PoolSize must be a positive number").     }     int max = size.     if (maxPoolSize != null) {         max = CamelContextHelper.parseInteger(getCamelContext(), maxPoolSize).     }     long keepAlive = 60.     if (keepAliveTime != null) {         keepAlive = CamelContextHelper.parseLong(getCamelContext(), keepAliveTime).     }     int queueSize = -1.     if (maxQueueSize != null) {         queueSize = CamelContextHelper.parseInteger(getCamelContext(), maxQueueSize).     }     boolean allow = false.     if (allowCoreThreadTimeOut != null) {         allow = CamelContextHelper.parseBoolean(getCamelContext(), allowCoreThreadTimeOut).     }     ThreadPoolProfile profile = new ThreadPoolProfileBuilder(getId()).poolSize(size).maxPoolSize(max).keepAliveTime(keepAlive, timeUnit).maxQueueSize(queueSize).allowCoreThreadTimeOut(allow).rejectedPolicy(rejectedPolicy).build().     ExecutorService answer.     if (scheduled != null && scheduled) {         answer = getCamelContext().getExecutorServiceManager().newScheduledThreadPool(getId(), getThreadName(), profile).     } else {         answer = getCamelContext().getExecutorServiceManager().newThreadPool(getId(), getThreadName(), profile).     }     return answer. }
false;public;0;3;;public Class<ExecutorService> getObjectType() {     return ExecutorService.class. }
false;public;0;3;;public String getPoolSize() {     return poolSize. }
false;public;1;3;;public void setPoolSize(String poolSize) {     this.poolSize = poolSize. }
false;public;0;3;;public String getMaxPoolSize() {     return maxPoolSize. }
false;public;1;3;;public void setMaxPoolSize(String maxPoolSize) {     this.maxPoolSize = maxPoolSize. }
false;public;0;3;;public String getKeepAliveTime() {     return keepAliveTime. }
false;public;1;3;;public void setKeepAliveTime(String keepAliveTime) {     this.keepAliveTime = keepAliveTime. }
false;public;0;3;;public TimeUnit getTimeUnit() {     return timeUnit. }
false;public;1;3;;public void setTimeUnit(TimeUnit timeUnit) {     this.timeUnit = timeUnit. }
false;public;0;3;;public String getMaxQueueSize() {     return maxQueueSize. }
false;public;1;3;;public void setMaxQueueSize(String maxQueueSize) {     this.maxQueueSize = maxQueueSize. }
false;public;0;3;;public String getAllowCoreThreadTimeOut() {     return allowCoreThreadTimeOut. }
false;public;1;3;;public void setAllowCoreThreadTimeOut(String allowCoreThreadTimeOut) {     this.allowCoreThreadTimeOut = allowCoreThreadTimeOut. }
false;public;0;3;;public ThreadPoolRejectedPolicy getRejectedPolicy() {     return rejectedPolicy. }
false;public;1;3;;public void setRejectedPolicy(ThreadPoolRejectedPolicy rejectedPolicy) {     this.rejectedPolicy = rejectedPolicy. }
false;public;0;3;;public String getThreadName() {     return threadName. }
false;public;1;3;;public void setThreadName(String threadName) {     this.threadName = threadName. }
false;public;0;3;;public Boolean getScheduled() {     return scheduled. }
false;public;1;3;;public void setScheduled(Boolean scheduled) {     this.scheduled = scheduled. }
