commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getEnabled() {     return enabled. }
true;public;1;3;/**  * Sets whether the stream caching is enabled.  * <p/>  * <b>Notice:</b> This cannot be changed at runtime.  */ ;/**  * Sets whether the stream caching is enabled.  * <p/>  * <b>Notice:</b> This cannot be changed at runtime.  */ public void setEnabled(String enabled) {     this.enabled = enabled. }
false;public;0;3;;public String getSpoolDirectory() {     return spoolDirectory. }
true;public;1;3;/**  * Sets the spool (temporary) directory to use for overflow and spooling to disk.  * <p/>  * If no spool directory has been explicit configured, then a temporary directory  * is created in the <tt>java.io.tmpdir</tt> directory.  */ ;/**  * Sets the spool (temporary) directory to use for overflow and spooling to disk.  * <p/>  * If no spool directory has been explicit configured, then a temporary directory  * is created in the <tt>java.io.tmpdir</tt> directory.  */ public void setSpoolDirectory(String spoolDirectory) {     this.spoolDirectory = spoolDirectory. }
false;public;0;3;;public String getSpoolChiper() {     return spoolChiper. }
true;public;1;3;/**  * Sets a chiper name to use when spooling to disk to write with encryption.  * <p/>  * By default the data is not encrypted.  */ ;/**  * Sets a chiper name to use when spooling to disk to write with encryption.  * <p/>  * By default the data is not encrypted.  */ public void setSpoolChiper(String spoolChiper) {     this.spoolChiper = spoolChiper. }
false;public;0;3;;public String getSpoolThreshold() {     return spoolThreshold. }
true;public;1;3;/**  * Threshold in bytes when overflow to disk is activated.  * <p/>  * The default threshold is {@link org.apache.camel.StreamCache#DEFAULT_SPOOL_THRESHOLD} bytes (eg 128kb).  * Use <tt>-1</tt> to disable overflow to disk.  */ ;/**  * Threshold in bytes when overflow to disk is activated.  * <p/>  * The default threshold is {@link org.apache.camel.StreamCache#DEFAULT_SPOOL_THRESHOLD} bytes (eg 128kb).  * Use <tt>-1</tt> to disable overflow to disk.  */ public void setSpoolThreshold(String spoolThreshold) {     this.spoolThreshold = spoolThreshold. }
false;public;0;3;;public String getSpoolUsedHeapMemoryThreshold() {     return spoolUsedHeapMemoryThreshold. }
true;public;1;3;/**  * Sets a percentage (1-99) of used heap memory threshold to activate spooling to disk.  */ ;/**  * Sets a percentage (1-99) of used heap memory threshold to activate spooling to disk.  */ public void setSpoolUsedHeapMemoryThreshold(String spoolUsedHeapMemoryThreshold) {     this.spoolUsedHeapMemoryThreshold = spoolUsedHeapMemoryThreshold. }
false;public;0;3;;public String getSpoolUsedHeapMemoryLimit() {     return spoolUsedHeapMemoryLimit. }
true;public;1;3;/**  * Sets what the upper bounds should be when spoolUsedHeapMemoryThreshold  * is in use.  */ ;/**  * Sets what the upper bounds should be when spoolUsedHeapMemoryThreshold  * is in use.  */ public void setSpoolUsedHeapMemoryLimit(String spoolUsedHeapMemoryLimit) {     this.spoolUsedHeapMemoryLimit = spoolUsedHeapMemoryLimit. }
false;public;0;3;;public String getSpoolRules() {     return spoolRules. }
true;public;1;3;/**  * Reference to one or more custom {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} to use.  * Multiple rules can be separated by comma.  */ ;/**  * Reference to one or more custom {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} to use.  * Multiple rules can be separated by comma.  */ public void setSpoolRules(String spoolRules) {     this.spoolRules = spoolRules. }
false;public;0;3;;public String getBufferSize() {     return bufferSize. }
true;public;1;3;/**  * Sets the buffer size to use when allocating in-memory buffers used for in-memory stream caches.  * <p/>  * The default size is {@link org.apache.camel.util.IOHelper#DEFAULT_BUFFER_SIZE}  */ ;/**  * Sets the buffer size to use when allocating in-memory buffers used for in-memory stream caches.  * <p/>  * The default size is {@link org.apache.camel.util.IOHelper#DEFAULT_BUFFER_SIZE}  */ public void setBufferSize(String bufferSize) {     this.bufferSize = bufferSize. }
false;public;0;3;;public String getRemoveSpoolDirectoryWhenStopping() {     return removeSpoolDirectoryWhenStopping. }
true;public;1;3;/**  * Whether to remove the temporary directory when stopping.  * <p/>  * This option is default <tt>true</tt>  */ ;/**  * Whether to remove the temporary directory when stopping.  * <p/>  * This option is default <tt>true</tt>  */ public void setRemoveSpoolDirectoryWhenStopping(String removeSpoolDirectoryWhenStopping) {     this.removeSpoolDirectoryWhenStopping = removeSpoolDirectoryWhenStopping. }
false;public;0;3;;public String getStatisticsEnabled() {     return statisticsEnabled. }
true;public;1;3;/**  * Sets whether statistics is enabled.  */ ;/**  * Sets whether statistics is enabled.  */ public void setStatisticsEnabled(String statisticsEnabled) {     this.statisticsEnabled = statisticsEnabled. }
false;public;0;3;;public String getAnySpoolRules() {     return anySpoolRules. }
true;public;1;3;/**  * Sets whether if just any of the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rules  * returns <tt>true</tt> then shouldSpoolCache(long) returns <tt>true</tt>.  * If this option is <tt>false</tt>, then <b>all</b> the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} must  * return <tt>true</tt>.  * <p/>  * The default value is <tt>false</tt> which means that all the rules must return <tt>true</tt>.  */ ;/**  * Sets whether if just any of the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rules  * returns <tt>true</tt> then shouldSpoolCache(long) returns <tt>true</tt>.  * If this option is <tt>false</tt>, then <b>all</b> the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} must  * return <tt>true</tt>.  * <p/>  * The default value is <tt>false</tt> which means that all the rules must return <tt>true</tt>.  */ public void setAnySpoolRules(String anySpoolRules) {     this.anySpoolRules = anySpoolRules. }
