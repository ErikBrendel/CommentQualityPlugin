commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getServiceUrl() {     return serviceUrl. }
true;public;1;3;/**  * The camel endpoint uri used to send the message to when calling the service from the interface.  */ ;/**  * The camel endpoint uri used to send the message to when calling the service from the interface.  */ public void setServiceUrl(String serviceUrl) {     this.serviceUrl = serviceUrl. }
false;public;0;3;;public String getServiceRef() {     return serviceRef. }
true;public;1;4;/**  * The camel endpoint reference used to send the message to when calling the service from the interface.  *  * @deprecated use serviceUrl instead with the ref endpoint.  */ ;/**  * The camel endpoint reference used to send the message to when calling the service from the interface.  *  * @deprecated use serviceUrl instead with the ref endpoint.  */ @Deprecated public void setServiceRef(String serviceRef) {     this.serviceRef = serviceRef. }
false;public;0;3;;public Class<?> getServiceInterface() {     return serviceInterface. }
true;public;1;3;/**  * Java interfaces to use as facade for the service to be proxied  */ ;/**  * Java interfaces to use as facade for the service to be proxied  */ public void setServiceInterface(Class<?> serviceInterface) {     this.serviceInterface = serviceInterface. }
false;public;0;3;;public String getCamelContextId() {     return camelContextId. }
true;public;1;3;/**  * The id of the CamelContext to use, if there is multiple CamelContext in the same JVM.  */ ;/**  * The id of the CamelContext to use, if there is multiple CamelContext in the same JVM.  */ public void setCamelContextId(String camelContextId) {     this.camelContextId = camelContextId. }
false;public;0;3;;public Boolean getBinding() {     return binding. }
true;public;1;3;/**  * Camel parameter binding is enabled by default, which will use binding information from the method signature  * parameters to bind to the Exchange/Message with the following annotations.  * If disabled then a {@link org.apache.camel.component.bean.CamelInvocationHandler} is used.  */ ;/**  * Camel parameter binding is enabled by default, which will use binding information from the method signature  * parameters to bind to the Exchange/Message with the following annotations.  * If disabled then a {@link org.apache.camel.component.bean.CamelInvocationHandler} is used.  */ public void setBinding(Boolean binding) {     this.binding = binding. }
