# id;timestamp;commentText;codeText;commentWords;codeWords
PatternBasedPackageScanFilter -> public void addExcludePattern(String excludePattern);1325832119;add and exclude pattern to the filter. Classes matching this pattern will_not match the filter;public void addExcludePattern(String excludePattern) {_        if (excludePatterns == null) {_            excludePatterns = new ArrayList<String>()__        }_        excludePatterns.add(excludePattern)__    };add,and,exclude,pattern,to,the,filter,classes,matching,this,pattern,will,not,match,the,filter;public,void,add,exclude,pattern,string,exclude,pattern,if,exclude,patterns,null,exclude,patterns,new,array,list,string,exclude,patterns,add,exclude,pattern
PatternBasedPackageScanFilter -> public void addExcludePattern(String excludePattern);1326207382;add and exclude pattern to the filter. Classes matching this pattern will_not match the filter;public void addExcludePattern(String excludePattern) {_        if (excludePatterns == null) {_            excludePatterns = new ArrayList<String>()__        }_        excludePatterns.add(excludePattern)__    };add,and,exclude,pattern,to,the,filter,classes,matching,this,pattern,will,not,match,the,filter;public,void,add,exclude,pattern,string,exclude,pattern,if,exclude,patterns,null,exclude,patterns,new,array,list,string,exclude,patterns,add,exclude,pattern
PatternBasedPackageScanFilter -> public void addExcludePattern(String excludePattern);1523914942;add and exclude pattern to the filter. Classes matching this pattern will_not match the filter;public void addExcludePattern(String excludePattern) {_        if (excludePatterns == null) {_            excludePatterns = new ArrayList<>()__        }_        excludePatterns.add(excludePattern)__    };add,and,exclude,pattern,to,the,filter,classes,matching,this,pattern,will,not,match,the,filter;public,void,add,exclude,pattern,string,exclude,pattern,if,exclude,patterns,null,exclude,patterns,new,array,list,exclude,patterns,add,exclude,pattern
PatternBasedPackageScanFilter -> public void addIncludePattern(String includePattern);1325832119;add and include pattern to the filter. Classes must match one of supplied_include patterns to match the filter;public void addIncludePattern(String includePattern) {_        if (includePatterns == null) {_            includePatterns = new ArrayList<String>()__        }_        includePatterns.add(includePattern)__    };add,and,include,pattern,to,the,filter,classes,must,match,one,of,supplied,include,patterns,to,match,the,filter;public,void,add,include,pattern,string,include,pattern,if,include,patterns,null,include,patterns,new,array,list,string,include,patterns,add,include,pattern
PatternBasedPackageScanFilter -> public void addIncludePattern(String includePattern);1326207382;add and include pattern to the filter. Classes must match one of supplied_include patterns to match the filter;public void addIncludePattern(String includePattern) {_        if (includePatterns == null) {_            includePatterns = new ArrayList<String>()__        }_        includePatterns.add(includePattern)__    };add,and,include,pattern,to,the,filter,classes,must,match,one,of,supplied,include,patterns,to,match,the,filter;public,void,add,include,pattern,string,include,pattern,if,include,patterns,null,include,patterns,new,array,list,string,include,patterns,add,include,pattern
PatternBasedPackageScanFilter -> public void addIncludePattern(String includePattern);1523914942;add and include pattern to the filter. Classes must match one of supplied_include patterns to match the filter;public void addIncludePattern(String includePattern) {_        if (includePatterns == null) {_            includePatterns = new ArrayList<>()__        }_        includePatterns.add(includePattern)__    };add,and,include,pattern,to,the,filter,classes,must,match,one,of,supplied,include,patterns,to,match,the,filter;public,void,add,include,pattern,string,include,pattern,if,include,patterns,null,include,patterns,new,array,list,include,patterns,add,include,pattern
PatternBasedPackageScanFilter -> public boolean matches(Class<?> candidateClass);1325832119;Tests if a given class matches the patterns in this filter. Patterns are_specified by {@link AntPathMatcher}_<p>_if no include or exclude patterns are set then all classes match._<p>_If the filter contains only include filters, then the candidate class_must match one of the include patterns to match the filter and return_true._<p>_If the filter contains only exclude filters, then the filter will return_true unless the candidate class matches an exclude pattern._<p>_if this contains both include and exclude filters, then the above rules_apply with excludes taking precedence over includes i.e. an include_pattern of java.util.* and an exclude pattern of java.util.jar.* will_include a file only if it is in the util pkg and not in the util.jar_package.__@return true if candidate class matches according to the above rules;public boolean matches(Class<?> candidateClass) {_        String candidate = candidateClass.getName()__        if (includePatterns != null || excludePatterns != null) {__            if (excludePatterns != null && excludePatterns.size() > 0) {_                if (matchesAny(excludePatterns, candidate)) {_                    return false__                }_            }__            if (includePatterns != null && includePatterns.size() > 0) {_                return matchesAny(includePatterns, candidate)__            }__        }_        return true__    };tests,if,a,given,class,matches,the,patterns,in,this,filter,patterns,are,specified,by,link,ant,path,matcher,p,if,no,include,or,exclude,patterns,are,set,then,all,classes,match,p,if,the,filter,contains,only,include,filters,then,the,candidate,class,must,match,one,of,the,include,patterns,to,match,the,filter,and,return,true,p,if,the,filter,contains,only,exclude,filters,then,the,filter,will,return,true,unless,the,candidate,class,matches,an,exclude,pattern,p,if,this,contains,both,include,and,exclude,filters,then,the,above,rules,apply,with,excludes,taking,precedence,over,includes,i,e,an,include,pattern,of,java,util,and,an,exclude,pattern,of,java,util,jar,will,include,a,file,only,if,it,is,in,the,util,pkg,and,not,in,the,util,jar,package,return,true,if,candidate,class,matches,according,to,the,above,rules;public,boolean,matches,class,candidate,class,string,candidate,candidate,class,get,name,if,include,patterns,null,exclude,patterns,null,if,exclude,patterns,null,exclude,patterns,size,0,if,matches,any,exclude,patterns,candidate,return,false,if,include,patterns,null,include,patterns,size,0,return,matches,any,include,patterns,candidate,return,true
PatternBasedPackageScanFilter -> public boolean matches(Class<?> candidateClass);1326207382;Tests if a given class matches the patterns in this filter. Patterns are_specified by {@link AntPathMatcher}_<p>_if no include or exclude patterns are set then all classes match._<p>_If the filter contains only include filters, then the candidate class_must match one of the include patterns to match the filter and return_true._<p>_If the filter contains only exclude filters, then the filter will return_true unless the candidate class matches an exclude pattern._<p>_if this contains both include and exclude filters, then the above rules_apply with excludes taking precedence over includes i.e. an include_pattern of java.util.* and an exclude pattern of java.util.jar.* will_include a file only if it is in the util pkg and not in the util.jar_package.__@return true if candidate class matches according to the above rules;public boolean matches(Class<?> candidateClass) {_        String candidate = candidateClass.getName()__        if (includePatterns != null || excludePatterns != null) {__            if (excludePatterns != null && excludePatterns.size() > 0) {_                if (matchesAny(excludePatterns, candidate)) {_                    return false__                }_            }__            if (includePatterns != null && includePatterns.size() > 0) {_                return matchesAny(includePatterns, candidate)__            }__        }_        return true__    };tests,if,a,given,class,matches,the,patterns,in,this,filter,patterns,are,specified,by,link,ant,path,matcher,p,if,no,include,or,exclude,patterns,are,set,then,all,classes,match,p,if,the,filter,contains,only,include,filters,then,the,candidate,class,must,match,one,of,the,include,patterns,to,match,the,filter,and,return,true,p,if,the,filter,contains,only,exclude,filters,then,the,filter,will,return,true,unless,the,candidate,class,matches,an,exclude,pattern,p,if,this,contains,both,include,and,exclude,filters,then,the,above,rules,apply,with,excludes,taking,precedence,over,includes,i,e,an,include,pattern,of,java,util,and,an,exclude,pattern,of,java,util,jar,will,include,a,file,only,if,it,is,in,the,util,pkg,and,not,in,the,util,jar,package,return,true,if,candidate,class,matches,according,to,the,above,rules;public,boolean,matches,class,candidate,class,string,candidate,candidate,class,get,name,if,include,patterns,null,exclude,patterns,null,if,exclude,patterns,null,exclude,patterns,size,0,if,matches,any,exclude,patterns,candidate,return,false,if,include,patterns,null,include,patterns,size,0,return,matches,any,include,patterns,candidate,return,true
PatternBasedPackageScanFilter -> public boolean matches(Class<?> candidateClass);1523914942;Tests if a given class matches the patterns in this filter. Patterns are_specified by {@link AntPathMatcher}_<p>_if no include or exclude patterns are set then all classes match._<p>_If the filter contains only include filters, then the candidate class_must match one of the include patterns to match the filter and return_true._<p>_If the filter contains only exclude filters, then the filter will return_true unless the candidate class matches an exclude pattern._<p>_if this contains both include and exclude filters, then the above rules_apply with excludes taking precedence over includes i.e. an include_pattern of java.util.* and an exclude pattern of java.util.jar.* will_include a file only if it is in the util pkg and not in the util.jar_package.__@return true if candidate class matches according to the above rules;public boolean matches(Class<?> candidateClass) {_        String candidate = candidateClass.getName()__        if (includePatterns != null || excludePatterns != null) {__            if (excludePatterns != null && excludePatterns.size() > 0) {_                if (matchesAny(excludePatterns, candidate)) {_                    return false__                }_            }__            if (includePatterns != null && includePatterns.size() > 0) {_                return matchesAny(includePatterns, candidate)__            }__        }_        return true__    };tests,if,a,given,class,matches,the,patterns,in,this,filter,patterns,are,specified,by,link,ant,path,matcher,p,if,no,include,or,exclude,patterns,are,set,then,all,classes,match,p,if,the,filter,contains,only,include,filters,then,the,candidate,class,must,match,one,of,the,include,patterns,to,match,the,filter,and,return,true,p,if,the,filter,contains,only,exclude,filters,then,the,filter,will,return,true,unless,the,candidate,class,matches,an,exclude,pattern,p,if,this,contains,both,include,and,exclude,filters,then,the,above,rules,apply,with,excludes,taking,precedence,over,includes,i,e,an,include,pattern,of,java,util,and,an,exclude,pattern,of,java,util,jar,will,include,a,file,only,if,it,is,in,the,util,pkg,and,not,in,the,util,jar,package,return,true,if,candidate,class,matches,according,to,the,above,rules;public,boolean,matches,class,candidate,class,string,candidate,candidate,class,get,name,if,include,patterns,null,exclude,patterns,null,if,exclude,patterns,null,exclude,patterns,size,0,if,matches,any,exclude,patterns,candidate,return,false,if,include,patterns,null,include,patterns,size,0,return,matches,any,include,patterns,candidate,return,true
