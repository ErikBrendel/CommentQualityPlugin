commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getDisabled() {     return disabled. }
true;public;1;3;/**  * Disable JMI (default false)  */ ;/**  * Disable JMI (default false)  */ public void setDisabled(String disabled) {     this.disabled = disabled. }
false;public;0;3;;public String getOnlyRegisterProcessorWithCustomId() {     return onlyRegisterProcessorWithCustomId. }
true;public;1;3;/**  * Only register processor if a custom id was defined for it.  */ ;/**  * Only register processor if a custom id was defined for it.  */ public void setOnlyRegisterProcessorWithCustomId(String onlyRegisterProcessorWithCustomId) {     this.onlyRegisterProcessorWithCustomId = onlyRegisterProcessorWithCustomId. }
false;public;0;3;;public String getRegistryPort() {     return registryPort. }
true;public;1;3;/**  * RMI connector registry port (default 1099)  */ ;/**  * RMI connector registry port (default 1099)  */ public void setRegistryPort(String registryPort) {     this.registryPort = registryPort. }
false;public;0;3;;public String getConnectorPort() {     return connectorPort. }
true;public;1;3;/**  * RMI connector server port (default -1 not used)  */ ;/**  * RMI connector server port (default -1 not used)  */ public void setConnectorPort(String connectorPort) {     this.connectorPort = connectorPort. }
false;public;0;3;;public String getMbeanServerDefaultDomain() {     return mbeanServerDefaultDomain. }
true;public;1;3;/**  * MBean server default domain name (default org.apache.camel)  */ ;/**  * MBean server default domain name (default org.apache.camel)  */ public void setMbeanServerDefaultDomain(String mbeanServerDefaultDomain) {     this.mbeanServerDefaultDomain = mbeanServerDefaultDomain. }
false;public;0;3;;public String getMbeanObjectDomainName() {     return mbeanObjectDomainName. }
true;public;1;3;/**  * MBean object domain name (default org.apache.camel)  */ ;/**  * MBean object domain name (default org.apache.camel)  */ public void setMbeanObjectDomainName(String mbeanObjectDomainName) {     this.mbeanObjectDomainName = mbeanObjectDomainName. }
false;public;0;3;;public String getServiceUrlPath() {     return serviceUrlPath. }
true;public;1;3;/**  * JMX Service URL path (default /jmxrmi)  */ ;/**  * JMX Service URL path (default /jmxrmi)  */ public void setServiceUrlPath(String serviceUrlPath) {     this.serviceUrlPath = serviceUrlPath. }
false;public;0;3;;public String getCreateConnector() {     return createConnector. }
true;public;1;3;/**  * A flag that indicates whether the agent should be created  */ ;/**  * A flag that indicates whether the agent should be created  */ public void setCreateConnector(String createConnector) {     this.createConnector = createConnector. }
false;public;0;3;;public String getUsePlatformMBeanServer() {     return usePlatformMBeanServer. }
true;public;1;3;/**  * A flag that indicates whether the platform mbean server should be used  */ ;/**  * A flag that indicates whether the platform mbean server should be used  */ public void setUsePlatformMBeanServer(String usePlatformMBeanServer) {     this.usePlatformMBeanServer = usePlatformMBeanServer. }
false;public;0;3;;public String getStatisticsLevel() {     return statisticsLevel. }
true;public;1;3;/**  * Level of granularity for performance statistics enabled  */ ;/**  * Level of granularity for performance statistics enabled  */ public void setStatisticsLevel(String statisticsLevel) {     this.statisticsLevel = statisticsLevel. }
false;public;0;3;;public String getRegisterAlways() {     return registerAlways. }
true;public;1;3;/**  * A flag that indicates whether to register mbeans always  */ ;/**  * A flag that indicates whether to register mbeans always  */ public void setRegisterAlways(String registerAlways) {     this.registerAlways = registerAlways. }
false;public;0;3;;public String getRegisterNewRoutes() {     return registerNewRoutes. }
true;public;1;3;/**  * A flag that indicates whether to register mbeans when starting new routes  */ ;/**  * A flag that indicates whether to register mbeans when starting new routes  */ public void setRegisterNewRoutes(String registerNewRoutes) {     this.registerNewRoutes = registerNewRoutes. }
false;public;0;3;;public String getLoadStatisticsEnabled() {     return loadStatisticsEnabled. }
true;public;1;3;/**  * A flag that indicates whether Load statistics is enabled  */ ;/**  * A flag that indicates whether Load statistics is enabled  */ public void setLoadStatisticsEnabled(String loadStatisticsEnabled) {     this.loadStatisticsEnabled = loadStatisticsEnabled. }
false;public;0;3;;public String getEndpointRuntimeStatisticsEnabled() {     return endpointRuntimeStatisticsEnabled. }
true;public;1;3;/**  * A flag that indicates whether endpoint runtime statistics is enabled  */ ;/**  * A flag that indicates whether endpoint runtime statistics is enabled  */ public void setEndpointRuntimeStatisticsEnabled(String endpointRuntimeStatisticsEnabled) {     this.endpointRuntimeStatisticsEnabled = endpointRuntimeStatisticsEnabled. }
false;public;0;3;;public String getIncludeHostName() {     return includeHostName. }
true;public;1;3;/**  * A flag that indicates whether to include hostname in JMX MBean names.  */ ;/**  * A flag that indicates whether to include hostname in JMX MBean names.  */ public void setIncludeHostName(String includeHostName) {     this.includeHostName = includeHostName. }
false;public;0;3;;public String getMask() {     return mask. }
true;public;1;3;/**  * A flag that indicates whether to remove detected sensitive information (such as passwords) from MBean names and attributes.  */ ;/**  * A flag that indicates whether to remove detected sensitive information (such as passwords) from MBean names and attributes.  */ public void setMask(String mask) {     this.mask = mask. }
false;public;0;3;;public String getUseHostIPAddress() {     return useHostIPAddress. }
true;public;1;3;/**  * A flag that indicates whether to use hostname or IP Address in the service url.  */ ;/**  * A flag that indicates whether to use hostname or IP Address in the service url.  */ public void setUseHostIPAddress(String useHostIPAddress) {     this.useHostIPAddress = useHostIPAddress. }
false;public;0;62;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append("CamelJMXAgent[").     CollectionStringBuffer csb = new CollectionStringBuffer().     if (disabled != null) {         csb.append("disabled=" + disabled).     }     if (usePlatformMBeanServer != null) {         csb.append("usePlatformMBeanServer=" + usePlatformMBeanServer).     }     if (createConnector != null) {         csb.append("createConnector=" + createConnector).     }     if (connectorPort != null) {         csb.append("connectorPort=" + connectorPort).     }     if (registryPort != null) {         csb.append("registryPort=" + registryPort).     }     if (serviceUrlPath != null) {         csb.append("serviceUrlPath=" + serviceUrlPath).     }     if (mbeanServerDefaultDomain != null) {         csb.append("mbeanServerDefaultDomain=" + mbeanServerDefaultDomain).     }     if (mbeanObjectDomainName != null) {         csb.append("mbeanObjectDomainName=" + mbeanObjectDomainName).     }     if (statisticsLevel != null) {         csb.append("statisticsLevel=" + statisticsLevel).     }     if (loadStatisticsEnabled != null) {         csb.append("loadStatisticsEnabled=" + loadStatisticsEnabled).     }     if (endpointRuntimeStatisticsEnabled != null) {         csb.append("endpointRuntimeStatisticsEnabled=" + endpointRuntimeStatisticsEnabled).     }     if (onlyRegisterProcessorWithCustomId != null) {         csb.append("onlyRegisterProcessorWithCustomId=" + onlyRegisterProcessorWithCustomId).     }     if (registerAlways != null) {         csb.append("registerAlways=" + registerAlways).     }     if (registerNewRoutes != null) {         csb.append("registerNewRoutes=" + registerNewRoutes).     }     if (includeHostName != null) {         csb.append("includeHostName=" + includeHostName).     }     if (useHostIPAddress != null) {         csb.append("useHostIPAddress=" + useHostIPAddress).     }     if (mask != null) {         csb.append("mask=" + mask).     }     sb.append(csb.toString()).     sb.append("]").     return sb.toString(). }
