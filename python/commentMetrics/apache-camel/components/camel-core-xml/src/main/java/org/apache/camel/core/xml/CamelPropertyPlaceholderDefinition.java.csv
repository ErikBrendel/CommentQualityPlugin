commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getLocation() {     return location. }
true;public;1;3;/**  * A list of locations to load properties. You can use comma to separate multiple locations.  * This option will override any default locations and only use the locations from this option.  */ ;/**  * A list of locations to load properties. You can use comma to separate multiple locations.  * This option will override any default locations and only use the locations from this option.  */ public void setLocation(String location) {     this.location = location. }
false;public;0;3;;public String getEncoding() {     return encoding. }
true;public;1;3;/**  * Encoding to use when loading properties file from the file system or classpath.  * <p/>  * If no encoding has been set, then the properties files is loaded using ISO-8859-1 encoding (latin-1)  * as documented by {@link java.util.Properties#load(java.io.InputStream)}  */ ;/**  * Encoding to use when loading properties file from the file system or classpath.  * <p/>  * If no encoding has been set, then the properties files is loaded using ISO-8859-1 encoding (latin-1)  * as documented by {@link java.util.Properties#load(java.io.InputStream)}  */ public void setEncoding(String encoding) {     this.encoding = encoding. }
false;public;0;3;;public Boolean isCache() {     return cache. }
true;public;1;3;/**  * Whether or not to cache loaded properties. The default value is true.  */ ;/**  * Whether or not to cache loaded properties. The default value is true.  */ public void setCache(Boolean cache) {     this.cache = cache. }
false;public;0;3;;public String getPropertiesResolverRef() {     return propertiesResolverRef. }
true;public;1;3;/**  * Reference to a custom PropertiesResolver to be used  */ ;/**  * Reference to a custom PropertiesResolver to be used  */ public void setPropertiesResolverRef(String propertiesResolverRef) {     this.propertiesResolverRef = propertiesResolverRef. }
false;public;0;3;;public String getPropertiesParserRef() {     return propertiesParserRef. }
true;public;1;3;/**  * Reference to a custom PropertiesParser to be used  */ ;/**  * Reference to a custom PropertiesParser to be used  */ public void setPropertiesParserRef(String propertiesParserRef) {     this.propertiesParserRef = propertiesParserRef. }
false;public;0;3;;public String getPropertyPrefix() {     return propertyPrefix. }
true;public;1;3;/**  * Optional prefix prepended to property names before resolution.  */ ;/**  * Optional prefix prepended to property names before resolution.  */ public void setPropertyPrefix(String propertyPrefix) {     this.propertyPrefix = propertyPrefix. }
false;public;0;3;;public String getPropertySuffix() {     return propertySuffix. }
true;public;1;3;/**  * Optional suffix appended to property names before resolution.  */ ;/**  * Optional suffix appended to property names before resolution.  */ public void setPropertySuffix(String propertySuffix) {     this.propertySuffix = propertySuffix. }
false;public;0;3;;public Boolean isFallbackToUnaugmentedProperty() {     return fallbackToUnaugmentedProperty. }
true;public;1;3;/**  * If true, first attempt resolution of property name augmented with propertyPrefix and propertySuffix  * before falling back the plain property name specified. If false, only the augmented property name is searched.  */ ;/**  * If true, first attempt resolution of property name augmented with propertyPrefix and propertySuffix  * before falling back the plain property name specified. If false, only the augmented property name is searched.  */ public void setFallbackToUnaugmentedProperty(Boolean fallbackToUnaugmentedProperty) {     this.fallbackToUnaugmentedProperty = fallbackToUnaugmentedProperty. }
false;public;0;3;;public Boolean getDefaultFallbackEnabled() {     return defaultFallbackEnabled. }
true;public;1;3;/**  * If false, the component does not attempt to find a default for the key by looking after the colon separator.  */ ;/**  * If false, the component does not attempt to find a default for the key by looking after the colon separator.  */ public void setDefaultFallbackEnabled(Boolean defaultFallbackEnabled) {     this.defaultFallbackEnabled = defaultFallbackEnabled. }
false;public;0;3;;public Boolean isIgnoreMissingLocation() {     return ignoreMissingLocation. }
true;public;1;3;/**  * Whether to silently ignore if a location cannot be located, such as a properties file not found.  */ ;/**  * Whether to silently ignore if a location cannot be located, such as a properties file not found.  */ public void setIgnoreMissingLocation(Boolean ignoreMissingLocation) {     this.ignoreMissingLocation = ignoreMissingLocation. }
false;public;0;3;;public String getPrefixToken() {     return prefixToken. }
true;public;1;3;/**  * Sets the value of the prefix token used to identify properties to replace.  Setting a value of  * {@code null} restores the default token {{  */ ;/**  * Sets the value of the prefix token used to identify properties to replace.  Setting a value of  * {@code null} restores the default token {{  */ public void setPrefixToken(String prefixToken) {     this.prefixToken = prefixToken. }
false;public;0;3;;public String getSuffixToken() {     return suffixToken. }
true;public;1;3;/**  * Sets the value of the suffix token used to identify properties to replace.  Setting a value of  * {@code null} restores the default token }}  */ ;/**  * Sets the value of the suffix token used to identify properties to replace.  Setting a value of  * {@code null} restores the default token }}  */ public void setSuffixToken(String suffixToken) {     this.suffixToken = suffixToken. }
false;public;0;3;;public List<CamelPropertyPlaceholderFunctionDefinition> getFunctions() {     return functions. }
true;public;1;3;/**  * List of custom properties function to use.  */ ;/**  * List of custom properties function to use.  */ public void setFunctions(List<CamelPropertyPlaceholderFunctionDefinition> functions) {     this.functions = functions. }
false;public;0;3;;public List<CamelPropertyPlaceholderLocationDefinition> getLocations() {     return locations. }
true;public;1;3;/**  * List of property locations to use.  */ ;/**  * List of property locations to use.  */ public void setLocations(List<CamelPropertyPlaceholderLocationDefinition> locations) {     this.locations = locations. }
