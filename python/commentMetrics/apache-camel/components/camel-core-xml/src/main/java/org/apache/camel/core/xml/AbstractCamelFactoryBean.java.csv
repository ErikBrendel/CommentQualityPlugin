commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;0;1;;public abstract T getObject() throws Exception.
false;protected,abstract;1;1;;protected abstract CamelContext getCamelContextWithId(String camelContextId).
true;protected;0;3;/**  * If no explicit camelContext or camelContextId has been set  * then try to discover a default {@link CamelContext} to use.  */ ;/**  * If no explicit camelContext or camelContextId has been set  * then try to discover a default {@link CamelContext} to use.  */ protected CamelContext discoverDefaultCamelContext() {     return null. }
false;public;0;12;;public void afterPropertiesSet() throws Exception {     // Always try to resolved the camel context by using the camelContextId     if (ObjectHelper.isNotEmpty(camelContextId)) {         camelContext = getCamelContextWithId(camelContextId).         if (camelContext == null) {             throw new IllegalStateException("Cannot find CamelContext with id: " + camelContextId).         }     }     if (camelContext == null) {         camelContext = discoverDefaultCamelContext().     } }
false;public;0;2;;public void destroy() throws Exception { }
false;public;0;7;;public CamelContext getCamelContext() {     if (ObjectHelper.isNotEmpty(camelContextId)) {         // always return the context by its id         return getCamelContextWithId(camelContextId).     }     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String getCamelContextId() {     return camelContextId. }
false;public;1;3;;public void setCamelContextId(String camelContextId) {     this.camelContextId = camelContextId. }
false;public;0;3;;public Boolean getCustomId() {     return customId. }
false;public;1;3;;public void setCustomId(Boolean customId) {     this.customId = customId. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public,abstract;0;1;;public abstract Class<? extends T> getObjectType().
