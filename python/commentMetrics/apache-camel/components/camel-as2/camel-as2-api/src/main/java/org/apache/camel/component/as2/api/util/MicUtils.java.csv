commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getDigestAlgorithmId() {     return digestAlgorithmId. }
false;public;0;3;;public String getEncodedMessageDigest() {     return encodedMessageDigest. }
false;public;0;4;;@Override public String toString() {     return encodedMessageDigest + "," + digestAlgorithmId. }
false;public,static;2;9;;public static byte[] createMic(byte[] content, String algorithmId) {     try {         MessageDigest messageDigest = MessageDigest.getInstance(algorithmId, "BC").         return messageDigest.digest(content).     } catch (NoSuchAlgorithmException | NoSuchProviderException e) {         LOG.debug("failed to get message digets '{}'", algorithmId).         return null.     } }
false;public,static;2;26;;public static ReceivedContentMic createReceivedContentMic(HttpEntityEnclosingRequest request, PrivateKey decryptingPrivateKey) throws HttpException {     String dispositionNotificationOptionsString = HttpMessageUtils.getHeaderValue(request, AS2Header.DISPOSITION_NOTIFICATION_OPTIONS).     if (dispositionNotificationOptionsString == null) {         LOG.debug("do not create MIC: no disposition notification options in request").         return null.     }     DispositionNotificationOptions dispositionNotificationOptions = DispositionNotificationOptionsParser.parseDispositionNotificationOptions(dispositionNotificationOptionsString, null).     String micJdkAlgorithmName = getMicJdkAlgorithmName(dispositionNotificationOptions.getSignedReceiptMicalg().getValues()).     if (micJdkAlgorithmName == null) {         LOG.debug("do not create MIC: no matching MIC algorithms found").         return null.     }     HttpEntity entity = EntityParser.extractEdiPayload(request, decryptingPrivateKey).     byte[] content = EntityUtils.getContent(entity).     String micAS2AlgorithmName = AS2MicAlgorithm.getAS2AlgorithmName(micJdkAlgorithmName).     byte[] mic = createMic(content, micJdkAlgorithmName).     try {         return new ReceivedContentMic(micAS2AlgorithmName, mic).     } catch (Exception e) {         throw new HttpException("Failed to encode MIC", e).     } }
false;public,static;1;12;;public static String getMicJdkAlgorithmName(String[] micAs2AlgorithmNames) {     if (micAs2AlgorithmNames == null) {         return AS2MicAlgorithm.SHA_1.getJdkAlgorithmName().     }     for (String micAs2AlgorithmName : micAs2AlgorithmNames) {         String micJdkAlgorithmName = AS2MicAlgorithm.getJdkAlgorithmName(micAs2AlgorithmName).         if (micJdkAlgorithmName != null) {             return micJdkAlgorithmName.         }     }     return AS2MicAlgorithm.SHA_1.getJdkAlgorithmName(). }
