commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getBoundary() {     return boundary. }
false;public;1;4;;public void addPart(MimeEntity part) {     parts.add(part).     contentLength = RECALCULATE_CONTENT_LENGTH. }
false;public;1;3;;public MimeEntity getPart(int index) {     return parts.get(index). }
false;public;0;3;;public int getPartCount() {     return parts.size(). }
false;public;0;18;;@Override public long getContentLength() {     if (contentLength == RECALCULATE_CONTENT_LENGTH) {         // See if their are any parts with unknown content lengths.         for (MimeEntity part : parts) {             long len = part.getContentLength().             if (len < 0) {                 contentLength = MimeEntity.UNKNOWN_CONTENT_LENGTH.                 return contentLength.             }         }         contentLength = super.getContentLength().     }     return contentLength. }
false;public;1;29;;@Override public void writeTo(OutputStream outstream) throws IOException {     NoCloseOutputStream ncos = new NoCloseOutputStream(outstream).     try (CanonicalOutputStream canonicalOutstream = new CanonicalOutputStream(ncos, getCharset())) {         // Write out mime part headers if this is not the main body of message.         if (!isMainBody()) {             HeaderIterator it = headerIterator().             while (it.hasNext()) {                 Header header = it.nextHeader().                 canonicalOutstream.writeln(header.toString()).             }             // ensure empty line between headers and body. RFC2046 - 5.1.1             canonicalOutstream.writeln().         }         // Write out each part separated by a boundary delimiter line         String boundary = "--" + this.boundary.         // Write out parts         for (MimeEntity part : parts) {             canonicalOutstream.writeln(boundary).             part.writeTo(outstream).             // ensure boundary occurs at the beginning of a line. RFC2046 - 5.1.1             canonicalOutstream.writeln().         }         // Write out closing boundary delimiter line         canonicalOutstream.writeln(boundary + "--").     } }
