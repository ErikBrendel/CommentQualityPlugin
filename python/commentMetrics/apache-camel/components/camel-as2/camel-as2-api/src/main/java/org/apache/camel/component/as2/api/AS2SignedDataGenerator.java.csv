commented;modifiers;parameterAmount;loc;comment;code
true;public;1;61;/**  * Creates a <code>multipart/signed</code> content type containing the algorithms used by this generator.  *  * @param boundary - boundary to use to demarcate content.  * @return A <code>multipart/signed</code> content type  */ ;/**  * Creates a <code>multipart/signed</code> content type containing the algorithms used by this generator.  *  * @param boundary - boundary to use to demarcate content.  * @return A <code>multipart/signed</code> content type  */ public ContentType createMultipartSignedContentType(String boundary) {     StringBuffer header = new StringBuffer(AS2MediaType.MULTIPART_SIGNED).     header.append(". boundary=" + boundary).     Set<String> micAlgSet = new HashSet<>().     // Collect algorithm names used by pre-calculated signers     for (@SuppressWarnings("rawtypes") Iterator it = _signers.iterator(). it.hasNext(). ) {         SignerInformation signer = (SignerInformation) it.next().         ASN1ObjectIdentifier digestOID = signer.getDigestAlgorithmID().getAlgorithm().         String micAlg = STANDARD_MICALGS.get(digestOID).         if (micAlg == null) {             micAlgSet.add("unknown").         } else {             micAlgSet.add(micAlg).         }     }     // Collect algorithm names used by signer generators     for (@SuppressWarnings("rawtypes") Iterator it = signerGens.iterator(). it.hasNext(). ) {         SignerInfoGenerator signerInfoGen = (SignerInfoGenerator) it.next().         ASN1ObjectIdentifier digestOID = signerInfoGen.getDigestAlgorithm().getAlgorithm().         String micAlg = STANDARD_MICALGS.get(digestOID).         if (micAlg == null) {             micAlgSet.add("unknown").         } else {             micAlgSet.add(micAlg).         }     }     // Add algorithm names to multipart signed header.     int count = 0.     for (String micAlg : micAlgSet) {         if (count == 0) {             if (micAlgSet.size() != 1) {                 header.append(". micalg=\"").             } else {                 header.append(". micalg=").             }         } else {             header.append(',').         }         header.append(micAlg).         count++.     }     if (count != 0) {         if (micAlgSet.size() != 1) {             header.append('\"').         }     }     return ContentType.parse(header.toString()). }
false;public,static;1;13;;public static String[] getSupportedSignatureAlgorithmNamesForKey(Key key) {     switch(key.getAlgorithm()) {         case "DSA":             return DSA_SIGNING_ALGORITHMS.         case "RSA":             return RSA_SIGNING_ALGORITHMS.         case "EC":             return EC_SIGNING_ALGORITHMS.         default:             return new String[0].     } }
