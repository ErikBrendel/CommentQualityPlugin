# id;timestamp;commentText;codeText;commentWords;codeWords
AS2SignedDataGenerator -> public ContentType createMultipartSignedContentType(String boundary);1524122826;Creates a <code>multipart/signed</code> content type containing the algorithms used by this generator.__@return A <code>multipart/signed</code> content type;public ContentType createMultipartSignedContentType(String boundary) {_        StringBuffer header = new StringBuffer(AS2MediaType.MULTIPART_SIGNED)__        header.append("_ boundary=" + boundary)__        Set<String> micAlgSet = new HashSet<String>()___        _        for (@SuppressWarnings("rawtypes")_        Iterator it = _signers.iterator()_ it.hasNext()_) {_            SignerInformation signer = (SignerInformation) it.next()__            ASN1ObjectIdentifier digestOID = signer.getDigestAlgorithmID().getAlgorithm()___            String micAlg = (String) STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        for (@SuppressWarnings("rawtypes")_        Iterator it = signerGens.iterator()_ it.hasNext()_) {_            SignerInfoGenerator signerInfoGen = (SignerInfoGenerator) it.next()__            ASN1ObjectIdentifier digestOID = signerInfoGen.getDigestAlgorithm().getAlgorithm()___            String micAlg = (String) STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        int count = 0__        for (Iterator<String> it = micAlgSet.iterator()_ it.hasNext()_) {_            String alg = it.next()___            if (count == 0) {_                if (micAlgSet.size() != 1) {_                    header.append("_ micalg=\"")__                } else {_                    header.append("_ micalg=")__                }_            } else {_                header.append(',')__            }__            header.append(alg)___            count++__        }__        if (count != 0) {_            if (micAlgSet.size() != 1) {_                header.append('\"')__            }_        }_        _        return ContentType.parse(header.toString())__    };creates,a,code,multipart,signed,code,content,type,containing,the,algorithms,used,by,this,generator,return,a,code,multipart,signed,code,content,type;public,content,type,create,multipart,signed,content,type,string,boundary,string,buffer,header,new,string,buffer,as2media,type,header,append,boundary,boundary,set,string,mic,alg,set,new,hash,set,string,for,suppress,warnings,rawtypes,iterator,it,iterator,it,has,next,signer,information,signer,signer,information,it,next,asn1object,identifier,digest,oid,signer,get,digest,algorithm,id,get,algorithm,string,mic,alg,string,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,for,suppress,warnings,rawtypes,iterator,it,signer,gens,iterator,it,has,next,signer,info,generator,signer,info,gen,signer,info,generator,it,next,asn1object,identifier,digest,oid,signer,info,gen,get,digest,algorithm,get,algorithm,string,mic,alg,string,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,int,count,0,for,iterator,string,it,mic,alg,set,iterator,it,has,next,string,alg,it,next,if,count,0,if,mic,alg,set,size,1,header,append,micalg,else,header,append,micalg,else,header,append,header,append,alg,count,if,count,0,if,mic,alg,set,size,1,header,append,return,content,type,parse,header,to,string
AS2SignedDataGenerator -> public ContentType createMultipartSignedContentType(String boundary);1525695532;Creates a <code>multipart/signed</code> content type containing the algorithms used by this generator.__@return A <code>multipart/signed</code> content type;public ContentType createMultipartSignedContentType(String boundary) {_        StringBuffer header = new StringBuffer(AS2MediaType.MULTIPART_SIGNED)__        header.append("_ boundary=" + boundary)__        Set<String> micAlgSet = new HashSet<String>()___        _        for (@SuppressWarnings("rawtypes")_        Iterator it = _signers.iterator()_ it.hasNext()_) {_            SignerInformation signer = (SignerInformation) it.next()__            ASN1ObjectIdentifier digestOID = signer.getDigestAlgorithmID().getAlgorithm()___            String micAlg = (String) STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        for (@SuppressWarnings("rawtypes")_        Iterator it = signerGens.iterator()_ it.hasNext()_) {_            SignerInfoGenerator signerInfoGen = (SignerInfoGenerator) it.next()__            ASN1ObjectIdentifier digestOID = signerInfoGen.getDigestAlgorithm().getAlgorithm()___            String micAlg = (String) STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        int count = 0__        for (Iterator<String> it = micAlgSet.iterator()_ it.hasNext()_) {_            String alg = it.next()___            if (count == 0) {_                if (micAlgSet.size() != 1) {_                    header.append("_ micalg=\"")__                } else {_                    header.append("_ micalg=")__                }_            } else {_                header.append(',')__            }__            header.append(alg)___            count++__        }__        if (count != 0) {_            if (micAlgSet.size() != 1) {_                header.append('\"')__            }_        }__        return ContentType.parse(header.toString())__    };creates,a,code,multipart,signed,code,content,type,containing,the,algorithms,used,by,this,generator,return,a,code,multipart,signed,code,content,type;public,content,type,create,multipart,signed,content,type,string,boundary,string,buffer,header,new,string,buffer,as2media,type,header,append,boundary,boundary,set,string,mic,alg,set,new,hash,set,string,for,suppress,warnings,rawtypes,iterator,it,iterator,it,has,next,signer,information,signer,signer,information,it,next,asn1object,identifier,digest,oid,signer,get,digest,algorithm,id,get,algorithm,string,mic,alg,string,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,for,suppress,warnings,rawtypes,iterator,it,signer,gens,iterator,it,has,next,signer,info,generator,signer,info,gen,signer,info,generator,it,next,asn1object,identifier,digest,oid,signer,info,gen,get,digest,algorithm,get,algorithm,string,mic,alg,string,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,int,count,0,for,iterator,string,it,mic,alg,set,iterator,it,has,next,string,alg,it,next,if,count,0,if,mic,alg,set,size,1,header,append,micalg,else,header,append,micalg,else,header,append,header,append,alg,count,if,count,0,if,mic,alg,set,size,1,header,append,return,content,type,parse,header,to,string
AS2SignedDataGenerator -> public ContentType createMultipartSignedContentType(String boundary);1528633215;Creates a <code>multipart/signed</code> content type containing the algorithms used by this generator.__@return A <code>multipart/signed</code> content type;public ContentType createMultipartSignedContentType(String boundary) {_        StringBuffer header = new StringBuffer(AS2MediaType.MULTIPART_SIGNED)__        header.append("_ boundary=" + boundary)__        Set<String> micAlgSet = new HashSet<>()___        _        for (@SuppressWarnings("rawtypes")_        Iterator it = _signers.iterator()_ it.hasNext()_) {_            SignerInformation signer = (SignerInformation) it.next()__            ASN1ObjectIdentifier digestOID = signer.getDigestAlgorithmID().getAlgorithm()___            String micAlg = STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        for (@SuppressWarnings("rawtypes")_        Iterator it = signerGens.iterator()_ it.hasNext()_) {_            SignerInfoGenerator signerInfoGen = (SignerInfoGenerator) it.next()__            ASN1ObjectIdentifier digestOID = signerInfoGen.getDigestAlgorithm().getAlgorithm()___            String micAlg = STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        int count = 0__        for (String micAlg : micAlgSet) {_            if (count == 0) {_                if (micAlgSet.size() != 1) {_                    header.append("_ micalg=\"")__                } else {_                    header.append("_ micalg=")__                }_            } else {_                header.append(',')__            }__            header.append(micAlg)___            count++__        }__        if (count != 0) {_            if (micAlgSet.size() != 1) {_                header.append('\"')__            }_        }__        return ContentType.parse(header.toString())__    };creates,a,code,multipart,signed,code,content,type,containing,the,algorithms,used,by,this,generator,return,a,code,multipart,signed,code,content,type;public,content,type,create,multipart,signed,content,type,string,boundary,string,buffer,header,new,string,buffer,as2media,type,header,append,boundary,boundary,set,string,mic,alg,set,new,hash,set,for,suppress,warnings,rawtypes,iterator,it,iterator,it,has,next,signer,information,signer,signer,information,it,next,asn1object,identifier,digest,oid,signer,get,digest,algorithm,id,get,algorithm,string,mic,alg,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,for,suppress,warnings,rawtypes,iterator,it,signer,gens,iterator,it,has,next,signer,info,generator,signer,info,gen,signer,info,generator,it,next,asn1object,identifier,digest,oid,signer,info,gen,get,digest,algorithm,get,algorithm,string,mic,alg,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,int,count,0,for,string,mic,alg,mic,alg,set,if,count,0,if,mic,alg,set,size,1,header,append,micalg,else,header,append,micalg,else,header,append,header,append,mic,alg,count,if,count,0,if,mic,alg,set,size,1,header,append,return,content,type,parse,header,to,string
AS2SignedDataGenerator -> public ContentType createMultipartSignedContentType(String boundary);1535093120;Creates a <code>multipart/signed</code> content type containing the algorithms used by this generator.__@param boundary - boundary to use to demarcate content._@return A <code>multipart/signed</code> content type;public ContentType createMultipartSignedContentType(String boundary) {_        StringBuffer header = new StringBuffer(AS2MediaType.MULTIPART_SIGNED)__        header.append("_ boundary=" + boundary)__        Set<String> micAlgSet = new HashSet<>()___        _        for (@SuppressWarnings("rawtypes")_        Iterator it = _signers.iterator()_ it.hasNext()_) {_            SignerInformation signer = (SignerInformation) it.next()__            ASN1ObjectIdentifier digestOID = signer.getDigestAlgorithmID().getAlgorithm()___            String micAlg = STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        for (@SuppressWarnings("rawtypes")_        Iterator it = signerGens.iterator()_ it.hasNext()_) {_            SignerInfoGenerator signerInfoGen = (SignerInfoGenerator) it.next()__            ASN1ObjectIdentifier digestOID = signerInfoGen.getDigestAlgorithm().getAlgorithm()___            String micAlg = STANDARD_MICALGS.get(digestOID)___            if (micAlg == null) {_                micAlgSet.add("unknown")__            } else {_                micAlgSet.add(micAlg)__            }_        }__        _        int count = 0__        for (String micAlg : micAlgSet) {_            if (count == 0) {_                if (micAlgSet.size() != 1) {_                    header.append("_ micalg=\"")__                } else {_                    header.append("_ micalg=")__                }_            } else {_                header.append(',')__            }__            header.append(micAlg)___            count++__        }__        if (count != 0) {_            if (micAlgSet.size() != 1) {_                header.append('\"')__            }_        }__        return ContentType.parse(header.toString())__    };creates,a,code,multipart,signed,code,content,type,containing,the,algorithms,used,by,this,generator,param,boundary,boundary,to,use,to,demarcate,content,return,a,code,multipart,signed,code,content,type;public,content,type,create,multipart,signed,content,type,string,boundary,string,buffer,header,new,string,buffer,as2media,type,header,append,boundary,boundary,set,string,mic,alg,set,new,hash,set,for,suppress,warnings,rawtypes,iterator,it,iterator,it,has,next,signer,information,signer,signer,information,it,next,asn1object,identifier,digest,oid,signer,get,digest,algorithm,id,get,algorithm,string,mic,alg,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,for,suppress,warnings,rawtypes,iterator,it,signer,gens,iterator,it,has,next,signer,info,generator,signer,info,gen,signer,info,generator,it,next,asn1object,identifier,digest,oid,signer,info,gen,get,digest,algorithm,get,algorithm,string,mic,alg,get,digest,oid,if,mic,alg,null,mic,alg,set,add,unknown,else,mic,alg,set,add,mic,alg,int,count,0,for,string,mic,alg,mic,alg,set,if,count,0,if,mic,alg,set,size,1,header,append,micalg,else,header,append,micalg,else,header,append,header,append,mic,alg,count,if,count,0,if,mic,alg,set,size,1,header,append,return,content,type,parse,header,to,string
