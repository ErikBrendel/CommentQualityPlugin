# id;timestamp;commentText;codeText;commentWords;codeWords
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 AS2SignatureAlgorithm signingAlgorithm,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 AS2CompressionAlgorithm compressionAlgorithm,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms,                                 AS2EncryptionAlgorithm encryptingAlgorithm,                                 Certificate[] encryptingCertificateChain,                                 PrivateKey encryptingPrivateKey)             throws HttpException;1544011479;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingAlgorithm - the algorithm used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@param encryptingAlgorithm - the algorithm used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingCertificateChain - the chain of certificates used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingPrivateKey - the private key used to encrypt EDI message_@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                AS2SignatureAlgorithm signingAlgorithm,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                AS2CompressionAlgorithm compressionAlgorithm,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms,_                                AS2EncryptionAlgorithm encryptingAlgorithm,_                                Certificate[] encryptingCertificateChain,_                                PrivateKey encryptingPrivateKey)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_ALGORITHM, signingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.COMPRESSION_ALGORITHM, compressionAlgorithm)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_ALGORITHM, encryptingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_CERTIFICATE_CHAIN, encryptingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_PRIVATE_KEY, encryptingPrivateKey)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN: {_            _            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        }_        case SIGNED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator,_                    AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__            _            _            EntityUtils.setMessageEntity(request, multipartSignedEntity)__            break__        }_        case ENCRYPTED: {_            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    applicationEDIEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case SIGNED_ENCRYPTED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity,_                    signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__             _            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    multipartSignedEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case PLAIN_COMPRESSED: {_            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity)__            break__        }_        case SIGNED_COMPRESSED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity,_                    signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__            _            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity)__            break__        }_        case ENCRYPTED_COMPRESSED: {_            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)__            _            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            _            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case SIGNED_ENCRYPTED_COMPRESSED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator,_                    AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__            _            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)___            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            _            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,algorithm,the,algorithm,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,param,encrypting,algorithm,the,algorithm,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,certificate,chain,the,chain,of,certificates,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,private,key,the,private,key,used,to,encrypt,edi,message,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,as2signature,algorithm,signing,algorithm,certificate,signing,certificate,chain,private,key,signing,private,key,as2compression,algorithm,compression,algorithm,string,disposition,notification,to,string,signed,receipt,mic,algorithms,as2encryption,algorithm,encrypting,algorithm,certificate,encrypting,certificate,chain,private,key,encrypting,private,key,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,algorithm,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,compression,algorithm,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,http,context,set,attribute,as2client,manager,encrypting,algorithm,http,context,set,attribute,as2client,manager,encrypting,certificate,chain,http,context,set,attribute,as2client,manager,encrypting,private,key,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,true,null,entity,utils,set,message,entity,request,multipart,signed,entity,break,case,encrypted,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,application,edientity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,multipart,signed,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,application,edientity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,entity,utils,set,message,entity,request,pkcs7mime,compressed,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,multipart,signed,entity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,entity,utils,set,message,entity,request,pkcs7mime,compressed,data,entity,break,case,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,application,edientity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,pkcs7mime,compressed,data,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,true,null,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,multipart,signed,entity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,pkcs7mime,compressed,data,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 AS2SignatureAlgorithm signingAlgorithm,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 AS2CompressionAlgorithm compressionAlgorithm,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms,                                 AS2EncryptionAlgorithm encryptingAlgorithm,                                 Certificate[] encryptingCertificateChain,                                 PrivateKey encryptingPrivateKey)             throws HttpException;1544011627;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingAlgorithm - the algorithm used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@param encryptingAlgorithm - the algorithm used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingCertificateChain - the chain of certificates used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingPrivateKey - the private key used to encrypt EDI message_@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                AS2SignatureAlgorithm signingAlgorithm,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                AS2CompressionAlgorithm compressionAlgorithm,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms,_                                AS2EncryptionAlgorithm encryptingAlgorithm,_                                Certificate[] encryptingCertificateChain,_                                PrivateKey encryptingPrivateKey)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_ALGORITHM, signingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.COMPRESSION_ALGORITHM, compressionAlgorithm)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_ALGORITHM, encryptingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_CERTIFICATE_CHAIN, encryptingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_PRIVATE_KEY, encryptingPrivateKey)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN: {_            _            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        }_        case SIGNED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator,_                    AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__            _            _            EntityUtils.setMessageEntity(request, multipartSignedEntity)__            break__        }_        case ENCRYPTED: {_            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    applicationEDIEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case SIGNED_ENCRYPTED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity,_                    signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__             _            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    multipartSignedEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case PLAIN_COMPRESSED: {_            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity)__            break__        }_        case SIGNED_COMPRESSED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity,_                    signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__            _            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity)__            break__        }_        case ENCRYPTED_COMPRESSED: {_            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)__            _            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            _            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case SIGNED_ENCRYPTED_COMPRESSED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator,_                    AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__            _            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)___            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            _            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,algorithm,the,algorithm,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,param,encrypting,algorithm,the,algorithm,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,certificate,chain,the,chain,of,certificates,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,private,key,the,private,key,used,to,encrypt,edi,message,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,as2signature,algorithm,signing,algorithm,certificate,signing,certificate,chain,private,key,signing,private,key,as2compression,algorithm,compression,algorithm,string,disposition,notification,to,string,signed,receipt,mic,algorithms,as2encryption,algorithm,encrypting,algorithm,certificate,encrypting,certificate,chain,private,key,encrypting,private,key,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,algorithm,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,compression,algorithm,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,http,context,set,attribute,as2client,manager,encrypting,algorithm,http,context,set,attribute,as2client,manager,encrypting,certificate,chain,http,context,set,attribute,as2client,manager,encrypting,private,key,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,true,null,entity,utils,set,message,entity,request,multipart,signed,entity,break,case,encrypted,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,application,edientity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,multipart,signed,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,application,edientity,compressed,data,generator,compressor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,compressed,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,multipart,signed,entity,compressed,data,generator,compressor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,compressed,data,entity,break,case,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,application,edientity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,pkcs7mime,compressed,data,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,true,null,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,multipart,signed,entity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,pkcs7mime,compressed,data,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 AS2SignatureAlgorithm signingAlgorithm,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 AS2CompressionAlgorithm compressionAlgorithm,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms,                                 AS2EncryptionAlgorithm encryptingAlgorithm,                                 Certificate[] encryptingCertificateChain,                                 PrivateKey encryptingPrivateKey)             throws HttpException;1544012045;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingAlgorithm - the algorithm used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@param encryptingAlgorithm - the algorithm used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingCertificateChain - the chain of certificates used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingPrivateKey - the private key used to encrypt EDI message_@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                AS2SignatureAlgorithm signingAlgorithm,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                AS2CompressionAlgorithm compressionAlgorithm,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms,_                                AS2EncryptionAlgorithm encryptingAlgorithm,_                                Certificate[] encryptingCertificateChain,_                                PrivateKey encryptingPrivateKey)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_ALGORITHM, signingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.COMPRESSION_ALGORITHM, compressionAlgorithm)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_ALGORITHM, encryptingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_CERTIFICATE_CHAIN, encryptingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_PRIVATE_KEY, encryptingPrivateKey)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN: {_            _            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        }_        case SIGNED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator,_                    AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__            _            _            EntityUtils.setMessageEntity(request, multipartSignedEntity)__            break__        }_        case ENCRYPTED: {_            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    applicationEDIEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case SIGNED_ENCRYPTED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity,_                    signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__             _            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    multipartSignedEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case PLAIN_COMPRESSED: {_            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity)__            break__        }_        case SIGNED_COMPRESSED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity,_                    signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__            _            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, true)___            _            EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity)__            break__        }_        case ENCRYPTED_COMPRESSED: {_            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)__            _            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            _            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        case ENCRYPTED_COMPRESSED_SIGNED: {_            _            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator,_                    AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__            _            _            CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext)__            OutputCompressor compressor = createCompressor(httpContext)__            ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(_                    multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false)___            _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(_                    pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            _            _            EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity)__            break__        }_        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,algorithm,the,algorithm,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,param,encrypting,algorithm,the,algorithm,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,certificate,chain,the,chain,of,certificates,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,private,key,the,private,key,used,to,encrypt,edi,message,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,as2signature,algorithm,signing,algorithm,certificate,signing,certificate,chain,private,key,signing,private,key,as2compression,algorithm,compression,algorithm,string,disposition,notification,to,string,signed,receipt,mic,algorithms,as2encryption,algorithm,encrypting,algorithm,certificate,encrypting,certificate,chain,private,key,encrypting,private,key,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,algorithm,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,compression,algorithm,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,http,context,set,attribute,as2client,manager,encrypting,algorithm,http,context,set,attribute,as2client,manager,encrypting,certificate,chain,http,context,set,attribute,as2client,manager,encrypting,private,key,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,true,null,entity,utils,set,message,entity,request,multipart,signed,entity,break,case,encrypted,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,application,edientity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,multipart,signed,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,application,edientity,compressed,data,generator,compressor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,compressed,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,multipart,signed,entity,compressed,data,generator,compressor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,compressed,data,entity,break,case,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,application,edientity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,pkcs7mime,compressed,data,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmscompressed,data,generator,compressed,data,generator,create,compressor,generator,http,context,output,compressor,compressor,create,compressor,http,context,application,pkcs7mime,compressed,data,entity,pkcs7mime,compressed,data,entity,new,application,pkcs7mime,compressed,data,entity,multipart,signed,entity,compressed,data,generator,compressor,as2transfer,encoding,base64,false,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,enveloped,data,entity,pkcs7mime,enveloped,data,entity,new,application,pkcs7mime,enveloped,data,entity,pkcs7mime,compressed,data,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,enveloped,data,entity,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms)             throws HttpException;1524122826;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param httpContext_- the subject sent in the interchange request._@throws HttpException;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms)_            throws HttpException {_        _        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")__        _        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)__        _        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN:_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        case SIGNED:_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            try {_                MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                        AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__                EntityUtils.setMessageEntity(request, multipartSignedEntity)__            } catch (Exception e) {_                throw new HttpException("Failed to sign message", e)__            }_            break__        case ENCRYPTED:_            _            break__        case ENCRYPTED_SIGNED:_            _            break__        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,http,context,the,subject,sent,in,the,interchange,request,throws,http,exception;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,try,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,entity,utils,set,message,entity,request,multipart,signed,entity,catch,exception,e,throw,new,http,exception,failed,to,sign,message,e,break,case,encrypted,break,case,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms)             throws HttpException;1525695532;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param httpContext_- the subject sent in the interchange request._@throws HttpException;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN:_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        case SIGNED:_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            try {_                MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                        AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__                EntityUtils.setMessageEntity(request, multipartSignedEntity)__            } catch (Exception e) {_                throw new HttpException("Failed to sign message", e)__            }_            break__        case ENCRYPTED:_            _            break__        case ENCRYPTED_SIGNED:_            _            break__        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,http,context,the,subject,sent,in,the,interchange,request,throws,http,exception;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,try,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,entity,utils,set,message,entity,request,multipart,signed,entity,catch,exception,e,throw,new,http,exception,failed,to,sign,message,e,break,case,encrypted,break,case,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms)             throws HttpException;1526366812;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN:_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        case SIGNED:_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            try {_                MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                        AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__                EntityUtils.setMessageEntity(request, multipartSignedEntity)__            } catch (Exception e) {_                throw new HttpException("Failed to sign message", e)__            }_            break__        case ENCRYPTED:_            _            break__        case ENCRYPTED_SIGNED:_            _            break__        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,try,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,entity,utils,set,message,entity,request,multipart,signed,entity,catch,exception,e,throw,new,http,exception,failed,to,sign,message,e,break,case,encrypted,break,case,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms)             throws HttpException;1526755423;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN:_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        case SIGNED:_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            try {_                MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                        AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__                multipartSignedEntity.setMainBody(true)__                EntityUtils.setMessageEntity(request, multipartSignedEntity)__            } catch (Exception e) {_                throw new HttpException("Failed to sign message", e)__            }_            break__        case ENCRYPTED:_            _            break__        case ENCRYPTED_SIGNED:_            _            break__        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,try,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,multipart,signed,entity,set,main,body,true,entity,utils,set,message,entity,request,multipart,signed,entity,catch,exception,e,throw,new,http,exception,failed,to,sign,message,e,break,case,encrypted,break,case,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms)             throws HttpException;1528123240;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN:_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        case SIGNED:_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            try {_                MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                        AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__                multipartSignedEntity.setMainBody(true)__                EntityUtils.setMessageEntity(request, multipartSignedEntity)__            } catch (Exception e) {_                throw new HttpException("Failed to sign message", e)__            }_            break__        case ENCRYPTED:_            _            break__        case ENCRYPTED_SIGNED:_            _            break__        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,try,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,multipart,signed,entity,set,main,body,true,entity,utils,set,message,entity,request,multipart,signed,entity,catch,exception,e,throw,new,http,exception,failed,to,sign,message,e,break,case,encrypted,break,case,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms)             throws HttpException;1535093120;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN:_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        case SIGNED:_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            try {_                MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                        AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__                multipartSignedEntity.setMainBody(true)__                EntityUtils.setMessageEntity(request, multipartSignedEntity)__            } catch (Exception e) {_                throw new HttpException("Failed to sign message", e)__            }_            break__        case ENCRYPTED:_            _            break__        case ENCRYPTED_SIGNED:_            _            break__        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,try,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,multipart,signed,entity,set,main,body,true,entity,utils,set,message,entity,request,multipart,signed,entity,catch,exception,e,throw,new,http,exception,failed,to,sign,message,e,break,case,encrypted,break,case,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms,                                 AS2EncryptionAlgorithm encryptingAlgorithm,                                 Certificate[] encryptingCertificateChain,                                 PrivateKey encryptingPrivateKey)             throws HttpException;1537509859;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@param encryptingAlgorithm - the algorithm used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingCertificateChain - the chain of certificates used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingPrivateKey - the private key used to encrypt EDI message_@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms,_                                AS2EncryptionAlgorithm encryptingAlgorithm,_                                Certificate[] encryptingCertificateChain,_                                PrivateKey encryptingPrivateKey)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_ALGORITHM, encryptingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_CERTIFICATE_CHAIN, encryptingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_PRIVATE_KEY, encryptingPrivateKey)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN:_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        case SIGNED:_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            try {_                MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                        AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__                multipartSignedEntity.setMainBody(true)__                EntityUtils.setMessageEntity(request, multipartSignedEntity)__            } catch (Exception e) {_                throw new HttpException("Failed to sign message", e)__            }_            break__        case ENCRYPTED:_            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEntity pkcs7MimeEntity = new ApplicationPkcs7MimeEntity(applicationEDIEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            EntityUtils.setMessageEntity(request, pkcs7MimeEntity)__            break__        case ENCRYPTED_SIGNED:_            _            break__        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,param,encrypting,algorithm,the,algorithm,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,certificate,chain,the,chain,of,certificates,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,private,key,the,private,key,used,to,encrypt,edi,message,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,as2encryption,algorithm,encrypting,algorithm,certificate,encrypting,certificate,chain,private,key,encrypting,private,key,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,http,context,set,attribute,as2client,manager,encrypting,algorithm,http,context,set,attribute,as2client,manager,encrypting,certificate,chain,http,context,set,attribute,as2client,manager,encrypting,private,key,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,try,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,multipart,signed,entity,set,main,body,true,entity,utils,set,message,entity,request,multipart,signed,entity,catch,exception,e,throw,new,http,exception,failed,to,sign,message,e,break,case,encrypted,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,entity,pkcs7mime,entity,new,application,pkcs7mime,entity,application,edientity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,entity,break,case,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
AS2ClientManager -> public HttpCoreContext send(String ediMessage,                                 String requestUri,                                 String subject,                                 String from,                                 String as2From,                                 String as2To,                                 AS2MessageStructure as2MessageStructure,                                 ContentType ediMessageContentType,                                 String ediMessageTransferEncoding,                                 Certificate[] signingCertificateChain,                                 PrivateKey signingPrivateKey,                                 String dispositionNotificationTo,                                 String[] signedReceiptMicAlgorithms,                                 AS2EncryptionAlgorithm encryptingAlgorithm,                                 Certificate[] encryptingCertificateChain,                                 PrivateKey encryptingPrivateKey)             throws HttpException;1538030848;Send <code>ediMessage</code> to trading partner.__@param ediMessage_- EDI message to transport_@param requestUri_- resource location to deliver message_@param subject - message subject_@param from - RFC2822 address of sender_@param as2From - AS2 name of sender_@param as2To - AS2 name of recipient_@param as2MessageStructure - the structure of AS2 to send_ see {@link AS2MessageStructure}_@param ediMessageContentType - the content typw of EDI message_@param ediMessageTransferEncoding - the transfer encoding used to transport EDI message_@param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned_@param signingPrivateKey - the private key used to sign EDI message_@param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested_@param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt._@param encryptingAlgorithm - the algorithm used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingCertificateChain - the chain of certificates used to encrypt the message or <code>null</code> if sending EDI message unencrypted_@param encryptingPrivateKey - the private key used to encrypt EDI message_@return {@link HttpCoreContext} containing request and response used to send EDI message_@throws HttpException when things go wrong.;public HttpCoreContext send(String ediMessage,_                                String requestUri,_                                String subject,_                                String from,_                                String as2From,_                                String as2To,_                                AS2MessageStructure as2MessageStructure,_                                ContentType ediMessageContentType,_                                String ediMessageTransferEncoding,_                                Certificate[] signingCertificateChain,_                                PrivateKey signingPrivateKey,_                                String dispositionNotificationTo,_                                String[] signedReceiptMicAlgorithms,_                                AS2EncryptionAlgorithm encryptingAlgorithm,_                                Certificate[] encryptingCertificateChain,_                                PrivateKey encryptingPrivateKey)_            throws HttpException {__        Args.notNull(ediMessage, "EDI Message")__        Args.notNull(as2MessageStructure, "AS2 Message Structure")__        Args.notNull(requestUri, "Request URI")__        Args.notNull(ediMessageContentType, "EDI Message Content Type")___        _        HttpCoreContext httpContext = HttpCoreContext.create()__        httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri)__        httpContext.setAttribute(AS2ClientManager.SUBJECT, subject)__        httpContext.setAttribute(AS2ClientManager.FROM, from)__        httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From)__        httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To)__        httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType)__        httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding)__        httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey)__        httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo)__        httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_ALGORITHM, encryptingAlgorithm)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_CERTIFICATE_CHAIN, encryptingCertificateChain)__        httpContext.setAttribute(AS2ClientManager.ENCRYPTING_PRIVATE_KEY, encryptingPrivateKey)___        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri)__        httpContext.setAttribute(HTTP_REQUEST, request)___        _        ApplicationEDIEntity applicationEDIEntity__        try {_            applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false)__        } catch (Exception e) {_            throw new HttpException("Failed to create EDI message entity", e)__        }_        switch (as2MessageStructure) {_        case PLAIN: {_            applicationEDIEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, applicationEDIEntity)__            break__        }_        case SIGNED: {_            AS2SignedDataGenerator gen = createSigningGenerator(httpContext)__            _            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, gen,_                    AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null)__            multipartSignedEntity.setMainBody(true)__            EntityUtils.setMessageEntity(request, multipartSignedEntity)__            break__        }_        case ENCRYPTED: {_            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEntity pkcs7MimeEntity = new ApplicationPkcs7MimeEntity(applicationEDIEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            EntityUtils.setMessageEntity(request, pkcs7MimeEntity)__            break__        }_        case ENCRYPTED_SIGNED: {_            AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext)__            MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity,_                    signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null)__             _            CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext)__            OutputEncryptor encryptor = createEncryptor(httpContext)__            ApplicationPkcs7MimeEntity pkcs7MimeEntity = new ApplicationPkcs7MimeEntity(multipartSignedEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true)__            EntityUtils.setMessageEntity(request, pkcs7MimeEntity)__            break__        }_        default:_            throw new HttpException("Unknown AS2 Message Structure")__        }__        HttpResponse response__        try {_            httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection)__            response = as2ClientConnection.send(request, httpContext)__            EntityParser.parseAS2MessageEntity(response)__        } catch (IOException e) {_            throw new HttpException("Failed to send http request message", e)__        }_        httpContext.setAttribute(HTTP_RESPONSE, response)__        return httpContext__    };send,code,edi,message,code,to,trading,partner,param,edi,message,edi,message,to,transport,param,request,uri,resource,location,to,deliver,message,param,subject,message,subject,param,from,rfc2822,address,of,sender,param,as2from,as2,name,of,sender,param,as2to,as2,name,of,recipient,param,as2message,structure,the,structure,of,as2,to,send,see,link,as2message,structure,param,edi,message,content,type,the,content,typw,of,edi,message,param,edi,message,transfer,encoding,the,transfer,encoding,used,to,transport,edi,message,param,signing,certificate,chain,the,chain,of,certificates,used,to,sign,the,message,or,code,null,code,if,sending,edi,message,unsigned,param,signing,private,key,the,private,key,used,to,sign,edi,message,param,disposition,notification,to,an,rfc2822,address,to,request,a,receipt,or,code,null,code,if,no,receipt,requested,param,signed,receipt,mic,algorithms,the,senders,list,of,signing,algorithms,for,signing,receipt,in,preferred,order,or,code,null,code,if,requesting,an,unsigned,receipt,param,encrypting,algorithm,the,algorithm,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,certificate,chain,the,chain,of,certificates,used,to,encrypt,the,message,or,code,null,code,if,sending,edi,message,unencrypted,param,encrypting,private,key,the,private,key,used,to,encrypt,edi,message,return,link,http,core,context,containing,request,and,response,used,to,send,edi,message,throws,http,exception,when,things,go,wrong;public,http,core,context,send,string,edi,message,string,request,uri,string,subject,string,from,string,as2from,string,as2to,as2message,structure,as2message,structure,content,type,edi,message,content,type,string,edi,message,transfer,encoding,certificate,signing,certificate,chain,private,key,signing,private,key,string,disposition,notification,to,string,signed,receipt,mic,algorithms,as2encryption,algorithm,encrypting,algorithm,certificate,encrypting,certificate,chain,private,key,encrypting,private,key,throws,http,exception,args,not,null,edi,message,edi,message,args,not,null,as2message,structure,as2,message,structure,args,not,null,request,uri,request,uri,args,not,null,edi,message,content,type,edi,message,content,type,http,core,context,http,context,http,core,context,create,http,context,set,attribute,as2client,manager,request,uri,http,context,set,attribute,as2client,manager,subject,subject,http,context,set,attribute,as2client,manager,from,from,http,context,set,attribute,as2client,manager,as2from,http,context,set,attribute,as2client,manager,as2to,http,context,set,attribute,as2client,manager,as2message,structure,http,context,set,attribute,as2client,manager,edi,message,content,type,http,context,set,attribute,as2client,manager,edi,message,transfer,encoding,http,context,set,attribute,as2client,manager,signing,certificate,chain,http,context,set,attribute,as2client,manager,signing,private,key,http,context,set,attribute,as2client,manager,disposition,notification,to,http,context,set,attribute,as2client,manager,signed,receipt,mic,algorithms,http,context,set,attribute,as2client,manager,encrypting,algorithm,http,context,set,attribute,as2client,manager,encrypting,certificate,chain,http,context,set,attribute,as2client,manager,encrypting,private,key,basic,http,entity,enclosing,request,request,new,basic,http,entity,enclosing,request,post,request,uri,http,context,set,attribute,request,application,edientity,application,edientity,try,application,edientity,entity,utils,create,edientity,edi,message,edi,message,content,type,edi,message,transfer,encoding,false,catch,exception,e,throw,new,http,exception,failed,to,create,edi,message,entity,e,switch,as2message,structure,case,plain,application,edientity,set,main,body,true,entity,utils,set,message,entity,request,application,edientity,break,case,signed,as2signed,data,generator,gen,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,gen,as2charset,as2transfer,encoding,base64,true,null,multipart,signed,entity,set,main,body,true,entity,utils,set,message,entity,request,multipart,signed,entity,break,case,encrypted,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,entity,pkcs7mime,entity,new,application,pkcs7mime,entity,application,edientity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,entity,break,case,as2signed,data,generator,signing,genrator,create,signing,generator,http,context,multipart,signed,entity,multipart,signed,entity,new,multipart,signed,entity,application,edientity,signing,genrator,as2charset,as2transfer,encoding,base64,false,null,cmsenveloped,data,generator,enveloped,data,generator,create,encrypting,generator,http,context,output,encryptor,encryptor,create,encryptor,http,context,application,pkcs7mime,entity,pkcs7mime,entity,new,application,pkcs7mime,entity,multipart,signed,entity,enveloped,data,generator,encryptor,as2transfer,encoding,base64,true,entity,utils,set,message,entity,request,pkcs7mime,entity,break,default,throw,new,http,exception,unknown,as2,message,structure,http,response,response,try,http,context,set,attribute,as2client,connection,response,as2client,connection,send,request,http,context,entity,parser,parse,as2message,entity,response,catch,ioexception,e,throw,new,http,exception,failed,to,send,http,request,message,e,http,context,set,attribute,response,return,http,context
