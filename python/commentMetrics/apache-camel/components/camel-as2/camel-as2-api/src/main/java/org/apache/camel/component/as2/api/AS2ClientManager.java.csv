commented;modifiers;parameterAmount;loc;comment;code
true;public;17;182;/**  * Send <code>ediMessage</code> to trading partner.  *  * @param ediMessage  *            - EDI message to transport  * @param requestUri  *            - resource location to deliver message  * @param subject - message subject  * @param from - RFC2822 address of sender  * @param as2From - AS2 name of sender  * @param as2To - AS2 name of recipient  * @param as2MessageStructure - the structure of AS2 to send. see {@link AS2MessageStructure}  * @param ediMessageContentType - the content typw of EDI message  * @param ediMessageTransferEncoding - the transfer encoding used to transport EDI message  * @param signingAlgorithm - the algorithm used to sign the message or <code>null</code> if sending EDI message unsigned  * @param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned  * @param signingPrivateKey - the private key used to sign EDI message  * @param compressionAlgorithm - the algorithm used to compress the message or <code>null</code> if sending EDI message uncompressed  * @param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested  * @param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt.  * @param encryptingAlgorithm - the algorithm used to encrypt the message or <code>null</code> if sending EDI message unencrypted  * @param encryptingCertificateChain - the chain of certificates used to encrypt the message or <code>null</code> if sending EDI message unencrypted  * @return {@link HttpCoreContext} containing request and response used to send EDI message  * @throws HttpException when things go wrong.  */ ;/**  * Send <code>ediMessage</code> to trading partner.  *  * @param ediMessage  *            - EDI message to transport  * @param requestUri  *            - resource location to deliver message  * @param subject - message subject  * @param from - RFC2822 address of sender  * @param as2From - AS2 name of sender  * @param as2To - AS2 name of recipient  * @param as2MessageStructure - the structure of AS2 to send. see {@link AS2MessageStructure}  * @param ediMessageContentType - the content typw of EDI message  * @param ediMessageTransferEncoding - the transfer encoding used to transport EDI message  * @param signingAlgorithm - the algorithm used to sign the message or <code>null</code> if sending EDI message unsigned  * @param signingCertificateChain - the chain of certificates used to sign the message or <code>null</code> if sending EDI message unsigned  * @param signingPrivateKey - the private key used to sign EDI message  * @param compressionAlgorithm - the algorithm used to compress the message or <code>null</code> if sending EDI message uncompressed  * @param dispositionNotificationTo - an RFC2822 address to request a receipt or <code>null</code> if no receipt requested  * @param signedReceiptMicAlgorithms - the senders list of signing algorithms for signing receipt, in preferred order,  or <code>null</code> if requesting an unsigned receipt.  * @param encryptingAlgorithm - the algorithm used to encrypt the message or <code>null</code> if sending EDI message unencrypted  * @param encryptingCertificateChain - the chain of certificates used to encrypt the message or <code>null</code> if sending EDI message unencrypted  * @return {@link HttpCoreContext} containing request and response used to send EDI message  * @throws HttpException when things go wrong.  */ public HttpCoreContext send(String ediMessage, String requestUri, String subject, String from, String as2From, String as2To, AS2MessageStructure as2MessageStructure, ContentType ediMessageContentType, String ediMessageTransferEncoding, AS2SignatureAlgorithm signingAlgorithm, Certificate[] signingCertificateChain, PrivateKey signingPrivateKey, AS2CompressionAlgorithm compressionAlgorithm, String dispositionNotificationTo, String[] signedReceiptMicAlgorithms, AS2EncryptionAlgorithm encryptingAlgorithm, Certificate[] encryptingCertificateChain) throws HttpException {     Args.notNull(ediMessage, "EDI Message").     Args.notNull(requestUri, "Request URI").     Args.notNull(subject, "Subject").     Args.notNull(from, "Subject").     Args.notNull(as2From, "Subject").     Args.notNull(as2To, "Subject").     Args.notNull(as2MessageStructure, "AS2 Message Structure").     Args.notNull(ediMessageContentType, "EDI Message Content Type").     // Add Context attributes     HttpCoreContext httpContext = HttpCoreContext.create().     httpContext.setAttribute(AS2ClientManager.REQUEST_URI, requestUri).     httpContext.setAttribute(AS2ClientManager.SUBJECT, subject).     httpContext.setAttribute(AS2ClientManager.FROM, from).     httpContext.setAttribute(AS2ClientManager.AS2_FROM, as2From).     httpContext.setAttribute(AS2ClientManager.AS2_TO, as2To).     httpContext.setAttribute(AS2ClientManager.AS2_MESSAGE_STRUCTURE, as2MessageStructure).     httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_CONTENT_TYPE, ediMessageContentType).     httpContext.setAttribute(AS2ClientManager.EDI_MESSAGE_TRANSFER_ENCODING, ediMessageTransferEncoding).     httpContext.setAttribute(AS2ClientManager.SIGNING_ALGORITHM, signingAlgorithm).     httpContext.setAttribute(AS2ClientManager.SIGNING_CERTIFICATE_CHAIN, signingCertificateChain).     httpContext.setAttribute(AS2ClientManager.SIGNING_PRIVATE_KEY, signingPrivateKey).     httpContext.setAttribute(AS2ClientManager.COMPRESSION_ALGORITHM, compressionAlgorithm).     httpContext.setAttribute(AS2ClientManager.DISPOSITION_NOTIFICATION_TO, dispositionNotificationTo).     httpContext.setAttribute(AS2ClientManager.SIGNED_RECEIPT_MIC_ALGORITHMS, signedReceiptMicAlgorithms).     httpContext.setAttribute(AS2ClientManager.ENCRYPTING_ALGORITHM, encryptingAlgorithm).     httpContext.setAttribute(AS2ClientManager.ENCRYPTING_CERTIFICATE_CHAIN, encryptingCertificateChain).     BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri).     httpContext.setAttribute(HTTP_REQUEST, request).     // Create Message Body     ApplicationEDIEntity applicationEDIEntity.     try {         applicationEDIEntity = EntityUtils.createEDIEntity(ediMessage, ediMessageContentType, ediMessageTransferEncoding, false).     } catch (Exception e) {         throw new HttpException("Failed to create EDI message entity", e).     }     switch(as2MessageStructure) {         case PLAIN:             {                 // Add EDI Entity to main body of request.                 applicationEDIEntity.setMainBody(true).                 EntityUtils.setMessageEntity(request, applicationEDIEntity).                 break.             }         case SIGNED:             {                 // Create Multipart Signed Entity containing EDI Entity                 AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext).                 MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, true, null).                 // Add Multipart Signed Entity to main body of request.                 EntityUtils.setMessageEntity(request, multipartSignedEntity).                 break.             }         case ENCRYPTED:             {                 // Create Enveloped Entity containing EDI Entity                 CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext).                 OutputEncryptor encryptor = createEncryptor(httpContext).                 ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(applicationEDIEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true).                 // Add Multipart Enveloped Entity to main body of request.                 EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity).                 break.             }         case SIGNED_ENCRYPTED:             {                 // Create Multipart Signed Entity containing EDI Entity                 AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext).                 MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null).                 // Create Enveloped Entity containing Multipart Signed Entity                 CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext).                 OutputEncryptor encryptor = createEncryptor(httpContext).                 ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(multipartSignedEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true).                 // Add Multipart Enveloped Entity to main body of request.                 EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity).                 break.             }         case PLAIN_COMPRESSED:             {                 // Create Compressed Entity containing EDI Entity                 CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext).                 OutputCompressor compressor = createCompressor(httpContext).                 ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, true).                 // Add Compressed Entity to main body of request.                 EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity).                 break.             }         case SIGNED_COMPRESSED:             {                 // Create Multipart Signed Entity containing EDI Entity                 AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext).                 MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null).                 // Create Compressed Entity containing Multipart Signed Entity                 CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext).                 OutputCompressor compressor = createCompressor(httpContext).                 ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, true).                 // Add Compressed Entity to main body of request.                 EntityUtils.setMessageEntity(request, pkcs7MimeCompressedDataEntity).                 break.             }         case ENCRYPTED_COMPRESSED:             {                 // Create Compressed Entity containing EDI Entity                 CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext).                 OutputCompressor compressor = createCompressor(httpContext).                 ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(applicationEDIEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false).                 // Create Enveloped Entity containing Compressed Entity                 CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext).                 OutputEncryptor encryptor = createEncryptor(httpContext).                 ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true).                 // Add Enveloped Entity to main body of request                 EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity).                 break.             }         case ENCRYPTED_COMPRESSED_SIGNED:             {                 // Create Multipart Signed Entity containing EDI Entity                 AS2SignedDataGenerator signingGenrator = createSigningGenerator(httpContext).                 MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(applicationEDIEntity, signingGenrator, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null).                 // Create Compressed Entity containing Multipart Signed Entity                 CMSCompressedDataGenerator compressedDataGenerator = createCompressorGenerator(httpContext).                 OutputCompressor compressor = createCompressor(httpContext).                 ApplicationPkcs7MimeCompressedDataEntity pkcs7MimeCompressedDataEntity = new ApplicationPkcs7MimeCompressedDataEntity(multipartSignedEntity, compressedDataGenerator, compressor, AS2TransferEncoding.BASE64, false).                 // Create Enveloped Entity containing Compressed Entity                 CMSEnvelopedDataGenerator envelopedDataGenerator = createEncryptingGenerator(httpContext).                 OutputEncryptor encryptor = createEncryptor(httpContext).                 ApplicationPkcs7MimeEnvelopedDataEntity pkcs7MimeEnvelopedDataEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(pkcs7MimeCompressedDataEntity, envelopedDataGenerator, encryptor, AS2TransferEncoding.BASE64, true).                 // Add Enveloped Entity to main body of request                 EntityUtils.setMessageEntity(request, pkcs7MimeEnvelopedDataEntity).                 break.             }         default:             throw new HttpException("Unknown AS2 Message Structure").     }     HttpResponse response.     try {         httpContext.setAttribute(AS2_CONNECTION, as2ClientConnection).         response = as2ClientConnection.send(request, httpContext).         EntityParser.parseAS2MessageEntity(response).     } catch (IOException e) {         throw new HttpException("Failed to send http request message", e).     }     httpContext.setAttribute(HTTP_RESPONSE, response).     return httpContext. }
false;public;1;20;;public AS2SignedDataGenerator createSigningGenerator(HttpCoreContext httpContext) throws HttpException {     AS2SignatureAlgorithm signatureAlgorithm = httpContext.getAttribute(SIGNING_ALGORITHM, AS2SignatureAlgorithm.class).     if (signatureAlgorithm == null) {         throw new HttpException("Signing algorithm missing").     }     Certificate[] certificateChain = httpContext.getAttribute(SIGNING_CERTIFICATE_CHAIN, Certificate[].class).     if (certificateChain == null) {         throw new HttpException("Signing certificate chain missing").     }     PrivateKey privateKey = httpContext.getAttribute(SIGNING_PRIVATE_KEY, PrivateKey.class).     if (privateKey == null) {         throw new HttpException("Signing private key missing").     }     return SigningUtils.createSigningGenerator(signatureAlgorithm, certificateChain, privateKey). }
false;public;1;10;;public CMSEnvelopedDataGenerator createEncryptingGenerator(HttpCoreContext httpContext) throws HttpException {     Certificate[] certificateChain = httpContext.getAttribute(ENCRYPTING_CERTIFICATE_CHAIN, Certificate[].class).     if (certificateChain == null) {         throw new HttpException("Encrypting certificate chain missing").     }     return EncryptingUtils.createEnvelopDataGenerator(certificateChain). }
false;public;1;3;;public CMSCompressedDataGenerator createCompressorGenerator(HttpCoreContext httpContext) {     return CompressionUtils.createCompressedDataGenerator(). }
false;public;1;9;;public OutputEncryptor createEncryptor(HttpCoreContext httpContext) throws HttpException {     AS2EncryptionAlgorithm encryptionAlgorithm = httpContext.getAttribute(ENCRYPTING_ALGORITHM, AS2EncryptionAlgorithm.class).     if (encryptionAlgorithm == null) {         throw new HttpException("Encrypting algorithm missing").     }     return EncryptingUtils.createEncryptor(encryptionAlgorithm). }
false;public;1;8;;public OutputCompressor createCompressor(HttpCoreContext httpContext) throws HttpException {     AS2CompressionAlgorithm compressionAlgorithm = httpContext.getAttribute(COMPRESSION_ALGORITHM, AS2CompressionAlgorithm.class).     if (compressionAlgorithm == null) {         throw new HttpException("Compression algorithm missing").     }     return CompressionUtils.createCompressor(compressionAlgorithm). }
