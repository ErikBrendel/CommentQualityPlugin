commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public byte[] getSignature() {     return signature. }
false;public;1;28;;@Override public void writeTo(OutputStream outstream) throws IOException {     NoCloseOutputStream ncos = new NoCloseOutputStream(outstream).     // Write out mime part headers if this is not the main body of message.     if (!isMainBody()) {         try (CanonicalOutputStream canonicalOutstream = new CanonicalOutputStream(ncos, AS2Charset.US_ASCII)) {             HeaderIterator it = headerIterator().             while (it.hasNext()) {                 Header header = it.nextHeader().                 canonicalOutstream.writeln(header.toString()).             }             // ensure empty line between             canonicalOutstream.writeln().         // headers and body. RFC2046 -         // 5.1.1         }     }     // Write out signed data.     String transferEncoding = getContentTransferEncoding() == null ? null : getContentTransferEncoding().getValue().     try (OutputStream transferEncodedStream = EntityUtils.encode(ncos, transferEncoding)) {         transferEncodedStream.write(signature).     } catch (Exception e) {         throw new IOException("Failed to write to output stream", e).     } }
false;private;2;13;;private byte[] createSignature(MimeEntity data, CMSSignedDataGenerator signer) throws Exception {     try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {         data.writeTo(bos).         bos.flush().         CMSTypedData contentData = new CMSProcessableByteArray(bos.toByteArray()).         CMSSignedData signedData = signer.generate(contentData, false).         return signedData.getEncoded().     } catch (Exception e) {         throw new Exception("", e).     } }
