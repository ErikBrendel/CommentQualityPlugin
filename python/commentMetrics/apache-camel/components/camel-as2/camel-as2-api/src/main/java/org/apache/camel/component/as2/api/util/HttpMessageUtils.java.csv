commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;4;;public static String getHeaderValue(HttpMessage message, String headerName) {     Header header = message.getFirstHeader(headerName).     return header == null ? null : header.getValue(). }
false;public,static;3;9;;public static void setHeaderValue(HttpMessage message, String headerName, String headerValue) {     Args.notNull(message, "message").     Args.notNull(headerName, "headerName").     if (headerValue == null) {         message.removeHeaders(headerName).     } else {         message.setHeader(headerName, headerValue).     } }
false;public,static;2;16;;public static <T> T getEntity(HttpMessage message, Class<T> type) {     Args.notNull(message, "message").     Args.notNull(type, "type").     if (message instanceof HttpEntityEnclosingRequest) {         HttpEntity entity = ((HttpEntityEnclosingRequest) message).getEntity().         if (entity != null && type.isInstance(entity)) {             return type.cast(entity).         }     } else if (message instanceof HttpResponse) {         HttpEntity entity = ((HttpResponse) message).getEntity().         if (entity != null && type.isInstance(entity)) {             type.cast(entity).         }     }     return null. }
false;public,static;2;29;;public static String parseBodyPartContent(SessionInputBuffer inBuffer, String boundary) throws HttpException {     try {         CharArrayBuffer bodyPartContentBuffer = new CharArrayBuffer(1024).         CharArrayBuffer lineBuffer = new CharArrayBuffer(1024).         boolean foundMultipartEndBoundary = false.         while (inBuffer.readLine(lineBuffer) != -1) {             if (EntityParser.isBoundaryDelimiter(lineBuffer, null, boundary)) {                 foundMultipartEndBoundary = true.                 // Remove previous line ending: this is associated with                 // boundary                 bodyPartContentBuffer.setLength(bodyPartContentBuffer.length() - 2).                 lineBuffer.clear().                 break.             }             // add line delimiter             lineBuffer.append("\r\n").             bodyPartContentBuffer.append(lineBuffer).             lineBuffer.clear().         }         if (!foundMultipartEndBoundary) {             throw new HttpException("Failed to find end boundary delimiter for body part").         }         return bodyPartContentBuffer.toString().     } catch (HttpException e) {         throw e.     } catch (Exception e) {         throw new HttpException("Failed to parse body part content", e).     } }
false;public,static;3;17;;public static String getParameterValue(HttpMessage message, String headerName, String parameterName) {     Args.notNull(message, "message").     Args.notNull(headerName, "headerName").     Args.notNull(parameterName, "parameterName").     Header header = message.getFirstHeader(headerName).     if (header == null) {         return null.     }     for (HeaderElement headerElement : header.getElements()) {         for (NameValuePair nameValuePair : headerElement.getParameters()) {             if (nameValuePair.getName().equalsIgnoreCase(parameterName)) {                 return nameValuePair.getValue().             }         }     }     return null. }
