commented;modifiers;parameterAmount;loc;comment;code
false;public;2;121;;@Override public void process(HttpResponse response, HttpContext context) throws HttpException, IOException {     int statusCode = response.getStatusLine().getStatusCode().     if (statusCode < 200 || statusCode >= 300) {         // RFC4130 - 7.6 - Status codes in the 200 range SHOULD also be used when an entity is returned         // (a signed receipt in a multipart/signed content type or an unsigned         // receipt in a multipart/report)         LOG.debug("MDN not return due to response status code: {}", statusCode).         return.     }     HttpCoreContext coreContext = HttpCoreContext.adapt(context).     HttpEntityEnclosingRequest request = coreContext.getAttribute(HttpCoreContext.HTTP_REQUEST, HttpEntityEnclosingRequest.class).     if (request == null) {         // Should never happen. but you never know         LOG.debug("MDN not returned due to null request").         throw new HttpException("request missing from HTTP context").     }     LOG.debug("Processing MDN for request: {}", request).     if (HttpMessageUtils.getHeaderValue(request, AS2Header.DISPOSITION_NOTIFICATION_TO) == null) {         // no receipt requested by sender         LOG.debug("MDN not returned: no receipt requested").         return.     }     // Return a Message Disposition Notification Receipt in response body     String boundary = EntityUtils.createBoundaryValue().     String mdnMessage = createMdnDescription(request, response, DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY, AS2DispositionType.PROCESSED, null, null, null, null, null, AS2Charset.US_ASCII, DEFAULT_MDN_MESSAGE_TEMPLATE).     DispositionNotificationMultipartReportEntity multipartReportEntity = new DispositionNotificationMultipartReportEntity(request, response, DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY, AS2DispositionType.PROCESSED, null, null, null, null, null, AS2Charset.US_ASCII, boundary, true, decryptingPrivateKey, mdnMessage).     DispositionNotificationOptions dispositionNotificationOptions = DispositionNotificationOptionsParser.parseDispositionNotificationOptions(HttpMessageUtils.getHeaderValue(request, AS2Header.DISPOSITION_NOTIFICATION_OPTIONS), null).     String receiptAddress = HttpMessageUtils.getHeaderValue(request, AS2Header.RECEIPT_DELIVERY_OPTION).     if (receiptAddress != null) {         // Asynchronous Delivery         coreContext.setAttribute(AS2AsynchronousMDNManager.RECIPIENT_ADDRESS, receiptAddress).         coreContext.setAttribute(AS2AsynchronousMDNManager.ASYNCHRONOUS_MDN, multipartReportEntity).     } else {         // Synchronous Delivery         /* MIME header */         response.addHeader(AS2Header.MIME_VERSION, AS2Constants.MIME_VERSION).         /* AS2-Version header */         response.addHeader(AS2Header.AS2_VERSION, as2Version).         /* Subject header */         // RFC4130 - 7.3 -  Subject header SHOULD be supplied         String subjectPrefix = coreContext.getAttribute(AS2ServerManager.SUBJECT, String.class).         String subject = HttpMessageUtils.getHeaderValue(request, AS2Header.SUBJECT).         if (subjectPrefix != null && subject != null) {             subject = subjectPrefix + subject.         } else if (subject != null) {             subject = "MDN Response To:" + subject.         } else {             subject = "Your Requested MDN Response".         }         response.addHeader(AS2Header.SUBJECT, subject).         /* From header */         String from = coreContext.getAttribute(AS2ServerManager.FROM, String.class).         response.addHeader(AS2Header.FROM, from).         /* AS2-From header */         String as2From = HttpMessageUtils.getHeaderValue(request, AS2Header.AS2_TO).         try {             AS2Utils.validateAS2Name(as2From).         } catch (InvalidAS2NameException e) {             throw new HttpException("Invalid AS-From name", e).         }         response.addHeader(AS2Header.AS2_FROM, as2From).         /* AS2-To header */         String as2To = HttpMessageUtils.getHeaderValue(request, AS2Header.AS2_FROM).         try {             AS2Utils.validateAS2Name(as2To).         } catch (InvalidAS2NameException e) {             throw new HttpException("Invalid AS-To name", e).         }         response.addHeader(AS2Header.AS2_TO, as2To).         /* Message-Id header*/         // RFC4130 - 7.3 -  A Message-ID header is added to support message reconciliation         response.addHeader(AS2Header.MESSAGE_ID, AS2Utils.createMessageId(serverFQDN)).         AS2SignedDataGenerator gen = null.         if (dispositionNotificationOptions.getSignedReceiptProtocol() != null && signingCertificateChain != null && signingPrivateKey != null) {             gen = SigningUtils.createSigningGenerator(signingAlgorithm, signingCertificateChain, signingPrivateKey).         }         if (gen != null) {             // Create signed receipt             try {                 multipartReportEntity.setMainBody(false).                 MultipartSignedEntity multipartSignedEntity = new MultipartSignedEntity(multipartReportEntity, gen, AS2Charset.US_ASCII, AS2TransferEncoding.BASE64, false, null).                 response.setHeader(multipartSignedEntity.getContentType()).                 EntityUtils.setMessageEntity(response, multipartSignedEntity).             } catch (Exception e) {                 LOG.warn("failed to sign receipt").             }         } else {             // Create unsigned receipt             response.setHeader(multipartReportEntity.getContentType()).             EntityUtils.setMessageEntity(response, multipartReportEntity).         }     }     LOG.debug(AS2Utils.printMessage(response)). }
false;private;11;44;;private String createMdnDescription(HttpEntityEnclosingRequest request, HttpResponse response, DispositionMode dispositionMode, AS2DispositionType dispositionType, AS2DispositionModifier dispositionModifier, String[] failureFields, String[] errorFields, String[] warningFields, Map<String, String> extensionFields, String charset, String mdnMessageTemplate) throws HttpException {     try {         Context context = new VelocityContext().         context.put("request", request).         Map<String, Object> requestHeaders = new HashMap<>().         for (Header header : request.getAllHeaders()) {             requestHeaders.put(header.getName(), header.getValue()).         }         context.put("requestHeaders", requestHeaders).         Map<String, Object> responseHeaders = new HashMap<>().         for (Header header : response.getAllHeaders()) {             responseHeaders.put(header.getName(), header.getValue()).         }         context.put("responseHeaders", responseHeaders).         context.put("dispositionMode", dispositionMode).         context.put("dispositionType", dispositionType).         context.put("dispositionModifier", dispositionModifier).         context.put("failureFields", failureFields).         context.put("errorFields", errorFields).         context.put("warningFields", warningFields).         context.put("extensionFields", extensionFields).         VelocityEngine engine = getVelocityEngine().         StringWriter buffer = new StringWriter().         engine.evaluate(context, buffer, getClass().getName(), mdnMessageTemplate).         return buffer.toString().     } catch (Exception e) {         throw new HttpException("failed to create MDN description", e).     } }
false;private,synchronized;0;16;;private synchronized VelocityEngine getVelocityEngine() throws Exception {     if (velocityEngine == null) {         velocityEngine = new VelocityEngine().         // set default properties         Properties properties = new Properties().         properties.setProperty(RuntimeConstants.RESOURCE_LOADER, "file, class").         properties.setProperty("class.resource.loader.description", "Camel Velocity Classpath Resource Loader").         properties.setProperty("class.resource.loader.class", ClasspathResourceLoader.class.getName()).         final Logger velocityLogger = LoggerFactory.getLogger("org.apache.camel.maven.Velocity").         properties.setProperty(RuntimeConstants.RUNTIME_LOG_NAME, velocityLogger.getName()).         velocityEngine.init(properties).     }     return velocityEngine. }
