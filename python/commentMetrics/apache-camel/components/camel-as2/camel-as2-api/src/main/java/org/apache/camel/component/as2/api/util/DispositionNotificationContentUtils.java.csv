commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getValue() {     return value. }
false;public;0;3;;public String[] getParameters() {     return parameters. }
false;public;0;4;;@Override public String toString() {     return value + ((parameters.length > 0) ? ", " + String.join(",", parameters) : ""). }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public Element[] getElements() {     return elements. }
false;public;0;14;;public String getValue() {     StringBuilder builder = new StringBuilder().     for (int i = 0. i < elements.length. i++) {         Element element = elements[i].         if (i > 0) {             builder.append(". " + element).         } else {             builder.append(element).         }     }     return builder.toString(). }
false;public;0;14;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append(name + ": ").     for (int i = 0. i < elements.length. i++) {         Element element = elements[i].         if (i > 0) {             sb.append(". " + element).         } else {             sb.append(element).         }     }     return sb.toString(). }
false;public,static;1;108;;public static AS2MessageDispositionNotificationEntity parseDispositionNotification(List<CharArrayBuffer> dispositionNotificationFields) throws ParseException {     String reportingUA = null.     String mtaName = null.     String finalRecipient = null.     String originalMessageId = null.     DispositionMode dispositionMode = null.     AS2DispositionType dispositionType = null.     AS2DispositionModifier dispositionModifier = null.     List<String> failures = new ArrayList<>().     List<String> errors = new ArrayList<>().     List<String> warnings = new ArrayList<>().     Map<String, String> extensionFields = new HashMap<>().     ReceivedContentMic receivedContentMic = null.     for (int i = 0. i < dispositionNotificationFields.size(). i++) {         final CharArrayBuffer fieldLine = dispositionNotificationFields.get(i).         final Field field = parseDispositionField(fieldLine).         switch(field.getName().toLowerCase()) {             case REPORTING_UA:                 {                     if (field.getElements().length < 1) {                         throw new ParseException("Invalid '" + MDNField.REPORTING_UA + "' field: UA name is missing").                     }                     reportingUA = field.getValue().                     break.                 }             case MDN_GATEWAY:                 {                     Element[] elements = field.getElements().                     if (elements.length < 2) {                         throw new ParseException("Invalid '" + MDNField.MDN_GATEWAY + "' field: MTA name is missing").                     }                     mtaName = elements[1].getValue().                     break.                 }             case FINAL_RECIPIENT:                 {                     Element[] elements = field.getElements().                     if (elements.length < 2) {                         throw new ParseException("Invalid '" + MDNField.FINAL_RECIPIENT + "' field: recipient address is missing").                     }                     finalRecipient = elements[1].getValue().                     break.                 }             case ORIGINAL_MESSAGE_ID:                 {                     originalMessageId = field.getValue().                     break.                 }             case DISPOSITION:                 {                     Element[] elements = field.getElements().                     if (elements.length < 2) {                         throw new ParseException("Invalid '" + MDNField.DISPOSITION + "' field: " + field.getValue()).                     }                     dispositionMode = DispositionMode.parseDispositionMode(elements[0].getValue()).                     if (dispositionMode == null) {                         throw new ParseException("Invalid '" + MDNField.DISPOSITION + "' field: invalid disposition mode '" + elements[0].getValue() + "'").                     }                     String dispositionTypeString = elements[1].getValue().                     int slash = dispositionTypeString.indexOf('/').                     if (slash == -1) {                         dispositionType = AS2DispositionType.parseDispositionType(dispositionTypeString).                     } else {                         dispositionType = AS2DispositionType.parseDispositionType(dispositionTypeString.substring(0, slash)).                         dispositionModifier = AS2DispositionModifier.parseDispositionType(dispositionTypeString.substring(slash + 1)).                     }                     break.                 }             case FAILURE:                 failures.add(field.getValue()).                 break.             case ERROR:                 errors.add(field.getValue()).                 break.             case WARNING:                 warnings.add(field.getValue()).                 break.             case RECEIVED_CONTENT_MIC:                 {                     Element[] elements = field.getElements().                     if (elements.length < 1) {                         throw new ParseException("Invalid '" + MDNField.RECEIVED_CONTENT_MIC + "' field: MIC is missing").                     }                     Element element = elements[0].                     String[] parameters = element.getParameters().                     if (parameters.length < 1) {                         throw new ParseException("Invalid '" + MDNField.RECEIVED_CONTENT_MIC + "' field: digest algorithm ID is missing").                     }                     String digestAlgorithmId = parameters[0].                     String encodedMessageDigest = element.getValue().                     receivedContentMic = new ReceivedContentMic(digestAlgorithmId, encodedMessageDigest).                     break.                 }             default:                 // Extension Field                 extensionFields.put(field.getName(), field.getValue()).         }     }     return new AS2MessageDispositionNotificationEntity(reportingUA, mtaName, finalRecipient, originalMessageId, dispositionMode, dispositionType, dispositionModifier, failures.toArray(new String[failures.size()]), errors.toArray(new String[errors.size()]), warnings.toArray(new String[warnings.size()]), extensionFields, receivedContentMic). }
false;public,static;1;19;;public static Field parseDispositionField(CharArrayBuffer fieldLine) {     final int colon = fieldLine.indexOf(':').     if (colon == -1) {         throw new ParseException("Invalid field: " + fieldLine.toString()).     }     final String fieldName = fieldLine.substringTrimmed(0, colon).     ParserCursor cursor = new ParserCursor(colon + 1, fieldLine.length()).     final List<Element> elements = new ArrayList<>().     while (!cursor.atEnd()) {         final Element element = parseDispositionFieldElement(fieldLine, cursor).         if (element.getValue() != null) {             elements.add(element).         }     }     return new Field(fieldName, elements.toArray(new Element[elements.size()])). }
false;public,static;2;31;;public static Element parseDispositionFieldElement(CharArrayBuffer fieldLine, ParserCursor cursor) {     final String value = TOKEN_PARSER.parseToken(fieldLine, cursor, TOKEN_DELIMS).     if (cursor.atEnd()) {         return new Element(value, null).     }     final char delim = fieldLine.charAt(cursor.getPos()).     cursor.updatePos(cursor.getPos() + 1).     if (delim == ELEM_DELIMITER) {         return new Element(value, null).     }     final List<String> parameters = new ArrayList<>().     while (!cursor.atEnd()) {         final String parameter = TOKEN_PARSER.parseToken(fieldLine, cursor, TOKEN_DELIMS).         parameters.add(parameter).         if (cursor.atEnd()) {             break.         }         final char ch = fieldLine.charAt(cursor.getPos()).         if (!cursor.atEnd()) {             cursor.updatePos(cursor.getPos() + 1).         }         if (ch == ELEM_DELIMITER) {             break.         }     }     return new Element(value, parameters.toArray(new String[parameters.size()])). }
