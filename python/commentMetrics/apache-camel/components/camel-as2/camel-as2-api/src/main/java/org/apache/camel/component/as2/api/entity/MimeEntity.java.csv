commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void close() { // do nothing }
false;public;0;3;;public boolean isMainBody() {     return isMainBody. }
false;public;1;3;;public void setMainBody(boolean isMainBody) {     this.isMainBody = isMainBody. }
false;public;0;7;;public String getContentTypeValue() {     Header contentTypeHeader = getContentType().     if (contentTypeHeader != null) {         return contentTypeHeader.getValue().     }     return null. }
false;public;1;3;;public void setContentType(ContentType contentType) {     super.setContentType(contentType == null ? null : contentType.toString()). }
false;public;1;9;;@Override public void setContentType(Header contentType) {     super.setContentType(contentType).     if (contentType != null) {         addHeader(contentType).     } else {         removeHeaders(AS2Header.CONTENT_TYPE).     } }
false;public;0;7;;public String getContentEncodingValue() {     Header contentEncodingHeader = getContentEncoding().     if (contentEncodingHeader != null) {         return contentEncodingHeader.getValue().     }     return null. }
false;public;1;9;;@Override public void setContentEncoding(Header contentEncoding) {     super.setContentEncoding(contentEncoding).     if (contentEncoding != null) {         addHeader(contentEncoding).     } else {         removeHeaders(HTTP.CONTENT_ENCODING).     } }
false;public;0;7;;public String getContentTransferEncodingValue() {     Header contentTransferEncodingHeader = getContentTransferEncoding().     if (contentTransferEncodingHeader != null) {         return contentTransferEncodingHeader.getValue().     }     return null. }
true;public;0;3;/**  * Obtains the Content-Transfer-Encoding header.  * The default implementation returns the value of the  * {@link #contentEncoding contentEncoding} attribute.  *  * @return  the Content-Transfer-Encoding header, or {@code null}  */ ;/**  * Obtains the Content-Transfer-Encoding header.  * The default implementation returns the value of the  * {@link #contentEncoding contentEncoding} attribute.  *  * @return  the Content-Transfer-Encoding header, or {@code null}  */ public Header getContentTransferEncoding() {     return this.contentTransferEncoding. }
true;public;1;8;/**  * Specifies the Content-Transfer-Encoding header.  * The default implementation sets the value of the  * {@link #contentTransferEncoding contentTransferEncoding} attribute.  *  * @param contentTransferEncoding   the new Content-Transfer-Encoding header, or  *                          {@code null} to unset  */ ;/**  * Specifies the Content-Transfer-Encoding header.  * The default implementation sets the value of the  * {@link #contentTransferEncoding contentTransferEncoding} attribute.  *  * @param contentTransferEncoding   the new Content-Transfer-Encoding header, or  *                          {@code null} to unset  */ public void setContentTransferEncoding(final Header contentTransferEncoding) {     this.contentTransferEncoding = contentTransferEncoding.     if (contentTransferEncoding != null) {         addHeader(contentTransferEncoding).     } else {         removeHeaders(AS2Header.CONTENT_TRANSFER_ENCODING).     } }
true;public;1;7;/**  * Specifies the Content-Transfer-Encoding header, as a string.  * The default implementation calls  * {@link #setContentTransferEncoding(Header) setContentTransferEncoding(Header)}.  *  * @param contentTranserEncoding - the new Content-Transfer-Encoding header, or  *                     {@code null} to unset  */ ;/**  * Specifies the Content-Transfer-Encoding header, as a string.  * The default implementation calls  * {@link #setContentTransferEncoding(Header) setContentTransferEncoding(Header)}.  *  * @param contentTranserEncoding - the new Content-Transfer-Encoding header, or  *                     {@code null} to unset  */ public void setContentTransferEncoding(final String contentTranserEncoding) {     Header h = null.     if (contentTranserEncoding != null) {         h = new BasicHeader(AS2Header.CONTENT_TRANSFER_ENCODING, contentTranserEncoding).     }     setContentTransferEncoding(h). }
false;public;1;3;;public boolean containsHeader(final String name) {     return this.headergroup.containsHeader(name). }
false;public;1;3;;public Header[] getHeaders(final String name) {     return this.headergroup.getHeaders(name). }
false;public;1;3;;public Header getFirstHeader(final String name) {     return this.headergroup.getFirstHeader(name). }
false;public;1;3;;public Header getLastHeader(final String name) {     return this.headergroup.getLastHeader(name). }
false;public;0;3;;public Header[] getAllHeaders() {     return this.headergroup.getAllHeaders(). }
false;public;1;3;;public void addHeader(final Header header) {     this.headergroup.addHeader(header). }
false;public;2;4;;public void addHeader(final String name, final String value) {     Args.notNull(name, "Header name").     this.headergroup.addHeader(new BasicHeader(name, value)). }
false;public;1;3;;public void setHeader(final Header header) {     this.headergroup.updateHeader(header). }
false;public;2;4;;public void setHeader(final String name, final String value) {     Args.notNull(name, "Header name").     this.headergroup.updateHeader(new BasicHeader(name, value)). }
false;public;1;3;;public void setHeaders(final Header[] headers) {     this.headergroup.setHeaders(headers). }
false;public;1;3;;public void removeHeader(final Header header) {     this.headergroup.removeHeader(header). }
false;public;1;11;;public void removeHeaders(final String name) {     if (name == null) {         return.     }     for (final HeaderIterator i = this.headergroup.iterator(). i.hasNext(). ) {         final Header header = i.nextHeader().         if (name.equalsIgnoreCase(header.getName())) {             i.remove().         }     } }
false;public;0;3;;public void removeAllHeaders() {     this.headergroup.clear(). }
false;public;0;3;;public HeaderIterator headerIterator() {     return this.headergroup.iterator(). }
false;public;1;3;;public HeaderIterator headerIterator(final String name) {     return this.headergroup.iterator(name). }
false;public;0;4;;@Override public boolean isRepeatable() {     return true. }
false;public;0;4;;@Override public boolean isStreaming() {     return !isRepeatable(). }
false;public;0;14;;@Override public long getContentLength() {     if (contentLength == RECALCULATE_CONTENT_LENGTH) {         // Calculate content length         final ByteArrayOutputStream out = new ByteArrayOutputStream().         try {             writeTo(out).             contentLength = out.toByteArray().length.         } catch (IOException e) {             contentLength = MimeEntity.UNKNOWN_CONTENT_LENGTH.         }     }     return contentLength. }
false;public;0;7;;@Override public InputStream getContent() throws IOException, UnsupportedOperationException {     final ByteArrayOutputStream outstream = new ByteArrayOutputStream().     writeTo(outstream).     outstream.flush().     return new ByteArrayInputStream(outstream.toByteArray()). }
false;public;0;11;;public String getCharset() {     if (getContentType() == null) {         return AS2Charset.US_ASCII.     }     ContentType contentType = ContentType.parse(getContentType().getValue()).     Charset charset = contentType.getCharset().     if (charset != null) {         return charset.name().     }     return AS2Charset.US_ASCII. }
