commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getAttribute() {     return attribute. }
false;public;0;3;;public Importance getImportance() {     return importance. }
false;public;0;3;;public String[] getValues() {     return values. }
false;public;0;14;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append(attribute).     if (importance != null) {         sb.append("=" + importance.toString()).     }     if (values != null) {         for (String value : values) {             sb.append("," + value).         }     }     return sb.toString(). }
false;public,static;2;21;;public static Header createHeader(String headerName, String[]... elements) {     StringBuilder sb = new StringBuilder().     boolean firstElement = true.     for (String[] element : elements) {         if (element.length == 0) {             continue.         }         if (firstElement) {             firstElement = false.         } else {             sb.append(ELEM_DELIMITER).         }         sb.append(element[0]).         if (element.length > 1) {             sb.append(NAME_VALUE_DELIMITER + element[1]).         }     }     BasicHeader header = new BasicHeader(headerName, sb.toString()).     return header. }
false;public,static;2;38;;public static Parameter parseParameter(final CharArrayBuffer buffer, final ParserCursor cursor) {     Args.notNull(buffer, "Char array buffer").     Args.notNull(cursor, "Parser cursor").     final String name = TOKEN_PARSER.parseToken(buffer, cursor, TOKEN_DELIMS).     if (cursor.atEnd()) {         return new Parameter(name, null, null).     }     final int delim = buffer.charAt(cursor.getPos()).     cursor.updatePos(cursor.getPos() + 1).     if (delim != NAME_VALUE_DELIMITER) {         return new Parameter(name, null, null).     }     final String importance = TOKEN_PARSER.parseValue(buffer, cursor, VALUE_DELIMS).     if (!cursor.atEnd()) {         cursor.updatePos(cursor.getPos() + 1).     }     List<String> values = new ArrayList<>().     while (!cursor.atEnd()) {         String value = TOKEN_PARSER.parseValue(buffer, cursor, VALUE_DELIMS).         values.add(value).         if (cursor.atEnd()) {             break.         }         final int delimiter = buffer.charAt(cursor.getPos()).         if (!cursor.atEnd()) {             cursor.updatePos(cursor.getPos() + 1).         }         if (delimiter == ELEM_DELIMITER) {             break.         }     }     return new Parameter(name, importance, values.toArray(new String[values.size()])). }
false;public,static;3;16;;public static String getParameterValue(Header[] headers, String headerName, String parameterName) {     Args.notNull(headers, "headers").     Args.notNull(headerName, "headerName").     for (Header header : headers) {         if (header.getName().equalsIgnoreCase(headerName)) {             for (HeaderElement headerElement : header.getElements()) {                 for (NameValuePair nameValuePair : headerElement.getParameters()) {                     if (nameValuePair.getName().equalsIgnoreCase(parameterName)) {                         return nameValuePair.getValue().                     }                 }             }         }     }     return null. }
