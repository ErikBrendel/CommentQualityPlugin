commented;modifiers;parameterAmount;loc;comment;code
false;public;2;59;;public HttpCoreContext send(DispositionNotificationMultipartReportEntity mdn, String recipientDeliveryAddress) throws HttpException {     Args.notNull(mdn, "mdn").     Args.notNull(recipientDeliveryAddress, "recipientDeliveryAddress").     URI uri = null.     try {         URIBuilder uriBuilder = new URIBuilder(recipientDeliveryAddress).         uri = uriBuilder.build().     } catch (URISyntaxException e) {         throw new HttpException("Invalid recipient delivery address URL", e).     }     String requestUri = buildRequestURI(uri).     DefaultBHttpClientConnection httpConnection = new DefaultBHttpClientConnection(8 * 1024).     try {         HttpHost targetHost = new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme()).         // Create socket and bind to connection.         Socket socket = new Socket(targetHost.getHostName(), targetHost.getPort()).         httpConnection.bind(socket).         // Add Context attributes         HttpCoreContext httpContext = HttpCoreContext.create().         httpContext.setTargetHost(targetHost).         httpContext.setAttribute(RECIPIENT_ADDRESS, recipientDeliveryAddress).         BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", requestUri).         request.setHeader(AS2Header.CONTENT_TYPE, mdn.getMainMessageContentType()).         httpContext.setAttribute(HttpCoreContext.HTTP_REQUEST, request).         mdn.setMainBody(true).         EntityUtils.setMessageEntity(request, mdn).         HttpResponse response.         try {             httpContext.setAttribute(AS2_CONNECTION, httpConnection).             response = send(httpConnection, request, httpContext).         } catch (IOException e) {             throw new HttpException("Failed to send http request message", e).         }         httpContext.setAttribute(HTTP_RESPONSE, response).         return httpContext.     } catch (Exception e) {         throw new HttpException("failed to send MDN", e).     } finally {         try {             httpConnection.flush().             httpConnection.close().         } catch (IOException e) {         // Ignore.         }     } }
false;private;3;10;;private HttpResponse send(DefaultBHttpClientConnection httpConnection, HttpRequest request, HttpCoreContext httpContext) throws HttpException, IOException {     // Execute Request     HttpRequestExecutor httpexecutor = new HttpRequestExecutor().     httpexecutor.preProcess(request, httpProcessor, httpContext).     HttpResponse response = httpexecutor.execute(request, httpConnection, httpContext).     httpexecutor.postProcess(response, httpProcessor, httpContext).     return response. }
false;private;1;15;;private String buildRequestURI(URI uri) {     StringBuilder sb = new StringBuilder().     if (uri.getPath() != null) {         sb.append(uri.getPath()).     }     if (uri.getQuery() != null) {         sb.append('?').         sb.append(uri.getQuery()).     }     if (uri.getFragment() != null) {         sb.append('#').         sb.append(uri.getFragment()).     }     return sb.toString(). }
