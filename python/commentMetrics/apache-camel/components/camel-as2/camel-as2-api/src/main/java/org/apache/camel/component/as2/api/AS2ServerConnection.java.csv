commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Override public void run() {     LOG.info("Listening on port {}", this.serversocket.getLocalPort()).     while (!Thread.interrupted()) {         try {             final int bufsize = 8 * 1024.             // Set up incoming HTTP connection             final Socket insocket = this.serversocket.accept().             final AS2BHttpServerConnection inconn = new AS2BHttpServerConnection(bufsize).             LOG.info("Incoming connection from {}", insocket.getInetAddress()).             inconn.bind(insocket).             // Start worker thread             final Thread t = new RequestHandlerThread(this.httpService, inconn).             t.setDaemon(true).             t.start().         } catch (final InterruptedIOException ex) {             break.         } catch (final SocketException e) {             // Server socket closed             break.         } catch (final IOException e) {             LOG.error("I/O error initialising connection thread: {}", e.getMessage()).             break.         }     } }
false;;2;3;;void registerHandler(String requestUriPattern, HttpRequestHandler httpRequestHandler) {     reqistry.register(requestUriPattern, httpRequestHandler). }
false;;1;3;;void unregisterHandler(String requestUri) {     reqistry.unregister(requestUri). }
false;public;0;38;;@Override public void run() {     LOG.info("Processing new AS2 request").     final HttpContext context = new BasicHttpContext(null).     try {         while (!Thread.interrupted()) {             this.httpService.handleRequest(this.serverConnection, context).             // Send asynchronous MDN if any.             HttpCoreContext coreContext = HttpCoreContext.adapt(context).             String recipientAddress = coreContext.getAttribute(AS2AsynchronousMDNManager.RECIPIENT_ADDRESS, String.class).             if (recipientAddress != null) {                 DispositionNotificationMultipartReportEntity multipartReportEntity = coreContext.getAttribute(AS2AsynchronousMDNManager.ASYNCHRONOUS_MDN, DispositionNotificationMultipartReportEntity.class).                 AS2AsynchronousMDNManager asynchronousMDNManager = new AS2AsynchronousMDNManager(as2Version, originServer, serverFqdn, signingCertificateChain, signingPrivateKey).                 asynchronousMDNManager.send(multipartReportEntity, recipientAddress).             }         }     } catch (final ConnectionClosedException ex) {         LOG.info("Client closed connection").     } catch (final IOException ex) {         LOG.error("I/O error: {}", ex.getMessage()).     } catch (final HttpException ex) {         ex.printStackTrace().         LOG.error("Unrecoverable HTTP protocol violation: {}", ex.getMessage()).     } finally {         try {             this.serverConnection.shutdown().         } catch (final IOException ignore) {         }     } }
false;public;0;13;;public void close() {     if (listenerThread != null) {         synchronized (listenerThread) {             try {                 listenerThread.serversocket.close().             } catch (IOException e) {                 LOG.debug(e.getMessage(), e).             } finally {                 listenerThread = null.             }         }     } }
false;public;2;7;;public void listen(String requestUri, HttpRequestHandler handler) throws IOException {     if (listenerThread != null) {         synchronized (listenerThread) {             listenerThread.registerHandler(requestUri, handler).         }     } }
false;public;1;6;;public void stopListening(String requestUri) {     if (listenerThread != null) {         listenerThread.unregisterHandler(requestUri).     } }
false;protected;8;13;;protected HttpProcessor initProtocolProcessor(String as2Version, String originServer, String serverFqdn, int port, AS2SignatureAlgorithm signatureAlgorithm, Certificate[] signingCertificateChain, PrivateKey signingPrivateKey, PrivateKey decryptingPrivateKey) {     return HttpProcessorBuilder.create().add(new ResponseContent(true)).add(new ResponseServer(originServer)).add(new ResponseDate()).add(new ResponseConnControl()).add(new ResponseMDN(as2Version, serverFqdn, signatureAlgorithm, signingCertificateChain, signingPrivateKey, decryptingPrivateKey)).build(). }
