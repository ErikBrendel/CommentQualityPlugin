commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Before public void setUp() throws Exception { }
false;public;0;3;;@After public void tearDown() throws Exception { }
false;public;0;16;;@Test public void parseMessageDispositionNotificationReportMessageTest() throws Exception {     HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, EnglishReasonPhraseCatalog.INSTANCE.getReason(HttpStatus.SC_OK, null)).     HttpMessageUtils.setHeaderValue(response, AS2Header.CONTENT_TRANSFER_ENCODING, DISPOSITION_NOTIFICATION_CONTENT_TRANSFER_ENCODING).     BasicHttpEntity entity = new BasicHttpEntity().     entity.setContentType(REPORT_CONTENT_TYPE_VALUE).     InputStream is = new ByteArrayInputStream(DISPOSITION_NOTIFICATION_REPORT_CONTENT.getBytes(DISPOSITION_NOTIFICATION_REPORT_CONTENT_CHARSET_NAME)).     entity.setContent(is).     EntityUtils.setMessageEntity(response, entity).     EntityParser.parseAS2MessageEntity(response).     HttpEntity parsedEntity = EntityUtils.getMessageEntity(response).     assertNotNull("Unexpected Null message disposition notification report entity", parsedEntity).     assertTrue("Unexpected type for message disposition notification report entity", parsedEntity instanceof DispositionNotificationMultipartReportEntity). }
false;public;0;18;;@Test public void parseMessageDispositionNotificationReportBodyTest() throws Exception {     InputStream is = new ByteArrayInputStream(DISPOSITION_NOTIFICATION_REPORT_CONTENT.getBytes(DISPOSITION_NOTIFICATION_REPORT_CONTENT_CHARSET_NAME)).     AS2SessionInputBuffer inbuffer = new AS2SessionInputBuffer(new HttpTransportMetricsImpl(), DEFAULT_BUFFER_SIZE, DEFAULT_BUFFER_SIZE, null).     inbuffer.bind(is).     DispositionNotificationMultipartReportEntity dispositionNotificationMultipartReportEntity = EntityParser.parseMultipartReportEntityBody(inbuffer, DISPOSITION_NOTIFICATION_REPORT_CONTENT_BOUNDARY, DISPOSITION_NOTIFICATION_REPORT_CONTENT_CHARSET_NAME, DISPOSITION_NOTIFICATION_REPORT_CONTENT_TRANSFER_ENCODING).     assertNotNull("Unexpected Null disposition notification multipart entity", dispositionNotificationMultipartReportEntity).     assertEquals("Unexpected number of body parts", 2, dispositionNotificationMultipartReportEntity.getPartCount()).     assertTrue("Unexpected type for first body part", dispositionNotificationMultipartReportEntity.getPart(0) instanceof TextPlainEntity).     assertTrue("Unexpected type for second body part", dispositionNotificationMultipartReportEntity.getPart(1) instanceof AS2MessageDispositionNotificationEntity). }
false;public;0;13;;@Test public void parseTextPlainBodyTest() throws Exception {     InputStream is = new ByteArrayInputStream(TEXT_PLAIN_CONTENT.getBytes(TEXT_PLAIN_CONTENT_CHARSET_NAME)).     AS2SessionInputBuffer inbuffer = new AS2SessionInputBuffer(new HttpTransportMetricsImpl(), DEFAULT_BUFFER_SIZE, DEFAULT_BUFFER_SIZE, null).     inbuffer.bind(is).     TextPlainEntity textPlainEntity = EntityParser.parseTextPlainEntityBody(inbuffer, TEXT_PLAIN_CONTENT_BOUNDARY, TEXT_PLAIN_CONTENT_CHARSET_NAME, TEXT_PLAIN_CONTENT_TRANSFER_ENCODING).     String text = textPlainEntity.getText().     assertEquals("Unexpected text", EXPECTED_TEXT_PLAIN_CONTENT, text). }
false;public;0;28;;@Test public void parseMessageDispositionNotificationBodyTest() throws Exception {     InputStream is = new ByteArrayInputStream(DISPOSITION_NOTIFICATION_CONTENT.getBytes(DISPOSITION_NOTIFICATION_CONTENT_CHARSET_NAME)).     AS2SessionInputBuffer inbuffer = new AS2SessionInputBuffer(new HttpTransportMetricsImpl(), DEFAULT_BUFFER_SIZE, DEFAULT_BUFFER_SIZE, null).     inbuffer.bind(is).     AS2MessageDispositionNotificationEntity messageDispositionNotificationEntity = EntityParser.parseMessageDispositionNotificationEntityBody(inbuffer, DISPOSITION_NOTIFICATION_CONTENT_BOUNDARY, DISPOSITION_NOTIFICATION_CONTENT_CHARSET_NAME, DISPOSITION_NOTIFICATION_CONTENT_TRANSFER_ENCODING).     assertEquals("Unexpected Reporting UA value", EXPECTED_REPORTING_UA, messageDispositionNotificationEntity.getReportingUA()).     assertEquals("Unexpected MTN Name", EXPECTED_MTN_NAME, messageDispositionNotificationEntity.getMtnName()).     assertEquals("Unexpected Original Recipient", EXPECTED_ORIGINAL_RECIPIENT, messageDispositionNotificationEntity.getExtensionFields().get("Original-Recipient")).     assertEquals("Unexpected Final Reciptient", EXPECTED_FINAL_RECIPIENT, messageDispositionNotificationEntity.getFinalRecipient()).     assertEquals("Unexpected Original Message ID", EXPECTED_ORIGINAL_MESSAGE_ID, messageDispositionNotificationEntity.getOriginalMessageId()).     assertEquals("Unexpected Disposition Mode", EXPECTED_DISPOSITION_MODE, messageDispositionNotificationEntity.getDispositionMode()).     assertNotNull("Unexpected Null Disposition Modifier", messageDispositionNotificationEntity.getDispositionModifier()).     assertEquals("Unexpected Disposition Modifier", EXPECTED_DISPOSITION_MODIFIER, messageDispositionNotificationEntity.getDispositionModifier().getModifier()).     assertEquals("Unexpected Disposition Type", EXPECTED_DISPOSITION_TYPE, messageDispositionNotificationEntity.getDispositionType()).     assertArrayEquals("Unexpected Failure Array value", EXPECTED_FAILURE, messageDispositionNotificationEntity.getFailureFields()).     assertArrayEquals("Unexpected Error Array value", EXPECTED_ERROR, messageDispositionNotificationEntity.getErrorFields()).     assertArrayEquals("Unexpected Warning Array value", EXPECTED_WARNING, messageDispositionNotificationEntity.getWarningFields()).     assertNotNull("Unexpected Null Received Content MIC", messageDispositionNotificationEntity.getReceivedContentMic()).     assertEquals("Unexpected Encoded Message Digest", EXPECTED_ENCODED_MESSAGE_DIGEST, messageDispositionNotificationEntity.getReceivedContentMic().getEncodedMessageDigest()).     assertEquals("Unexpected Digest Algorithm ID", EXPECTED_DIGEST_ALGORITHM_ID, messageDispositionNotificationEntity.getReceivedContentMic().getDigestAlgorithmId()). }
false;public;0;51;;@Test public void parseEnvelopedBodyTest() throws Exception {     Security.addProvider(new BouncyCastleProvider()).     //      // set up our certificates     //      KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", "BC").     kpg.initialize(1024, new SecureRandom()).     String issueDN = "O=Punkhorn Software, C=US".     KeyPair issueKP = kpg.generateKeyPair().     X509Certificate issuerCertificate = makeCertificate(issueKP, issueDN, issueKP, issueDN).     //      // certificate we encrypt against     //      String encryptDN = "CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US".     KeyPair encryptKP = kpg.generateKeyPair().     X509Certificate encryptionCertificate = makeCertificate(encryptKP, encryptDN, issueKP, issueDN).     List<X509Certificate> certList = new ArrayList<>().     certList.add(encryptionCertificate).     certList.add(issuerCertificate).     //      // Create generator     //      CMSEnvelopedDataGenerator cmsEnvelopeDataGenerator = new CMSEnvelopedDataGenerator().     JceKeyTransRecipientInfoGenerator recipientInfoGenerator = new JceKeyTransRecipientInfoGenerator(encryptionCertificate).     cmsEnvelopeDataGenerator.addRecipientInfoGenerator(recipientInfoGenerator).     //      // Create encryptor     //      OutputEncryptor contentEncryptor = new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CCM).build().     //      // Build Enveloped Entity     //      TextPlainEntity textEntity = new TextPlainEntity("This is a super secret messatge!", "US-ASCII", "7bit", false).     ApplicationPkcs7MimeEnvelopedDataEntity applicationPkcs7MimeEntity = new ApplicationPkcs7MimeEnvelopedDataEntity(textEntity, cmsEnvelopeDataGenerator, contentEncryptor, "binary", true).     MimeEntity decryptedMimeEntity = applicationPkcs7MimeEntity.getEncryptedEntity(encryptKP.getPrivate()).     assertEquals("Decrypted entity has unexpected content type", "text/plain. charset=US-ASCII", decryptedMimeEntity.getContentTypeValue()).     assertEquals("Decrypted entity has unexpected content", "This is a super secret messatge!", ((TextPlainEntity) decryptedMimeEntity).getText()). }
true;private;4;17;/**  * create a basic X509 certificate from the given keys  */ ;/**  * create a basic X509 certificate from the given keys  */ private X509Certificate makeCertificate(KeyPair subKP, String subDN, KeyPair issKP, String issDN) throws GeneralSecurityException, IOException, OperatorCreationException {     PublicKey subPub = subKP.getPublic().     PrivateKey issPriv = issKP.getPrivate().     PublicKey issPub = issKP.getPublic().     X509v3CertificateBuilder v3CertGen = new JcaX509v3CertificateBuilder(new X500Name(issDN), BigInteger.valueOf(serialNo++), new Date(System.currentTimeMillis()), new Date(System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 100)), new X500Name(subDN), subPub).     v3CertGen.addExtension(Extension.subjectKeyIdentifier, false, createSubjectKeyId(subPub)).     v3CertGen.addExtension(Extension.authorityKeyIdentifier, false, createAuthorityKeyId(issPub)).     return new JcaX509CertificateConverter().setProvider("BC").getCertificate(v3CertGen.build(new JcaContentSignerBuilder("MD5withRSA").setProvider("BC").build(issPriv))). }
false;private;1;6;;private AuthorityKeyIdentifier createAuthorityKeyId(PublicKey pub) throws IOException {     SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(pub.getEncoded()).     BcX509ExtensionUtils utils = new BcX509ExtensionUtils().     return utils.createAuthorityKeyIdentifier(info). }
false;static;1;5;;static SubjectKeyIdentifier createSubjectKeyId(PublicKey pub) throws IOException {     SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(pub.getEncoded()).     return new BcX509ExtensionUtils().createSubjectKeyIdentifier(info). }
