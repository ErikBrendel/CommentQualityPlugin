commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     Security.addProvider(new BouncyCastleProvider()). }
false;public;0;3;;@After public void tearDown() throws Exception { }
false;public;0;22;;@Test public void createReceivedContentMicTest() throws Exception {     HttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", "/", HttpVersion.HTTP_1_1).     request.addHeader(AS2Header.DISPOSITION_NOTIFICATION_OPTIONS, DISPOSITION_NOTIFICATION_OPTIONS_VALUE).     request.addHeader(AS2Header.CONTENT_TYPE, CONTENT_TYPE_VALUE).     ApplicationEDIFACTEntity edifactEntity = new ApplicationEDIFACTEntity(EDI_MESSAGE, AS2Charset.US_ASCII, AS2TransferEncoding.NONE, true).     InputStream is = edifactEntity.getContent().     BasicHttpEntity basicEntity = new BasicHttpEntity().     basicEntity.setContent(is).     basicEntity.setContentType(CONTENT_TYPE_VALUE).     request.setEntity(basicEntity).     ReceivedContentMic receivedContentMic = MicUtils.createReceivedContentMic(request, null).     assertNotNull("Failed to create Received Content MIC").     LOG.debug("Digest Algorithm: " + receivedContentMic.getDigestAlgorithmId()).     assertEquals("Unexpected digest algorithm value", EXPECTED_MESSAGE_DIGEST_ALGORITHM, receivedContentMic.getDigestAlgorithmId()).     LOG.debug("Encoded Message Digest: " + receivedContentMic.getEncodedMessageDigest()).     assertEquals("Unexpected encoded message digest value", EXPECTED_ENCODED_MESSAGE_DIGEST, receivedContentMic.getEncodedMessageDigest()). }
