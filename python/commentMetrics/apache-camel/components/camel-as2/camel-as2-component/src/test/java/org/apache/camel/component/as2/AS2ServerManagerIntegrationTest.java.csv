commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setup() throws Exception {     setupSigningGenerator(). }
false;public;0;54;;@Test public void receivePlainEDIMessageTest() throws Exception {     AS2ClientConnection clientConnection = new AS2ClientConnection(AS2_VERSION, USER_AGENT, CLIENT_FQDN, TARGET_HOST, TARGET_PORT).     AS2ClientManager clientManager = new AS2ClientManager(clientConnection).     clientManager.send(EDI_MESSAGE, REQUEST_URI, SUBJECT, FROM, AS2_NAME, AS2_NAME, AS2MessageStructure.PLAIN, ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII), null, null, null, null, null, DISPOSITION_NOTIFICATION_TO, SIGNED_RECEIPT_MIC_ALGORITHMS, null, null).     MockEndpoint mockEndpoint = getMockEndpoint("mock:as2RcvMsgs").     mockEndpoint.expectedMinimumMessageCount(1).     mockEndpoint.setResultWaitTime(TimeUnit.MILLISECONDS.convert(30, TimeUnit.SECONDS)).     mockEndpoint.assertIsSatisfied().     final List<Exchange> exchanges = mockEndpoint.getExchanges().     assertNotNull("listen result", exchanges).     assertFalse("listen result", exchanges.isEmpty()).     LOG.debug("poll result: " + exchanges).     Exchange exchange = exchanges.get(0).     Message message = exchange.getIn().     assertNotNull("exchange message", message).     BasicHttpContext context = message.getBody(BasicHttpContext.class).     assertNotNull("context", context).     HttpCoreContext coreContext = HttpCoreContext.adapt(context).     HttpRequest request = coreContext.getRequest().     assertNotNull("request", request).     assertEquals("Unexpected method value", METHOD, request.getRequestLine().getMethod()).     assertEquals("Unexpected request URI value", REQUEST_URI, request.getRequestLine().getUri()).     assertEquals("Unexpected HTTP version value", HttpVersion.HTTP_1_1, request.getRequestLine().getProtocolVersion()).     assertEquals("Unexpected subject value", SUBJECT, request.getFirstHeader(AS2Header.SUBJECT).getValue()).     assertEquals("Unexpected from value", FROM, request.getFirstHeader(AS2Header.FROM).getValue()).     assertEquals("Unexpected AS2 version value", AS2_VERSION, request.getFirstHeader(AS2Header.AS2_VERSION).getValue()).     assertEquals("Unexpected AS2 from value", AS2_NAME, request.getFirstHeader(AS2Header.AS2_FROM).getValue()).     assertEquals("Unexpected AS2 to value", AS2_NAME, request.getFirstHeader(AS2Header.AS2_TO).getValue()).     assertTrue("Unexpected message id value", request.getFirstHeader(AS2Header.MESSAGE_ID).getValue().endsWith(CLIENT_FQDN + ">")).     assertEquals("Unexpected target host value", TARGET_HOST + ":" + TARGET_PORT, request.getFirstHeader(AS2Header.TARGET_HOST).getValue()).     assertEquals("Unexpected user agent value", USER_AGENT, request.getFirstHeader(AS2Header.USER_AGENT).getValue()).     assertNotNull("Date value missing", request.getFirstHeader(AS2Header.DATE)).     assertNotNull("Content length value missing", request.getFirstHeader(AS2Header.CONTENT_LENGTH)).     assertTrue("Unexpected content type for message", request.getFirstHeader(AS2Header.CONTENT_TYPE).getValue().startsWith(AS2MediaType.APPLICATION_EDIFACT)).     assertTrue("Request does not contain entity", request instanceof BasicHttpEntityEnclosingRequest).     HttpEntity entity = ((BasicHttpEntityEnclosingRequest) request).getEntity().     assertNotNull("Request does not contain entity", entity).     assertTrue("Unexpected request entity type", entity instanceof ApplicationEDIFACTEntity).     ApplicationEDIFACTEntity ediEntity = (ApplicationEDIFACTEntity) entity.     assertTrue("Unexpected content type for entity", ediEntity.getContentType().getValue().startsWith(AS2MediaType.APPLICATION_EDIFACT)).     assertTrue("Entity not set as main body of request", ediEntity.isMainBody()).     String rcvdMessage = ediEntity.getEdiMessage().replaceAll("\r", "").     assertEquals("EDI message does not match", EDI_MESSAGE, rcvdMessage). }
false;public;0;68;;@Test public void receiveMultipartSignedMessageTest() throws Exception {     AS2ClientConnection clientConnection = new AS2ClientConnection(AS2_VERSION, USER_AGENT, CLIENT_FQDN, TARGET_HOST, TARGET_PORT).     AS2ClientManager clientManager = new AS2ClientManager(clientConnection).     clientManager.send(EDI_MESSAGE, REQUEST_URI, SUBJECT, FROM, AS2_NAME, AS2_NAME, AS2MessageStructure.SIGNED, ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII), null, AS2SignatureAlgorithm.SHA256WITHRSA, certList.toArray(new Certificate[0]), signingKP.getPrivate(), null, DISPOSITION_NOTIFICATION_TO, SIGNED_RECEIPT_MIC_ALGORITHMS, null, null).     MockEndpoint mockEndpoint = getMockEndpoint("mock:as2RcvMsgs").     mockEndpoint.expectedMinimumMessageCount(1).     mockEndpoint.setResultWaitTime(TimeUnit.MILLISECONDS.convert(30, TimeUnit.SECONDS)).     mockEndpoint.assertIsSatisfied().     final List<Exchange> exchanges = mockEndpoint.getExchanges().     assertNotNull("listen result", exchanges).     assertFalse("listen result", exchanges.isEmpty()).     LOG.debug("poll result: " + exchanges).     Exchange exchange = exchanges.get(0).     Message message = exchange.getIn().     assertNotNull("exchange message", message).     BasicHttpContext context = message.getBody(BasicHttpContext.class).     assertNotNull("context", context).     HttpCoreContext coreContext = HttpCoreContext.adapt(context).     HttpRequest request = coreContext.getRequest().     assertNotNull("request", request).     assertEquals("Unexpected method value", METHOD, request.getRequestLine().getMethod()).     assertEquals("Unexpected request URI value", REQUEST_URI, request.getRequestLine().getUri()).     assertEquals("Unexpected HTTP version value", HttpVersion.HTTP_1_1, request.getRequestLine().getProtocolVersion()).     assertEquals("Unexpected subject value", SUBJECT, request.getFirstHeader(AS2Header.SUBJECT).getValue()).     assertEquals("Unexpected from value", FROM, request.getFirstHeader(AS2Header.FROM).getValue()).     assertEquals("Unexpected AS2 version value", AS2_VERSION, request.getFirstHeader(AS2Header.AS2_VERSION).getValue()).     assertEquals("Unexpected AS2 from value", AS2_NAME, request.getFirstHeader(AS2Header.AS2_FROM).getValue()).     assertEquals("Unexpected AS2 to value", AS2_NAME, request.getFirstHeader(AS2Header.AS2_TO).getValue()).     assertTrue("Unexpected message id value", request.getFirstHeader(AS2Header.MESSAGE_ID).getValue().endsWith(CLIENT_FQDN + ">")).     assertEquals("Unexpected target host value", TARGET_HOST + ":" + TARGET_PORT, request.getFirstHeader(AS2Header.TARGET_HOST).getValue()).     assertEquals("Unexpected user agent value", USER_AGENT, request.getFirstHeader(AS2Header.USER_AGENT).getValue()).     assertNotNull("Date value missing", request.getFirstHeader(AS2Header.DATE)).     assertNotNull("Content length value missing", request.getFirstHeader(AS2Header.CONTENT_LENGTH)).     assertTrue("Unexpected content type for message", request.getFirstHeader(AS2Header.CONTENT_TYPE).getValue().startsWith(AS2MediaType.MULTIPART_SIGNED)).     assertTrue("Request does not contain entity", request instanceof BasicHttpEntityEnclosingRequest).     HttpEntity entity = ((BasicHttpEntityEnclosingRequest) request).getEntity().     assertNotNull("Request does not contain entity", entity).     assertTrue("Unexpected request entity type", entity instanceof MultipartSignedEntity).     MultipartSignedEntity signedEntity = (MultipartSignedEntity) entity.     assertTrue("Entity not set as main body of request", signedEntity.isMainBody()).     assertTrue("Request contains invalid number of mime parts", signedEntity.getPartCount() == 2).     // Validated first mime part.     assertTrue("First mime part incorrect type ", signedEntity.getPart(0) instanceof ApplicationEDIFACTEntity).     ApplicationEDIFACTEntity ediEntity = (ApplicationEDIFACTEntity) signedEntity.getPart(0).     assertTrue("Unexpected content type for first mime part", ediEntity.getContentType().getValue().startsWith(AS2MediaType.APPLICATION_EDIFACT)).     assertFalse("First mime type set as main body of request", ediEntity.isMainBody()).     // Validate second mime part.     assertTrue("Second mime part incorrect type ", signedEntity.getPart(1) instanceof ApplicationPkcs7SignatureEntity).     ApplicationPkcs7SignatureEntity signatureEntity = (ApplicationPkcs7SignatureEntity) signedEntity.getPart(1).     assertTrue("Unexpected content type for second mime part", signatureEntity.getContentType().getValue().startsWith(AS2MediaType.APPLICATION_PKCS7_SIGNATURE)).     assertFalse("First mime type set as main body of request", signatureEntity.isMainBody()).     // Validate Signature     assertTrue("Signature is invalid", signedEntity.isValid()). }
false;public;0;61;;@Test public void receiveEnvelopedMessageTest() throws Exception {     AS2ClientConnection clientConnection = new AS2ClientConnection(AS2_VERSION, USER_AGENT, CLIENT_FQDN, TARGET_HOST, TARGET_PORT).     AS2ClientManager clientManager = new AS2ClientManager(clientConnection).     clientManager.send(EDI_MESSAGE, REQUEST_URI, SUBJECT, FROM, AS2_NAME, AS2_NAME, AS2MessageStructure.ENCRYPTED, ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII), null, null, null, null, null, DISPOSITION_NOTIFICATION_TO, SIGNED_RECEIPT_MIC_ALGORITHMS, AS2EncryptionAlgorithm.AES128_CBC, certList.toArray(new Certificate[0])).     MockEndpoint mockEndpoint = getMockEndpoint("mock:as2RcvMsgs").     mockEndpoint.expectedMinimumMessageCount(1).     mockEndpoint.setResultWaitTime(TimeUnit.MILLISECONDS.convert(30, TimeUnit.SECONDS)).     mockEndpoint.assertIsSatisfied().     final List<Exchange> exchanges = mockEndpoint.getExchanges().     assertNotNull("listen result", exchanges).     assertFalse("listen result", exchanges.isEmpty()).     LOG.debug("poll result: " + exchanges).     Exchange exchange = exchanges.get(0).     Message message = exchange.getIn().     assertNotNull("exchange message", message).     BasicHttpContext context = message.getBody(BasicHttpContext.class).     assertNotNull("context", context).     HttpCoreContext coreContext = HttpCoreContext.adapt(context).     HttpRequest request = coreContext.getRequest().     assertNotNull("request", request).     assertEquals("Unexpected method value", METHOD, request.getRequestLine().getMethod()).     assertEquals("Unexpected request URI value", REQUEST_URI, request.getRequestLine().getUri()).     assertEquals("Unexpected HTTP version value", HttpVersion.HTTP_1_1, request.getRequestLine().getProtocolVersion()).     assertEquals("Unexpected subject value", SUBJECT, request.getFirstHeader(AS2Header.SUBJECT).getValue()).     assertEquals("Unexpected from value", FROM, request.getFirstHeader(AS2Header.FROM).getValue()).     assertEquals("Unexpected AS2 version value", AS2_VERSION, request.getFirstHeader(AS2Header.AS2_VERSION).getValue()).     assertEquals("Unexpected AS2 from value", AS2_NAME, request.getFirstHeader(AS2Header.AS2_FROM).getValue()).     assertEquals("Unexpected AS2 to value", AS2_NAME, request.getFirstHeader(AS2Header.AS2_TO).getValue()).     assertTrue("Unexpected message id value", request.getFirstHeader(AS2Header.MESSAGE_ID).getValue().endsWith(CLIENT_FQDN + ">")).     assertEquals("Unexpected target host value", TARGET_HOST + ":" + TARGET_PORT, request.getFirstHeader(AS2Header.TARGET_HOST).getValue()).     assertEquals("Unexpected user agent value", USER_AGENT, request.getFirstHeader(AS2Header.USER_AGENT).getValue()).     assertNotNull("Date value missing", request.getFirstHeader(AS2Header.DATE)).     assertNotNull("Content length value missing", request.getFirstHeader(AS2Header.CONTENT_LENGTH)).     assertTrue("Unexpected content type for message", request.getFirstHeader(AS2Header.CONTENT_TYPE).getValue().startsWith(AS2MimeType.APPLICATION_PKCS7_MIME)).     assertTrue("Request does not contain entity", request instanceof BasicHttpEntityEnclosingRequest).     HttpEntity entity = ((BasicHttpEntityEnclosingRequest) request).getEntity().     assertNotNull("Request does not contain entity", entity).     assertTrue("Unexpected request entity type", entity instanceof ApplicationPkcs7MimeEnvelopedDataEntity).     ApplicationPkcs7MimeEnvelopedDataEntity envelopedEntity = (ApplicationPkcs7MimeEnvelopedDataEntity) entity.     assertTrue("Entity not set as main body of request", envelopedEntity.isMainBody()).     // Validated enveloped part.     MimeEntity encryptedEntity = envelopedEntity.getEncryptedEntity(signingKP.getPrivate()).     assertTrue("Enveloped mime part incorrect type ", encryptedEntity instanceof ApplicationEDIFACTEntity).     ApplicationEDIFACTEntity ediEntity = (ApplicationEDIFACTEntity) encryptedEntity.     assertTrue("Unexpected content type for enveloped mime part", ediEntity.getContentType().getValue().startsWith(AS2MediaType.APPLICATION_EDIFACT)).     assertFalse("Enveloped mime type set as main body of request", ediEntity.isMainBody()).     assertEquals("Unexpected content for enveloped mime part", EDI_MESSAGE.replaceAll("[\n\r]", ""), ediEntity.getEdiMessage().replaceAll("[\n\r]", "")). }
false;public;0;20;;@Test public void sendEditMessageToFailingProcessorTest() throws Exception {     AS2ClientConnection clientConnection = new AS2ClientConnection(AS2_VERSION, USER_AGENT, CLIENT_FQDN, TARGET_HOST, TARGET_PORT).     AS2ClientManager clientManager = new AS2ClientManager(clientConnection).     HttpCoreContext context = clientManager.send(EDI_MESSAGE, "/process_error", SUBJECT, FROM, AS2_NAME, AS2_NAME, AS2MessageStructure.PLAIN, ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII), null, null, null, null, null, DISPOSITION_NOTIFICATION_TO, SIGNED_RECEIPT_MIC_ALGORITHMS, null, null).     MockEndpoint mockEndpoint = getMockEndpoint("mock:as2RcvMsgs").     mockEndpoint.expectedMinimumMessageCount(0).     mockEndpoint.setResultWaitTime(TimeUnit.MILLISECONDS.convert(30, TimeUnit.SECONDS)).     mockEndpoint.assertIsSatisfied().     HttpResponse response = context.getResponse().     assertEquals("Unexpected status code for response", HttpStatus.SC_INTERNAL_SERVER_ERROR, response.getStatusLine().getStatusCode()).     HttpEntity responseEntity = response.getEntity().     String errorMessage = new String(Streams.readAll(responseEntity.getContent())).     assertEquals("", EXPECTED_EXCEPTION_MSG, errorMessage). }
false;private,static;0;23;;private static void setupSigningGenerator() throws Exception {     Security.addProvider(new BouncyCastleProvider()).     setupKeysAndCertificates().     // Create and populate certificate store.     JcaCertStore certs = new JcaCertStore(certList).     // Create capabilities vector     SMIMECapabilityVector capabilities = new SMIMECapabilityVector().     capabilities.addCapability(SMIMECapability.dES_EDE3_CBC).     capabilities.addCapability(SMIMECapability.rC2_CBC, 128).     capabilities.addCapability(SMIMECapability.dES_CBC).     // Create signing attributes     ASN1EncodableVector attributes = new ASN1EncodableVector().     attributes.add(new SMIMEEncryptionKeyPreferenceAttribute(new IssuerAndSerialNumber(new X500Name(signingCert.getIssuerDN().getName()), signingCert.getSerialNumber()))).     attributes.add(new SMIMECapabilitiesAttribute(capabilities)).     gen = SigningUtils.createSigningGenerator(AS2SignatureAlgorithm.SHA256WITHRSA, certList.toArray(new X509Certificate[0]), signingKP.getPrivate()).     gen.addCertificates(certs). }
false;private,static;0;29;;private static void setupKeysAndCertificates() throws Exception {     //      // set up our certificates     //      KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", "BC").     kpg.initialize(1024, new SecureRandom()).     String issueDN = "O=Punkhorn Software, C=US".     issueKP = kpg.generateKeyPair().     issueCert = Utils.makeCertificate(issueKP, issueDN, issueKP, issueDN).     //      // certificate we sign against     //      String signingDN = "CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US".     signingKP = kpg.generateKeyPair().     signingCert = Utils.makeCertificate(signingKP, signingDN, issueKP, issueDN).     certList = new ArrayList<>().     certList.add(signingCert).     certList.add(issueCert).     decryptingKP = signingKP. }
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     AS2Component as2Component = (AS2Component) context.getComponent("as2").     AS2Configuration configuration = as2Component.getConfiguration().     configuration.setDecryptingPrivateKey(decryptingKP.getPrivate()).     return context. }
false;public;1;3;;public void process(org.apache.camel.Exchange exchange) throws Exception {     throw new Exception(PROCESSOR_EXCEPTION_MSG). }
false;public;0;16;;public void configure() {     // test route for listen     from("as2://" + PATH_PREFIX + "/listen?requestUriPattern=/").to("mock:as2RcvMsgs").     // test route processing exception     Processor failingProcessor = new Processor() {          public void process(org.apache.camel.Exchange exchange) throws Exception {             throw new Exception(PROCESSOR_EXCEPTION_MSG).         }     }.     from("as2://" + PATH_PREFIX + "/listen?requestUriPattern=/process_error").process(failingProcessor).to("mock:as2RcvMsgs"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for listen             from("as2://" + PATH_PREFIX + "/listen?requestUriPattern=/").to("mock:as2RcvMsgs").             // test route processing exception             Processor failingProcessor = new Processor() {                  public void process(org.apache.camel.Exchange exchange) throws Exception {                     throw new Exception(PROCESSOR_EXCEPTION_MSG).                 }             }.             from("as2://" + PATH_PREFIX + "/listen?requestUriPattern=/process_error").process(failingProcessor).to("mock:as2RcvMsgs").         }     }. }
