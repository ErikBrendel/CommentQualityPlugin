commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;@Before public void setUp() throws Exception {     super.setUp().     Security.addProvider(new BouncyCastleProvider()).     setupKeysAndCertificates().     // Create and populate certificate store.     JcaCertStore certs = new JcaCertStore(certList).     // Create capabilities vector     SMIMECapabilityVector capabilities = new SMIMECapabilityVector().     capabilities.addCapability(SMIMECapability.dES_EDE3_CBC).     capabilities.addCapability(SMIMECapability.rC2_CBC, 128).     capabilities.addCapability(SMIMECapability.dES_CBC).     // Create signing attributes     ASN1EncodableVector attributes = new ASN1EncodableVector().     attributes.add(new SMIMEEncryptionKeyPreferenceAttribute(new IssuerAndSerialNumber(new X500Name(signingCert.getIssuerDN().getName()), signingCert.getSerialNumber()))).     attributes.add(new SMIMECapabilitiesAttribute(capabilities)).     for (String signingAlgorithmName : AS2SignedDataGenerator.getSupportedSignatureAlgorithmNamesForKey(signingKP.getPrivate())) {         try {             this.gen = new AS2SignedDataGenerator().             this.gen.addSignerInfoGenerator(new JcaSimpleSignerInfoGeneratorBuilder().setProvider("BC").setSignedAttributeGenerator(new AttributeTable(attributes)).build(signingAlgorithmName, signingKP.getPrivate(), signingCert)).             this.gen.addCertificates(certs).             break.         } catch (Exception e) {             this.gen = null.             continue.         }     }     if (this.gen == null) {         throw new Exception("failed to create signing generator").     } }
false;public;0;67;;@Test public void plainMessageSendTest() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelAS2.requestUri", REQUEST_URI).     // parameter type is String     headers.put("CamelAS2.subject", SUBJECT).     // parameter type is String     headers.put("CamelAS2.from", FROM).     // parameter type is String     headers.put("CamelAS2.as2From", AS2_NAME).     // parameter type is String     headers.put("CamelAS2.as2To", AS2_NAME).     // parameter type is org.apache.camel.component.as2.api.AS2MessageStructure     headers.put("CamelAS2.as2MessageStructure", AS2MessageStructure.PLAIN).     // parameter type is org.apache.http.entity.ContentType     headers.put("CamelAS2.ediMessageContentType", ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII)).     // parameter type is String     headers.put("CamelAS2.ediMessageTransferEncoding", EDI_MESSAGE_CONTENT_TRANSFER_ENCODING).     // parameter type is String     headers.put("CamelAS2.dispositionNotificationTo", "mrAS2@example.com").     final org.apache.http.protocol.HttpCoreContext result = requestBodyAndHeaders("direct://SEND", EDI_MESSAGE, headers).     assertNotNull("send result", result).     LOG.debug("send: " + result).     HttpRequest request = result.getRequest().     assertNotNull("Request", request).     assertTrue("Request does not contain body", request instanceof HttpEntityEnclosingRequest).     HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity().     assertNotNull("Request body", entity).     assertTrue("Request body does not contain EDI entity", entity instanceof ApplicationEDIEntity).     String ediMessage = ((ApplicationEDIEntity) entity).getEdiMessage().     assertEquals("EDI message is different", EDI_MESSAGE, ediMessage).     HttpResponse response = result.getResponse().     assertNotNull("Response", response).     assertTrue("Unexpected response type", HttpMessageUtils.getHeaderValue(response, AS2Header.CONTENT_TYPE).startsWith(AS2MimeType.MULTIPART_REPORT)).     assertEquals("Unexpected mime version", AS2Constants.MIME_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.MIME_VERSION)).     assertEquals("Unexpected AS2 version", EXPECTED_AS2_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_VERSION)).     assertEquals("Unexpected MDN subject", EXPECTED_MDN_SUBJECT, HttpMessageUtils.getHeaderValue(response, AS2Header.SUBJECT)).     assertEquals("Unexpected MDN from", MDN_FROM, HttpMessageUtils.getHeaderValue(response, AS2Header.FROM)).     assertEquals("Unexpected AS2 from", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_FROM)).     assertEquals("Unexpected AS2 to", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_TO)).     assertNotNull("Missing message id", HttpMessageUtils.getHeaderValue(response, AS2Header.MESSAGE_ID)).     HttpEntity responseEntity = response.getEntity().     assertNotNull("Response entity", responseEntity).     assertTrue("Unexpected response entity type", responseEntity instanceof DispositionNotificationMultipartReportEntity).     DispositionNotificationMultipartReportEntity reportEntity = (DispositionNotificationMultipartReportEntity) responseEntity.     assertEquals("Unexpected number of body parts in report", 2, reportEntity.getPartCount()).     MimeEntity firstPart = reportEntity.getPart(0).     assertEquals("Unexpected content type in first body part of report", ContentType.create(AS2MimeType.TEXT_PLAIN, AS2Charset.US_ASCII).toString(), firstPart.getContentTypeValue()).     MimeEntity secondPart = reportEntity.getPart(1).     assertEquals("Unexpected content type in second body part of report", ContentType.create(AS2MimeType.MESSAGE_DISPOSITION_NOTIFICATION, AS2Charset.US_ASCII).toString(), secondPart.getContentTypeValue()).     assertTrue("", secondPart instanceof AS2MessageDispositionNotificationEntity).     AS2MessageDispositionNotificationEntity messageDispositionNotificationEntity = (AS2MessageDispositionNotificationEntity) secondPart.     assertEquals("Unexpected value for reporting UA", ORIGIN_SERVER_NAME, messageDispositionNotificationEntity.getReportingUA()).     assertEquals("Unexpected value for final recipient", AS2_NAME, messageDispositionNotificationEntity.getFinalRecipient()).     assertEquals("Unexpected value for original message ID", HttpMessageUtils.getHeaderValue(request, AS2Header.MESSAGE_ID), messageDispositionNotificationEntity.getOriginalMessageId()).     assertEquals("Unexpected value for disposition mode", DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY, messageDispositionNotificationEntity.getDispositionMode()).     assertEquals("Unexpected value for disposition type", AS2DispositionType.PROCESSED, messageDispositionNotificationEntity.getDispositionType()). }
false;public;0;73;;@Test public void envelopedMessageSendTest() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelAS2.requestUri", REQUEST_URI).     // parameter type is String     headers.put("CamelAS2.subject", SUBJECT).     // parameter type is String     headers.put("CamelAS2.from", FROM).     // parameter type is String     headers.put("CamelAS2.as2From", AS2_NAME).     // parameter type is String     headers.put("CamelAS2.as2To", AS2_NAME).     // parameter type is org.apache.camel.component.as2.api.AS2MessageStructure     headers.put("CamelAS2.as2MessageStructure", AS2MessageStructure.ENCRYPTED).     // parameter type is org.apache.http.entity.ContentType     headers.put("CamelAS2.ediMessageContentType", ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII)).     // parameter type is String     headers.put("CamelAS2.ediMessageTransferEncoding", EDI_MESSAGE_CONTENT_TRANSFER_ENCODING).     // parameter type is String     headers.put("CamelAS2.dispositionNotificationTo", "mrAS2@example.com").     // parameter type is org.apache.camel.component.as2.api.AS2EncryptionAlgorithm     headers.put("CamelAS2.encryptingAlgorithm", AS2EncryptionAlgorithm.AES128_CBC).     // parameter type is java.security.cert.Certificate[]     headers.put("CamelAS2.encryptingCertificateChain", certList).     final org.apache.http.protocol.HttpCoreContext result = requestBodyAndHeaders("direct://SEND", EDI_MESSAGE, headers).     assertNotNull("send result", result).     LOG.debug("send: " + result).     HttpRequest request = result.getRequest().     assertNotNull("Request", request).     assertTrue("Request does not contain body", request instanceof HttpEntityEnclosingRequest).     HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity().     assertNotNull("Request body", entity).     assertTrue("Request body does not contain ApplicationPkcs7Mime entity", entity instanceof ApplicationPkcs7MimeEnvelopedDataEntity).     MimeEntity envelopeEntity = ((ApplicationPkcs7MimeEnvelopedDataEntity) entity).getEncryptedEntity(decryptingKP.getPrivate()).     assertTrue("Enveloped entity is not an EDI entity", envelopeEntity instanceof ApplicationEDIEntity).     String ediMessage = ((ApplicationEDIEntity) envelopeEntity).getEdiMessage().     assertEquals("EDI message is different", EDI_MESSAGE.replaceAll("[\n\r]", ""), ediMessage.replaceAll("[\n\r]", "")).     HttpResponse response = result.getResponse().     assertNotNull("Response", response).     assertTrue("Unexpected response type", HttpMessageUtils.getHeaderValue(response, AS2Header.CONTENT_TYPE).startsWith(AS2MimeType.MULTIPART_REPORT)).     assertEquals("Unexpected mime version", AS2Constants.MIME_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.MIME_VERSION)).     assertEquals("Unexpected AS2 version", EXPECTED_AS2_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_VERSION)).     assertEquals("Unexpected MDN subject", EXPECTED_MDN_SUBJECT, HttpMessageUtils.getHeaderValue(response, AS2Header.SUBJECT)).     assertEquals("Unexpected MDN from", MDN_FROM, HttpMessageUtils.getHeaderValue(response, AS2Header.FROM)).     assertEquals("Unexpected AS2 from", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_FROM)).     assertEquals("Unexpected AS2 to", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_TO)).     assertNotNull("Missing message id", HttpMessageUtils.getHeaderValue(response, AS2Header.MESSAGE_ID)).     HttpEntity responseEntity = response.getEntity().     assertNotNull("Response entity", responseEntity).     assertTrue("Unexpected response entity type", responseEntity instanceof DispositionNotificationMultipartReportEntity).     DispositionNotificationMultipartReportEntity reportEntity = (DispositionNotificationMultipartReportEntity) responseEntity.     assertEquals("Unexpected number of body parts in report", 2, reportEntity.getPartCount()).     MimeEntity firstPart = reportEntity.getPart(0).     assertEquals("Unexpected content type in first body part of report", ContentType.create(AS2MimeType.TEXT_PLAIN, AS2Charset.US_ASCII).toString(), firstPart.getContentTypeValue()).     MimeEntity secondPart = reportEntity.getPart(1).     assertEquals("Unexpected content type in second body part of report", ContentType.create(AS2MimeType.MESSAGE_DISPOSITION_NOTIFICATION, AS2Charset.US_ASCII).toString(), secondPart.getContentTypeValue()).     assertTrue("", secondPart instanceof AS2MessageDispositionNotificationEntity).     AS2MessageDispositionNotificationEntity messageDispositionNotificationEntity = (AS2MessageDispositionNotificationEntity) secondPart.     assertEquals("Unexpected value for reporting UA", ORIGIN_SERVER_NAME, messageDispositionNotificationEntity.getReportingUA()).     assertEquals("Unexpected value for final recipient", AS2_NAME, messageDispositionNotificationEntity.getFinalRecipient()).     assertEquals("Unexpected value for original message ID", HttpMessageUtils.getHeaderValue(request, AS2Header.MESSAGE_ID), messageDispositionNotificationEntity.getOriginalMessageId()).     assertEquals("Unexpected value for disposition mode", DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY, messageDispositionNotificationEntity.getDispositionMode()).     assertEquals("Unexpected value for disposition type", AS2DispositionType.PROCESSED, messageDispositionNotificationEntity.getDispositionType()). }
false;public;0;90;;@Test public void multipartSignedMessageTest() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelAS2.requestUri", REQUEST_URI).     // parameter type is String     headers.put("CamelAS2.subject", SUBJECT).     // parameter type is String     headers.put("CamelAS2.from", FROM).     // parameter type is String     headers.put("CamelAS2.as2From", AS2_NAME).     // parameter type is String     headers.put("CamelAS2.as2To", AS2_NAME).     // parameter type is org.apache.camel.component.as2.api.AS2MessageStructure     headers.put("CamelAS2.as2MessageStructure", AS2MessageStructure.SIGNED).     // parameter type is org.apache.http.entity.ContentType     headers.put("CamelAS2.ediMessageContentType", ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII)).     // parameter type is String     headers.put("CamelAS2.ediMessageTransferEncoding", EDI_MESSAGE_CONTENT_TRANSFER_ENCODING).     // parameter type is org.apache.camel.component.as2.api.AS2SignatureAlgorithm     headers.put("CamelAS2.signingAlgorithm", AS2SignatureAlgorithm.SHA512WITHRSA).     // parameter type is java.security.cert.Certificate[]     headers.put("CamelAS2.signingCertificateChain", certList.toArray(new Certificate[0])).     // parameter type is java.security.PrivateKey     headers.put("CamelAS2.signingPrivateKey", signingKP.getPrivate()).     // parameter type is String     headers.put("CamelAS2.dispositionNotificationTo", "mrAS2@example.com").     // parameter type is String[]     headers.put("CamelAS2.signedReceiptMicAlgorithms", SIGNED_RECEIPT_MIC_ALGORITHMS).     final org.apache.http.protocol.HttpCoreContext result = requestBodyAndHeaders("direct://SEND", EDI_MESSAGE, headers).     assertNotNull("send result", result).     LOG.debug("send: " + result).     HttpRequest request = result.getRequest().     assertNotNull("Request", request).     assertTrue("Request does not contain body", request instanceof HttpEntityEnclosingRequest).     HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity().     assertNotNull("Request body", entity).     assertTrue("Request body does not contain EDI entity", entity instanceof MultipartSignedEntity).     MimeEntity signedEntity = ((MultipartSignedEntity) entity).getSignedDataEntity().     assertTrue("Signed entity wrong type", signedEntity instanceof ApplicationEDIEntity).     ApplicationEDIEntity ediMessageEntity = (ApplicationEDIEntity) signedEntity.     String ediMessage = ediMessageEntity.getEdiMessage().     assertEquals("EDI message is different", EDI_MESSAGE, ediMessage).     HttpResponse response = result.getResponse().     assertNotNull("Response", response).     String contentTypeHeaderValue = HttpMessageUtils.getHeaderValue(response, AS2Header.CONTENT_TYPE).     ContentType responseContentType = ContentType.parse(contentTypeHeaderValue).     assertEquals("Unexpected response type", AS2MimeType.MULTIPART_SIGNED, responseContentType.getMimeType()).     assertEquals("Unexpected mime version", AS2Constants.MIME_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.MIME_VERSION)).     assertEquals("Unexpected AS2 version", EXPECTED_AS2_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_VERSION)).     assertEquals("Unexpected MDN subject", EXPECTED_MDN_SUBJECT, HttpMessageUtils.getHeaderValue(response, AS2Header.SUBJECT)).     assertEquals("Unexpected MDN from", MDN_FROM, HttpMessageUtils.getHeaderValue(response, AS2Header.FROM)).     assertEquals("Unexpected AS2 from", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_FROM)).     assertEquals("Unexpected AS2 to", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_TO)).     assertNotNull("Missing message id", HttpMessageUtils.getHeaderValue(response, AS2Header.MESSAGE_ID)).     HttpEntity responseEntity = response.getEntity().     assertNotNull("Response entity", responseEntity).     assertTrue("Unexpected response entity type", responseEntity instanceof MultipartSignedEntity).     MultipartSignedEntity responseSignedEntity = (MultipartSignedEntity) responseEntity.     assertTrue("Signature for response entity is invalid", responseSignedEntity.isValid()).     MimeEntity responseSignedDataEntity = responseSignedEntity.getSignedDataEntity().     assertTrue("Signed entity wrong type", responseSignedDataEntity instanceof DispositionNotificationMultipartReportEntity).     DispositionNotificationMultipartReportEntity reportEntity = (DispositionNotificationMultipartReportEntity) responseSignedDataEntity.     assertEquals("Unexpected number of body parts in report", 2, reportEntity.getPartCount()).     MimeEntity firstPart = reportEntity.getPart(0).     assertEquals("Unexpected content type in first body part of report", ContentType.create(AS2MimeType.TEXT_PLAIN, AS2Charset.US_ASCII).toString(), firstPart.getContentTypeValue()).     MimeEntity secondPart = reportEntity.getPart(1).     assertEquals("Unexpected content type in second body part of report", ContentType.create(AS2MimeType.MESSAGE_DISPOSITION_NOTIFICATION, AS2Charset.US_ASCII).toString(), secondPart.getContentTypeValue()).     ApplicationPkcs7SignatureEntity signatureEntity = responseSignedEntity.getSignatureEntity().     assertNotNull("Signature Entity", signatureEntity).     assertTrue("", secondPart instanceof AS2MessageDispositionNotificationEntity).     AS2MessageDispositionNotificationEntity messageDispositionNotificationEntity = (AS2MessageDispositionNotificationEntity) secondPart.     assertEquals("Unexpected value for reporting UA", ORIGIN_SERVER_NAME, messageDispositionNotificationEntity.getReportingUA()).     assertEquals("Unexpected value for final recipient", AS2_NAME, messageDispositionNotificationEntity.getFinalRecipient()).     assertEquals("Unexpected value for original message ID", HttpMessageUtils.getHeaderValue(request, AS2Header.MESSAGE_ID), messageDispositionNotificationEntity.getOriginalMessageId()).     assertEquals("Unexpected value for disposition mode", DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY, messageDispositionNotificationEntity.getDispositionMode()).     assertEquals("Unexpected value for disposition type", AS2DispositionType.PROCESSED, messageDispositionNotificationEntity.getDispositionType()).     ReceivedContentMic receivedContentMic = messageDispositionNotificationEntity.getReceivedContentMic().     ReceivedContentMic computedContentMic = MicUtils.createReceivedContentMic((HttpEntityEnclosingRequest) request, decryptingKP.getPrivate()).     assertEquals("Received content MIC does not match computed", computedContentMic.getEncodedMessageDigest(), receivedContentMic.getEncodedMessageDigest()). }
false;public;0;86;;@Test public void compressedMessageTest() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelAS2.requestUri", REQUEST_URI).     // parameter type is String     headers.put("CamelAS2.subject", SUBJECT).     // parameter type is String     headers.put("CamelAS2.from", FROM).     // parameter type is String     headers.put("CamelAS2.as2From", AS2_NAME).     // parameter type is String     headers.put("CamelAS2.as2To", AS2_NAME).     // parameter type is org.apache.camel.component.as2.api.AS2MessageStructure     headers.put("CamelAS2.as2MessageStructure", AS2MessageStructure.PLAIN_COMPRESSED).     // parameter type is org.apache.http.entity.ContentType     headers.put("CamelAS2.ediMessageContentType", ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII)).     // parameter type is String     headers.put("CamelAS2.ediMessageTransferEncoding", EDI_MESSAGE_CONTENT_TRANSFER_ENCODING).     // parameter type is org.apache.camel.component.as2.api.AS2CompressionAlgorithm     headers.put("CamelAS2.compressionAlgorithm", AS2CompressionAlgorithm.ZLIB).     // parameter type is String     headers.put("CamelAS2.dispositionNotificationTo", "mrAS2@example.com").     // parameter type is String[]     headers.put("CamelAS2.signedReceiptMicAlgorithms", SIGNED_RECEIPT_MIC_ALGORITHMS).     final org.apache.http.protocol.HttpCoreContext result = requestBodyAndHeaders("direct://SEND", EDI_MESSAGE, headers).     assertNotNull("send result", result).     LOG.debug("send: " + result).     HttpRequest request = result.getRequest().     assertNotNull("Request", request).     assertTrue("Request does not contain body", request instanceof HttpEntityEnclosingRequest).     HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity().     assertNotNull("Request body", entity).     assertTrue("Request body does not contain EDI entity", entity instanceof ApplicationPkcs7MimeCompressedDataEntity).     MimeEntity compressedEntity = ((ApplicationPkcs7MimeCompressedDataEntity) entity).getCompressedEntity(new ZlibExpanderProvider()).     assertTrue("Signed entity wrong type", compressedEntity instanceof ApplicationEDIEntity).     ApplicationEDIEntity ediMessageEntity = (ApplicationEDIEntity) compressedEntity.     String ediMessage = ediMessageEntity.getEdiMessage().     assertEquals("EDI message is different", EDI_MESSAGE.replaceAll("[\n\r]", ""), ediMessage.replaceAll("[\n\r]", "")).     HttpResponse response = result.getResponse().     assertNotNull("Response", response).     String contentTypeHeaderValue = HttpMessageUtils.getHeaderValue(response, AS2Header.CONTENT_TYPE).     ContentType responseContentType = ContentType.parse(contentTypeHeaderValue).     assertEquals("Unexpected response type", AS2MimeType.MULTIPART_SIGNED, responseContentType.getMimeType()).     assertEquals("Unexpected mime version", AS2Constants.MIME_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.MIME_VERSION)).     assertEquals("Unexpected AS2 version", EXPECTED_AS2_VERSION, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_VERSION)).     assertEquals("Unexpected MDN subject", EXPECTED_MDN_SUBJECT, HttpMessageUtils.getHeaderValue(response, AS2Header.SUBJECT)).     assertEquals("Unexpected MDN from", MDN_FROM, HttpMessageUtils.getHeaderValue(response, AS2Header.FROM)).     assertEquals("Unexpected AS2 from", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_FROM)).     assertEquals("Unexpected AS2 to", AS2_NAME, HttpMessageUtils.getHeaderValue(response, AS2Header.AS2_TO)).     assertNotNull("Missing message id", HttpMessageUtils.getHeaderValue(response, AS2Header.MESSAGE_ID)).     HttpEntity responseEntity = response.getEntity().     assertNotNull("Response entity", responseEntity).     assertTrue("Unexpected response entity type", responseEntity instanceof MultipartSignedEntity).     MultipartSignedEntity responseSignedEntity = (MultipartSignedEntity) responseEntity.     assertTrue("Signature for response entity is invalid", responseSignedEntity.isValid()).     MimeEntity responseSignedDataEntity = responseSignedEntity.getSignedDataEntity().     assertTrue("Signed entity wrong type", responseSignedDataEntity instanceof DispositionNotificationMultipartReportEntity).     DispositionNotificationMultipartReportEntity reportEntity = (DispositionNotificationMultipartReportEntity) responseSignedDataEntity.     assertEquals("Unexpected number of body parts in report", 2, reportEntity.getPartCount()).     MimeEntity firstPart = reportEntity.getPart(0).     assertEquals("Unexpected content type in first body part of report", ContentType.create(AS2MimeType.TEXT_PLAIN, AS2Charset.US_ASCII).toString(), firstPart.getContentTypeValue()).     MimeEntity secondPart = reportEntity.getPart(1).     assertEquals("Unexpected content type in second body part of report", ContentType.create(AS2MimeType.MESSAGE_DISPOSITION_NOTIFICATION, AS2Charset.US_ASCII).toString(), secondPart.getContentTypeValue()).     ApplicationPkcs7SignatureEntity signatureEntity = responseSignedEntity.getSignatureEntity().     assertNotNull("Signature Entity", signatureEntity).     assertTrue("", secondPart instanceof AS2MessageDispositionNotificationEntity).     AS2MessageDispositionNotificationEntity messageDispositionNotificationEntity = (AS2MessageDispositionNotificationEntity) secondPart.     assertEquals("Unexpected value for reporting UA", ORIGIN_SERVER_NAME, messageDispositionNotificationEntity.getReportingUA()).     assertEquals("Unexpected value for final recipient", AS2_NAME, messageDispositionNotificationEntity.getFinalRecipient()).     assertEquals("Unexpected value for original message ID", HttpMessageUtils.getHeaderValue(request, AS2Header.MESSAGE_ID), messageDispositionNotificationEntity.getOriginalMessageId()).     assertEquals("Unexpected value for disposition mode", DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY, messageDispositionNotificationEntity.getDispositionMode()).     assertEquals("Unexpected value for disposition type", AS2DispositionType.PROCESSED, messageDispositionNotificationEntity.getDispositionType()).     ReceivedContentMic receivedContentMic = messageDispositionNotificationEntity.getReceivedContentMic().     ReceivedContentMic computedContentMic = MicUtils.createReceivedContentMic((HttpEntityEnclosingRequest) request, decryptingKP.getPrivate()).     assertEquals("Received content MIC does not match computed", computedContentMic.getEncodedMessageDigest(), receivedContentMic.getEncodedMessageDigest()). }
false;public;0;43;;@Test public void asyncMDNTest() throws Exception {     AS2AsynchronousMDNManager mdnManager = new AS2AsynchronousMDNManager(AS2_VERSION, ORIGIN_SERVER_NAME, SERVER_FQDN, certList.toArray(new X509Certificate[0]), signingKP.getPrivate()).     // Create plain edi request message to acknowledge     ApplicationEDIEntity ediEntity = EntityUtils.createEDIEntity(EDI_MESSAGE, ContentType.create(AS2MediaType.APPLICATION_EDIFACT, AS2Charset.US_ASCII), null, false).     HttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest("POST", REQUEST_URI).     HttpMessageUtils.setHeaderValue(request, AS2Header.SUBJECT, SUBJECT).     String httpdate = DATE_GENERATOR.getCurrentDate().     HttpMessageUtils.setHeaderValue(request, AS2Header.DATE, httpdate).     HttpMessageUtils.setHeaderValue(request, AS2Header.AS2_TO, AS2_NAME).     HttpMessageUtils.setHeaderValue(request, AS2Header.AS2_FROM, AS2_NAME).     String originalMessageId = AS2Utils.createMessageId(SERVER_FQDN).     HttpMessageUtils.setHeaderValue(request, AS2Header.MESSAGE_ID, originalMessageId).     HttpMessageUtils.setHeaderValue(request, AS2Header.DISPOSITION_NOTIFICATION_OPTIONS, DISPOSITION_NOTIFICATION_OPTIONS).     EntityUtils.setMessageEntity(request, ediEntity).     // Create response for MDN creation.     HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 200, "OK").     httpdate = DATE_GENERATOR.getCurrentDate().     response.setHeader(AS2Header.DATE, httpdate).     response.setHeader(AS2Header.SERVER, REPORTING_UA).     // Create a receipt for edi message     Map<String, String> extensionFields = new HashMap<String, String>().     extensionFields.put("Original-Recipient", "rfc822." + AS2_NAME).     AS2DispositionModifier dispositionModifier = AS2DispositionModifier.createWarning("AS2 is cool!").     String[] failureFields = new String[] { "failure-field-1" }.     String[] errorFields = new String[] { "error-field-1" }.     String[] warningFields = new String[] { "warning-field-1" }.     DispositionNotificationMultipartReportEntity mdn = new DispositionNotificationMultipartReportEntity(request, response, DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY, AS2DispositionType.PROCESSED, dispositionModifier, failureFields, errorFields, warningFields, extensionFields, null, "boundary", true, serverSigningKP.getPrivate(), "Got your message!").     // Send MDN     @SuppressWarnings("unused")     HttpCoreContext httpContext = mdnManager.send(mdn, RECIPIENT_DELIVERY_ADDRESS). }
false;public,static;0;5;;@BeforeClass public static void setupTest() throws Exception {     setupServerKeysAndCertificates().     receiveTestMessages(). }
false;public,static;0;6;;@AfterClass public static void teardownTest() throws Exception {     if (serverConnection != null) {         serverConnection.stopListening("/").     } }
false;public;3;7;;@Override public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     LOG.info("Received test message: " + request).     context.setAttribute(AS2ServerManager.FROM, MDN_FROM).     context.setAttribute(AS2ServerManager.SUBJECT, MDN_SUBJECT_PREFIX). }
false;public;1;5;;public void process(org.apache.camel.Exchange exchange) throws Exception {     HttpMessage message = exchange.getIn(HttpMessage.class).     @SuppressWarnings("unused")     String body = message.getBody(String.class). }
false;public;0;14;;public void configure() {     Processor proc = new Processor() {          public void process(org.apache.camel.Exchange exchange) throws Exception {             HttpMessage message = exchange.getIn(HttpMessage.class).             @SuppressWarnings("unused")             String body = message.getBody(String.class).         }     }.     // test route for send     from("direct://SEND").to("as2://" + PATH_PREFIX + "/send?inBody=ediMessage").     from("jetty:http://localhost:" + MDN_TARGET_PORT + "/handle-receipts").process(proc). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             Processor proc = new Processor() {                  public void process(org.apache.camel.Exchange exchange) throws Exception {                     HttpMessage message = exchange.getIn(HttpMessage.class).                     @SuppressWarnings("unused")                     String body = message.getBody(String.class).                 }             }.             // test route for send             from("direct://SEND").to("as2://" + PATH_PREFIX + "/send?inBody=ediMessage").             from("jetty:http://localhost:" + MDN_TARGET_PORT + "/handle-receipts").process(proc).         }     }. }
false;private,static;0;28;;private static void setupServerKeysAndCertificates() throws Exception {     Security.addProvider(new BouncyCastleProvider()).     //      // set up our certificates     //      KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", "BC").     kpg.initialize(1024, new SecureRandom()).     String issueDN = "O=Punkhorn Software, C=US".     KeyPair issueKP = kpg.generateKeyPair().     X509Certificate issueCert = Utils.makeCertificate(issueKP, issueDN, issueKP, issueDN).     //      // certificate we sign against     //      String signingDN = "CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US".     serverSigningKP = kpg.generateKeyPair().     X509Certificate signingCert = Utils.makeCertificate(serverSigningKP, signingDN, issueKP, issueDN).     serverCertList = new ArrayList<>().     serverCertList.add(signingCert).     serverCertList.add(issueCert). }
false;private,static;0;5;;private static void receiveTestMessages() throws IOException {     serverConnection = new AS2ServerConnection(AS2_VERSION, ORIGIN_SERVER_NAME, SERVER_FQDN, PARTNER_TARGET_PORT, AS2SignatureAlgorithm.SHA256WITHRSA, serverCertList.toArray(new Certificate[0]), serverSigningKP.getPrivate(), serverSigningKP.getPrivate()).     serverConnection.listen("/", new RequestHandler()). }
false;private;0;29;;private void setupKeysAndCertificates() throws Exception {     //      // set up our certificates     //      KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", "BC").     kpg.initialize(1024, new SecureRandom()).     String issueDN = "O=Punkhorn Software, C=US".     issueKP = kpg.generateKeyPair().     issueCert = Utils.makeCertificate(issueKP, issueDN, issueKP, issueDN).     //      // certificate we sign against     //      String signingDN = "CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US".     signingKP = kpg.generateKeyPair().     signingCert = Utils.makeCertificate(signingKP, signingDN, issueKP, issueDN).     certList = new ArrayList<>().     certList.add(signingCert).     certList.add(issueCert).     // keys used to encrypt/decrypt     decryptingKP = signingKP. }
