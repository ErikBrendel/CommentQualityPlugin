commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void interceptPropertyNames(Set<String> propertyNames) {     propertyNames.add(HANDLER_PROPERTY). }
false;protected;0;4;;@Override protected int poll() throws Exception {     return 0. }
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     // invoke the API method to start listening     ApiMethodHelper.invokeMethod(apiProxy, apiMethod, properties). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     String requestUri = (String) properties.get(REQUEST_URI_PROPERTY).     apiProxy.stopListening(requestUri).     super.doStop(). }
false;public;3;30;;@Override public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {     Exception exception = null.     try {         if (request instanceof HttpEntityEnclosingRequest) {             EntityParser.parseAS2MessageEntity(request).             // TODO derive last to parameters from configuration.             apiProxy.handleMDNResponse((HttpEntityEnclosingRequest) request, response, context, "MDN Response", "Camel AS2 Server Endpoint").         }         Exchange exchange = getEndpoint().createExchange().         exchange.getIn().setBody(context).         try {             // send message to next processor in the route             getProcessor().process(exchange).         } finally {             // check if an exception occurred and was not handled             exception = exchange.getException().         }     } catch (Exception e) {         log.info("Failed to process AS2 message", e).         exception = e.     }     if (exception != null) {         throw new HttpException("Failed to process AS2 message: " + exception.getMessage(), exception).     } }
