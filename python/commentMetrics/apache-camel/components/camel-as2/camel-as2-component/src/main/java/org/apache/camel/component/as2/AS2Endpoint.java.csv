commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public AS2Configuration getAs2Configuration() {     return configuration. }
false;public;0;3;;public AS2ClientConnection getAS2ClientConnection() {     return as2ClientConnection. }
false;public;0;3;;public AS2ServerConnection getAS2ServerConnection() {     return as2ServerConnection. }
false;public;0;3;;public Producer createProducer() throws Exception {     return new AS2Producer(this). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final AS2Consumer consumer = new AS2Consumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<AS2Configuration> getPropertiesHelper() {     return AS2PropertiesHelper.getHelper(). }
false;protected;0;3;;protected String getThreadProfileName() {     return AS2Constants.THREAD_PROFILE_NAME. }
false;protected;0;14;;@Override protected void afterConfigureProperties() {     // create HTTP connection eagerly, a good way to validate configuration     switch(apiName) {         case CLIENT:             createAS2ClientConnection().             break.         case SERVER:             createAS2ServerConnection().             break.         default:             break.     } }
false;public;2;7;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     if (apiProxy == null) {         createApiProxy(method, args).     }     return apiProxy. }
false;private;2;12;;private void createApiProxy(ApiMethod method, Map<String, Object> args) {     switch(apiName) {         case CLIENT:             apiProxy = new AS2ClientManager(getAS2ClientConnection()).             break.         case SERVER:             apiProxy = new AS2ServerManager(getAS2ServerConnection()).             break.         default:             throw new IllegalArgumentException("Invalid API name " + apiName).     } }
false;private;0;10;;private void createAS2ClientConnection() {     try {         as2ClientConnection = AS2ConnectionHelper.createAS2ClientConnection(configuration).     } catch (UnknownHostException e) {         throw new RuntimeCamelException(String.format("Client HTTP connection failed: Unknown target host '%s'", configuration.getTargetHostname())).     } catch (IOException e) {         throw new RuntimeCamelException("Client HTTP connection failed", e).     } }
false;private;0;7;;private void createAS2ServerConnection() {     try {         as2ServerConnection = AS2ConnectionHelper.createAS2ServerConnection(configuration).     } catch (IOException e) {         throw new RuntimeCamelException("Server HTTP connection failed", e).     } }
