commented;modifiers;parameterAmount;loc;comment;code
false;private;0;68;;private String getApiUrl() throws Exception {     StringBuilder url = new StringBuilder().     String function = endpoint.getConfig().getFunction().     switch(YammerFunctionType.fromUri(function)) {         case MESSAGES:             url.append(YammerConstants.YAMMER_BASE_API_URL).             url.append(function).             url.append(".json").             break.         case ALGO:         case FOLLOWING:         case MY_FEED:         case PRIVATE:         case SENT:         case RECEIVED:             url.append(YammerConstants.YAMMER_BASE_API_URL).             url.append("messages/").             url.append(function).             url.append(".json").             break.         default:             throw new Exception(String.format("%s is not a valid Yammer message function type.", function)).     }     StringBuilder args = new StringBuilder().     int limit = endpoint.getConfig().getLimit().     if (limit > 0) {         args.append("limit=").         args.append(limit).     }     int olderThan = endpoint.getConfig().getOlderThan().     if (olderThan > 0) {         if (args.length() > 0) {             args.append("&").         }         args.append("older_than=").         args.append(olderThan).     }     int newerThan = endpoint.getConfig().getNewerThan().     if (newerThan > 0) {         if (args.length() > 0) {             args.append("&").         }         args.append("newer_than=").         args.append(newerThan).     }     String threaded = endpoint.getConfig().getThreaded().     if (ObjectHelper.isNotEmpty(threaded) && ("true".equals(threaded) || "extended".equals(threaded))) {         if (args.length() > 0) {             args.append("&").         }         args.append("threaded=").         args.append(threaded).     }     if (args.length() > 0) {         url.append("?").         url.append(args).     }     return url.toString(). }
false;protected;0;26;;@Override protected int poll() throws Exception {     Exchange exchange = endpoint.createExchange().     try {         String jsonBody = endpoint.getConfig().getRequestor(apiUrl).get().         if (!endpoint.getConfig().isUseJson()) {             ObjectMapper jsonMapper = new ObjectMapper().             Messages messages = jsonMapper.readValue(jsonBody, Messages.class).             exchange.getIn().setBody(messages).         } else {             exchange.getIn().setBody(jsonBody).         }         // send message to next processor in the route         getProcessor().process(exchange).         // number of messages polled         return 1.     } finally {         // log exception if an exception occurred and was not handled         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     } }
