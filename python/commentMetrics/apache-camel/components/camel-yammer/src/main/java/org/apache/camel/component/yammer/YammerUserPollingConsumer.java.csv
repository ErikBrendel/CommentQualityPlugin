commented;modifiers;parameterAmount;loc;comment;code
false;private;0;22;;private String getApiUrl() throws Exception {     StringBuilder url = new StringBuilder().     String function = endpoint.getConfig().getFunction().     switch(YammerFunctionType.fromUri(function)) {         case USERS:             url.append(YammerConstants.YAMMER_BASE_API_URL).             url.append(function).             url.append(".json").             break.         case CURRENT:             url.append(YammerConstants.YAMMER_BASE_API_URL).             url.append("users/").             url.append(function).             url.append(".json").             break.         default:             throw new Exception(String.format("%s is not a valid Yammer user function type.", function)).     }     return url.toString(). }
false;protected;0;38;;@Override protected int poll() throws Exception {     Exchange exchange = endpoint.createExchange().     try {         String jsonBody = endpoint.getConfig().getRequestor(apiUrl).get().         if (!endpoint.getConfig().isUseJson()) {             ObjectMapper jsonMapper = new ObjectMapper().             String function = endpoint.getConfig().getFunction().             switch(YammerFunctionType.fromUri(function)) {                 case USERS:                     List<User> users = jsonMapper.readValue(jsonBody, jsonMapper.getTypeFactory().constructCollectionType(List.class, User.class)).                     exchange.getIn().setBody(users).                     break.                 case CURRENT:                     User user = jsonMapper.readValue(jsonBody, jsonMapper.getTypeFactory().constructType(User.class)).                     exchange.getIn().setBody(user).                     break.                 default:                     throw new Exception(String.format("%s is not a valid Yammer user function type.", function)).             }         } else {             exchange.getIn().setBody(jsonBody).         }         // send message to next processor in the route         getProcessor().process(exchange).         // number of messages polled         return 1.     } finally {         // log exception if an exception occurred and was not handled         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     } }
