commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getConsumerKey() {     return consumerKey. }
true;public;1;3;/**  * The consumer key  */ ;/**  * The consumer key  */ public void setConsumerKey(String consumerKey) {     this.consumerKey = consumerKey. }
false;public;0;3;;public String getConsumerSecret() {     return consumerSecret. }
true;public;1;3;/**  * The consumer secret  */ ;/**  * The consumer secret  */ public void setConsumerSecret(String consumerSecret) {     this.consumerSecret = consumerSecret. }
false;public;0;3;;public long getDelay() {     return delay. }
true;public;1;3;/**  * Delay between polling in millis  */ ;/**  * Delay between polling in millis  */ public void setDelay(long delay) {     this.delay = delay. }
false;public;0;3;;public String getAccessToken() {     return accessToken. }
true;public;1;3;/**  * The access token  */ ;/**  * The access token  */ public void setAccessToken(String accessToken) {     this.accessToken = accessToken. }
false;public;0;3;;public YammerFunctionType getFunctionType() {     return functionType. }
true;public;1;3;/**  * The function to use  */ ;/**  * The function to use  */ public void setFunctionType(YammerFunctionType functionType) {     this.functionType = functionType. }
false;public;0;3;;public String getFunction() {     return function. }
true;public;1;3;/**  * The function to use  */ ;/**  * The function to use  */ public void setFunction(String function) {     this.function = function. }
false;public;0;3;;public boolean isUseJson() {     return useJson. }
true;public;1;3;/**  * Set to true if you want to use raw JSON rather than converting to POJOs.  */ ;/**  * Set to true if you want to use raw JSON rather than converting to POJOs.  */ public void setUseJson(boolean useJson) {     this.useJson = useJson. }
false;public;1;6;;public ApiRequestor getRequestor(String apiUrl) throws Exception {     if (requestor == null) {         requestor = new ScribeApiRequestor(apiUrl, getAccessToken()).     }     return requestor. }
false;public;1;3;;public void setRequestor(ApiRequestor requestor) {     this.requestor = requestor. }
false;public;0;3;;public int getLimit() {     return limit. }
true;public;1;3;/**  * Return only the specified number of messages. Works for threaded=true and threaded=extended.  */ ;/**  * Return only the specified number of messages. Works for threaded=true and threaded=extended.  */ public void setLimit(int limit) {     this.limit = limit. }
false;public;0;3;;public int getOlderThan() {     return olderThan. }
true;public;1;3;/**  * Returns messages older than the message ID specified as a numeric string.  * This is useful for paginating messages. For example, if you're currently viewing 20 messages and the oldest is number 2912,  * you could append "?olderThan=2912″ to your request to get the 20 messages prior to those you're seeing.  */ ;/**  * Returns messages older than the message ID specified as a numeric string.  * This is useful for paginating messages. For example, if you're currently viewing 20 messages and the oldest is number 2912,  * you could append "?olderThan=2912″ to your request to get the 20 messages prior to those you're seeing.  */ public void setOlderThan(int olderThan) {     this.olderThan = olderThan. }
false;public;0;3;;public int getNewerThan() {     return newerThan. }
true;public;1;3;/**  * Returns messages newer than the message ID specified as a numeric string. This should be used when polling for new messages.  * If you're looking at messages, and the most recent message returned is 3516, you can make a request with the parameter "?newerThan=3516″  * to ensure that you do not get duplicate copies of messages already on your page.  */ ;/**  * Returns messages newer than the message ID specified as a numeric string. This should be used when polling for new messages.  * If you're looking at messages, and the most recent message returned is 3516, you can make a request with the parameter "?newerThan=3516″  * to ensure that you do not get duplicate copies of messages already on your page.  */ public void setNewerThan(int newerThan) {     this.newerThan = newerThan. }
false;public;0;3;;public String getThreaded() {     return threaded. }
true;public;1;3;/**  * threaded=true will only return the first message in each thread.  * This parameter is intended for apps which display message threads collapsed.  * threaded=extended will return the thread starter messages in order of most recently active as well as the  * two most recent messages, as they are viewed in the default view on the Yammer web interface.  */ ;/**  * threaded=true will only return the first message in each thread.  * This parameter is intended for apps which display message threads collapsed.  * threaded=extended will return the thread starter messages in order of most recently active as well as the  * two most recent messages, as they are viewed in the default view on the Yammer web interface.  */ public void setThreaded(String threaded) {     this.threaded = threaded. }
false;public;0;3;;public String getUserId() {     return userId. }
true;public;1;3;/**  * The user id  */ ;/**  * The user id  */ public void setUserId(String userId) {     this.userId = userId. }
