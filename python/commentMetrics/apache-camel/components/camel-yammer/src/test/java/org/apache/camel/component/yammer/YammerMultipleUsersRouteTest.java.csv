commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@SuppressWarnings("unchecked") @Test public void testConsumeAllUsers() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     template.sendBody("direct:start", "overwrite me").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     List<User> users = exchange.getIn().getBody(List.class).     assertEquals(2, users.size()).     assertEquals("Joe Camel", users.get(0).getFullName()).     assertEquals("jcamel@redhat.com", users.get(0).getContact().getEmailAddresses().get(0).getAddress()).     assertEquals("Joe Camel Jr", users.get(1).getFullName()).     assertEquals("jcameljr@redhat.com", users.get(1).getContact().getEmailAddresses().get(0).getAddress()). }
false;protected;0;4;;@Override protected String jsonFile() {     return "/users.json". }
false;public;0;3;;public void configure() {     from("direct:start").pollEnrich("yammer:users?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").pollEnrich("yammer:users?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken").to("mock:result").         }     }. }
