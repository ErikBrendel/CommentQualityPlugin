commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testConsumeAllUsers() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     User user = exchange.getIn().getBody(User.class).     assertEquals("Joe Camel", user.getFullName()).     assertEquals("jcamel@redhat.com", user.getContact().getEmailAddresses().get(0).getAddress()). }
false;protected;0;4;;@Override protected String jsonFile() {     return "/user.json". }
false;public;0;4;;public void configure() {     // using dummy keys here since we are mocking out calls to yammer.com with static json. in a real app, please use your own keys!     from("yammer:current?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // using dummy keys here since we are mocking out calls to yammer.com with static json. in a real app, please use your own keys!             from("yammer:current?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken").to("mock:result").         }     }. }
