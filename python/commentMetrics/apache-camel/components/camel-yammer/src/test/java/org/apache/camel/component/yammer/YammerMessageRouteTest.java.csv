commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testConsumeAllMessages() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     Messages messages = exchange.getIn().getBody(Messages.class).     assertEquals(2, messages.getMessages().size()).     assertEquals("Testing yammer API...", messages.getMessages().get(0).getBody().getPlain()).     assertEquals("(Principal Software Engineer) has #joined the redhat.com network. Take a moment to welcome Jonathan.", messages.getMessages().get(1).getBody().getPlain()). }
false;public;0;4;;public void configure() {     // using dummy keys here since we are mocking out calls to yammer.com with static json. in a real app, please use your own keys!     from("yammer:messages?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // using dummy keys here since we are mocking out calls to yammer.com with static json. in a real app, please use your own keys!             from("yammer:messages?consumerKey=aConsumerKey&consumerSecret=aConsumerSecretKey&accessToken=aAccessToken").to("mock:result").         }     }. }
