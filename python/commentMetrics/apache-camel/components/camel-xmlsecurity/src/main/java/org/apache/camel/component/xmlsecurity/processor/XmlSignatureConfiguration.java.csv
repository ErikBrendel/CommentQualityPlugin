commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return context. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.context = camelContext. }
false;public;0;3;;public URIDereferencer getUriDereferencer() {     return uriDereferencer. }
true;public;1;3;/**  * If you want to restrict the remote access via reference URIs, you can set  * an own dereferencer. Optional parameter. If not set the provider default  * dereferencer is used which can resolve URI fragments, HTTP, file and  * XPpointer URIs.  * <p>  * Attention: The implementation is provider dependent!  *  * @see XMLCryptoContext#setURIDereferencer(URIDereferencer)  */ ;/**  * If you want to restrict the remote access via reference URIs, you can set  * an own dereferencer. Optional parameter. If not set the provider default  * dereferencer is used which can resolve URI fragments, HTTP, file and  * XPpointer URIs.  * <p>  * Attention: The implementation is provider dependent!  *  * @see XMLCryptoContext#setURIDereferencer(URIDereferencer)  */ public void setUriDereferencer(URIDereferencer uriDereferencer) {     this.uriDereferencer = uriDereferencer. }
false;public;0;3;;public String getBaseUri() {     return baseUri. }
true;public;1;3;/**  * You can set a base URI which is used in the URI dereferencing. Relative  * URIs are then concatenated with the base URI.  *  * @see XMLCryptoContext#setBaseURI(String)  */ ;/**  * You can set a base URI which is used in the URI dereferencing. Relative  * URIs are then concatenated with the base URI.  *  * @see XMLCryptoContext#setBaseURI(String)  */ public void setBaseUri(String baseUri) {     this.baseUri = baseUri. }
false;public;0;3;;public Map<String, ? extends Object> getCryptoContextProperties() {     return cryptoContextProperties. }
true;public;1;3;/**  * Sets the crypto context properties. See  * {@link XMLCryptoContext#setProperty(String, Object)}. Possible properties  * are defined in {@link XMLSignContext} an {@link XMLValidateContext} (see  * Supported Properties).  * <p>  * The following properties are set by default to the value  * {@link Boolean#TRUE} for the XML validation. If you want to switch these  * features off you must set the property value to {@link Boolean#FALSE}.  * <ul>  * <li><code>"org.jcp.xml.dsig.validateManifests"</code></li>  * <li><code>"javax.xml.crypto.dsig.cacheReference"</code></li>  * </ul>  */ ;/**  * Sets the crypto context properties. See  * {@link XMLCryptoContext#setProperty(String, Object)}. Possible properties  * are defined in {@link XMLSignContext} an {@link XMLValidateContext} (see  * Supported Properties).  * <p>  * The following properties are set by default to the value  * {@link Boolean#TRUE} for the XML validation. If you want to switch these  * features off you must set the property value to {@link Boolean#FALSE}.  * <ul>  * <li><code>"org.jcp.xml.dsig.validateManifests"</code></li>  * <li><code>"javax.xml.crypto.dsig.cacheReference"</code></li>  * </ul>  */ public void setCryptoContextProperties(Map<String, ? extends Object> cryptoContextProperties) {     this.cryptoContextProperties = cryptoContextProperties. }
false;public;0;3;;public Boolean getDisallowDoctypeDecl() {     return disallowDoctypeDecl. }
true;public;1;3;/**  * Disallows that the incoming XML document contains DTD DOCTYPE  * declaration. The default value is {@link Boolean#TRUE}.  *  * @param disallowDoctypeDecl if set to {@link Boolean#FALSE} then DOCTYPE declaration is allowed, otherwise not  */ ;/**  * Disallows that the incoming XML document contains DTD DOCTYPE  * declaration. The default value is {@link Boolean#TRUE}.  *  * @param disallowDoctypeDecl if set to {@link Boolean#FALSE} then DOCTYPE declaration is allowed, otherwise not  */ public void setDisallowDoctypeDecl(Boolean disallowDoctypeDecl) {     this.disallowDoctypeDecl = disallowDoctypeDecl. }
false;public;0;3;;public Boolean getOmitXmlDeclaration() {     return omitXmlDeclaration. }
true;public;1;3;/**  * Indicator whether the XML declaration in the outgoing message body should  * be omitted. Default value is <code>false</code>. Can be overwritten by  * the header {@link XmlSignatureConstants#HEADER_OMIT_XML_DECLARATION}.  */ ;/**  * Indicator whether the XML declaration in the outgoing message body should  * be omitted. Default value is <code>false</code>. Can be overwritten by  * the header {@link XmlSignatureConstants#HEADER_OMIT_XML_DECLARATION}.  */ public void setOmitXmlDeclaration(Boolean omitXmlDeclaration) {     this.omitXmlDeclaration = omitXmlDeclaration. }
true;public;0;3;/**  * Determines if the XML signature specific headers be cleared after signing  * and verification. Defaults to true.  *  * @return true if the Signature headers should be unset, false otherwise  */ ;/**  * Determines if the XML signature specific headers be cleared after signing  * and verification. Defaults to true.  *  * @return true if the Signature headers should be unset, false otherwise  */ public Boolean getClearHeaders() {     return clearHeaders. }
true;public;1;3;/**  * Determines if the XML signature specific headers be cleared after signing  * and verification. Defaults to true.  */ ;/**  * Determines if the XML signature specific headers be cleared after signing  * and verification. Defaults to true.  */ public void setClearHeaders(Boolean clearHeaders) {     this.clearHeaders = clearHeaders. }
false;public;0;3;;public String getSchemaResourceUri() {     return schemaResourceUri. }
true;public;1;3;/**  * Classpath to the XML Schema. Must be specified in the detached XML  * Signature case for determining the ID attributes, might be set in the  * enveloped and enveloping case. If set, then the XML document is validated  * with the specified XML schema. The schema resource URI can be overwritten  * by the header {@link XmlSignatureConstants#HEADER_SCHEMA_RESOURCE_URI}.  */ ;/**  * Classpath to the XML Schema. Must be specified in the detached XML  * Signature case for determining the ID attributes, might be set in the  * enveloped and enveloping case. If set, then the XML document is validated  * with the specified XML schema. The schema resource URI can be overwritten  * by the header {@link XmlSignatureConstants#HEADER_SCHEMA_RESOURCE_URI}.  */ public void setSchemaResourceUri(String schemaResourceUri) {     this.schemaResourceUri = schemaResourceUri. }
false;public;0;3;;public String getOutputXmlEncoding() {     return outputXmlEncoding. }
true;public;1;3;/**  * The character encoding of the resulting signed XML document. If  * <code>null</code> then the encoding of the original XML document is used.  */ ;/**  * The character encoding of the resulting signed XML document. If  * <code>null</code> then the encoding of the original XML document is used.  */ public void setOutputXmlEncoding(String outputXmlEncoding) {     this.outputXmlEncoding = outputXmlEncoding. }
