commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Maps the references and objects of an XML signature to the camel message.  *  * @param input  *            input  * @param output  *            output message  * @throws Exception  */ ;/**  * Maps the references and objects of an XML signature to the camel message.  *  * @param input  *            input  * @param output  *            output message  * @throws Exception  */ void mapToMessage(Input input, Message output) throws Exception.
true;;0;1;/**  * Returns the references. If there were several signatures then all  * references of all signatures are returned.  *  * @return list of references, cannot be <code>null</code>  */ ;/**  * Returns the references. If there were several signatures then all  * references of all signatures are returned.  *  * @return list of references, cannot be <code>null</code>  */ List<Reference> getReferences().
true;;0;1;/**  * Returns the objects. If there were several signatures in the XML  * document then all objects of all signatures are returned.  *  * @return objects, cannot be <code>null</code>  */ ;/**  * Returns the objects. If there were several signatures in the XML  * document then all objects of all signatures are returned.  *  * @return objects, cannot be <code>null</code>  */ List<XMLObject> getObjects().
true;;0;1;/**  * Message body containing the XML signature as DOM.  */ ;/**  * Message body containing the XML signature as DOM.  */ Document getMessageBodyDocument().
true;;0;1;/**  * Indicator whether XML declaration should be omitted. Configured in  * the endpoint URI.  *  * @return {@link Boolean#TRUE} if the XML declaration shall be omitted  *         in the output document.  */ ;/**  * Indicator whether XML declaration should be omitted. Configured in  * the endpoint URI.  *  * @return {@link Boolean#TRUE} if the XML declaration shall be omitted  *         in the output document.  */ Boolean omitXmlDeclaration().
true;;0;1;/**  * Output node search value for determining the node from the XML  * signature document which shall be set to the output message body.  */ ;/**  * Output node search value for determining the node from the XML  * signature document which shall be set to the output message body.  */ Object getOutputNodeSearch().
true;;0;1;/**  * Search type. Which determines the class and meaning of  * {@link #getOutputNodeSearch()}.  */ ;/**  * Search type. Which determines the class and meaning of  * {@link #getOutputNodeSearch()}.  */ String getOutputNodeSearchType().
true;;0;1;/**  * Indicator whether the XML signature elements should be removed from  * the document set to the output message.  */ ;/**  * Indicator whether the XML signature elements should be removed from  * the document set to the output message.  */ Boolean getRemoveSignatureElements().
true;;0;1;/**  * The character encoding of the resulting XML document. Can be  * <code>null</code>. If <code>null</code> then the encoding of the  * original XML document is used.  */ ;/**  * The character encoding of the resulting XML document. Can be  * <code>null</code>. If <code>null</code> then the encoding of the  * original XML document is used.  */ String getOutputXmlEncoding().
