commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public XmlVerifierConfiguration copy() {     try {         return (XmlVerifierConfiguration) clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public;1;7;;public void setCamelContext(CamelContext camelContext) {     super.setCamelContext(camelContext).     setKeySelector(keySelectorName).     setXmlSignatureChecker(xmlSignatureCheckerName).     setXmlSignature2Message(xmlSignature2MessageName).     setValidationFailedHandler(validationFailedHandlerName). }
true;public;1;3;/**  * Provides the key for validating the XML signature.  */ ;/**  * Provides the key for validating the XML signature.  */ public void setKeySelector(KeySelector keySelector) {     this.keySelector = keySelector. }
false;public;0;3;;public KeySelector getKeySelector() {     return keySelector. }
true;public;1;12;/**  * Sets the reference name for a KeySelector that can be found in the registry.  */ ;/**  * Sets the reference name for a KeySelector that can be found in the registry.  */ public void setKeySelector(String keySelectorName) {     if (getCamelContext() != null && keySelectorName != null) {         KeySelector selector = getCamelContext().getRegistry().lookupByNameAndType(keySelectorName, KeySelector.class).         if (selector != null) {             setKeySelector(selector).         }     }     if (keySelectorName != null) {         this.keySelectorName = keySelectorName.     } }
false;public;0;3;;public XmlSignatureChecker getXmlSignatureChecker() {     return xmlSignatureChecker. }
true;public;1;3;/**  * This interface allows the application to check the XML signature before the validation is executed.  * This step is recommended in http://www.w3.org/TR/xmldsig-bestpractices/#check-what-is-signed  */ ;/**  * This interface allows the application to check the XML signature before the validation is executed.  * This step is recommended in http://www.w3.org/TR/xmldsig-bestpractices/#check-what-is-signed  */ public void setXmlSignatureChecker(XmlSignatureChecker xmlSignatureChecker) {     this.xmlSignatureChecker = xmlSignatureChecker. }
true;public;1;13;/**  * Sets the reference name for a application checker that can be found in the registry.  */ ;/**  * Sets the reference name for a application checker that can be found in the registry.  */ public void setXmlSignatureChecker(String xmlSignatureCheckerName) {     if (getCamelContext() != null && xmlSignatureCheckerName != null) {         XmlSignatureChecker checker = getCamelContext().getRegistry().lookupByNameAndType(xmlSignatureCheckerName, XmlSignatureChecker.class).         if (checker != null) {             setXmlSignatureChecker(checker).         }     }     if (xmlSignatureCheckerName != null) {         this.xmlSignatureCheckerName = xmlSignatureCheckerName.     } }
false;public;0;3;;public XmlSignature2Message getXmlSignature2Message() {     return xmlSignature2Message. }
true;public;1;3;/**  * Bean which maps the XML signature to the output-message after the validation.  * How this mapping should be done can be configured by the options outputNodeSearchType, outputNodeSearch, and removeSignatureElements.  * The default implementation offers three possibilities which are related to the three output node search types "Default", "ElementName", and "XPath".  * The default implementation determines a node which is then serialized and set to the body of the output message  * If the search type is "ElementName" then the output node (which must be in this case an element) is determined  * by the local name and namespace defined in the search value (see option outputNodeSearch).  * If the search type is "XPath" then the output node is determined by the XPath specified in the search value  * (in this case the output node can be of type "Element", "TextNode" or "Document").  * If the output node search type is "Default" then the following rules apply:  * In the enveloped XML signature case (there is a reference with URI="" and transform "http://www.w3.org/2000/09/xmldsig#enveloped-signature"),  * the incoming XML document without the Signature element is set to the output message body.  * In the non-enveloped XML signature case, the message body is determined from a referenced Object.  * this is explained in more detail in chapter "Output Node Determination in Enveloping XML Signature Case".  */ ;/**  * Bean which maps the XML signature to the output-message after the validation.  * How this mapping should be done can be configured by the options outputNodeSearchType, outputNodeSearch, and removeSignatureElements.  * The default implementation offers three possibilities which are related to the three output node search types "Default", "ElementName", and "XPath".  * The default implementation determines a node which is then serialized and set to the body of the output message  * If the search type is "ElementName" then the output node (which must be in this case an element) is determined  * by the local name and namespace defined in the search value (see option outputNodeSearch).  * If the search type is "XPath" then the output node is determined by the XPath specified in the search value  * (in this case the output node can be of type "Element", "TextNode" or "Document").  * If the output node search type is "Default" then the following rules apply:  * In the enveloped XML signature case (there is a reference with URI="" and transform "http://www.w3.org/2000/09/xmldsig#enveloped-signature"),  * the incoming XML document without the Signature element is set to the output message body.  * In the non-enveloped XML signature case, the message body is determined from a referenced Object.  * this is explained in more detail in chapter "Output Node Determination in Enveloping XML Signature Case".  */ public void setXmlSignature2Message(XmlSignature2Message xmlSignature2Message) {     this.xmlSignature2Message = xmlSignature2Message. }
true;public;1;13;/**  * Sets the reference name for the to-message instance that can be found in  * the registry.  */ ;/**  * Sets the reference name for the to-message instance that can be found in  * the registry.  */ public void setXmlSignature2Message(String xmlSignature2Message) {     if (getCamelContext() != null && xmlSignature2Message != null) {         XmlSignature2Message maper = getCamelContext().getRegistry().lookupByNameAndType(xmlSignature2Message, XmlSignature2Message.class).         if (maper != null) {             setXmlSignature2Message(maper).         }     }     if (xmlSignature2Message != null) {         this.xmlSignature2MessageName = xmlSignature2Message.     } }
false;public;0;3;;public ValidationFailedHandler getValidationFailedHandler() {     return validationFailedHandler. }
true;public;1;3;/**  * Handles the different validation failed situations.  * The default implementation throws specific exceptions for the different situations  * (All exceptions have the package name org.apache.camel.component.xmlsecurity.api and are a sub-class of XmlSignatureInvalidException.  * If the signature value validation fails, a XmlSignatureInvalidValueException is thrown.  * If a reference validation fails, a XmlSignatureInvalidContentHashException is thrown. For more detailed information, see the JavaDoc.  */ ;/**  * Handles the different validation failed situations.  * The default implementation throws specific exceptions for the different situations  * (All exceptions have the package name org.apache.camel.component.xmlsecurity.api and are a sub-class of XmlSignatureInvalidException.  * If the signature value validation fails, a XmlSignatureInvalidValueException is thrown.  * If a reference validation fails, a XmlSignatureInvalidContentHashException is thrown. For more detailed information, see the JavaDoc.  */ public void setValidationFailedHandler(ValidationFailedHandler validationFailedHandler) {     this.validationFailedHandler = validationFailedHandler. }
false;public;1;13;;public void setValidationFailedHandler(String validationFailedHandlerName) {     if (getCamelContext() != null && validationFailedHandlerName != null) {         ValidationFailedHandler vailFailedHandler = getCamelContext().getRegistry().lookupByNameAndType(validationFailedHandlerName, ValidationFailedHandler.class).         if (vailFailedHandler != null) {             setValidationFailedHandler(vailFailedHandler).         }     }     if (validationFailedHandlerName != null) {         this.validationFailedHandlerName = validationFailedHandlerName.     } }
false;public;0;3;;public Object getOutputNodeSearch() {     return outputNodeSearch. }
true;public;1;3;/**  * Sets the output node search value for determining the node from the XML  * signature document which shall be set to the output message body. The  * class of the value depends on the type of the output node search. The  * output node search is forwarded to {@link XmlSignature2Message}.  */ ;/**  * Sets the output node search value for determining the node from the XML  * signature document which shall be set to the output message body. The  * class of the value depends on the type of the output node search. The  * output node search is forwarded to {@link XmlSignature2Message}.  */ public void setOutputNodeSearch(Object outputNodeSearch) {     this.outputNodeSearch = outputNodeSearch. }
false;public;0;3;;public String getOutputNodeSearchType() {     return outputNodeSearchType. }
true;public;1;3;/**  * Determines the search type for determining the output node which is  * serialized into the output message bodyF. See  * {@link #setOutputNodeSearch(Object)}. The supported default search types  * you can find in {@link DefaultXmlSignature2Message}.  */ ;/**  * Determines the search type for determining the output node which is  * serialized into the output message bodyF. See  * {@link #setOutputNodeSearch(Object)}. The supported default search types  * you can find in {@link DefaultXmlSignature2Message}.  */ public void setOutputNodeSearchType(String outputNodeSearchType) {     this.outputNodeSearchType = outputNodeSearchType. }
false;public;0;3;;public Boolean getRemoveSignatureElements() {     return removeSignatureElements. }
true;public;1;3;/**  * Indicator whether the XML signature elements (elements with local name  * "Signature" and namesapce ""http://www.w3.org/2000/09/xmldsig#"") shall  * be removed from the document set to the output message. Normally, this is  * only necessary, if the XML signature is enveloped. The default value is  * {@link Boolean#FALSE}. This parameter is forwarded to  * {@link XmlSignature2Message}.  * <p>  * This indicator has no effect if the output node search is of type  * {@link DefaultXmlSignature2Message#OUTPUT_NODE_SEARCH_TYPE_DEFAULT}.F  */ ;/**  * Indicator whether the XML signature elements (elements with local name  * "Signature" and namesapce ""http://www.w3.org/2000/09/xmldsig#"") shall  * be removed from the document set to the output message. Normally, this is  * only necessary, if the XML signature is enveloped. The default value is  * {@link Boolean#FALSE}. This parameter is forwarded to  * {@link XmlSignature2Message}.  * <p>  * This indicator has no effect if the output node search is of type  * {@link DefaultXmlSignature2Message#OUTPUT_NODE_SEARCH_TYPE_DEFAULT}.F  */ public void setRemoveSignatureElements(Boolean removeSignatureElements) {     this.removeSignatureElements = removeSignatureElements. }
false;public;0;3;;public Boolean getSecureValidation() {     return secureValidation. }
true;public;1;3;/**  * Enables secure validation. If true then secure validation is enabled.  */ ;/**  * Enables secure validation. If true then secure validation is enabled.  */ public void setSecureValidation(Boolean secureValidation) {     this.secureValidation = secureValidation. }
false;public;0;3;;public String getValidationFailedHandlerName() {     return validationFailedHandlerName. }
true;public;1;3;/**  * Name of handler to  * @param validationFailedHandlerName  */ ;/**  * Name of handler to  * @param validationFailedHandlerName  */ public void setValidationFailedHandlerName(String validationFailedHandlerName) {     this.validationFailedHandlerName = validationFailedHandlerName. }
