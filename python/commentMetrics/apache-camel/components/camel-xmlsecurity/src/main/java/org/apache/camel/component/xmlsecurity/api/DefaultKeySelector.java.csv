commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setKeyStore(KeyStore keyStore) {     keyStoreAndAlias.setKeyStore(keyStore). }
false;public;1;3;;public void setAlias(String alias) {     keyStoreAndAlias.setAlias(alias). }
false;public;1;7;;public void setPassword(String password) {     if (password == null) {         keyStoreAndAlias.setPassword(null).     } else {         setPassword(password.toCharArray()).     } }
false;public;1;3;;public void setPassword(char[] password) {     keyStoreAndAlias.setPassword(password). }
false;public;1;6;;public void setKeyStoreParameters(KeyStoreParameters parameters) throws GeneralSecurityException, IOException {     if (parameters != null) {         keyStoreAndAlias.setKeyStore(parameters.createKeyStore()).     } }
false;public;4;52;;public KeySelectorResult select(KeyInfo keyInfo, KeySelector.Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException {     if (keyStoreAndAlias.getKeyStore() == null) {         return getNullKeyResult().     }     if (keyStoreAndAlias.getAlias() == null) {         return getNullKeyResult().     }     if (KeySelector.Purpose.VERIFY.equals(purpose)) {         Certificate cert.         try {             cert = keyStoreAndAlias.getKeyStore().getCertificate(keyStoreAndAlias.getAlias()).         } catch (KeyStoreException e) {             throw new KeySelectorException(e).         }         if (cert == null) {             return getNullKeyResult().         }         final Key key = cert.getPublicKey().         return getKeySelectorResult(key).     } else if (KeySelector.Purpose.SIGN.equals(purpose)) {         if (keyStoreAndAlias.getPassword() == null) {             return getNullKeyResult().         }         Key key.         try {             if (this.getCamelContext() != null && keyStoreAndAlias.getPassword() != null) {                 try {                     String passwordProperty = this.getCamelContext().resolvePropertyPlaceholders(new String(keyStoreAndAlias.getPassword())).                     key = keyStoreAndAlias.getKeyStore().getKey(keyStoreAndAlias.getAlias(), passwordProperty.toCharArray()).                 } catch (Exception e) {                     throw new RuntimeCamelException("Error parsing property value: " + new String(keyStoreAndAlias.getPassword()), e).                 }             } else {                 key = keyStoreAndAlias.getKeyStore().getKey(keyStoreAndAlias.getAlias(), keyStoreAndAlias.getPassword()).             }         } catch (UnrecoverableKeyException e) {             throw new KeySelectorException(e).         } catch (KeyStoreException e) {             throw new KeySelectorException(e).         } catch (NoSuchAlgorithmException e) {             throw new KeySelectorException(e).         }         return getKeySelectorResult(key).     } else {         throw new IllegalStateException("Purpose " + purpose + " not supported").     } }
false;;0;3;;KeyStore getKeyStore() {     return keyStoreAndAlias.getKeyStore(). }
false;;0;3;;String getAlias() {     return keyStoreAndAlias.getAlias(). }
false;public;0;3;;public Key getKey() {     return key. }
false;private;1;7;;private KeySelectorResult getKeySelectorResult(final Key key) {     return new KeySelectorResult() {          public Key getKey() {             return key.         }     }. }
false;public;0;3;;public Key getKey() {     return null. }
false;private;0;10;;private KeySelectorResult getNullKeyResult() {     if (nullKeyResult == null) {         nullKeyResult = new KeySelectorResult() {              public Key getKey() {                 return null.             }         }.     }     return nullKeyResult. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return context. }
false;public;1;4;;@Override public void setCamelContext(CamelContext context) {     this.context = context. }
