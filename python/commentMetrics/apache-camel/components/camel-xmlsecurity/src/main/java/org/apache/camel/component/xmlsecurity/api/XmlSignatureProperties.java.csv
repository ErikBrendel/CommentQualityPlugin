commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;// NOPMD ;/**  * Returns further configuration objects for the XML signature  *  * @param input  *            input  * @return output must not be <code>null</code>  * @throws Exception  *             if an error occurs during creating the output  */ // NOPMD Output get(Input input) throws Exception.
true;;0;1;/**  * Input message for reading header data  */ ;/**  * Input message for reading header data  */ Message getMessage().
true;;0;1;/**  * The message body as DOM node. If the message body is plain text then  * the node will be a text node. If the message body is a XML document,  * then the node is the root element.  */ ;/**  * The message body as DOM node. If the message body is plain text then  * the node will be a text node. If the message body is a XML document,  * then the node is the root element.  */ Node getMessageBodyNode().
true;;0;1;/**  * Returns the parent node of the signature element in the case of  * enveloped or detached XML signature, or the empty result document in  * the case of enveloping XML signature.  *  * @return parent node, cannot be <code>null</code>  */ ;/**  * Returns the parent node of the signature element in the case of  * enveloped or detached XML signature, or the empty result document in  * the case of enveloping XML signature.  *  * @return parent node, cannot be <code>null</code>  */ Node getParent().
true;;0;1;/**  * Key info.  */ ;/**  * Key info.  */ KeyInfo getKeyInfo().
true;;0;1;/**  * XML signature factory which can be used to create Reference and  * XMLObject instances.  *  * @return factory  */ ;/**  * XML signature factory which can be used to create Reference and  * XMLObject instances.  *  * @return factory  */ XMLSignatureFactory getSignatureFactory().
true;;0;1;/**  * Signature algorithm. Example:  * "http://www.w3.org/2000/09/xmldsig#dsa-sha1".  */ ;/**  * Signature algorithm. Example:  * "http://www.w3.org/2000/09/xmldsig#dsa-sha1".  */ String getSignatureAlgorithm().
true;;0;1;/**  * Digest algorithm which is used for the digest calculation of the  * message body.  */ ;/**  * Digest algorithm which is used for the digest calculation of the  * message body.  */ String getContentDigestAlgorithm().
true;;0;1;/**  * Signature Id. Can be <code>null</code>, then no signature Id  * attribute is generated.  */ ;/**  * Signature Id. Can be <code>null</code>, then no signature Id  * attribute is generated.  */ String getSignatureId().
true;;0;1;/**  * Reference URI which points to the content of the original XML  * document to be signed. For enveloped signature it is typically the  * empty string. For detached signature, it is an ID attribute value  * preceded by '#'. For enveloping signature, it is <code>null</code>.  */ ;/**  * Reference URI which points to the content of the original XML  * document to be signed. For enveloped signature it is typically the  * empty string. For detached signature, it is an ID attribute value  * preceded by '#'. For enveloping signature, it is <code>null</code>.  */ String getContentReferenceUri().
true;;0;1;/**  * Retruns the signature type.  *  * @return signature type  */ ;/**  * Retruns the signature type.  *  * @return signature type  */ SignatureType getSignatureType().
true;;0;1;/**  * Returns the prefix for the XML Signature namespace  * ("http://www.w3.org/2000/09/xmldsig#"). Can be null or empty.  */ ;/**  * Returns the prefix for the XML Signature namespace  * ("http://www.w3.org/2000/09/xmldsig#"). Can be null or empty.  */ String getPrefixForXmlSignatureNamespace().
false;public;0;3;;public List<? extends XMLObject> getObjects() {     return objects. }
false;public;1;3;;public void setObjects(List<? extends XMLObject> objects) {     this.objects = objects. }
false;public;0;3;;public List<? extends Reference> getReferences() {     return references. }
false;public;1;3;;public void setReferences(List<? extends Reference> references) {     this.references = references. }
false;public;0;3;;public String getContentReferenceId() {     return contentReferenceId. }
true;public;1;3;/**  * Id value for the reference of the signed content. Currently used by  * the XAdES parameter DataObjectFormat. See XAdESSignatureProperties.  */ ;/**  * Id value for the reference of the signed content. Currently used by  * the XAdES parameter DataObjectFormat. See XAdESSignatureProperties.  */ public void setContentReferenceId(String contentReferenceId) {     this.contentReferenceId = contentReferenceId. }
false;public;0;3;;public String getSignatureId() {     return signatureId. }
true;public;1;3;/**  * You can overwrite the value of the Id attribute of the Signature  * element that you get from {@link Input#getSignatureId()}. Only if the  * provided value is not <code>null</code> and not empty, then the  * signature Id will be overwritten.  *  * @param signatureId  *            Id attribute value of the Signature element  */ ;/**  * You can overwrite the value of the Id attribute of the Signature  * element that you get from {@link Input#getSignatureId()}. Only if the  * provided value is not <code>null</code> and not empty, then the  * signature Id will be overwritten.  *  * @param signatureId  *            Id attribute value of the Signature element  */ public void setSignatureId(String signatureId) {     this.signatureId = signatureId. }
