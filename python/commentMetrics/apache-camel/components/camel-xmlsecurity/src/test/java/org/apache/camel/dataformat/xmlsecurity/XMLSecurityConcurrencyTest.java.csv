commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testNoConcurrentProducers() throws Exception {     if (!HAS_3DES) {         return.     }     doSendMessages(1, 1). }
false;public;0;7;;@Test public void testConcurrentProducers() throws Exception {     if (!HAS_3DES) {         return.     }     doSendMessages(10, 5). }
false;public;0;5;;public Object call() throws Exception {     String body = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><body>you can not read me " + index + "</body>".     template.sendBody("direct:start", body).     return null. }
false;private;2;24;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:secure").expectedMessageCount(files).     getMockEndpoint("mock:result").assertNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 String body = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><body>you can not read me " + index + "</body>".                 template.sendBody("direct:start", body).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     String secure = getMockEndpoint("mock:secure").getReceivedExchanges().get(0).getIn().getBody(String.class).     assertNotNull(secure).     assertTrue("Should not be readable", secure.indexOf("read") == -1).     executor.shutdownNow(). }
false;public;0;11;;public void configure() {     from("direct:start").marshal().secureXML().to("mock:secure").to("direct:marshalled").     from("direct:marshalled").unmarshal().secureXML().convertBodyTo(String.class).to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML().to("mock:secure").to("direct:marshalled").             from("direct:marshalled").unmarshal().secureXML().convertBodyTo(String.class).to("mock:result").         }     }. }
