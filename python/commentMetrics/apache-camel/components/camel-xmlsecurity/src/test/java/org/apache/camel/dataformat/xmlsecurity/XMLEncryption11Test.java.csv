commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     context.getGlobalOptions().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.ENCODING, "UTF-8"). }
false;public;0;4;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted"). }
true;public;0;20;/*      * Encryption Tests      */ ;/*      * Encryption Tests      */ @Test public void testFullPayloadAsymmetricKeyEncryptionGCM() throws Exception {     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP).     xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters).     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128_GCM).     xmlEncDataFormat.setRecipientKeyAlias("recipient").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;4;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted"). }
false;public;0;21;;@Test public void testFullPayloadAsymmetricKeyEncryptionSHA256() throws Exception {     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP).     xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters).     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128).     xmlEncDataFormat.setRecipientKeyAlias("recipient").     xmlEncDataFormat.setDigestAlgorithm(XMLCipher.SHA256).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;4;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted"). }
false;public;0;21;;@Test public void testFullPayloadAsymmetricKeyEncryptionMGF256() throws Exception {     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP_11).     xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters).     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128).     xmlEncDataFormat.setMgfAlgorithm(EncryptionConstants.MGF1_SHA256).     xmlEncDataFormat.setRecipientKeyAlias("recipient").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("", true, "recipient", XMLCipher.AES_128_GCM, XMLCipher.RSA_OAEP, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", XMLCipher.AES_128_GCM, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted"). }
true;public;0;20;/*      * Decryption Tests      */ ;/*      * Decryption Tests      */ @Test public void testFullPayloadAsymmetricKeyDecryptionGCM() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("", true, "recipient", XMLCipher.AES_128_GCM, XMLCipher.RSA_OAEP, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", XMLCipher.AES_128_GCM, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;7;;public void configure() {     from("direct:start").marshal().secureXML("", new HashMap<String, String>(), true, "recipient", XMLCipher.AES_128, XMLCipher.RSA_OAEP, tsParameters, null, XMLCipher.SHA256).to("mock:encrypted").unmarshal().secureXML("", new HashMap<String, String>(), true, "recipient", XMLCipher.AES_128, XMLCipher.RSA_OAEP, ksParameters, null, XMLCipher.SHA256).to("mock:decrypted"). }
false;public;0;22;;@Test public void testFullPayloadAsymmetricKeyDecryptionSHA256() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("", new HashMap<String, String>(), true, "recipient", XMLCipher.AES_128, XMLCipher.RSA_OAEP, tsParameters, null, XMLCipher.SHA256).to("mock:encrypted").unmarshal().secureXML("", new HashMap<String, String>(), true, "recipient", XMLCipher.AES_128, XMLCipher.RSA_OAEP, ksParameters, null, XMLCipher.SHA256).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;7;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").unmarshal().secureXML("", new HashMap<String, String>(), true, "recipient", XMLCipher.AES_128, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted"). }
false;public;0;29;;@Test public void testFullPayloadAsymmetricKeyDecryptionMGF256() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP_11).     xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters).     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128).     xmlEncDataFormat.setMgfAlgorithm(EncryptionConstants.MGF1_SHA256).     xmlEncDataFormat.setRecipientKeyAlias("recipient").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").unmarshal().secureXML("", new HashMap<String, String>(), true, "recipient", XMLCipher.AES_128, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
