commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     context.getGlobalOptions().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.ENCODING, "UTF-8"). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML().to("mock:encrypted"). }
false;public;0;14;;/*      * Encryption Tests      */ @Test public void testFullPayloadXMLEncryption() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML().to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/italy/cheese", true).to("mock:encrypted"). }
false;public;0;14;;@Test public void testPartialPayloadXMLContentEncryption() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/italy/cheese", true).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/*/cheese", true).to("mock:encrypted"). }
false;public;0;14;;@Test public void testPartialPayloadMultiNodeXMLContentEncryption() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/*/cheese", true).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/france/cheese", false, "Just another 24 Byte key").to("mock:encrypted"). }
false;public;0;14;;@Test public void testPartialPayloadXMLElementEncryptionWithKey() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/france/cheese", false, "Just another 24 Byte key").to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/netherlands", false, passCode, XMLCipher.AES_128).to("mock:encrypted"). }
false;public;0;18;;@Test public void testPartialPayloadXMLElementEncryptionWithKeyAndAlgorithm() throws Exception {     final byte[] bits128 = { (byte) 0x08, (byte) 0x09, (byte) 0x0A, (byte) 0x0B, (byte) 0x0C, (byte) 0x0D, (byte) 0x0E, (byte) 0x0F, (byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15, (byte) 0x16, (byte) 0x17 }.     final String passCode = new String(bits128).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/netherlands", false, passCode, XMLCipher.AES_128).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/netherlands", false, bits192, XMLCipher.TRIPLEDES).to("mock:encrypted"). }
false;public;0;23;;@Test public void testPartialPayloadXMLElementEncryptionWithByteKeyAndAlgorithm() throws Exception {     final byte[] bits192 = { (byte) 0x24, (byte) 0xf2, (byte) 0xd3, (byte) 0x45, (byte) 0xc0, (byte) 0x75, (byte) 0xb1, (byte) 0x00, (byte) 0x30, (byte) 0xd4, (byte) 0x3d, (byte) 0xf5, (byte) 0x6d, (byte) 0xaa, (byte) 0x7d, (byte) 0xc2, (byte) 0x85, (byte) 0x32, (byte) 0x2a, (byte) 0xb6, (byte) 0xfe, (byte) 0xed, (byte) 0xbe, (byte) 0xef }.     final Charset passCodeCharset = Charsets.UTF_8.     final String passCode = new String(bits192, passCodeCharset).     byte[] bytes = passCode.getBytes(passCodeCharset).     assertTrue(bits192.length != bytes.length).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/netherlands", false, bits192, XMLCipher.TRIPLEDES).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;4;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted"). }
false;public;0;20;;@Test public void testFullPayloadAsymmetricKeyEncryption() throws Exception {     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_v1dot5).     xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters).     xmlEncDataFormat.setXmlCipherAlgorithm(testCypherAlgorithm).     xmlEncDataFormat.setRecipientKeyAlias("recipient").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/italy/cheese", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted"). }
false;public;0;15;;@Test public void testPartialPayloadAsymmetricKeyEncryptionWithContextTruststoreProperties() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/italy/cheese", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").         }     }).     xmlsecTestHelper.testEncryption(context). }
false;public;0;4;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted"). }
false;public;0;23;;@Test public void testAsymmetricEncryptionAddKeyValue() throws Exception {     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters).     xmlEncDataFormat.setXmlCipherAlgorithm(testCypherAlgorithm).     xmlEncDataFormat.setRecipientKeyAlias("recipient").     xmlEncDataFormat.setAddKeyValueForEncryptedKey(true).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").         }     }).     Document doc = xmlsecTestHelper.testEncryption(TestHelper.XML_FRAGMENT, context).     NodeList nodeList = doc.getElementsByTagNameNS("http://www.w3.org/2000/09/xmldsig#", "RSAKeyValue").     Assert.assertTrue(nodeList.getLength() > 0). }
false;public;0;4;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted"). }
false;public;0;23;;@Test public void testAsymmetricEncryptionNoKeyValue() throws Exception {     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setKeyOrTrustStoreParameters(tsParameters).     xmlEncDataFormat.setXmlCipherAlgorithm(testCypherAlgorithm).     xmlEncDataFormat.setRecipientKeyAlias("recipient").     xmlEncDataFormat.setAddKeyValueForEncryptedKey(false).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").         }     }).     Document doc = xmlsecTestHelper.testEncryption(TestHelper.XML_FRAGMENT, context).     NodeList nodeList = doc.getElementsByTagNameNS("http://www.w3.org/2000/09/xmldsig#", "RSAKeyValue").     Assert.assertTrue(nodeList.getLength() == 0). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML().to("mock:encrypted").unmarshal().secureXML().to("mock:decrypted"). }
true;public;0;14;/*     * Decryption Tests     */ ;/*     * Decryption Tests     */ @Test public void testFullPayloadXMLDecryption() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML().to("mock:encrypted").unmarshal().secureXML().to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/italy/cheese", true).to("mock:encrypted").unmarshal().secureXML("//cheesesites/italy/cheese", true).to("mock:decrypted"). }
false;public;0;14;;@Test public void testPartialPayloadXMLContentDecryption() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/italy/cheese", true).to("mock:encrypted").unmarshal().secureXML("//cheesesites/italy/cheese", true).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/*/cheese", true).to("mock:encrypted").unmarshal().secureXML("//cheesesites/*/cheese", true).to("mock:decrypted"). }
false;public;0;14;;@Test public void testPartialPayloadMultiNodeXMLContentDecryption() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/*/cheese", true).to("mock:encrypted").unmarshal().secureXML("//cheesesites/*/cheese", true).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/france/cheese", false, "Just another 24 Byte key").to("mock:encrypted").unmarshal().secureXML("//cheesesites/france", false, "Just another 24 Byte key").to("mock:decrypted"). }
false;public;0;14;;@Test public void testPartialPayloadXMLElementDecryptionWithKey() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/france/cheese", false, "Just another 24 Byte key").to("mock:encrypted").unmarshal().secureXML("//cheesesites/france", false, "Just another 24 Byte key").to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;8;;public void configure() {     from("timer://foo?period=5000&repeatCount=1").to("language:constant:resource:classpath:org/apache/camel/component/xmlsecurity/EncryptedMessage.xml").unmarshal().secureXML("/*[local-name()='Envelope']/*[local-name()='Body']", true, keyBytes, XMLCipher.TRIPLEDES).to("mock:decrypted"). }
false;public;0;25;;@Test public void testXMLElementDecryptionWithoutEncryptedKey() throws Exception {     if (!TestHelper.HAS_3DES) {         return.     }     String passPhrase = "this is a test passphrase".     byte[] bytes = passPhrase.getBytes().     final byte[] keyBytes = Arrays.copyOf(bytes, 24).     for (int j = 0, k = 16. j < 8. ) {         keyBytes[k++] = keyBytes[j++].     }     context.addRoutes(new RouteBuilder() {          public void configure() {             from("timer://foo?period=5000&repeatCount=1").to("language:constant:resource:classpath:org/apache/camel/component/xmlsecurity/EncryptedMessage.xml").unmarshal().secureXML("/*[local-name()='Envelope']/*[local-name()='Body']", true, keyBytes, XMLCipher.TRIPLEDES).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryptionNoEncryptedKey(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/italy", true, passCode, XMLCipher.AES_128).to("mock:encrypted").unmarshal().secureXML("//cheesesites/italy", true, passCode, XMLCipher.AES_128).to("mock:decrypted"). }
false;public;0;18;;@Test public void testPartialPayloadXMLContentDecryptionWithKeyAndAlgorithm() throws Exception {     final byte[] bits128 = { (byte) 0x08, (byte) 0x09, (byte) 0x0A, (byte) 0x0B, (byte) 0x0C, (byte) 0x0D, (byte) 0x0E, (byte) 0x0F, (byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15, (byte) 0x16, (byte) 0x17 }.     final String passCode = new String(bits128).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/italy", true, passCode, XMLCipher.AES_128).to("mock:encrypted").unmarshal().secureXML("//cheesesites/italy", true, passCode, XMLCipher.AES_128).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters).to("mock:decrypted"). }
false;public;0;20;;@Test public void testFullPayloadAsymmetricKeyDecryption() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters, "keyPassword").to("mock:decrypted"). }
false;public;0;20;;@Test public void testFullPayloadAsymmetricKeyDecryptionWithKeyPassword() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient-with-key-pass.ks").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters, "keyPassword").to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//ns1:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//ns1:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters).to("mock:decrypted"). }
false;public;0;22;;@Test public void testPartialPayloadAsymmetricKeyDecryption() throws Exception {     final Map<String, String> namespaces = new HashMap<>().     namespaces.put("ns1", "http://cheese.xmlsecurity.camel.apache.org/").     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//ns1:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//ns1:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(TestHelper.NS_XML_FRAGMENT, context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cust:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//cust:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters).to("mock:decrypted"). }
false;public;0;24;;@Test public void testPartialPayloadAsymmetricKeyDecryptionCustomNS() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     final Map<String, String> namespaces = new HashMap<>().     namespaces.put("cust", "http://cheese.xmlsecurity.camel.apache.org/").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cust:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//cust:cheesesites/italy", namespaces, true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, ksParameters).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(TestHelper.NS_XML_FRAGMENT, context). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted"). }
false;public;0;27;;@Test public void testAsymmetricEncryptionAlgorithmFullPayload() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     // RSA v1.5 is not allowed unless explicitly configured     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted").         }     }).     MockEndpoint resultEndpoint = context.getEndpoint("mock:decrypted", MockEndpoint.class).     resultEndpoint.setExpectedMessageCount(0).     // verify that the message was encrypted before checking that it is decrypted     xmlsecTestHelper.testEncryption(TestHelper.XML_FRAGMENT, context).     resultEndpoint.assertIsSatisfied(100). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/italy", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//cheesesites/italy", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted"). }
false;public;0;27;;@Test public void testAsymmetricEncryptionAlgorithmPartialPayload() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     // RSA v1.5 is not allowed unless explicitly configured     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/italy", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//cheesesites/italy", true, "recipient", testCypherAlgorithm, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted").         }     }).     MockEndpoint resultEndpoint = context.getEndpoint("mock:decrypted", MockEndpoint.class).     resultEndpoint.setExpectedMessageCount(0).     // verify that the message was encrypted before checking that it is decrypted     xmlsecTestHelper.testEncryption(TestHelper.XML_FRAGMENT, context).     resultEndpoint.assertIsSatisfied(100). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().secureXML("//cheesesites/france/cheese", false, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//cheesesites/france", false, "recipient", testCypherAlgorithm, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted"). }
false;public;0;27;;@Test public void testAsymmetricEncryptionAlgorithmPartialPayloadElement() throws Exception {     final KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     final KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     // RSA v1.5 is not allowed unless explicitly configured     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().secureXML("//cheesesites/france/cheese", false, "recipient", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to("mock:encrypted").unmarshal().secureXML("//cheesesites/france", false, "recipient", testCypherAlgorithm, XMLCipher.RSA_OAEP, ksParameters).to("mock:decrypted").         }     }).     MockEndpoint resultEndpoint = context.getEndpoint("mock:decrypted", MockEndpoint.class).     resultEndpoint.setExpectedMessageCount(0).     // verify that the message was encrypted before checking that it is decrypted     xmlsecTestHelper.testEncryption(TestHelper.XML_FRAGMENT, context).     resultEndpoint.assertIsSatisfied(100). }
