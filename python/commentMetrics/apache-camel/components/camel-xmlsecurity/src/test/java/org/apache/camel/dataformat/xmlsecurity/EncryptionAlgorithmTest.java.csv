commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     context.getGlobalOptions().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.ENCODING, "UTF-8"). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;23;;@Test public void testAES128() throws Exception {     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("AES").     keygen.init(128).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;23;;@Test public void testAES128GCM() throws Exception {     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("AES").     keygen.init(128).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128_GCM).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;27;;@Test public void testAES192() throws Exception {     if (!TestHelper.UNRESTRICTED_POLICIES_INSTALLED) {         return.     }     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("AES").     keygen.init(192).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_192).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;27;;@Test public void testAES192GCM() throws Exception {     if (!TestHelper.UNRESTRICTED_POLICIES_INSTALLED) {         return.     }     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("AES").     keygen.init(192).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_192_GCM).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;27;;@Test public void testAES256() throws Exception {     if (!TestHelper.UNRESTRICTED_POLICIES_INSTALLED) {         return.     }     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("AES").     keygen.init(256).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_256).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;27;;@Test public void testAES256GCM() throws Exception {     if (!TestHelper.UNRESTRICTED_POLICIES_INSTALLED) {         return.     }     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("AES").     keygen.init(256).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_256_GCM).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;23;;@Test public void testTRIPLEDES() throws Exception {     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("DESede").     keygen.init(192).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.TRIPLEDES).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;23;;@Test public void testSEED128() throws Exception {     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("SEED").     keygen.init(128).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.SEED_128).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;23;;@Test public void testCAMELLIA128() throws Exception {     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("CAMELLIA").     keygen.init(128).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.CAMELLIA_128).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;27;;@Test public void testCAMELLIA192() throws Exception {     if (!TestHelper.UNRESTRICTED_POLICIES_INSTALLED) {         return.     }     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("CAMELLIA").     keygen.init(192).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.CAMELLIA_192).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted"). }
false;public;0;27;;@Test public void testCAMELLIA256() throws Exception {     if (!TestHelper.UNRESTRICTED_POLICIES_INSTALLED) {         return.     }     // Set up the Key     KeyGenerator keygen = KeyGenerator.getInstance("CAMELLIA").     keygen.init(256).     SecretKey key = keygen.generateKey().     final XMLSecurityDataFormat xmlEncDataFormat = new XMLSecurityDataFormat().     xmlEncDataFormat.setPassPhrase(key.getEncoded()).     xmlEncDataFormat.setSecureTagContents(true).     xmlEncDataFormat.setSecureTag("//cheesesites/italy/cheese").     xmlEncDataFormat.setXmlCipherAlgorithm(XMLCipher.CAMELLIA_256).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(xmlEncDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(xmlEncDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(sendingDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(receivingDataFormat).to("mock:decrypted"). }
false;public;0;34;;@Test public void testRSAOAEPKW() throws Exception {     final XMLSecurityDataFormat sendingDataFormat = new XMLSecurityDataFormat().     sendingDataFormat.setSecureTagContents(true).     sendingDataFormat.setSecureTag("//cheesesites/italy/cheese").     sendingDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128).     sendingDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP).     sendingDataFormat.setRecipientKeyAlias("recipient").     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     sendingDataFormat.setKeyOrTrustStoreParameters(tsParameters).     final XMLSecurityDataFormat receivingDataFormat = new XMLSecurityDataFormat().     receivingDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP).     receivingDataFormat.setRecipientKeyAlias("recipient").     receivingDataFormat.setSecureTag("//cheesesites/italy/cheese").     KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     receivingDataFormat.setKeyOrTrustStoreParameters(ksParameters).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(sendingDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(receivingDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(sendingDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(receivingDataFormat).to("mock:decrypted"). }
false;public;0;34;;@Test public void testRSAv15KW() throws Exception {     final XMLSecurityDataFormat sendingDataFormat = new XMLSecurityDataFormat().     sendingDataFormat.setSecureTagContents(true).     sendingDataFormat.setSecureTag("//cheesesites/italy/cheese").     sendingDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128).     sendingDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_v1dot5).     sendingDataFormat.setRecipientKeyAlias("recipient").     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     sendingDataFormat.setKeyOrTrustStoreParameters(tsParameters).     final XMLSecurityDataFormat receivingDataFormat = new XMLSecurityDataFormat().     receivingDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_v1dot5).     receivingDataFormat.setRecipientKeyAlias("recipient").     receivingDataFormat.setSecureTag("//cheesesites/italy/cheese").     KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     receivingDataFormat.setKeyOrTrustStoreParameters(ksParameters).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(sendingDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(receivingDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
false;public;0;6;;public void configure() {     from("direct:start").marshal(sendingDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(receivingDataFormat).to("mock:decrypted"). }
false;public;0;34;;@Test public void testRSAOAEP11KW() throws Exception {     final XMLSecurityDataFormat sendingDataFormat = new XMLSecurityDataFormat().     sendingDataFormat.setSecureTagContents(true).     sendingDataFormat.setSecureTag("//cheesesites/italy/cheese").     sendingDataFormat.setXmlCipherAlgorithm(XMLCipher.AES_128).     sendingDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP_11).     sendingDataFormat.setRecipientKeyAlias("recipient").     KeyStoreParameters tsParameters = new KeyStoreParameters().     tsParameters.setPassword("password").     tsParameters.setResource("sender.ts").     sendingDataFormat.setKeyOrTrustStoreParameters(tsParameters).     final XMLSecurityDataFormat receivingDataFormat = new XMLSecurityDataFormat().     receivingDataFormat.setKeyCipherAlgorithm(XMLCipher.RSA_OAEP_11).     receivingDataFormat.setRecipientKeyAlias("recipient").     receivingDataFormat.setSecureTag("//cheesesites/italy/cheese").     KeyStoreParameters ksParameters = new KeyStoreParameters().     ksParameters.setPassword("password").     ksParameters.setResource("recipient.ks").     receivingDataFormat.setKeyOrTrustStoreParameters(ksParameters).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal(sendingDataFormat).to("mock:encrypted").log("Body: + ${body}").unmarshal(receivingDataFormat).to("mock:decrypted").         }     }).     xmlsecTestHelper.testDecryption(context). }
