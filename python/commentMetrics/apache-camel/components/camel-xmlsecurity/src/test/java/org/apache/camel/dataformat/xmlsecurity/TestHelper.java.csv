commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void process(Exchange exchange) throws Exception {     // Set the property of the charset encoding     exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").     Message in = exchange.getIn().     in.setBody(fragment).     log.info("xmlFragment: {}", fragment). }
false;protected;2;13;;protected void sendText(final String fragment, CamelContext context) throws Exception {     ProducerTemplate template = context.createProducerTemplate().     template.start().     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             // Set the property of the charset encoding             exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").             Message in = exchange.getIn().             in.setBody(fragment).             log.info("xmlFragment: {}", fragment).         }     }). }
false;protected;2;14;;protected Document testEncryption(String fragment, CamelContext context) throws Exception {     MockEndpoint resultEndpoint = context.getEndpoint("mock:encrypted", MockEndpoint.class).     resultEndpoint.setExpectedMessageCount(1).     context.start().     sendText(fragment, context).     resultEndpoint.assertIsSatisfied(100).     Exchange exchange = resultEndpoint.getExchanges().get(0).     Document inDoc = getDocumentForInMessage(exchange).     if (log.isDebugEnabled()) {         logMessage(exchange, inDoc).     }     Assert.assertTrue("The XML message has no encrypted data.", hasEncryptedData(inDoc)).     return inDoc. }
false;protected;1;3;;protected void testEncryption(CamelContext context) throws Exception {     testEncryption(XML_FRAGMENT, context). }
false;protected;2;19;;protected void testDecryption(String fragment, CamelContext context) throws Exception {     MockEndpoint resultEndpoint = context.getEndpoint("mock:decrypted", MockEndpoint.class).     resultEndpoint.setExpectedMessageCount(1).     // verify that the message was encrypted before checking that it is decrypted     testEncryption(fragment, context).     resultEndpoint.assertIsSatisfied(100).     Exchange exchange = resultEndpoint.getExchanges().get(0).     Document inDoc = getDocumentForInMessage(exchange).     if (log.isDebugEnabled()) {         logMessage(exchange, inDoc).     }     Assert.assertFalse("The XML message has encrypted data.", hasEncryptedData(inDoc)).     // verify that the decrypted message matches what was sent     Diff xmlDiff = DiffBuilder.compare(fragment).withTest(inDoc).checkForIdentical().build().     Assert.assertFalse("The decrypted document does not match the control document:\n" + xmlDiff.toString(), xmlDiff.hasDifferences()). }
false;protected;1;3;;protected void testDecryption(CamelContext context) throws Exception {     testDecryption(XML_FRAGMENT, context). }
false;protected;1;12;;protected void testDecryptionNoEncryptedKey(CamelContext context) throws Exception {     MockEndpoint resultEndpoint = context.getEndpoint("mock:decrypted", MockEndpoint.class).     resultEndpoint.setExpectedMessageCount(1).     context.start().     resultEndpoint.assertIsSatisfied(100).     Exchange exchange = resultEndpoint.getExchanges().get(0).     Document inDoc = getDocumentForInMessage(exchange).     XmlConverter converter = new XmlConverter().     String xmlStr = converter.toString(inDoc, exchange).     log.info(xmlStr).     Assert.assertFalse("The XML message has encrypted data.", hasEncryptedData(inDoc)). }
false;private;1;4;;private boolean hasEncryptedData(Document doc) throws Exception {     NodeList nodeList = doc.getElementsByTagNameNS("http://www.w3.org/2001/04/xmlenc#", "EncryptedData").     return nodeList.getLength() > 0. }
false;private;2;5;;private void logMessage(Exchange exchange, Document inDoc) throws Exception {     XmlConverter converter = new XmlConverter().     String xmlStr = converter.toString(inDoc, exchange).     log.debug(xmlStr). }
false;private;1;5;;private Document getDocumentForInMessage(Exchange exchange) {     byte[] body = exchange.getIn().getBody(byte[].class).     Document d = createDocumentfromInputStream(new ByteArrayInputStream(body), exchange.getContext()).     return d. }
false;private;2;3;;private Document createDocumentfromInputStream(InputStream is, CamelContext context) {     return context.getTypeConverter().convertTo(Document.class, is). }
