commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     // This test fails with the IBM JDK     if (canTest) {         registry.bind("accessor", getKeyAccessor()).         registry.bind("selector", KeySelector.singletonKeySelector(getCertificateFromKeyStore().getPublicKey())).         registry.bind("uriDereferencer", getSameDocumentUriDereferencer()).     }     return registry. }
false;public;0;10;;public void configure() throws Exception {     // START SNIPPET: ecdsa signature algorithm     from("direct:ecdsa_sha1").to("xmlsecurity:sign:ecdsa_sha1?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result"). // END SNIPPET: ecdsa signature algorithm }
false;public;0;9;;public void configure() throws Exception {     // START SNIPPET: ecdsa signature algorithm     from("direct:ecdsa_sha224").to("xmlsecurity:sign:ecdsa_sha224?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result"). // END SNIPPET: ecdsa signature algorithm }
false;public;0;9;;public void configure() throws Exception {     // START SNIPPET: ecdsa signature algorithm     from("direct:ecdsa_sha256").to("xmlsecurity:sign:ecdsa_sha256?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result"). // END SNIPPET: ecdsa signature algorithm }
false;public;0;9;;public void configure() throws Exception {     // START SNIPPET: ecdsa signature algorithm     from("direct:ecdsa_sha384").to("xmlsecurity:sign:ecdsa_sha384?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result"). // END SNIPPET: ecdsa signature algorithm }
false;public;0;9;;public void configure() throws Exception {     // START SNIPPET: ecdsa signature algorithm     from("direct:ecdsa_sha512").to("xmlsecurity:sign:ecdsa_sha512?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result"). // END SNIPPET: ecdsa signature algorithm }
false;public;0;9;;public void configure() throws Exception {     // START SNIPPET: ecdsa signature algorithm     from("direct:ecdsa_ripemd160").to("xmlsecurity:sign:ecdsa_ripemd160?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2007/05/xmldsig-more#ecdsa-ripemd160").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result"). // END SNIPPET: ecdsa signature algorithm }
false;protected;0;71;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     if (!canTest) {         return new RouteBuilder[] {}.     }     return new RouteBuilder[] { new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ecdsa signature algorithm             from("direct:ecdsa_sha1").to("xmlsecurity:sign:ecdsa_sha1?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result").         // END SNIPPET: ecdsa signature algorithm         }     }, new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ecdsa signature algorithm             from("direct:ecdsa_sha224").to("xmlsecurity:sign:ecdsa_sha224?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result").         // END SNIPPET: ecdsa signature algorithm         }     }, new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ecdsa signature algorithm             from("direct:ecdsa_sha256").to("xmlsecurity:sign:ecdsa_sha256?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result").         // END SNIPPET: ecdsa signature algorithm         }     }, new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ecdsa signature algorithm             from("direct:ecdsa_sha384").to("xmlsecurity:sign:ecdsa_sha384?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result").         // END SNIPPET: ecdsa signature algorithm         }     }, new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ecdsa signature algorithm             from("direct:ecdsa_sha512").to("xmlsecurity:sign:ecdsa_sha512?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result").         // END SNIPPET: ecdsa signature algorithm         }     }, new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ecdsa signature algorithm             from("direct:ecdsa_ripemd160").to("xmlsecurity:sign:ecdsa_ripemd160?keyAccessor=#accessor" + "&signatureAlgorithm=http://www.w3.org/2007/05/xmldsig-more#ecdsa-ripemd160").to("xmlsecurity:verify:ecdsa?keySelector=#selector").to("mock:result").         // END SNIPPET: ecdsa signature algorithm         }     } }. }
false;public;0;9;;@Test public void testECDSASHA1() throws Exception {     if (!canTest) {         return.     }     setupMock().     sendBody("direct:ecdsa_sha1", payload).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testECDSASHA224() throws Exception {     if (!canTest) {         return.     }     setupMock().     sendBody("direct:ecdsa_sha224", payload).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testECDSASHA256() throws Exception {     if (!canTest) {         return.     }     setupMock().     sendBody("direct:ecdsa_sha256", payload).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testECDSASHA384() throws Exception {     if (!canTest) {         return.     }     setupMock().     sendBody("direct:ecdsa_sha384", payload).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testECDSASHA512() throws Exception {     if (!canTest) {         return.     }     setupMock().     sendBody("direct:ecdsa_sha512", payload).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testECDSARIPEMD160() throws Exception {     if (!canTest) {         return.     }     setupMock().     sendBody("direct:ecdsa_ripemd160", payload).     assertMockEndpointsSatisfied(). }
false;private;0;3;;private MockEndpoint setupMock() {     return setupMock(payload). }
false;private;1;5;;private MockEndpoint setupMock(String payload) {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived(payload).     return mock. }
false;public;0;11;;@Before public void setUp() throws Exception {     disableJMX().     try {         super.setUp().     } catch (Exception e) {         System.err.println("Cannot test due " + e.getMessage()).         log.warn("Cannot test due " + e.getMessage(), e).         canTest = false.     } }
false;private,static;0;7;;private static KeyStore loadKeystore() throws Exception {     KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType()).     InputStream in = ECDSASignatureTest.class.getResourceAsStream("/org/apache/camel/component/xmlsecurity/ecdsa.jks").     keyStore.load(in, "security".toCharArray()).     return keyStore. }
false;private,static;0;3;;private static Certificate getCertificateFromKeyStore() throws Exception {     return loadKeystore().getCertificate("ECDSA"). }
false;private,static;0;3;;private static PrivateKey getKeyFromKeystore() throws Exception {     return (PrivateKey) loadKeystore().getKey("ECDSA", "security".toCharArray()). }
false;public;1;4;;@Override public KeySelector getKeySelector(Message message) throws Exception {     return KeySelector.singletonKeySelector(getKeyFromKeystore()). }
false;public;3;5;;@Override public KeyInfo getKeyInfo(Message mess, Node messageBody, KeyInfoFactory keyInfoFactory) throws Exception {     return null. }
false;static;0;16;;static KeyAccessor getKeyAccessor() {     KeyAccessor accessor = new KeyAccessor() {          @Override         public KeySelector getKeySelector(Message message) throws Exception {             return KeySelector.singletonKeySelector(getKeyFromKeystore()).         }          @Override         public KeyInfo getKeyInfo(Message mess, Node messageBody, KeyInfoFactory keyInfoFactory) throws Exception {             return null.         }     }.     return accessor. }
false;public,static;0;3;;public static URIDereferencer getSameDocumentUriDereferencer() {     return SameDocumentUriDereferencer.getInstance(). }
