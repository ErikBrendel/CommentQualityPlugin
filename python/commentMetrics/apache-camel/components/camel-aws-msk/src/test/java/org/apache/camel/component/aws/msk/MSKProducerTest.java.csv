commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(MSKConstants.OPERATION, MSKOperations.listClusters). }
false;public;0;17;;@Test public void mskListClustersTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:listClusters", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(MSKConstants.OPERATION, MSKOperations.listClusters).         }     }).     assertMockEndpointsSatisfied().     ListClustersResult resultGet = (ListClustersResult) exchange.getIn().getBody().     assertEquals(1, resultGet.getClusterInfoList().size()).     assertEquals("test-kafka", resultGet.getClusterInfoList().get(0).getClusterName()). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(MSKConstants.OPERATION, MSKOperations.createCluster).     exchange.getIn().setHeader(MSKConstants.CLUSTER_NAME, "test-kafka").     exchange.getIn().setHeader(MSKConstants.CLUSTER_KAFKA_VERSION, "2.1.1").     exchange.getIn().setHeader(MSKConstants.BROKER_NODES_NUMBER, 2).     BrokerNodeGroupInfo groupInfo = new BrokerNodeGroupInfo().     exchange.getIn().setHeader(MSKConstants.BROKER_NODES_GROUP_INFO, groupInfo). }
false;public;0;22;;@Test public void mskCreateClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:createCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(MSKConstants.OPERATION, MSKOperations.createCluster).             exchange.getIn().setHeader(MSKConstants.CLUSTER_NAME, "test-kafka").             exchange.getIn().setHeader(MSKConstants.CLUSTER_KAFKA_VERSION, "2.1.1").             exchange.getIn().setHeader(MSKConstants.BROKER_NODES_NUMBER, 2).             BrokerNodeGroupInfo groupInfo = new BrokerNodeGroupInfo().             exchange.getIn().setHeader(MSKConstants.BROKER_NODES_GROUP_INFO, groupInfo).         }     }).     assertMockEndpointsSatisfied().     CreateClusterResult resultGet = (CreateClusterResult) exchange.getIn().getBody().     assertEquals("test-kafka", resultGet.getClusterName()).     assertEquals(ClusterState.CREATING.name(), resultGet.getState()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(MSKConstants.OPERATION, MSKOperations.deleteCluster).     exchange.getIn().setHeader(MSKConstants.CLUSTER_ARN, "test-kafka"). }
false;public;0;18;;@Test public void mskDeleteClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:deleteCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(MSKConstants.OPERATION, MSKOperations.deleteCluster).             exchange.getIn().setHeader(MSKConstants.CLUSTER_ARN, "test-kafka").         }     }).     assertMockEndpointsSatisfied().     DeleteClusterResult resultGet = (DeleteClusterResult) exchange.getIn().getBody().     assertEquals("test-kafka", resultGet.getClusterArn()).     assertEquals(ClusterState.DELETING.name(), resultGet.getState()). }
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     AmazonMSKClientMock clientMock = new AmazonMSKClientMock().     registry.bind("amazonMskClient", clientMock).     return registry. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:listClusters").to("aws-msk://test?mskClient=#amazonMskClient&operation=listClusters").to("mock:result").     from("direct:createCluster").to("aws-msk://test?mskClient=#amazonMskClient&operation=createCluster").to("mock:result").     from("direct:deleteCluster").to("aws-msk://test?mskClient=#amazonMskClient&operation=deleteCluster").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:listClusters").to("aws-msk://test?mskClient=#amazonMskClient&operation=listClusters").to("mock:result").             from("direct:createCluster").to("aws-msk://test?mskClient=#amazonMskClient&operation=createCluster").to("mock:result").             from("direct:deleteCluster").to("aws-msk://test?mskClient=#amazonMskClient&operation=deleteCluster").to("mock:result").         }     }. }
