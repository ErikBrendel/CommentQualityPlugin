commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case listClusters:             listClusters(getEndpoint().getMskClient(), exchange).             break.         case createCluster:             createCluster(getEndpoint().getMskClient(), exchange).             break.         case deleteCluster:             deleteCluster(getEndpoint().getMskClient(), exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;7;;private MSKOperations determineOperation(Exchange exchange) {     MSKOperations operation = exchange.getIn().getHeader(MSKConstants.OPERATION, MSKOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected MSKConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (mskProducerToString == null) {         mskProducerToString = "MSKProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return mskProducerToString. }
false;public;0;4;;@Override public MSKEndpoint getEndpoint() {     return (MSKEndpoint) super.getEndpoint(). }
false;private;2;16;;private void listClusters(AWSKafka mskClient, Exchange exchange) {     ListClustersRequest request = new ListClustersRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MSKConstants.CLUSTERS_FILTER))) {         String filter = exchange.getIn().getHeader(MSKConstants.CLUSTERS_FILTER, String.class).         request.withClusterNameFilter(filter).     }     ListClustersResult result.     try {         result = mskClient.listClusters(request).     } catch (AmazonServiceException ase) {         log.trace("List Clusters command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;36;;private void createCluster(AWSKafka mskClient, Exchange exchange) {     CreateClusterRequest request = new CreateClusterRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MSKConstants.CLUSTER_NAME))) {         String name = exchange.getIn().getHeader(MSKConstants.CLUSTER_NAME, String.class).         request.withClusterName(name).     } else {         throw new IllegalArgumentException("Cluster Name must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MSKConstants.CLUSTER_KAFKA_VERSION))) {         String version = exchange.getIn().getHeader(MSKConstants.CLUSTER_KAFKA_VERSION, String.class).         request.withKafkaVersion(version).     } else {         throw new IllegalArgumentException("Kafka Version must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MSKConstants.BROKER_NODES_NUMBER))) {         Integer nodesNumber = exchange.getIn().getHeader(MSKConstants.BROKER_NODES_NUMBER, Integer.class).         request.withNumberOfBrokerNodes(nodesNumber).     } else {         throw new IllegalArgumentException("Kafka Version must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MSKConstants.BROKER_NODES_GROUP_INFO))) {         BrokerNodeGroupInfo brokerNodesGroupInfo = exchange.getIn().getHeader(MSKConstants.BROKER_NODES_GROUP_INFO, BrokerNodeGroupInfo.class).         request.withBrokerNodeGroupInfo(brokerNodesGroupInfo).     } else {         throw new IllegalArgumentException("BrokerNodeGroupInfo must be specified").     }     CreateClusterResult result.     try {         result = mskClient.createCluster(request).     } catch (AmazonServiceException ase) {         log.trace("Create Cluster command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void deleteCluster(AWSKafka mskClient, Exchange exchange) {     DeleteClusterRequest request = new DeleteClusterRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MSKConstants.CLUSTER_ARN))) {         String arn = exchange.getIn().getHeader(MSKConstants.CLUSTER_ARN, String.class).         request.withClusterArn(arn).     } else {         throw new IllegalArgumentException("Cluster ARN must be specified").     }     DeleteClusterResult result.     try {         result = mskClient.deleteCluster(request).     } catch (AmazonServiceException ase) {         log.trace("Delete Cluster command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
