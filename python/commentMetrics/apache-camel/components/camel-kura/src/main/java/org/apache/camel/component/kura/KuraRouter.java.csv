commented;modifiers;parameterAmount;loc;comment;code
false;public;1;36;;// Lifecycle @Override public void start(BundleContext bundleContext) throws Exception {     try {         this.bundleContext = bundleContext.         log.debug("Initializing bundle {}.", bundleContext.getBundle().getBundleId()).         camelContext = createCamelContext().         camelContext.addRoutes(this).         ConfigurationAdmin configurationAdmin = requiredService(ConfigurationAdmin.class).         Configuration camelKuraConfig = configurationAdmin.getConfiguration(camelXmlRoutesPid()).         if (camelKuraConfig != null && camelKuraConfig.getProperties() != null) {             Object routePropertyValue = camelKuraConfig.getProperties().get(camelXmlRoutesProperty()).             if (routePropertyValue != null) {                 InputStream routesXml = new ByteArrayInputStream(routePropertyValue.toString().getBytes()).                 RoutesDefinition loadedRoutes = camelContext.adapt(ModelCamelContext.class).loadRoutesDefinition(routesXml).                 camelContext.adapt(ModelCamelContext.class).addRouteDefinitions(loadedRoutes.getRoutes()).             }         }         beforeStart(camelContext).         log.debug("About to start Camel Kura router: {}", getClass().getName()).         camelContext.start().         producerTemplate = camelContext.createProducerTemplate().         consumerTemplate = camelContext.createConsumerTemplate().         log.debug("Bundle {} started.", bundleContext.getBundle().getBundleId()).     } catch (Throwable e) {         String errorMessage = "Problem when starting Kura module " + getClass().getName() + ":".         log.warn(errorMessage, e).         // Print error to the Kura console.         System.err.println(errorMessage).         e.printStackTrace().         throw e.     } }
false;public;1;6;;@Override public void stop(BundleContext bundleContext) throws Exception {     log.debug("Stopping bundle {}.", bundleContext.getBundle().getBundleId()).     camelContext.stop().     log.debug("Bundle {} stopped.", bundleContext.getBundle().getBundleId()). }
false;protected;2;3;;protected void activate(ComponentContext componentContext, Map<String, Object> properties) throws Exception {     start(componentContext.getBundleContext()). }
false;protected;1;3;;protected void deactivate(ComponentContext componentContext) throws Exception {     stop(componentContext.getBundleContext()). }
false;public;0;4;;// Callbacks @Override public void configure() throws Exception {     log.debug("No programmatic routes configuration found."). }
false;protected;0;3;;protected CamelContext createCamelContext() {     return new OsgiDefaultCamelContext(bundleContext). }
false;protected;1;3;;protected void beforeStart(CamelContext camelContext) {     log.debug("Empty KuraRouter CamelContext before start configuration - skipping."). }
false;protected;1;4;;// API Helpers protected <T> T service(Class<T> serviceType) {     ServiceReference reference = bundleContext.getServiceReference(serviceType.getName()).     return reference == null ? null : (T) bundleContext.getService(reference). }
false;protected;1;7;;protected <T> T requiredService(Class<T> serviceType) {     ServiceReference reference = bundleContext.getServiceReference(serviceType.getName()).     if (reference == null) {         throw new IllegalStateException("Cannot find service: " + serviceType.getName()).     }     return (T) bundleContext.getService(reference). }
false;protected;0;3;;// Private helpers protected String camelXmlRoutesPid() {     return "kura.camel". }
false;protected;0;3;;protected String camelXmlRoutesProperty() {     return "kura.camel." + bundleContext.getBundle().getSymbolicName() + ".route". }
