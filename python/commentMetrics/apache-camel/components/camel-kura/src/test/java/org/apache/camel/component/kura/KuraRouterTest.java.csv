commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void before() throws Exception {     given(bundleContext.getBundle().getVersion().toString()).willReturn("version").     given(bundleContext.getBundle().getSymbolicName()).willReturn("symbolic_name").     given(bundleContext.getService(any(ServiceReference.class))).willReturn(configurationAdmin).     router.start(bundleContext). }
false;public;0;4;;@After public void after() throws Exception {     router.stop(bundleContext). }
false;public;0;8;;@Test public void shouldCloseCamelContext() throws Exception {     // When     router.stop(bundleContext).     // Then     Assert.assertEquals(ServiceStatus.Stopped, router.camelContext.getStatus()). }
false;public;0;13;;@Test public void shouldStartCamelContext() throws Exception {     // Given     String message = "foo".     MockEndpoint mockEndpoint = router.camelContext.getEndpoint("mock:test", MockEndpoint.class).     mockEndpoint.expectedBodiesReceived(message).     // When     router.producerTemplate.sendBody("direct:start", message).     // Then     mockEndpoint.assertIsSatisfied(). }
false;public;0;4;;@Test public void shouldCreateConsumerTemplate() throws Exception {     assertNotNull(router.consumerTemplate). }
false;public;0;5;;@Test public void shouldReturnNoService() {     given(bundleContext.getServiceReference(any(String.class))).willReturn(null).     assertNull(router.service(ConfigurationAdmin.class)). }
false;public;0;4;;@Test public void shouldReturnService() {     assertNotNull(router.service(ConfigurationAdmin.class)). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void shouldValidateLackOfService() {     given(bundleContext.getServiceReference(any(String.class))).willReturn(null).     router.requiredService(ConfigurationAdmin.class). }
false;public;0;15;;@Test public void shouldLoadXmlRoutes() throws Exception {     // Given     given(configurationAdmin.getConfiguration(anyString())).willReturn(configuration).     Dictionary<String, Object> properties = new Hashtable<>().     String routeDefinition = IOUtils.toString(getClass().getResource("/route.xml"), StandardCharsets.UTF_8).     properties.put("kura.camel.symbolic_name.route", routeDefinition).     given(configuration.getProperties()).willReturn(properties).     // When     router.start(router.bundleContext).     // Then     assertNotNull(router.camelContext.adapt(ModelCamelContext.class).getRouteDefinition("loaded")). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:test"). }
false;protected;0;4;;@Override protected CamelContext createCamelContext() {     return new DefaultCamelContext(). }
