commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String getZkRoot() {     return zkRoot. }
true;public;1;3;/**  * The root path to use in zookeeper where information is stored which nodes are master/slave etc.  * Will by default use: /camel/zookeepermaster/clusters/master  */ ;/**  * The root path to use in zookeeper where information is stored which nodes are master/slave etc.  * Will by default use: /camel/zookeepermaster/clusters/master  */ public void setZkRoot(String zkRoot) {     this.zkRoot = zkRoot. }
false;public;0;4;;@ManagedAttribute(description = "The name of the cluster group to use") public String getGroupName() {     return groupName. }
true;public;1;3;/**  * The name of the cluster group to use  */ ;/**  * The name of the cluster group to use  */ public void setGroupName(String groupName) {     this.groupName = groupName. }
false;public;0;3;;public ContainerIdFactory getContainerIdFactory() {     return containerIdFactory. }
true;public;1;3;/**  * To use a custom ContainerIdFactory for creating container ids.  */ ;/**  * To use a custom ContainerIdFactory for creating container ids.  */ public void setContainerIdFactory(ContainerIdFactory containerIdFactory) {     this.containerIdFactory = containerIdFactory. }
false;public;0;3;;public CuratorFramework getCurator() {     return curator. }
true;public;1;3;/**  * To use a custom configured CuratorFramework as connection to zookeeper ensemble.  */ ;/**  * To use a custom configured CuratorFramework as connection to zookeeper ensemble.  */ public void setCurator(CuratorFramework curator) {     this.curator = curator. }
false;public;0;4;;@ManagedAttribute(description = "Timeout in millis to use when connecting to the zookeeper ensemble") public int getMaximumConnectionTimeout() {     return maximumConnectionTimeout. }
true;public;1;3;/**  * Timeout in millis to use when connecting to the zookeeper ensemble  */ ;/**  * Timeout in millis to use when connecting to the zookeeper ensemble  */ public void setMaximumConnectionTimeout(int maximumConnectionTimeout) {     this.maximumConnectionTimeout = maximumConnectionTimeout. }
false;public;0;4;;@ManagedAttribute(description = "The url for the zookeeper ensemble") public String getZooKeeperUrl() {     return zooKeeperUrl. }
true;public;1;3;/**  * The url for the zookeeper ensemble  */ ;/**  * The url for the zookeeper ensemble  */ public void setZooKeeperUrl(String zooKeeperUrl) {     this.zooKeeperUrl = zooKeeperUrl. }
false;public;0;3;;public String getZooKeeperPassword() {     return zooKeeperPassword. }
true;public;1;3;/**  * The password to use when connecting to the zookeeper ensemble  */ ;/**  * The password to use when connecting to the zookeeper ensemble  */ public void setZooKeeperPassword(String zooKeeperPassword) {     this.zooKeeperPassword = zooKeeperPassword. }
false;public;0;7;;@ManagedAttribute(description = "Are we connected to ZooKeeper") public boolean isConnected() {     if (groupListener == null) {         return false.     }     return groupListener.getGroup().isConnected(). }
false;public;0;7;;@ManagedAttribute(description = "Are we the master") public boolean isMaster() {     if (groupListener == null) {         return false.     }     return groupListener.getGroup().isMaster(). }
false;public;0;14;;@ManagedOperation(description = "Information about all the slaves") public String slaves() {     if (groupListener == null) {         return null.     }     try {         return new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT).disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES).writeValueAsString(groupListener.getGroup().slaves()).     } catch (Exception e) {         return null.     } }
false;public;0;8;;@ManagedOperation(description = "Information about the last event in the cluster group") public String lastEvent() {     if (groupListener == null) {         return null.     }     Object event = groupListener.getGroup().getLastState().     return event != null ? event.toString() : null. }
false;public;0;4;;@ManagedOperation(description = "Information about this node") public String thisNode() {     return thisNodeState != null ? thisNodeState.toString() : null. }
false;public;1;5;;@Override public void onInit(Route route) {     super.onInit(route).     this.route = route. }
false;protected;0;20;;@Override protected void doStart() throws Exception {     super.doStart().     ObjectHelper.notNull(camelContext, "CamelContext").     StringHelper.notEmpty("groupName", groupName).     String path = getCamelClusterPath(groupName).     this.groupListener = new ZookeeperGroupListenerSupport(path, route.getEndpoint(), onLockOwned(), onDisconnected()).     this.groupListener.setCamelContext(camelContext).     this.groupListener.setCurator(curator).     this.groupListener.setMaximumConnectionTimeout(maximumConnectionTimeout).     this.groupListener.setZooKeeperUrl(zooKeeperUrl).     this.groupListener.setZooKeeperPassword(zooKeeperPassword).     ServiceHelper.startService(groupListener).     log.info("Attempting to become master for endpoint: " + route.getEndpoint() + " in " + getCamelContext() + " with singletonID: " + getGroupName()).     thisNodeState = createNodeState().     groupListener.updateState(thisNodeState). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     super.doStop().     ServiceHelper.stopAndShutdownServices(groupListener).     masterConsumer.set(false). }
false;protected;0;20;;protected Runnable onLockOwned() {     return () -> {         if (masterConsumer.compareAndSet(false, true)) {             try {                 // ensure endpoint is also started                 log.info("Elected as master. Starting consumer: {}", route.getEndpoint()).                 startConsumer(route.getConsumer()).                 // Lets show we are starting the consumer.                 thisNodeState = createNodeState().                 thisNodeState.setStarted(true).                 groupListener.updateState(thisNodeState).             } catch (Exception e) {                 log.error("Failed to start master consumer for: {}", route.getEndpoint(), e).             }             log.info("Elected as master. Consumer started: {}", route.getEndpoint()).         }     }. }
false;protected;0;10;;protected Runnable onDisconnected() {     return () -> {         masterConsumer.set(false).         try {             stopConsumer(route.getConsumer()).         } catch (Exception e) {             log.warn("Failed to stop master consumer: {}", route.getEndpoint(), e).         }     }. }
false;protected;1;7;;protected String getCamelClusterPath(String name) {     String path = name.     if (ObjectHelper.isNotEmpty(zkRoot)) {         path = zkRoot + "/" + name.     }     return path. }
false;private;0;6;;private CamelNodeState createNodeState() {     String containerId = getContainerIdFactory().newContainerId().     CamelNodeState state = new CamelNodeState(getGroupName(), containerId).     state.setConsumer(route.getEndpoint().getEndpointUri()).     return state. }
