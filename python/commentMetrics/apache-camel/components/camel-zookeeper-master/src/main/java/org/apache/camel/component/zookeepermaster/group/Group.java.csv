commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Are we connected with the cluster?  */ ;/**  * Are we connected with the cluster?  */ boolean isConnected().
true;;0;1;/**  * Start this member  */ ;/**  * Start this member  */ void start().
true;;0;1;/**  * A member should be closed to release acquired resources used  * to monitor the group membership.  *  * When the member is closed, any memberships registered via this  * Group will be removed from the group.  */ ;/**  * A member should be closed to release acquired resources used  * to monitor the group membership.  *  * When the member is closed, any memberships registered via this  * Group will be removed from the group.  */ void close() throws IOException.
true;;1;1;/**  * Registers a listener which will be called  * when the cluster membership changes or  * the group is connected or disconnected.  */ ;/**  * Registers a listener which will be called  * when the cluster membership changes or  * the group is connected or disconnected.  */ void add(GroupListener<T> listener).
true;;1;1;/**  * Removes a previously added listener.  */ ;/**  * Removes a previously added listener.  */ void remove(GroupListener<T> listener).
true;;1;1;/**  * Update the state of this group member.  * If the state is null, the member will leave the group.  *  * This method can be called even if the group is not started,  * in which case the state will be stored and updated  * when the group becomes started.  *  * @param state the new state of this group member  */ ;/**  * Update the state of this group member.  * If the state is null, the member will leave the group.  *  * This method can be called even if the group is not started,  * in which case the state will be stored and updated  * when the group becomes started.  *  * @param state the new state of this group member  */ void update(T state).
true;;0;1;/**  * Get the list of members connected to this group.  */ ;/**  * Get the list of members connected to this group.  */ Map<String, T> members().
true;;0;1;/**  * Check if we are the master.  */ ;/**  * Check if we are the master.  */ boolean isMaster().
true;;0;1;/**  * Retrieve the master node.  */ ;/**  * Retrieve the master node.  */ T master().
true;;0;1;/**  * Retrieve the list of slaves.  */ ;/**  * Retrieve the list of slaves.  */ List<T> slaves().
true;;0;1;/**  * Gets the last state.  * <p/>  * This can be used by clients to access that last state, such as when the clients is being added  * as a {@link #add(GroupListener) listener} but wants to retrieve the last state to be up to date when the  * client is added.  *  * @return the state, or <tt>null</tt> if no last state yet.  */ ;/**  * Gets the last state.  * <p/>  * This can be used by clients to access that last state, such as when the clients is being added  * as a {@link #add(GroupListener) listener} but wants to retrieve the last state to be up to date when the  * client is added.  *  * @return the state, or <tt>null</tt> if no last state yet.  */ T getLastState().
