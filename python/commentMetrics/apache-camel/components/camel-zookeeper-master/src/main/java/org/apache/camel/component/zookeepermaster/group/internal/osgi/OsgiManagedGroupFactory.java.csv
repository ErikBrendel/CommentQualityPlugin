commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setClassLoader(ClassLoader loader) {     this.delegate = new OsgiTrackingManagedGroupFactory(loader). }
false;public;0;4;;@Override public CuratorFramework getCurator() {     return delegate.getCurator(). }
false;public;2;4;;@Override public <T extends NodeState> Group<T> createGroup(String path, Class<T> clazz) {     return delegate.createGroup(path, clazz). }
false;public;3;4;;@Override public <T extends NodeState> Group<T> createGroup(String path, Class<T> clazz, ThreadFactory threadFactory) {     return delegate.createGroup(path, clazz, threadFactory). }
false;public;2;4;;@Override public <T extends NodeState> Group<T> createMultiGroup(String path, Class<T> clazz) {     throw new IllegalStateException("not supported"). }
false;public;3;4;;@Override public <T extends NodeState> Group<T> createMultiGroup(String path, Class<T> clazz, ThreadFactory threadFactory) {     throw new IllegalStateException("not supported"). }
false;public;0;4;;@Override public void close() {     delegate.close(). }
false;static;1;6;;static BundleContext getBundleContext(ClassLoader loader) {     if (!(loader instanceof BundleReference)) {         throw new IllegalStateException("Not an OSGi ClassLoader").     }     return ((BundleReference) loader).getBundle().getBundleContext(). }
false;public;1;6;;@Override public CuratorFramework addingService(ServiceReference<CuratorFramework> reference) {     CuratorFramework curator = OsgiTrackingManagedGroupFactory.this.bundleContext.getService(reference).     useCurator(curator).     return curator. }
false;public;2;3;;@Override public void modifiedService(ServiceReference<CuratorFramework> reference, CuratorFramework service) { }
false;public;2;5;;@Override public void removedService(ServiceReference<CuratorFramework> reference, CuratorFramework service) {     useCurator(null).     OsgiTrackingManagedGroupFactory.this.bundleContext.ungetService(reference). }
false;protected;1;6;;protected void useCurator(CuratorFramework curator) {     this.curator = curator.     for (DelegateZooKeeperGroup<?> group : groups) {         group.useCurator(curator).     } }
false;public;0;4;;@Override public CuratorFramework getCurator() {     return curator. }
false;public;0;6;;@Override public void start() {     useCurator(curator).     groups.add(this).     super.start(). }
false;public;0;5;;@Override public void close() throws IOException {     groups.remove(this).     super.close(). }
false;public;2;17;;@Override public <T extends NodeState> Group<T> createGroup(String path, Class<T> clazz) {     return new DelegateZooKeeperGroup<T>(path, clazz) {          @Override         public void start() {             useCurator(curator).             groups.add(this).             super.start().         }          @Override         public void close() throws IOException {             groups.remove(this).             super.close().         }     }. }
false;public;3;4;;@Override public <T extends NodeState> Group<T> createGroup(String path, Class<T> clazz, ThreadFactory threadFactory) {     throw new IllegalStateException("not supported"). }
false;public;0;6;;@Override public void start() {     useCurator(curator).     groups.add(this).     super.start(). }
false;public;0;5;;@Override public void close() throws IOException {     groups.remove(this).     super.close(). }
false;public;2;17;;@Override public <T extends NodeState> Group<T> createMultiGroup(String path, Class<T> clazz) {     return new DelegateZooKeeperMultiGroup<T>(path, clazz) {          @Override         public void start() {             useCurator(curator).             groups.add(this).             super.start().         }          @Override         public void close() throws IOException {             groups.remove(this).             super.close().         }     }. }
false;public;3;4;;@Override public <T extends NodeState> Group<T> createMultiGroup(String path, Class<T> clazz, ThreadFactory threadFactory) {     throw new IllegalStateException("not supported"). }
false;public;0;4;;@Override public void close() {     this.tracker.close(). }
