commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;public void useCurator(CuratorFramework curator) {     Group<T> group = this.group.     if (group != null) {         closeQuietly(group).     }     if (curator != null) {         group = createGroup(curator, path, clazz).         group.update(state).         for (GroupListener<T> listener : listeners) {             group.add(listener).         }         if (started.get()) {             group.start().         }         this.group = group.     } }
false;protected;3;3;;protected Group<T> createGroup(CuratorFramework client, String path, Class<T> clazz) {     return new ZooKeeperGroup<>(client, path, clazz). }
false;public;1;8;;@Override public void add(GroupListener<T> listener) {     listeners.add(listener).     Group<T> group = this.group.     if (group != null) {         group.add(listener).     } }
false;public;1;8;;@Override public void remove(GroupListener<T> listener) {     listeners.remove(listener).     Group<T> group = this.group.     if (group != null) {         group.remove(listener).     } }
false;public;0;9;;@Override public boolean isConnected() {     Group<T> group = this.group.     if (group != null) {         return group.isConnected().     } else {         return false.     } }
false;public;0;6;;@Override public void start() {     if (started.compareAndSet(false, true)) {         doStart().     } }
false;protected;0;5;;protected void doStart() {     if (group != null) {         group.start().     } }
false;public;0;6;;@Override public void close() throws IOException {     if (started.compareAndSet(true, false)) {         doStop().     } }
false;protected;0;3;;protected void doStop() throws IOException {     closeQuietly(group). }
false;public;1;8;;@Override public void update(T state) {     this.state = state.     Group<T> group = this.group.     if (group != null) {         group.update(state).     } }
false;public;0;9;;@Override public Map<String, T> members() {     Group<T> group = this.group.     if (group != null) {         return group.members().     } else {         return Collections.emptyMap().     } }
false;public;0;9;;@Override public boolean isMaster() {     Group<T> group = this.group.     if (group != null) {         return group.isMaster().     } else {         return false.     } }
false;public;0;9;;@Override public T master() {     Group<T> group = this.group.     if (group != null) {         return group.master().     } else {         return null.     } }
false;public;0;9;;@Override public List<T> slaves() {     Group<T> group = this.group.     if (group != null) {         return group.slaves().     } else {         return Collections.emptyList().     } }
false;public;0;3;;public Group<T> getGroup() {     return group. }
false;public;0;4;;@Override public T getLastState() {     return group != null ? group.getLastState() : null. }
