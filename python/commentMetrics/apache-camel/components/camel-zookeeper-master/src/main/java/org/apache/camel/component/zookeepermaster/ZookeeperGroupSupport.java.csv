commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;6;;public CuratorFramework getCurator() {     if (managedGroupFactory == null) {         throw new IllegalStateException("Component is not started").     }     return managedGroupFactory.getCurator(). }
false;public;1;6;;public Group<CamelNodeState> createGroup(String path) {     if (managedGroupFactory == null) {         throw new IllegalStateException("Component is not started").     }     return managedGroupFactory.createGroup(path, CamelNodeState.class). }
true;public;1;4;/**  * To use a custom configured CuratorFramework as connection to zookeeper ensemble.  */ ;/**  * To use a custom configured CuratorFramework as connection to zookeeper ensemble.  */ public void setCurator(CuratorFramework curator) {     this.curator = curator.     registerAsListener(). }
false;public;0;3;;public int getMaximumConnectionTimeout() {     return maximumConnectionTimeout. }
true;public;1;3;/**  * Timeout in millis to use when connecting to the zookeeper ensemble  */ ;/**  * Timeout in millis to use when connecting to the zookeeper ensemble  */ public void setMaximumConnectionTimeout(int maximumConnectionTimeout) {     this.maximumConnectionTimeout = maximumConnectionTimeout. }
false;public;0;3;;public String getZooKeeperUrl() {     return zooKeeperUrl. }
true;public;1;3;/**  * The url for the zookeeper ensemble  */ ;/**  * The url for the zookeeper ensemble  */ public void setZooKeeperUrl(String zooKeeperUrl) {     this.zooKeeperUrl = zooKeeperUrl. }
false;public;0;3;;public String getZooKeeperPassword() {     return zooKeeperPassword. }
true;public;1;3;/**  * The password to use when connecting to the zookeeper ensemble  */ ;/**  * The password to use when connecting to the zookeeper ensemble  */ public void setZooKeeperPassword(String zooKeeperPassword) {     this.zooKeeperPassword = zooKeeperPassword. }
false;protected;0;20;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext").     // attempt to lookup curator framework from registry using the name curator     if (curator == null) {         try {             CuratorFramework aCurator = getCamelContext().getRegistry().lookupByNameAndType("curator", CuratorFramework.class).             if (aCurator != null) {                 LOG.debug("CuratorFramework found in CamelRegistry: {}", aCurator).                 setCurator(aCurator).             }         } catch (Exception exception) {         // ignore         }     }     // will auto create curator if needed     managedGroupFactory = ManagedGroupFactoryBuilder.create(curator, getClass().getClassLoader(), getCamelContext().getClassResolver(), this). }
false;public;0;34;;public CuratorFramework call() throws Exception {     String connectString = getZooKeeperUrl().     if (connectString == null) {         connectString = System.getenv(ZOOKEEPER_URL_ENV).     }     if (connectString == null) {         String zkHost = System.getenv(ZOOKEEPER_HOST_ENV).         if (zkHost != null) {             String zkPort = System.getenv(ZOOKEEPER_PORT_ENV).             connectString = zkHost + ":" + (zkPort == null ? "2181" : zkPort).         }     }     if (connectString == null) {         connectString = System.getProperty(ZOOKEEPER_URL, "localhost:2181").     }     String password = getZooKeeperPassword().     if (password == null) {         System.getProperty(ZOOKEEPER_PASSWORD).     }     LOG.info("Creating new CuratorFramework with connection: {}", connectString).     CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder().connectString(connectString).retryPolicy(new RetryOneTime(1000)).connectionTimeoutMs(getMaximumConnectionTimeout()).     if (password != null && !password.isEmpty()) {         builder.authorization("digest", ("fabric:" + password).getBytes()).     }     curator = builder.build().     LOG.debug("Starting CuratorFramework {}", curator).     curator.start().     return curator. }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (managedGroupFactory != null) {         managedGroupFactory.close().         managedGroupFactory = null.     } }
false;public;2;4;;@Override public void stateChanged(CuratorFramework client, ConnectionState newState) {     LOG.debug("CuratorFramework state changed: {}", newState). }
false;protected;0;5;;protected void registerAsListener() {     if (curator != null) {         curator.getConnectionStateListenable().addListener(this).     } }
