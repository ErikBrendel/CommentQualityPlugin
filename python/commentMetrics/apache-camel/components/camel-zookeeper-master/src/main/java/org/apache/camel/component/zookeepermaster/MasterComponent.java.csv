commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ContainerIdFactory getContainerIdFactory() {     return containerIdFactory. }
true;public;1;3;/**  * To use a custom ContainerIdFactory for creating container ids.  */ ;/**  * To use a custom ContainerIdFactory for creating container ids.  */ public void setContainerIdFactory(ContainerIdFactory containerIdFactory) {     this.containerIdFactory = containerIdFactory. }
false;public;0;3;;public String getZkRoot() {     return zkRoot. }
true;public;1;3;/**  * The root path to use in zookeeper where information is stored which nodes are master/slave etc.  * Will by default use: /camel/zookeepermaster/clusters/master  */ ;/**  * The root path to use in zookeeper where information is stored which nodes are master/slave etc.  * Will by default use: /camel/zookeepermaster/clusters/master  */ public void setZkRoot(String zkRoot) {     this.zkRoot = zkRoot. }
false;protected;3;16;;// Implementation methods // ------------------------------------------------------------------------- @Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> params) throws Exception {     int idx = remaining.indexOf(':').     if (idx <= 0) {         throw new IllegalArgumentException("Missing : in URI so cannot split the group name from the actual URI for '" + remaining + "'").     }     // we are registering a regular endpoint     String name = remaining.substring(0, idx).     String childUri = remaining.substring(idx + 1).     // we need to apply the params here     if (params != null && params.size() > 0) {         childUri = childUri + "?" + uri.substring(uri.indexOf('?') + 1).     }     MasterEndpoint answer = new MasterEndpoint(uri, this, name, childUri).     return answer. }
false;protected;1;7;;protected String getCamelClusterPath(String name) {     String path = name.     if (ObjectHelper.isNotEmpty(zkRoot)) {         path = zkRoot + "/" + name.     }     return path. }
