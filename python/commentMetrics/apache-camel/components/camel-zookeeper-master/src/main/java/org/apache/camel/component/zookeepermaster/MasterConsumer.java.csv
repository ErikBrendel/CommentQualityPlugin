commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@ManagedAttribute(description = "Are we connected to ZooKeeper") public boolean isConnected() {     return groupListener.getGroup().isConnected(). }
false;public;0;4;;@ManagedAttribute(description = "Are we the master") public boolean isMaster() {     return groupListener.getGroup().isMaster(). }
false;public;0;11;;@ManagedOperation(description = "Information about all the slaves") public String slaves() {     try {         return new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT).disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES).writeValueAsString(groupListener.getGroup().slaves()).     } catch (Exception e) {         return null.     } }
false;public;0;5;;@ManagedOperation(description = "Information about the last event in the cluster group") public String lastEvent() {     Object event = groupListener.getGroup().getLastState().     return event != null ? event.toString() : null. }
false;public;0;4;;@ManagedOperation(description = "Information about this node") public String thisNode() {     return thisNodeState != null ? thisNodeState.toString() : null. }
false;protected;0;17;;@Override protected void doStart() throws Exception {     super.doStart().     String path = endpoint.getComponent().getCamelClusterPath(endpoint.getGroupName()).     this.groupListener = new ZookeeperGroupListenerSupport(path, endpoint, onLockOwned(), onDisconnected()).     this.groupListener.setCamelContext(endpoint.getCamelContext()).     this.groupListener.setZooKeeperUrl(endpoint.getComponent().getZooKeeperUrl()).     this.groupListener.setZooKeeperPassword(endpoint.getComponent().getZooKeeperPassword()).     this.groupListener.setCurator(endpoint.getComponent().getCurator()).     this.groupListener.setMaximumConnectionTimeout(endpoint.getComponent().getMaximumConnectionTimeout()).     ServiceHelper.startService(groupListener).     LOG.info("Attempting to become master for endpoint: " + endpoint + " in " + endpoint.getCamelContext() + " with singletonID: " + endpoint.getGroupName()).     thisNodeState = createNodeState().     groupListener.updateState(thisNodeState). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     try {         stopConsumer().     } finally {         ServiceHelper.stopAndShutdownServices(groupListener).     }     super.doStop(). }
false;private;0;6;;private CamelNodeState createNodeState() {     String containerId = endpoint.getComponent().getContainerIdFactory().newContainerId().     CamelNodeState state = new CamelNodeState(endpoint.getGroupName(), containerId).     state.setConsumer(endpoint.getConsumerEndpoint().getEndpointUri()).     return state. }
false;private;0;7;;private void stopConsumer() throws Exception {     ServiceHelper.stopAndShutdownServices(delegate).     ServiceHelper.stopAndShutdownServices(endpoint.getConsumerEndpoint()).     delegate = null.     delegateService = null.     thisNodeState = null. }
false;protected;0;7;;@Override protected void doResume() throws Exception {     if (delegateService != null) {         delegateService.resume().     }     super.doResume(). }
false;protected;0;7;;@Override protected void doSuspend() throws Exception {     if (delegateService != null) {         delegateService.suspend().     }     super.doSuspend(). }
false;protected;0;28;;protected Runnable onLockOwned() {     return () -> {         if (delegate == null) {             try {                 // ensure endpoint is also started                 LOG.info("Elected as master. Starting consumer: {}", endpoint.getConsumerEndpoint()).                 ServiceHelper.startService(endpoint.getConsumerEndpoint()).                 delegate = endpoint.getConsumerEndpoint().createConsumer(processor).                 delegateService = null.                 if (delegate instanceof SuspendableService) {                     delegateService = (SuspendableService) delegate.                 }                 // Lets show we are starting the consumer.                 thisNodeState = createNodeState().                 thisNodeState.setStarted(true).                 groupListener.updateState(thisNodeState).                 ServiceHelper.startService(delegate).             } catch (Exception e) {                 LOG.error("Failed to start master consumer for: {}", endpoint, e).             }             LOG.info("Elected as master. Consumer started: {}", endpoint.getConsumerEndpoint()).         }     }. }
false;protected;0;9;;protected Runnable onDisconnected() {     return () -> {         try {             stopConsumer().         } catch (Exception e) {             LOG.warn("Failed to stop master consumer for: {}", endpoint, e).         }     }. }
