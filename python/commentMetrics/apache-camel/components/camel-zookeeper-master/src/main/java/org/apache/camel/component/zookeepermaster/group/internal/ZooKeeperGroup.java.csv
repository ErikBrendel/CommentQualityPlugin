# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperGroup -> protected void handleException(Throwable e);1489168193;Default behavior is just to log the exception__@param e the exception;protected void handleException(Throwable e) {_        if (e instanceof IllegalStateException && "Client is not started".equals(e.getMessage())) {_            LOG.debug("", e)__        } else {_            LOG.error("", e)__        }_    };default,behavior,is,just,to,log,the,exception,param,e,the,exception;protected,void,handle,exception,throwable,e,if,e,instanceof,illegal,state,exception,client,is,not,started,equals,e,get,message,log,debug,e,else,log,error,e
ZooKeeperGroup -> protected void handleException(Throwable e);1489183654;Default behavior is just to log the exception__@param e the exception;protected void handleException(Throwable e) {_        if (e instanceof IllegalStateException && "Client is not started".equals(e.getMessage())) {_            LOG.debug("", e)__        } else {_            LOG.error("", e)__        }_    };default,behavior,is,just,to,log,the,exception,param,e,the,exception;protected,void,handle,exception,throwable,e,if,e,instanceof,illegal,state,exception,client,is,not,started,equals,e,get,message,log,debug,e,else,log,error,e
ZooKeeperGroup -> protected void handleException(Throwable e);1524063240;Default behavior is just to log the exception__@param e the exception;protected void handleException(Throwable e) {_        if (e instanceof IllegalStateException && "Client is not started".equals(e.getMessage())) {_            LOG.debug("", e)__        } else {_            LOG.error("", e)__        }_    };default,behavior,is,just,to,log,the,exception,param,e,the,exception;protected,void,handle,exception,throwable,e,if,e,instanceof,illegal,state,exception,client,is,not,started,equals,e,get,message,log,debug,e,else,log,error,e
ZooKeeperGroup -> protected void handleException(Throwable e);1536687142;Default behavior is just to log the exception__@param e the exception;protected void handleException(Throwable e) {_        if (e instanceof IllegalStateException && "Client is not started".equals(e.getMessage())) {_            LOG.debug("", e)__        } else {_            LOG.error("", e)__        }_    };default,behavior,is,just,to,log,the,exception,param,e,the,exception;protected,void,handle,exception,throwable,e,if,e,instanceof,illegal,state,exception,client,is,not,started,equals,e,get,message,log,debug,e,else,log,error,e
ZooKeeperGroup -> public void clearAndRefresh() throws Exception;1489168193;Clear out current data and begin a new query on the path__@throws Exception errors;public void clearAndRefresh() throws Exception {_        clearAndRefresh(false, false)__    };clear,out,current,data,and,begin,a,new,query,on,the,path,throws,exception,errors;public,void,clear,and,refresh,throws,exception,clear,and,refresh,false,false
ZooKeeperGroup -> public void clearAndRefresh() throws Exception;1489183654;Clear out current data and begin a new query on the path__@throws Exception errors;public void clearAndRefresh() throws Exception {_        clearAndRefresh(false, false)__    };clear,out,current,data,and,begin,a,new,query,on,the,path,throws,exception,errors;public,void,clear,and,refresh,throws,exception,clear,and,refresh,false,false
ZooKeeperGroup -> public void clearAndRefresh() throws Exception;1524063240;Clear out current data and begin a new query on the path__@throws Exception errors;public void clearAndRefresh() throws Exception {_        clearAndRefresh(false, false)__    };clear,out,current,data,and,begin,a,new,query,on,the,path,throws,exception,errors;public,void,clear,and,refresh,throws,exception,clear,and,refresh,false,false
ZooKeeperGroup -> public void clearAndRefresh() throws Exception;1536687142;Clear out current data and begin a new query on the path__@throws Exception errors;public void clearAndRefresh() throws Exception {_        clearAndRefresh(false, false)__    };clear,out,current,data,and,begin,a,new,query,on,the,path,throws,exception,errors;public,void,clear,and,refresh,throws,exception,clear,and,refresh,false,false
ZooKeeperGroup -> void putCurrentData(String key, ChildData value);1489168193;Used for testing purpose;void putCurrentData(String key, ChildData value) {_        currentData.put(key, value)__    };used,for,testing,purpose;void,put,current,data,string,key,child,data,value,current,data,put,key,value
ZooKeeperGroup -> void putCurrentData(String key, ChildData value);1489183654;Used for testing purpose;void putCurrentData(String key, ChildData value) {_        currentData.put(key, value)__    };used,for,testing,purpose;void,put,current,data,string,key,child,data,value,current,data,put,key,value
ZooKeeperGroup -> void putCurrentData(String key, ChildData value);1524063240;Used for testing purpose;void putCurrentData(String key, ChildData value) {_        currentData.put(key, value)__    };used,for,testing,purpose;void,put,current,data,string,key,child,data,value,current,data,put,key,value
ZooKeeperGroup -> void putCurrentData(String key, ChildData value);1536687142;Used for testing purpose;void putCurrentData(String key, ChildData value) {_        currentData.put(key, value)__    };used,for,testing,purpose;void,put,current,data,string,key,child,data,value,current,data,put,key,value
ZooKeeperGroup -> public List<ChildData> getCurrentData();1489168193;Return the current data. There are no guarantees of accuracy. This is_merely the most recent view of the data. The data is returned in sorted order.__@return list of children and data;public List<ChildData> getCurrentData() {_        return ImmutableList.copyOf(Sets.<ChildData>newTreeSet(currentData.values()))__    };return,the,current,data,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,the,data,is,returned,in,sorted,order,return,list,of,children,and,data;public,list,child,data,get,current,data,return,immutable,list,copy,of,sets,child,data,new,tree,set,current,data,values
ZooKeeperGroup -> public List<ChildData> getCurrentData();1489183654;Return the current data. There are no guarantees of accuracy. This is_merely the most recent view of the data. The data is returned in sorted order.__@return list of children and data;public List<ChildData> getCurrentData() {_        List<ChildData> answer = new ArrayList<>()__        answer.addAll(currentData.values())__        return answer__    };return,the,current,data,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,the,data,is,returned,in,sorted,order,return,list,of,children,and,data;public,list,child,data,get,current,data,list,child,data,answer,new,array,list,answer,add,all,current,data,values,return,answer
ZooKeeperGroup -> public List<ChildData> getCurrentData();1524063240;Return the current data. There are no guarantees of accuracy. This is_merely the most recent view of the data. The data is returned in sorted order.__@return list of children and data;public List<ChildData> getCurrentData() {_        List<ChildData> answer = new ArrayList<>()__        answer.addAll(currentData.values())__        return answer__    };return,the,current,data,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,the,data,is,returned,in,sorted,order,return,list,of,children,and,data;public,list,child,data,get,current,data,list,child,data,answer,new,array,list,answer,add,all,current,data,values,return,answer
ZooKeeperGroup -> public List<ChildData> getCurrentData();1536687142;Return the current data. There are no guarantees of accuracy. This is_merely the most recent view of the data. The data is returned in sorted order.__@return list of children and data;public List<ChildData> getCurrentData() {_        List<ChildData> answer = new ArrayList<>()__        answer.addAll(currentData.values())__        return answer__    };return,the,current,data,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,the,data,is,returned,in,sorted,order,return,list,of,children,and,data;public,list,child,data,get,current,data,list,child,data,answer,new,array,list,answer,add,all,current,data,values,return,answer
ZooKeeperGroup -> public void clear();1489168193;Clears the current data without beginning a new query and without generating any events_for listeners.;public void clear() {_        currentData.clear()__    };clears,the,current,data,without,beginning,a,new,query,and,without,generating,any,events,for,listeners;public,void,clear,current,data,clear
ZooKeeperGroup -> public void clear();1489183654;Clears the current data without beginning a new query and without generating any events_for listeners.;public void clear() {_        currentData.clear()__    };clears,the,current,data,without,beginning,a,new,query,and,without,generating,any,events,for,listeners;public,void,clear,current,data,clear
ZooKeeperGroup -> public void clear();1524063240;Clears the current data without beginning a new query and without generating any events_for listeners.;public void clear() {_        currentData.clear()__    };clears,the,current,data,without,beginning,a,new,query,and,without,generating,any,events,for,listeners;public,void,clear,current,data,clear
ZooKeeperGroup -> public void clear();1536687142;Clears the current data without beginning a new query and without generating any events_for listeners.;public void clear() {_        currentData.clear()__    };clears,the,current,data,without,beginning,a,new,query,and,without,generating,any,events,for,listeners;public,void,clear,current,data,clear
ZooKeeperGroup -> public ChildData getCurrentData(String fullPath);1489168193;Return the current data for the given path. There are no guarantees of accuracy. This is_merely the most recent view of the data. If there is no child with that path, <code>null</code>_is returned.__@param fullPath full path to the node to check_@return data or null;public ChildData getCurrentData(String fullPath) {_        return currentData.get(fullPath)__    };return,the,current,data,for,the,given,path,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,if,there,is,no,child,with,that,path,code,null,code,is,returned,param,full,path,full,path,to,the,node,to,check,return,data,or,null;public,child,data,get,current,data,string,full,path,return,current,data,get,full,path
ZooKeeperGroup -> public ChildData getCurrentData(String fullPath);1489183654;Return the current data for the given path. There are no guarantees of accuracy. This is_merely the most recent view of the data. If there is no child with that path, <code>null</code>_is returned.__@param fullPath full path to the node to check_@return data or null;public ChildData getCurrentData(String fullPath) {_        return currentData.get(fullPath)__    };return,the,current,data,for,the,given,path,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,if,there,is,no,child,with,that,path,code,null,code,is,returned,param,full,path,full,path,to,the,node,to,check,return,data,or,null;public,child,data,get,current,data,string,full,path,return,current,data,get,full,path
ZooKeeperGroup -> public ChildData getCurrentData(String fullPath);1524063240;Return the current data for the given path. There are no guarantees of accuracy. This is_merely the most recent view of the data. If there is no child with that path, <code>null</code>_is returned.__@param fullPath full path to the node to check_@return data or null;public ChildData getCurrentData(String fullPath) {_        return currentData.get(fullPath)__    };return,the,current,data,for,the,given,path,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,if,there,is,no,child,with,that,path,code,null,code,is,returned,param,full,path,full,path,to,the,node,to,check,return,data,or,null;public,child,data,get,current,data,string,full,path,return,current,data,get,full,path
ZooKeeperGroup -> public ChildData getCurrentData(String fullPath);1536687142;Return the current data for the given path. There are no guarantees of accuracy. This is_merely the most recent view of the data. If there is no child with that path, <code>null</code>_is returned.__@param fullPath full path to the node to check_@return data or null;public ChildData getCurrentData(String fullPath) {_        return currentData.get(fullPath)__    };return,the,current,data,for,the,given,path,there,are,no,guarantees,of,accuracy,this,is,merely,the,most,recent,view,of,the,data,if,there,is,no,child,with,that,path,code,null,code,is,returned,param,full,path,full,path,to,the,node,to,check,return,data,or,null;public,child,data,get,current,data,string,full,path,return,current,data,get,full,path
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService);1489168193;@param client          the client_@param path            path to watch_@param executorService ExecutorService to use for the ZooKeeperGroup's background thread;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService) {_        LOG.info("Creating ZK Group for path \"" + path + "\"")__        this.client = client__        this.path = path__        this.clazz = clazz__        this.executorService = executorService__        ensurePath = client.newNamespaceAwareEnsurePath(path)__    };param,client,the,client,param,path,path,to,watch,param,executor,service,executor,service,to,use,for,the,zoo,keeper,group,s,background,thread;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,final,executor,service,executor,service,log,info,creating,zk,group,for,path,path,this,client,client,this,path,path,this,clazz,clazz,this,executor,service,executor,service,ensure,path,client,new,namespace,aware,ensure,path,path
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService);1489183654;@param client          the client_@param path            path to watch_@param executorService ExecutorService to use for the ZooKeeperGroup's background thread;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService) {_        LOG.info("Creating ZK Group for path \"" + path + "\"")__        this.client = client__        this.path = path__        this.clazz = clazz__        this.executorService = executorService__        ensurePath = client.newNamespaceAwareEnsurePath(path)__    };param,client,the,client,param,path,path,to,watch,param,executor,service,executor,service,to,use,for,the,zoo,keeper,group,s,background,thread;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,final,executor,service,executor,service,log,info,creating,zk,group,for,path,path,this,client,client,this,path,path,this,clazz,clazz,this,executor,service,executor,service,ensure,path,client,new,namespace,aware,ensure,path,path
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService);1524063240;@param client          the client_@param path            path to watch_@param executorService ExecutorService to use for the ZooKeeperGroup's background thread;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService) {_        LOG.info("Creating ZK Group for path \"" + path + "\"")__        this.client = client__        this.path = path__        this.clazz = clazz__        this.executorService = executorService__        ensurePath = client.newNamespaceAwareEnsurePath(path)__    };param,client,the,client,param,path,path,to,watch,param,executor,service,executor,service,to,use,for,the,zoo,keeper,group,s,background,thread;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,final,executor,service,executor,service,log,info,creating,zk,group,for,path,path,this,client,client,this,path,path,this,clazz,clazz,this,executor,service,executor,service,ensure,path,client,new,namespace,aware,ensure,path,path
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService);1536687142;@param client          the client_@param path            path to watch_@param executorService ExecutorService to use for the ZooKeeperGroup's background thread;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService) {_        LOG.info("Creating ZK Group for path \"" + path + "\"")__        this.client = client__        this.path = path__        this.clazz = clazz__        this.executorService = executorService__        ensurePath = client.newNamespaceAwareEnsurePath(path)__    };param,client,the,client,param,path,path,to,watch,param,executor,service,executor,service,to,use,for,the,zoo,keeper,group,s,background,thread;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,final,executor,service,executor,service,log,info,creating,zk,group,for,path,path,this,client,client,this,path,path,this,clazz,clazz,this,executor,service,executor,service,ensure,path,client,new,namespace,aware,ensure,path,path
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory);1489168193;@param client        the client_@param path          path to watch_@param threadFactory factory to use when creating internal threads;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory) {_        this(client, path, clazz, Executors.newSingleThreadExecutor(threadFactory))__    };param,client,the,client,param,path,path,to,watch,param,thread,factory,factory,to,use,when,creating,internal,threads;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,thread,factory,thread,factory,this,client,path,clazz,executors,new,single,thread,executor,thread,factory
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory);1489183654;@param client        the client_@param path          path to watch_@param threadFactory factory to use when creating internal threads;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory) {_        this(client, path, clazz, Executors.newSingleThreadExecutor(threadFactory))__    };param,client,the,client,param,path,path,to,watch,param,thread,factory,factory,to,use,when,creating,internal,threads;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,thread,factory,thread,factory,this,client,path,clazz,executors,new,single,thread,executor,thread,factory
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory);1524063240;@param client        the client_@param path          path to watch_@param threadFactory factory to use when creating internal threads;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory) {_        this(client, path, clazz, Executors.newSingleThreadExecutor(threadFactory))__    };param,client,the,client,param,path,path,to,watch,param,thread,factory,factory,to,use,when,creating,internal,threads;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,thread,factory,thread,factory,this,client,path,clazz,executors,new,single,thread,executor,thread,factory
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory);1536687142;@param client        the client_@param path          path to watch_@param threadFactory factory to use when creating internal threads;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory) {_        this(client, path, clazz, Executors.newSingleThreadExecutor(threadFactory))__    };param,client,the,client,param,path,path,to,watch,param,thread,factory,factory,to,use,when,creating,internal,threads;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,thread,factory,thread,factory,this,client,path,clazz,executors,new,single,thread,executor,thread,factory
ZooKeeperGroup -> public boolean isUnstable();1489168193;Returns an indication that the sequential, ephemeral node may be registered more than once for this group_@return;public boolean isUnstable() {_        return unstable.get()__    };returns,an,indication,that,the,sequential,ephemeral,node,may,be,registered,more,than,once,for,this,group,return;public,boolean,is,unstable,return,unstable,get
ZooKeeperGroup -> public boolean isUnstable();1489183654;Returns an indication that the sequential, ephemeral node may be registered more than once for this group;public boolean isUnstable() {_        return unstable.get()__    };returns,an,indication,that,the,sequential,ephemeral,node,may,be,registered,more,than,once,for,this,group;public,boolean,is,unstable,return,unstable,get
ZooKeeperGroup -> public boolean isUnstable();1524063240;Returns an indication that the sequential, ephemeral node may be registered more than once for this group;public boolean isUnstable() {_        return unstable.get()__    };returns,an,indication,that,the,sequential,ephemeral,node,may,be,registered,more,than,once,for,this,group;public,boolean,is,unstable,return,unstable,get
ZooKeeperGroup -> public boolean isUnstable();1536687142;Returns an indication that the sequential, ephemeral node may be registered more than once for this group;public boolean isUnstable() {_        return unstable.get()__    };returns,an,indication,that,the,sequential,ephemeral,node,may,be,registered,more,than,once,for,this,group;public,boolean,is,unstable,return,unstable,get
ZooKeeperGroup -> @Override     public void close() throws IOException;1489168193;Close/end the cache__@throws IOException errors;@Override_    public void close() throws IOException {_        LOG.debug(this + ".close, connected:" + connected)__        if (started.compareAndSet(true, false)) {_            client.getConnectionStateListenable().removeListener(connectionStateListener)__            executorService.shutdownNow()__            try {_                executorService.awaitTermination(5, TimeUnit.SECONDS)__            } catch (InterruptedException e) {_                throw (IOException) new InterruptedIOException().initCause(e)__            }_            try {_                doUpdate(null)__                if (isConnected()) {_                    callListeners(GroupListener.GroupEvent.DISCONNECTED)__                }_            } catch (Exception e) {_                handleException(e)__            }_            listeners.clear()__            mapper.getTypeFactory().clearCache()__            mapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)___            client.clearWatcherReferences(childrenWatcher)__            client.clearWatcherReferences(dataWatcher)__        }_    };close,end,the,cache,throws,ioexception,errors;override,public,void,close,throws,ioexception,log,debug,this,close,connected,connected,if,started,compare,and,set,true,false,client,get,connection,state,listenable,remove,listener,connection,state,listener,executor,service,shutdown,now,try,executor,service,await,termination,5,time,unit,seconds,catch,interrupted,exception,e,throw,ioexception,new,interrupted,ioexception,init,cause,e,try,do,update,null,if,is,connected,call,listeners,group,listener,group,event,disconnected,catch,exception,e,handle,exception,e,listeners,clear,mapper,get,type,factory,clear,cache,mapper,new,object,mapper,disable,deserialization,feature,client,clear,watcher,references,children,watcher,client,clear,watcher,references,data,watcher
ZooKeeperGroup -> @Override     public void close() throws IOException;1489183654;Close/end the cache__@throws IOException errors;@Override_    public void close() throws IOException {_        LOG.debug(this + ".close, connected:" + connected)__        if (started.compareAndSet(true, false)) {_            client.getConnectionStateListenable().removeListener(connectionStateListener)__            executorService.shutdownNow()__            try {_                executorService.awaitTermination(5, TimeUnit.SECONDS)__            } catch (InterruptedException e) {_                throw (IOException) new InterruptedIOException().initCause(e)__            }_            try {_                doUpdate(null)__                if (isConnected()) {_                    callListeners(GroupListener.GroupEvent.DISCONNECTED)__                }_            } catch (Exception e) {_                handleException(e)__            }_            listeners.clear()__            mapper.getTypeFactory().clearCache()__            mapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)___            client.clearWatcherReferences(childrenWatcher)__            client.clearWatcherReferences(dataWatcher)__        }_    };close,end,the,cache,throws,ioexception,errors;override,public,void,close,throws,ioexception,log,debug,this,close,connected,connected,if,started,compare,and,set,true,false,client,get,connection,state,listenable,remove,listener,connection,state,listener,executor,service,shutdown,now,try,executor,service,await,termination,5,time,unit,seconds,catch,interrupted,exception,e,throw,ioexception,new,interrupted,ioexception,init,cause,e,try,do,update,null,if,is,connected,call,listeners,group,listener,group,event,disconnected,catch,exception,e,handle,exception,e,listeners,clear,mapper,get,type,factory,clear,cache,mapper,new,object,mapper,disable,deserialization,feature,client,clear,watcher,references,children,watcher,client,clear,watcher,references,data,watcher
ZooKeeperGroup -> @Override     public void close() throws IOException;1524063240;Close/end the cache__@throws IOException errors;@Override_    public void close() throws IOException {_        LOG.debug(this + ".close, connected:" + connected)__        if (started.compareAndSet(true, false)) {_            client.getConnectionStateListenable().removeListener(connectionStateListener)__            executorService.shutdownNow()__            try {_                executorService.awaitTermination(5, TimeUnit.SECONDS)__            } catch (InterruptedException e) {_                throw (IOException) new InterruptedIOException().initCause(e)__            }_            try {_                doUpdate(null)__                if (isConnected()) {_                    callListeners(GroupListener.GroupEvent.DISCONNECTED)__                }_            } catch (Exception e) {_                handleException(e)__            }_            listeners.clear()__            mapper.getTypeFactory().clearCache()__            mapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)___            client.clearWatcherReferences(childrenWatcher)__            client.clearWatcherReferences(dataWatcher)__        }_    };close,end,the,cache,throws,ioexception,errors;override,public,void,close,throws,ioexception,log,debug,this,close,connected,connected,if,started,compare,and,set,true,false,client,get,connection,state,listenable,remove,listener,connection,state,listener,executor,service,shutdown,now,try,executor,service,await,termination,5,time,unit,seconds,catch,interrupted,exception,e,throw,ioexception,new,interrupted,ioexception,init,cause,e,try,do,update,null,if,is,connected,call,listeners,group,listener,group,event,disconnected,catch,exception,e,handle,exception,e,listeners,clear,mapper,get,type,factory,clear,cache,mapper,new,object,mapper,disable,deserialization,feature,client,clear,watcher,references,children,watcher,client,clear,watcher,references,data,watcher
ZooKeeperGroup -> @Override     public void close() throws IOException;1536687142;Close/end the cache__@throws IOException errors;@Override_    public void close() throws IOException {_        LOG.debug(this + ".close, connected:" + connected)__        if (started.compareAndSet(true, false)) {_            client.getConnectionStateListenable().removeListener(connectionStateListener)__            executorService.shutdownNow()__            try {_                executorService.awaitTermination(5, TimeUnit.SECONDS)__            } catch (InterruptedException e) {_                throw (IOException) new InterruptedIOException().initCause(e)__            }_            try {_                doUpdate(null)__                if (isConnected()) {_                    callListeners(GroupListener.GroupEvent.DISCONNECTED)__                }_            } catch (Exception e) {_                handleException(e)__            }_            listeners.clear()__            mapper.getTypeFactory().clearCache()__            mapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)___            client.clearWatcherReferences(childrenWatcher)__            client.clearWatcherReferences(dataWatcher)__        }_    };close,end,the,cache,throws,ioexception,errors;override,public,void,close,throws,ioexception,log,debug,this,close,connected,connected,if,started,compare,and,set,true,false,client,get,connection,state,listenable,remove,listener,connection,state,listener,executor,service,shutdown,now,try,executor,service,await,termination,5,time,unit,seconds,catch,interrupted,exception,e,throw,ioexception,new,interrupted,ioexception,init,cause,e,try,do,update,null,if,is,connected,call,listeners,group,listener,group,event,disconnected,catch,exception,e,handle,exception,e,listeners,clear,mapper,get,type,factory,clear,cache,mapper,new,object,mapper,disable,deserialization,feature,client,clear,watcher,references,children,watcher,client,clear,watcher,references,data,watcher
ZooKeeperGroup -> protected List<ChildData<T>> getActiveChildren();1489168193;Filter stale nodes and return only active children from the current data.__@return list of active children and data;protected List<ChildData<T>> getActiveChildren() {_        Map<String, ChildData<T>> filtered = new HashMap<>()__        for (ChildData<T> child : currentData.values()) {_            T node = child.getNode()__            if (!filtered.containsKey(node.getContainer())_                || filtered.get(node.getContainer()).getPath().compareTo(child.getPath()) < 0) {_                filtered.put(node.getContainer(), child)__            }_        }_        return new ArrayList<>(filtered.values())__    };filter,stale,nodes,and,return,only,active,children,from,the,current,data,return,list,of,active,children,and,data;protected,list,child,data,t,get,active,children,map,string,child,data,t,filtered,new,hash,map,for,child,data,t,child,current,data,values,t,node,child,get,node,if,filtered,contains,key,node,get,container,filtered,get,node,get,container,get,path,compare,to,child,get,path,0,filtered,put,node,get,container,child,return,new,array,list,filtered,values
ZooKeeperGroup -> protected List<ChildData<T>> getActiveChildren();1489183654;Filter stale nodes and return only active children from the current data.__@return list of active children and data;protected List<ChildData<T>> getActiveChildren() {_        Map<String, ChildData<T>> filtered = new HashMap<>()__        for (ChildData<T> child : currentData.values()) {_            T node = child.getNode()__            if (!filtered.containsKey(node.getContainer())_                || filtered.get(node.getContainer()).getPath().compareTo(child.getPath()) < 0) {_                filtered.put(node.getContainer(), child)__            }_        }_        return new ArrayList<>(filtered.values())__    };filter,stale,nodes,and,return,only,active,children,from,the,current,data,return,list,of,active,children,and,data;protected,list,child,data,t,get,active,children,map,string,child,data,t,filtered,new,hash,map,for,child,data,t,child,current,data,values,t,node,child,get,node,if,filtered,contains,key,node,get,container,filtered,get,node,get,container,get,path,compare,to,child,get,path,0,filtered,put,node,get,container,child,return,new,array,list,filtered,values
ZooKeeperGroup -> protected List<ChildData<T>> getActiveChildren();1524063240;Filter stale nodes and return only active children from the current data.__@return list of active children and data;protected List<ChildData<T>> getActiveChildren() {_        Map<String, ChildData<T>> filtered = new HashMap<>()__        for (ChildData<T> child : currentData.values()) {_            T node = child.getNode()__            if (!filtered.containsKey(node.getContainer())_                || filtered.get(node.getContainer()).getPath().compareTo(child.getPath()) < 0) {_                filtered.put(node.getContainer(), child)__            }_        }_        return new ArrayList<>(filtered.values())__    };filter,stale,nodes,and,return,only,active,children,from,the,current,data,return,list,of,active,children,and,data;protected,list,child,data,t,get,active,children,map,string,child,data,t,filtered,new,hash,map,for,child,data,t,child,current,data,values,t,node,child,get,node,if,filtered,contains,key,node,get,container,filtered,get,node,get,container,get,path,compare,to,child,get,path,0,filtered,put,node,get,container,child,return,new,array,list,filtered,values
ZooKeeperGroup -> protected List<ChildData<T>> getActiveChildren();1536687142;Filter stale nodes and return only active children from the current data.__@return list of active children and data;protected List<ChildData<T>> getActiveChildren() {_        Map<String, ChildData<T>> filtered = new HashMap<>()__        for (ChildData<T> child : currentData.values()) {_            T node = child.getNode()__            if (!filtered.containsKey(node.getContainer())_                || filtered.get(node.getContainer()).getPath().compareTo(child.getPath()) < 0) {_                filtered.put(node.getContainer(), child)__            }_        }_        return new ArrayList<>(filtered.values())__    };filter,stale,nodes,and,return,only,active,children,from,the,current,data,return,list,of,active,children,and,data;protected,list,child,data,t,get,active,children,map,string,child,data,t,filtered,new,hash,map,for,child,data,t,child,current,data,values,t,node,child,get,node,if,filtered,contains,key,node,get,container,filtered,get,node,get,container,get,path,compare,to,child,get,path,0,filtered,put,node,get,container,child,return,new,array,list,filtered,values
ZooKeeperGroup -> public void clearAndRefresh(boolean force, boolean sync) throws Exception;1489168193;Clear out current data and begin a new query on the path__@param force - whether to force clear and refresh to trigger updates_@param sync  - whether to run this synchronously (block current thread) or asynchronously_@throws Exception errors;public void clearAndRefresh(boolean force, boolean sync) throws Exception {_        RefreshMode mode = force ? RefreshMode.FORCE_GET_DATA_AND_STAT : RefreshMode.STANDARD__        currentData.clear()__        if (sync) {_            this.refresh(mode)__        } else {_            offerOperation(new RefreshOperation(this, mode))__        }_    };clear,out,current,data,and,begin,a,new,query,on,the,path,param,force,whether,to,force,clear,and,refresh,to,trigger,updates,param,sync,whether,to,run,this,synchronously,block,current,thread,or,asynchronously,throws,exception,errors;public,void,clear,and,refresh,boolean,force,boolean,sync,throws,exception,refresh,mode,mode,force,refresh,mode,refresh,mode,standard,current,data,clear,if,sync,this,refresh,mode,else,offer,operation,new,refresh,operation,this,mode
ZooKeeperGroup -> public void clearAndRefresh(boolean force, boolean sync) throws Exception;1489183654;Clear out current data and begin a new query on the path__@param force - whether to force clear and refresh to trigger updates_@param sync  - whether to run this synchronously (block current thread) or asynchronously_@throws Exception errors;public void clearAndRefresh(boolean force, boolean sync) throws Exception {_        RefreshMode mode = force ? RefreshMode.FORCE_GET_DATA_AND_STAT : RefreshMode.STANDARD__        currentData.clear()__        if (sync) {_            this.refresh(mode)__        } else {_            offerOperation(new RefreshOperation(this, mode))__        }_    };clear,out,current,data,and,begin,a,new,query,on,the,path,param,force,whether,to,force,clear,and,refresh,to,trigger,updates,param,sync,whether,to,run,this,synchronously,block,current,thread,or,asynchronously,throws,exception,errors;public,void,clear,and,refresh,boolean,force,boolean,sync,throws,exception,refresh,mode,mode,force,refresh,mode,refresh,mode,standard,current,data,clear,if,sync,this,refresh,mode,else,offer,operation,new,refresh,operation,this,mode
ZooKeeperGroup -> public void clearAndRefresh(boolean force, boolean sync) throws Exception;1524063240;Clear out current data and begin a new query on the path__@param force - whether to force clear and refresh to trigger updates_@param sync  - whether to run this synchronously (block current thread) or asynchronously_@throws Exception errors;public void clearAndRefresh(boolean force, boolean sync) throws Exception {_        RefreshMode mode = force ? RefreshMode.FORCE_GET_DATA_AND_STAT : RefreshMode.STANDARD__        currentData.clear()__        if (sync) {_            this.refresh(mode)__        } else {_            offerOperation(new RefreshOperation(this, mode))__        }_    };clear,out,current,data,and,begin,a,new,query,on,the,path,param,force,whether,to,force,clear,and,refresh,to,trigger,updates,param,sync,whether,to,run,this,synchronously,block,current,thread,or,asynchronously,throws,exception,errors;public,void,clear,and,refresh,boolean,force,boolean,sync,throws,exception,refresh,mode,mode,force,refresh,mode,refresh,mode,standard,current,data,clear,if,sync,this,refresh,mode,else,offer,operation,new,refresh,operation,this,mode
ZooKeeperGroup -> public void clearAndRefresh(boolean force, boolean sync) throws Exception;1536687142;Clear out current data and begin a new query on the path__@param force - whether to force clear and refresh to trigger updates_@param sync  - whether to run this synchronously (block current thread) or asynchronously_@throws Exception errors;public void clearAndRefresh(boolean force, boolean sync) throws Exception {_        RefreshMode mode = force ? RefreshMode.FORCE_GET_DATA_AND_STAT : RefreshMode.STANDARD__        currentData.clear()__        if (sync) {_            this.refresh(mode)__        } else {_            offerOperation(new RefreshOperation(this, mode))__        }_    };clear,out,current,data,and,begin,a,new,query,on,the,path,param,force,whether,to,force,clear,and,refresh,to,trigger,updates,param,sync,whether,to,run,this,synchronously,block,current,thread,or,asynchronously,throws,exception,errors;public,void,clear,and,refresh,boolean,force,boolean,sync,throws,exception,refresh,mode,mode,force,refresh,mode,refresh,mode,standard,current,data,clear,if,sync,this,refresh,mode,else,offer,operation,new,refresh,operation,this,mode
ZooKeeperGroup -> public ListenerContainer<GroupListener<T>> getListenable();1489168193;Return the cache listenable__@return listenable;public ListenerContainer<GroupListener<T>> getListenable() {_        return listeners__    };return,the,cache,listenable,return,listenable;public,listener,container,group,listener,t,get,listenable,return,listeners
ZooKeeperGroup -> public ListenerContainer<GroupListener<T>> getListenable();1489183654;Return the cache listenable__@return listenable;public ListenerContainer<GroupListener<T>> getListenable() {_        return listeners__    };return,the,cache,listenable,return,listenable;public,listener,container,group,listener,t,get,listenable,return,listeners
ZooKeeperGroup -> public ListenerContainer<GroupListener<T>> getListenable();1524063240;Return the cache listenable__@return listenable;public ListenerContainer<GroupListener<T>> getListenable() {_        return listeners__    };return,the,cache,listenable,return,listenable;public,listener,container,group,listener,t,get,listenable,return,listeners
ZooKeeperGroup -> public ListenerContainer<GroupListener<T>> getListenable();1536687142;Return the cache listenable__@return listenable;public ListenerContainer<GroupListener<T>> getListenable() {_        return listeners__    };return,the,cache,listenable,return,listenable;public,listener,container,group,listener,t,get,listenable,return,listeners
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz);1489168193;@param client the client_@param path   path to watch;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz) {_        this(client, path, clazz, Executors.newSingleThreadExecutor())__    };param,client,the,client,param,path,path,to,watch;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,this,client,path,clazz,executors,new,single,thread,executor
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz);1489183654;@param client the client_@param path   path to watch;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz) {_        this(client, path, clazz, Executors.newSingleThreadExecutor())__    };param,client,the,client,param,path,path,to,watch;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,this,client,path,clazz,executors,new,single,thread,executor
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz);1524063240;@param client the client_@param path   path to watch;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz) {_        this(client, path, clazz, Executors.newSingleThreadExecutor())__    };param,client,the,client,param,path,path,to,watch;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,this,client,path,clazz,executors,new,single,thread,executor
ZooKeeperGroup -> public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz);1536687142;@param client the client_@param path   path to watch;public ZooKeeperGroup(CuratorFramework client, String path, Class<T> clazz) {_        this(client, path, clazz, Executors.newSingleThreadExecutor())__    };param,client,the,client,param,path,path,to,watch;public,zoo,keeper,group,curator,framework,client,string,path,class,t,clazz,this,client,path,clazz,executors,new,single,thread,executor
ZooKeeperGroup -> public void start();1489168193;Start the cache. The cache is not started automatically. You must call this method.;public void start() {_        LOG.info("Starting ZK Group for path \"" + path + "\"")__        if (started.compareAndSet(false, true)) {_            connected.set(client.getZookeeperClient().isConnected())___            if (isConnected()) {_                handleStateChange(ConnectionState.CONNECTED)__            }__            client.getConnectionStateListenable().addListener(connectionStateListener)__            executorService.execute(new Runnable() {_                @Override_                public void run() {_                    mainLoop()__                }_            })__        }_    };start,the,cache,the,cache,is,not,started,automatically,you,must,call,this,method;public,void,start,log,info,starting,zk,group,for,path,path,if,started,compare,and,set,false,true,connected,set,client,get,zookeeper,client,is,connected,if,is,connected,handle,state,change,connection,state,connected,client,get,connection,state,listenable,add,listener,connection,state,listener,executor,service,execute,new,runnable,override,public,void,run,main,loop
ZooKeeperGroup -> public void start();1489183654;Start the cache. The cache is not started automatically. You must call this method.;public void start() {_        LOG.info("Starting ZK Group for path: {}", path)__        if (started.compareAndSet(false, true)) {_            connected.set(client.getZookeeperClient().isConnected())___            if (isConnected()) {_                handleStateChange(ConnectionState.CONNECTED)__            }__            client.getConnectionStateListenable().addListener(connectionStateListener)__            executorService.execute(new Runnable() {_                @Override_                public void run() {_                    mainLoop()__                }_            })__        }_    };start,the,cache,the,cache,is,not,started,automatically,you,must,call,this,method;public,void,start,log,info,starting,zk,group,for,path,path,if,started,compare,and,set,false,true,connected,set,client,get,zookeeper,client,is,connected,if,is,connected,handle,state,change,connection,state,connected,client,get,connection,state,listenable,add,listener,connection,state,listener,executor,service,execute,new,runnable,override,public,void,run,main,loop
ZooKeeperGroup -> public void start();1524063240;Start the cache. The cache is not started automatically. You must call this method.;public void start() {_        LOG.info("Starting ZK Group for path: {}", path)__        if (started.compareAndSet(false, true)) {_            connected.set(client.getZookeeperClient().isConnected())___            if (isConnected()) {_                handleStateChange(ConnectionState.CONNECTED)__            }__            client.getConnectionStateListenable().addListener(connectionStateListener)__            executorService.execute(new Runnable() {_                @Override_                public void run() {_                    mainLoop()__                }_            })__        }_    };start,the,cache,the,cache,is,not,started,automatically,you,must,call,this,method;public,void,start,log,info,starting,zk,group,for,path,path,if,started,compare,and,set,false,true,connected,set,client,get,zookeeper,client,is,connected,if,is,connected,handle,state,change,connection,state,connected,client,get,connection,state,listenable,add,listener,connection,state,listener,executor,service,execute,new,runnable,override,public,void,run,main,loop
ZooKeeperGroup -> public void start();1536687142;Start the cache. The cache is not started automatically. You must call this method.;public void start() {_        LOG.info("Starting ZK Group for path: {}", path)__        if (started.compareAndSet(false, true)) {_            connected.set(client.getZookeeperClient().isConnected())___            if (isConnected()) {_                handleStateChange(ConnectionState.CONNECTED)__            }__            client.getConnectionStateListenable().addListener(connectionStateListener)__            executorService.execute(new Runnable() {_                @Override_                public void run() {_                    mainLoop()__                }_            })__        }_    };start,the,cache,the,cache,is,not,started,automatically,you,must,call,this,method;public,void,start,log,info,starting,zk,group,for,path,path,if,started,compare,and,set,false,true,connected,set,client,get,zookeeper,client,is,connected,if,is,connected,handle,state,change,connection,state,connected,client,get,connection,state,listenable,add,listener,connection,state,listener,executor,service,execute,new,runnable,override,public,void,run,main,loop
