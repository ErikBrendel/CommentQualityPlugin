commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void process(WatchedEvent event) {     if (event.getType() != Event.EventType.None) {         // only interested in real change events, eg no refresh on Keeper.Disconnect         offerOperation(new RefreshOperation(ZooKeeperGroup.this, RefreshMode.STANDARD)).     } }
false;public;1;12;;@Override public void process(WatchedEvent event) {     try {         if (event.getType() == Event.EventType.NodeDeleted) {             remove(event.getPath()).         } else if (event.getType() == Event.EventType.NodeDataChanged) {             offerOperation(new GetDataOperation(ZooKeeperGroup.this, event.getPath())).         }     } catch (Exception e) {         handleException(e).     } }
false;public;2;4;;@Override public void stateChanged(CuratorFramework client, ConnectionState newState) {     handleStateChange(newState). }
false;public;0;4;;@Override public void run() {     mainLoop(). }
true;public;0;18;/**  * Start the cache. The cache is not started automatically. You must call this method.  */ ;/**  * Start the cache. The cache is not started automatically. You must call this method.  */ public void start() {     LOG.info("Starting ZK Group for path: {}", path).     if (started.compareAndSet(false, true)) {         connected.set(client.getZookeeperClient().isConnected()).         if (isConnected()) {             handleStateChange(ConnectionState.CONNECTED).         }         client.getConnectionStateListenable().addListener(connectionStateListener).         executorService.execute(new Runnable() {              @Override             public void run() {                 mainLoop().             }         }).     } }
true;public;0;27;/**  * Close/end the cache  *  * @throws IOException errors  */ ;/**  * Close/end the cache  *  * @throws IOException errors  */ @Override public void close() throws IOException {     LOG.debug(this + ".close, connected:" + connected).     if (started.compareAndSet(true, false)) {         client.getConnectionStateListenable().removeListener(connectionStateListener).         executorService.shutdownNow().         try {             executorService.awaitTermination(5, TimeUnit.SECONDS).         } catch (InterruptedException e) {             throw (IOException) new InterruptedIOException().initCause(e).         }         try {             doUpdate(null).             if (isConnected()) {                 callListeners(GroupListener.GroupEvent.DISCONNECTED).             }         } catch (Exception e) {             handleException(e).         }         listeners.clear().         mapper.getTypeFactory().clearCache().         mapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES).         client.clearWatcherReferences(childrenWatcher).         client.clearWatcherReferences(dataWatcher).     } }
false;public;0;4;;@Override public boolean isConnected() {     return connected.get(). }
false;public;1;4;;@Override public void add(GroupListener<T> listener) {     listeners.addListener(listener). }
false;public;1;4;;@Override public void remove(GroupListener<T> listener) {     listeners.removeListener(listener). }
false;public;1;17;;@Override public void update(T state) {     T oldState = this.state.     this.state = state.     if (started.get()) {         boolean update = state == null && oldState != null || state != null && oldState == null || !Arrays.equals(encode(state), encode(oldState)).         if (update) {             offerOperation(new CompositeOperation(new RefreshOperation(this, RefreshMode.FORCE_GET_DATA_AND_STAT), new UpdateOperation<>(this, state))).         }     } }
false;protected;1;37;;protected void doUpdate(T state) throws Exception {     if (LOG.isTraceEnabled()) {         // state.toString() invokes Jackson ObjectMapper serialization         LOG.trace(this + " doUpdate, state:" + state + " id:" + id).     }     if (state == null) {         if (id != null) {             try {                 if (isConnected()) {                     client.delete().guaranteed().forPath(id).                     unstable.set(false).                 }             } catch (KeeperException.NoNodeException e) {             // Ignore             } finally {                 id = null.             }         } else if (creating.get()) {             LOG.warn("Ephemeral node could be created in the registry, but ZooKeeper group didn't record its id").             unstable.set(true).         }     } else if (isConnected()) {         // See: https://issues.jboss.org/browse/FABRIC-1238         if (id == null) {             id = createEphemeralNode(state).         } else {             try {                 updateEphemeralNode(state).             } catch (KeeperException.NoNodeException e) {                 id = createEphemeralNode(state).             }         }     } }
false;private;1;16;;private String createEphemeralNode(T state) throws Exception {     state.uuid = uuid.     creating.set(true).     String pathId = client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(path + "/0", encode(state)).     creating.set(false).     unstable.set(false).     if (LOG.isTraceEnabled()) {         // state.toString() invokes Jackson ObjectMapper serialization         LOG.trace(this + ", state:" + state + ", new ephemeralSequential path:" + pathId).     }     prunePartialState(state, pathId).     state.uuid = null.     return pathId. }
false;private;1;5;;private void updateEphemeralNode(T state) throws Exception {     state.uuid = uuid.     client.setData().forPath(id, encode(state)).     state.uuid = null. }
true;private;2;12;// remove ephemeral sequential nodes created on server but not visible on client ;// remove ephemeral sequential nodes created on server but not visible on client private void prunePartialState(final T ourState, final String pathId) throws Exception {     if (ourState.uuid != null) {         clearAndRefresh(true, true).         List<ChildData<T>> children = new ArrayList<>(currentData.values()).         for (ChildData<T> child : children) {             if (ourState.uuid.equals(child.getNode().uuid) && !child.getPath().equals(pathId)) {                 LOG.debug("Deleting partially created znode: {}", child.getPath()).                 client.delete().guaranteed().forPath(child.getPath()).             }         }     } }
false;public;0;10;;@Override public Map<String, T> members() {     List<ChildData<T>> children = getActiveChildren().     Collections.sort(children, sequenceComparator).     Map<String, T> members = new LinkedHashMap<>().     for (ChildData<T> child : children) {         members.put(child.getPath(), child.getNode()).     }     return members. }
false;public;0;6;;@Override public boolean isMaster() {     List<ChildData<T>> children = getActiveChildren().     Collections.sort(children, sequenceComparator).     return !children.isEmpty() && children.get(0).getPath().equals(id). }
false;public;0;9;;@Override public T master() {     List<ChildData<T>> children = getActiveChildren().     Collections.sort(children, sequenceComparator).     if (children.isEmpty()) {         return null.     }     return children.get(0).getNode(). }
false;public;0;10;;@Override public List<T> slaves() {     List<ChildData<T>> children = getActiveChildren().     Collections.sort(children, sequenceComparator).     List<T> slaves = new ArrayList<>().     for (int i = 1. i < children.size(). i++) {         slaves.add(children.get(i).getNode()).     }     return slaves. }
true;protected;0;11;/**  * Filter stale nodes and return only active children from the current data.  *  * @return list of active children and data  */ ;/**  * Filter stale nodes and return only active children from the current data.  *  * @return list of active children and data  */ protected List<ChildData<T>> getActiveChildren() {     Map<String, ChildData<T>> filtered = new HashMap<>().     for (ChildData<T> child : currentData.values()) {         T node = child.getNode().         if (!filtered.containsKey(node.getContainer()) || filtered.get(node.getContainer()).getPath().compareTo(child.getPath()) < 0) {             filtered.put(node.getContainer(), child).         }     }     return new ArrayList<>(filtered.values()). }
false;public;0;4;;@Override public T getLastState() {     return this.state. }
false;public;0;3;;public SequenceComparator getSequenceComparator() {     return sequenceComparator. }
true;public;0;3;/**  * Return the cache listenable  *  * @return listenable  */ ;/**  * Return the cache listenable  *  * @return listenable  */ public ListenerContainer<GroupListener<T>> getListenable() {     return listeners. }
true;public;0;5;/**  * Return the current data. There are no guarantees of accuracy. This is  * merely the most recent view of the data. The data is returned in sorted order.  *  * @return list of children and data  */ ;/**  * Return the current data. There are no guarantees of accuracy. This is  * merely the most recent view of the data. The data is returned in sorted order.  *  * @return list of children and data  */ public List<ChildData> getCurrentData() {     List<ChildData> answer = new ArrayList<>().     answer.addAll(currentData.values()).     return answer. }
true;;2;3;/**  * Used for testing purpose  */ ;/**  * Used for testing purpose  */ void putCurrentData(String key, ChildData value) {     currentData.put(key, value). }
true;public;1;3;/**  * Return the current data for the given path. There are no guarantees of accuracy. This is  * merely the most recent view of the data. If there is no child with that path, <code>null</code>  * is returned.  *  * @param fullPath full path to the node to check  * @return data or null  */ ;/**  * Return the current data for the given path. There are no guarantees of accuracy. This is  * merely the most recent view of the data. If there is no child with that path, <code>null</code>  * is returned.  *  * @param fullPath full path to the node to check  * @return data or null  */ public ChildData getCurrentData(String fullPath) {     return currentData.get(fullPath). }
true;public;0;3;/**  * Clear out current data and begin a new query on the path  *  * @throws Exception errors  */ ;/**  * Clear out current data and begin a new query on the path  *  * @throws Exception errors  */ public void clearAndRefresh() throws Exception {     clearAndRefresh(false, false). }
true;public;2;9;/**  * Clear out current data and begin a new query on the path  *  * @param force - whether to force clear and refresh to trigger updates  * @param sync  - whether to run this synchronously (block current thread) or asynchronously  * @throws Exception errors  */ ;/**  * Clear out current data and begin a new query on the path  *  * @param force - whether to force clear and refresh to trigger updates  * @param sync  - whether to run this synchronously (block current thread) or asynchronously  * @throws Exception errors  */ public void clearAndRefresh(boolean force, boolean sync) throws Exception {     RefreshMode mode = force ? RefreshMode.FORCE_GET_DATA_AND_STAT : RefreshMode.STANDARD.     currentData.clear().     if (sync) {         this.refresh(mode).     } else {         offerOperation(new RefreshOperation(this, mode)).     } }
true;public;0;3;/**  * Clears the current data without beginning a new query and without generating any events  * for listeners.  */ ;/**  * Clears the current data without beginning a new query and without generating any events  * for listeners.  */ public void clear() {     currentData.clear(). }
false;public;2;4;;@Override public int compare(String left, String right) {     return left.compareTo(right). }
false;;1;15;;void refresh(final RefreshMode mode) throws Exception {     try {         ensurePath.ensure(client.getZookeeperClient()).         List<String> children = client.getChildren().usingWatcher(childrenWatcher).forPath(path).         Collections.sort(children, new Comparator<String>() {              @Override             public int compare(String left, String right) {                 return left.compareTo(right).             }         }).         processChildren(children, mode).     } catch (Exception e) {         handleException(e).     } }
false;;1;11;;void callListeners(final GroupListener.GroupEvent event) {     listeners.forEach(listener -> {         try {             listener.groupEvent(ZooKeeperGroup.this, event).         } catch (Exception e) {             handleException(e).         }         return null.     }). }
false;;1;5;;void getDataAndStat(final String fullPath) throws Exception {     Stat stat = new Stat().     byte[] data = client.getData().storingStatIn(stat).usingWatcher(dataWatcher).forPath(fullPath).     applyNewData(fullPath, KeeperException.Code.OK.intValue(), stat, data). }
true;protected;1;7;/**  * Default behavior is just to log the exception  *  * @param e the exception  */ ;/**  * Default behavior is just to log the exception  *  * @param e the exception  */ protected void handleException(Throwable e) {     if (e instanceof IllegalStateException && "Client is not started".equals(e.getMessage())) {         LOG.debug("", e).     } else {         LOG.error("", e).     } }
false;protected;1;6;;protected void remove(String fullPath) {     ChildData data = currentData.remove(fullPath).     if (data != null) {         offerOperation(new EventOperation(this, GroupListener.GroupEvent.CHANGED)).     } }
false;private;1;25;;private void handleStateChange(ConnectionState newState) {     switch(newState) {         case SUSPENDED:         case LOST:             {                 connected.set(false).                 clear().                 EventOperation op = new EventOperation(this, GroupListener.GroupEvent.DISCONNECTED).                 op.invoke().                 break.             }         case CONNECTED:         case RECONNECTED:             {                 connected.set(true).                 offerOperation(new CompositeOperation(new RefreshOperation(this, RefreshMode.FORCE_GET_DATA_AND_STAT), new UpdateOperation<>(this, state), new EventOperation(this, GroupListener.GroupEvent.CONNECTED))).                 break.             }         default:     } }
false;private;2;21;;private void processChildren(List<String> children, RefreshMode mode) throws Exception {     List<String> fullPaths = children.stream().map(c -> ZKPaths.makePath(path, c)).collect(Collectors.toList()).     Set<String> removedNodes = new HashSet<>(currentData.keySet()).     removedNodes.removeAll(fullPaths).     for (String fullPath : removedNodes) {         remove(fullPath).     }     for (String name : children) {         String fullPath = ZKPaths.makePath(path, name).         if ((mode == RefreshMode.FORCE_GET_DATA_AND_STAT) || !currentData.containsKey(fullPath)) {             try {                 getDataAndStat(fullPath).             } catch (KeeperException.NoNodeException ignore) {             }         }     } }
false;private;4;10;;private void applyNewData(String fullPath, int resultCode, Stat stat, byte[] bytes) {     if (resultCode == KeeperException.Code.OK.intValue()) {         // otherwise - node must have dropped or something - we should be getting another event         ChildData<T> data = new ChildData<>(fullPath, stat, bytes, decode(bytes)).         ChildData<T> previousData = currentData.put(fullPath, data).         if (previousData == null || previousData.getStat().getVersion() != stat.getVersion()) {             offerOperation(new EventOperation(this, GroupListener.GroupEvent.CHANGED)).         }     } }
false;private;0;12;;private void mainLoop() {     while (started.get() && !Thread.currentThread().isInterrupted()) {         try {             operations.take().invoke().         } catch (InterruptedException e) {             Thread.currentThread().interrupt().             break.         } catch (Exception e) {             handleException(e).         }     } }
false;private;1;9;;private byte[] encode(T state) {     try {         ByteArrayOutputStream baos = new ByteArrayOutputStream().         mapper.writeValue(baos, state).         return baos.toByteArray().     } catch (IOException e) {         throw new IllegalStateException("Unable to decode data", e).     } }
false;private;1;7;;private T decode(byte[] data) {     try {         return mapper.readValue(data, clazz).     } catch (IOException e) {         throw new IllegalStateException("Unable to decode data", e).     } }
false;private;1;6;;private void offerOperation(Operation operation) {     if (!operations.contains(operation)) {         operations.offer(operation).     } // operations.remove(operation).   // avoids herding for refresh operations }
false;public,static;4;10;;public static <T> Map<String, T> members(ObjectMapper mapper, CuratorFramework curator, String path, Class<T> clazz) throws Exception {     Map<String, T> map = new TreeMap<>().     List<String> nodes = curator.getChildren().forPath(path).     for (String node : nodes) {         byte[] data = curator.getData().forPath(path + "/" + node).         T val = mapper.readValue(data, clazz).         map.put(node, val).     }     return map. }
false;public;0;3;;public String getId() {     return id. }
false;;1;3;;void setId(String id) {     this.id = id. }
true;public;0;3;/**  * Returns an indication that the sequential, ephemeral node may be registered more than once for this group  */ ;/**  * Returns an indication that the sequential, ephemeral node may be registered more than once for this group  */ public boolean isUnstable() {     return unstable.get(). }
