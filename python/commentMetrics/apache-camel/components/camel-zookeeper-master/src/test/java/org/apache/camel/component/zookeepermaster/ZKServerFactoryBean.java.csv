commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ZooKeeperServer getObject() throws Exception {     return zooKeeperServer. }
false;public;0;3;;public Class<ZooKeeperServer> getObjectType() {     return ZooKeeperServer.class. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;14;;public void afterPropertiesSet() throws Exception {     if (purge) {         deleteFilesInDir(getDataLogDir()).         deleteFilesInDir(getDataDir()).     }     FileTxnSnapLog ftxn = new FileTxnSnapLog(getDataLogDir(), getDataDir()).     zooKeeperServer.setTxnLogFactory(ftxn).     zooKeeperServer.setTickTime(getTickTime()).     zooKeeperServer.setMinSessionTimeout(getMinSessionTimeout()).     zooKeeperServer.setMaxSessionTimeout(getMaxSessionTimeout()).     connectionFactory = new NIOServerCnxnFactory().     connectionFactory.configure(getClientPortAddress(), getMaxClientConnections()).     connectionFactory.startup(zooKeeperServer). }
false;private;1;12;;private void deleteFilesInDir(File dir) {     File[] files = dir.listFiles().     if (files != null) {         for (File file : files) {             if (file.isDirectory()) {                 deleteFilesInDir(file).             } else {                 file.delete().             }         }     } }
false;public;0;3;;public void destroy() throws Exception {     shutdown(). }
false;protected;0;15;;protected void shutdown() {     if (connectionFactory != null) {         connectionFactory.shutdown().         try {             connectionFactory.join().         } catch (InterruptedException e) {         // Ignore         }         connectionFactory = null.     }     if (zooKeeperServer != null) {         zooKeeperServer.shutdown().         zooKeeperServer = null.     } }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public ZooKeeperServer getZooKeeperServer() {     return zooKeeperServer. }
false;public;0;3;;public NIOServerCnxnFactory getConnectionFactory() {     return connectionFactory. }
false;public;0;7;;public File getDataLogDir() {     if (dataLogDir == null) {         dataLogDir = new File(getZKOutputDir(), "log").         dataLogDir.mkdirs().     }     return dataLogDir. }
false;public;0;7;;public File getDataDir() {     if (dataDir == null) {         dataDir = new File(getZKOutputDir(), "data").         dataDir.mkdirs().     }     return dataDir. }
false;public;0;3;;public int getTickTime() {     return tickTime. }
false;public;0;3;;public int getMinSessionTimeout() {     return minSessionTimeout. }
false;public;0;3;;public int getMaxSessionTimeout() {     return maxSessionTimeout. }
false;public;0;3;;public int getPort() {     return port. }
false;public;0;6;;public InetSocketAddress getClientPortAddress() {     if (clientPortAddress == null) {         clientPortAddress = new InetSocketAddress(port).     }     return clientPortAddress. }
false;public;0;3;;public int getMaxClientConnections() {     return maxClientConnections. }
false;public;1;3;;public void setPort(int port) {     this.port = port. }
false;public;1;3;;public void setClientPortAddress(InetSocketAddress clientPortAddress) {     this.clientPortAddress = clientPortAddress. }
false;public;1;3;;public void setConnectionFactory(NIOServerCnxnFactory connectionFactory) {     this.connectionFactory = connectionFactory. }
false;public;1;3;;public void setDataDir(File dataDir) {     this.dataDir = dataDir. }
false;public;1;3;;public void setDataLogDir(File dataLogDir) {     this.dataLogDir = dataLogDir. }
false;public;1;3;;public void setMaxClientConnections(int maxClientConnections) {     this.maxClientConnections = maxClientConnections. }
false;public;1;3;;public void setMaxSessionTimeout(int maxSessionTimeout) {     this.maxSessionTimeout = maxSessionTimeout. }
false;public;1;3;;public void setMinSessionTimeout(int minSessionTimeout) {     this.minSessionTimeout = minSessionTimeout. }
false;public;1;3;;public void setTickTime(int tickTime) {     this.tickTime = tickTime. }
false;public;1;3;;public void setZooKeeperServer(ZooKeeperServer zooKeeperServer) {     this.zooKeeperServer = zooKeeperServer. }
false;public;0;3;;public boolean isPurge() {     return purge. }
false;public;1;3;;public void setPurge(boolean purge) {     this.purge = purge. }
true;protected;0;6;// ------------------------------------------------------------------------- ;// Implementation methods // ------------------------------------------------------------------------- protected File getZKOutputDir() {     String baseDir = System.getProperty("basedir", ".").     File dir = new File(baseDir + "/target/zk").     dir.mkdirs().     return dir. }
