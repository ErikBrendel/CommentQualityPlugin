commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("vm:start"). }
false;public;0;6;;@Override public void configure() throws Exception {     from("zookeeper-master:MasterEndpointFailoverTest:vm:start").to("log:result1").to("mock:result1"). }
false;public;0;6;;@Override public void configure() throws Exception {     from("zookeeper-master:MasterEndpointFailoverTest:vm:start").to("log:result2").to("mock:result2"). }
false;public;0;49;;@Before public void beforeRun() throws Exception {     System.out.println("Starting ZK server!").     serverFactoryBean.setPort(9004).     serverFactoryBean.afterPropertiesSet().     // Create the zkClientBean     zkClientBean.setConnectString("localhost:9004").     CuratorFramework client = zkClientBean.getObject().     // Need to bind the zookeeper client with the name "curator"     SimpleRegistry registry = new SimpleRegistry().     registry.put("curator", client).     producerContext = new DefaultCamelContext(registry).     // Add the vm:start endpoint to avoid the NPE before starting the consumerContext1     producerContext.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("vm:start").         }     }).     template = producerContext.createProducerTemplate().     consumerContext1 = new DefaultCamelContext(registry).     consumerContext1.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("zookeeper-master:MasterEndpointFailoverTest:vm:start").to("log:result1").to("mock:result1").         }     }).     consumerContext2 = new DefaultCamelContext(registry).     consumerContext2.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("zookeeper-master:MasterEndpointFailoverTest:vm:start").to("log:result2").to("mock:result2").         }     }).     // Need to start at less one consumerContext to enable the vm queue for producerContext     ServiceHelper.startService(consumerContext1).     ServiceHelper.startService(producerContext).     result1Endpoint = consumerContext1.getEndpoint("mock:result1", MockEndpoint.class).     result2Endpoint = consumerContext2.getEndpoint("mock:result2", MockEndpoint.class). }
false;public;0;8;;@After public void afterRun() throws Exception {     ServiceHelper.stopService(consumerContext1).     ServiceHelper.stopService(consumerContext2).     ServiceHelper.stopService(producerContext).     zkClientBean.destroy().     serverFactoryBean.destroy(). }
false;public;0;15;;@Test public void testEndpoint() throws Exception {     System.out.println("Starting consumerContext1").     ServiceHelper.startService(consumerContext1).     assertMessageReceived(result1Endpoint, result2Endpoint).     System.out.println("Starting consumerContext2").     ServiceHelper.startService(consumerContext2).     assertMessageReceivedLoop(result1Endpoint, result2Endpoint, 3).     System.out.println("Stopping consumerContext1").     ServiceHelper.stopService(consumerContext1).     assertMessageReceivedLoop(result2Endpoint, result1Endpoint, 3). }
false;protected;3;6;;protected void assertMessageReceivedLoop(MockEndpoint masterEndpoint, MockEndpoint standbyEndpoint, int count) throws Exception {     for (int i = 0. i < count. i++) {         Thread.sleep(1000).         assertMessageReceived(masterEndpoint, standbyEndpoint).     } }
false;protected;2;13;;protected void assertMessageReceived(MockEndpoint masterEndpoint, MockEndpoint standbyEndpoint) throws InterruptedException {     masterEndpoint.reset().     standbyEndpoint.reset().     String expectedBody = createNextExpectedBody().     masterEndpoint.expectedBodiesReceived(expectedBody).     standbyEndpoint.expectedMessageCount(0).     template.sendBody("direct:start", expectedBody).     LOG.info("Expecting master: " + masterEndpoint + " and standby: " + standbyEndpoint).     MockEndpoint.assertIsSatisfied(masterEndpoint, standbyEndpoint). }
false;protected;0;3;;protected String createNextExpectedBody() {     return "body:" + messageCounter.incrementAndGet(). }
