commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;3;;public static AtomixReplica createReplica(CamelContext camelContext, String address, AtomixClusterConfiguration configuration) throws Exception {     return createReplica(camelContext, new Address(address), configuration). }
false;public,static;3;46;;public static AtomixReplica createReplica(CamelContext camelContext, Address address, AtomixClusterConfiguration configuration) throws Exception {     AtomixReplica atomix = configuration.getAtomix().     if (atomix == null) {         final AtomixReplica.Builder atomixBuilder.         String uri = configuration.getConfigurationUri().         if (ObjectHelper.isNotEmpty(uri)) {             uri = camelContext.resolvePropertyPlaceholders(uri).             try (InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, uri)) {                 Properties properties = new Properties().                 properties.load(is).                 atomixBuilder = AtomixReplica.builder(address, properties).             }         } else {             atomixBuilder = AtomixReplica.builder(address).         }         Storage.Builder storageBuilder = Storage.builder().         ObjectHelper.ifNotEmpty(configuration.getStorageLevel(), storageBuilder::withStorageLevel).         ObjectHelper.ifNotEmpty(configuration.getStoragePath(), storageBuilder::withDirectory).         atomixBuilder.withStorage(storageBuilder.build()).         if (configuration.getTransport() != null) {             atomixBuilder.withTransport(camelContext.getInjector().newInstance(configuration.getTransport())).         }         if (configuration.getClientTransport() != null) {             atomixBuilder.withClientTransport(camelContext.getInjector().newInstance(configuration.getClientTransport())).         }         if (configuration.getServerTransport() != null) {             atomixBuilder.withServerTransport(camelContext.getInjector().newInstance(configuration.getServerTransport())).         }         atomix = atomixBuilder.build().     }     return atomix. }
