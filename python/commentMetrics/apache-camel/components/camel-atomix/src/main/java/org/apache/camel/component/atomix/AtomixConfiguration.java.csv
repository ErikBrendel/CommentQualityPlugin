commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ***************************************** // Properties // ***************************************** public T getAtomix() {     return atomix. }
true;public;1;3;/**  * The Atomix instance to use  */ ;/**  * The Atomix instance to use  */ public void setAtomix(T client) {     this.atomix = client. }
false;public;0;3;;public List<Address> getNodes() {     return nodes. }
true;public;1;3;/**  * The address of the nodes composing the cluster.  */ ;/**  * The address of the nodes composing the cluster.  */ public void setNodes(List<Address> nodes) {     this.nodes = ObjectHelper.notNull(nodes, "Atomix Nodes"). }
false;public;1;5;;public void setNodes(String nodes) {     if (ObjectHelper.isNotEmpty(nodes)) {         setNodes(Stream.of(nodes.split(",")).map(Address::new).collect(Collectors.toList())).     } }
false;public;0;3;;public Class<? extends Transport> getTransport() {     return transport. }
true;public;1;3;/**  * Sets the Atomix transport.  */ ;/**  * Sets the Atomix transport.  */ public void setTransport(Class<? extends Transport> transport) {     this.transport = transport. }
false;public;0;3;;public String getConfigurationUri() {     return configurationUri. }
true;public;1;3;/**  * The Atomix configuration uri.  */ ;/**  * The Atomix configuration uri.  */ public void setConfigurationUri(String configurationUri) {     this.configurationUri = configurationUri. }
false;public;0;3;;public ReadConsistency getReadConsistency() {     return readConsistency. }
true;public;1;3;/**  * The read consistency level.  */ ;/**  * The read consistency level.  */ public void setReadConsistency(ReadConsistency readConsistency) {     this.readConsistency = readConsistency. }
false;public;0;3;;// *********************************** // Properties - Resource configuration // *********************************** public Properties getDefaultResourceConfig() {     return defaultResourceConfig. }
true;public;1;3;/**  * The cluster wide default resource configuration.  */ ;/**  * The cluster wide default resource configuration.  */ public void setDefaultResourceConfig(Properties defaultResourceConfig) {     this.defaultResourceConfig = defaultResourceConfig. }
false;public;0;3;;public Properties getDefaultResourceOptions() {     return defaultResourceOptions. }
true;public;1;3;/**  * The local default resource options.  */ ;/**  * The local default resource options.  */ public void setDefaultResourceOptions(Properties defaultResourceOptions) {     this.defaultResourceOptions = defaultResourceOptions. }
false;public;0;3;;public Map<String, Properties> getResourceConfigs() {     return resourceConfigs. }
true;public;1;3;/**  * Cluster wide resources configuration.  */ ;/**  * Cluster wide resources configuration.  */ public void setResourceConfigs(Map<String, Properties> resourceConfigs) {     this.resourceConfigs = resourceConfigs. }
false;public;2;7;;public void addResourceConfig(String name, Properties config) {     if (this.resourceConfigs == null) {         this.resourceConfigs = new HashMap<>().     }     this.resourceConfigs.put(name, config). }
false;public;1;18;;public Properties getResourceConfig(String name) {     Properties properties = null.     if (this.resourceConfigs != null) {         Properties props = this.resourceConfigs.getOrDefault(name, this.defaultResourceConfig).         if (props != null) {             properties = new Properties(props).         }     } else if (this.defaultResourceConfig != null) {         properties = new Properties(this.defaultResourceConfig).     }     if (properties == null) {         properties = new Properties().     }     return properties. }
false;public;0;3;;public Map<String, Properties> getResourceOptions() {     return resourceOptions. }
true;public;1;3;/**  * Local resources configurations  */ ;/**  * Local resources configurations  */ public void setResourceOptions(Map<String, Properties> resourceOptions) {     this.resourceOptions = resourceOptions. }
false;public;2;7;;public void addResourceOption(String name, Properties config) {     if (this.resourceOptions == null) {         this.resourceOptions = new HashMap<>().     }     this.resourceOptions.put(name, config). }
false;public;1;18;;public Properties getResourceOptions(String name) {     Properties properties = null.     if (this.resourceOptions != null) {         Properties props = this.resourceOptions.getOrDefault(name, this.defaultResourceOptions).         if (props != null) {             properties = new Properties(props).         }     } else if (this.defaultResourceOptions != null) {         properties = new Properties(this.defaultResourceOptions).     }     if (properties == null) {         properties = new Properties().     }     return properties. }
false;public;0;3;;public boolean isEphemeral() {     return ephemeral. }
true;public;1;3;/**  * Sets if the local member should join groups as PersistentMember or not.  *  * If set to ephemeral the local member will receive an auto generated ID thus  * the local one is ignored.  */ ;/**  * Sets if the local member should join groups as PersistentMember or not.  *  * If set to ephemeral the local member will receive an auto generated ID thus  * the local one is ignored.  */ public void setEphemeral(boolean ephemeral) {     this.ephemeral = ephemeral. }
