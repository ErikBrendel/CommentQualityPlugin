commented;modifiers;parameterAmount;loc;comment;code
false;;2;20;;// ********************************* // Handlers // ********************************* @InvokeOnHeader("DIRECT") boolean onDirect(Message message, AsyncCallback callback) throws Exception {     final Object value = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     final String memberName = message.getHeader(MEMBER_NAME, configuration::getMemberName, String.class).     final String channelName = message.getHeader(CHANNEL_NAME, configuration::getChannelName, String.class).     ObjectHelper.notNull(memberName, MEMBER_NAME).     ObjectHelper.notNull(channelName, CHANNEL_NAME).     ObjectHelper.notNull(value, RESOURCE_VALUE).     final DistributedGroup group = getResource(message).     final GroupMember member = group.member(memberName).     final MessageProducer<Object> producer = member.messaging().producer(channelName, OPTIONS_DIRECT).     producer.send(value).thenAccept(result -> processResult(message, callback, result)).     return false. }
false;;2;22;;@InvokeOnHeader("BROADCAST") boolean onBroadcast(Message message, AsyncCallback callback) throws Exception {     final Object value = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     final String channelName = message.getHeader(CHANNEL_NAME, configuration::getChannelName, String.class).     final AtomixMessaging.BroadcastType type = message.getHeader(BROADCAST_TYPE, configuration::getBroadcastType, AtomixMessaging.BroadcastType.class).     ObjectHelper.notNull(channelName, CHANNEL_NAME).     ObjectHelper.notNull(value, RESOURCE_VALUE).     MessageProducer.Options options = type == AtomixMessaging.BroadcastType.RANDOM ? OPTIONS_BROADCAST_RANDOM : OPTIONS_BROADCAST.     final DistributedGroup group = getResource(message).     final MessageProducer<Object> producer = group.messaging().producer(channelName, options).     producer.send(value).thenRun(() -> processResult(message, callback, null)).     return false. }
false;protected;1;4;;// ********************************* // Implementation // ********************************* @Override protected String getProcessorKey(Message message) {     return message.getHeader(RESOURCE_ACTION, configuration::getDefaultAction, String.class). }
false;protected;1;4;;@Override protected String getResourceName(Message message) {     return message.getHeader(RESOURCE_NAME, getAtomixEndpoint()::getResourceName, String.class). }
false;protected;1;9;;@Override protected DistributedGroup createResource(String resourceName) {     return getAtomixEndpoint().getAtomix().getGroup(resourceName, new DistributedGroup.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedGroup.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))).join(). }
