commented;modifiers;parameterAmount;loc;comment;code
false;;2;13;;// ********************************* // Handlers // ********************************* @InvokeOnHeader("ADD") boolean onAdd(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     final Object val = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     ObjectHelper.notNull(val, RESOURCE_VALUE).     queue.add(val).thenAccept(result -> processResult(message, callback, result)).     return false. }
false;;2;13;;@InvokeOnHeader("OFFER") boolean onOffer(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     final Object val = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     ObjectHelper.notNull(val, RESOURCE_VALUE).     queue.offer(val).thenAccept(result -> processResult(message, callback, result)).     return false. }
false;;2;10;;@InvokeOnHeader("PEEK") boolean onPeek(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     queue.peek().thenAccept(result -> processResult(message, callback, result)).     return false. }
false;;2;10;;@InvokeOnHeader("POLL") boolean onPoll(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     queue.poll().thenAccept(result -> processResult(message, callback, result)).     return false. }
false;;2;10;;@InvokeOnHeader("CLEAR") boolean onClear(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     queue.clear().thenAccept(result -> processResult(message, callback, result)).     return false. }
false;;2;20;;@InvokeOnHeader("CONTAINS") boolean onContains(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     final ReadConsistency consistency = message.getHeader(RESOURCE_READ_CONSISTENCY, configuration::getReadConsistency, ReadConsistency.class).     final Object value = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     ObjectHelper.notNull(value, RESOURCE_VALUE).     if (consistency != null) {         queue.contains(value, consistency).thenAccept(result -> processResult(message, callback, result)).     } else {         queue.contains(value).thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;;2;17;;@InvokeOnHeader("IS_EMPTY") boolean onIsEmpty(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     final ReadConsistency consistency = message.getHeader(RESOURCE_READ_CONSISTENCY, configuration::getReadConsistency, ReadConsistency.class).     if (consistency != null) {         queue.isEmpty(consistency).thenAccept(result -> processResult(message, callback, result)).     } else {         queue.isEmpty().thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;;2;17;;@InvokeOnHeader("REMOVE") boolean onRemove(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     final Object value = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     if (value == null) {         queue.remove().thenAccept(result -> processResult(message, callback, result)).     } else {         queue.remove(value).thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;;2;17;;@InvokeOnHeader("SIZE") boolean onSize(Message message, AsyncCallback callback) throws Exception {     final DistributedQueue<Object> queue = getResource(message).     final ReadConsistency consistency = message.getHeader(RESOURCE_READ_CONSISTENCY, configuration::getReadConsistency, ReadConsistency.class).     if (consistency != null) {         queue.size(consistency).thenAccept(result -> processResult(message, callback, result)).     } else {         queue.size().thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;protected;1;4;;// ********************************* // Implementation // ********************************* @Override protected String getProcessorKey(Message message) {     return message.getHeader(RESOURCE_ACTION, configuration::getDefaultAction, String.class). }
false;protected;1;4;;@Override protected String getResourceName(Message message) {     return message.getHeader(RESOURCE_NAME, getAtomixEndpoint()::getResourceName, String.class). }
false;protected;1;10;;@Override protected DistributedQueue<Object> createResource(String resourceName) {     return getAtomixEndpoint().getAtomix().getQueue(resourceName, new DistributedQueue.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedQueue.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))).join(). }
