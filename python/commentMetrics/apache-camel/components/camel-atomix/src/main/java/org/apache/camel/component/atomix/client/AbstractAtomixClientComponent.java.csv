commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ***************************************** // Properties // ***************************************** public AtomixClient getAtomix() {     return getComponentConfiguration().getAtomix(). }
true;public;1;3;/**  * The shared AtomixClient instance  */ ;/**  * The shared AtomixClient instance  */ public void setAtomix(AtomixClient client) {     getComponentConfiguration().setAtomix(client). }
false;public;0;3;;public List<Address> getNodes() {     return getComponentConfiguration().getNodes(). }
true;public;1;3;/**  * The nodes the AtomixClient should connect to  */ ;/**  * The nodes the AtomixClient should connect to  */ public void setNodes(List<Address> nodes) {     getComponentConfiguration().setNodes(nodes). }
false;public;1;3;;public void setNodes(String nodes) {     getComponentConfiguration().setNodes(nodes). }
false;public;0;3;;public String getConfigurationUri() {     return getComponentConfiguration().getConfigurationUri(). }
true;public;1;3;/**  * The path to the AtomixClient configuration  */ ;/**  * The path to the AtomixClient configuration  */ public void setConfigurationUri(String configurationUri) {     getComponentConfiguration().setConfigurationUri(configurationUri). }
false;protected;2;31;;// ***************************************** // Properties // ***************************************** protected C setConfigurationProperties(C configuration, Map<String, Object> parameters) throws Exception {     // Resolve config for named maps     Map<String, Object> configs = IntrospectionSupport.extractProperties(parameters, "resource.config.").     for (Map.Entry<String, Object> entry : configs.entrySet()) {         String ref = (String) entry.getValue().         if (!EndpointHelper.isReferenceParameter(ref)) {             throw new IllegalArgumentException("The option resource.config." + ref + " should be a reference").         }         configuration.addResourceConfig(entry.getKey(), EndpointHelper.resolveReferenceParameter(getCamelContext(), ref, Properties.class)).     }     // Resolve options for named maps     Map<String, Object> options = IntrospectionSupport.extractProperties(parameters, "resource.options.").     for (Map.Entry<String, Object> entry : options.entrySet()) {         String ref = (String) entry.getValue().         if (!EndpointHelper.isReferenceParameter(ref)) {             throw new IllegalArgumentException("The option resource.options." + ref + " should be a reference").         }         configuration.addResourceOption(entry.getKey(), EndpointHelper.resolveReferenceParameter(getCamelContext(), ref, Properties.class)).     }     setProperties(configuration, parameters).     return configuration. }
false;protected,abstract;0;1;;// ***************************************** // Properties // ***************************************** protected abstract C getComponentConfiguration().
