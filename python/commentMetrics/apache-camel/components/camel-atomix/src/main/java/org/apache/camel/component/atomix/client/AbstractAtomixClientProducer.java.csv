commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected void doStart() throws Exception {     for (final Method method : getClass().getDeclaredMethods()) {         InvokeOnHeader[] annotations = method.getAnnotationsByType(InvokeOnHeader.class).         if (annotations != null && annotations.length > 0) {             for (InvokeOnHeader annotation : annotations) {                 bind(annotation, method).             }         }     }     super.doStart(). }
false;public;2;16;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     final Message message = exchange.getIn().     final String key = getProcessorKey(message).     AtomixAsyncMessageProcessor processor = this.processors.get(key).     if (processor != null) {         try {             return processor.process(message, callback).         } catch (Exception e) {             throw new RuntimeCamelException(e).         }     } else {         throw new RuntimeCamelException("No handler for action " + key).     } }
false;protected;0;4;;// ********************************** //  // ********************************** @SuppressWarnings("unchecked") protected E getAtomixEndpoint() {     return (E) super.getEndpoint(). }
false;protected;3;16;;protected void processResult(Message message, AsyncCallback callback, Object result) {     if (result != null && !(result instanceof Void)) {         message.setHeader(RESOURCE_ACTION_HAS_RESULT, true).         String resultHeader = getAtomixEndpoint().getConfiguration().getResultHeader().         if (resultHeader != null) {             message.setHeader(resultHeader, result).         } else {             message.setBody(result).         }     } else {         message.setHeader(RESOURCE_ACTION_HAS_RESULT, false).     }     callback.done(false). }
false;protected;1;7;;protected R getResource(Message message) {     String resourceName = getResourceName(message).     ObjectHelper.notNull(resourceName, RESOURCE_NAME).     return resources.computeIfAbsent(resourceName, name -> createResource(name)). }
false;protected,abstract;1;1;;protected abstract String getProcessorKey(Message message).
false;protected,abstract;1;1;;protected abstract String getResourceName(Message message).
false;protected,abstract;1;1;;protected abstract R createResource(String name).
false;private;2;21;;// ************************************ // Binding helpers // ************************************ private void bind(InvokeOnHeader annotation, final Method method) {     if (method.getParameterCount() == 2) {         method.setAccessible(true).         if (!Message.class.isAssignableFrom(method.getParameterTypes()[0])) {             throw new IllegalArgumentException("First argument should be of type Message").         }         if (!AsyncCallback.class.isAssignableFrom(method.getParameterTypes()[1])) {             throw new IllegalArgumentException("Second argument should be of type AsyncCallback").         }         log.debug("bind key={}, class={}, method={}", annotation.value(), this.getClass(), method.getName()).         this.processors.put(annotation.value(), (m, c) -> (boolean) method.invoke(this, m, c)).     } else {         throw new IllegalArgumentException("Illegal number of parameters for method: " + method.getName() + ", required: 2, found: " + method.getParameterCount()).     } }
