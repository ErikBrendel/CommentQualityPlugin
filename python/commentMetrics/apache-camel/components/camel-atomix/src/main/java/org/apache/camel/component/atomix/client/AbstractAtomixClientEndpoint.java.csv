commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("Producer not supported"). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Consumer not supported"). }
false;protected;0;15;;@Override protected void doStart() throws Exception {     if (atomix == null) {         final C configuration = getConfiguration().         final CamelContext context = getCamelContext().         ObjectHelper.notNull(configuration, "Configuration").         ObjectHelper.notNull(context, "CamelContext").         atomix = AtomixClientHelper.createClient(context, configuration).         atomix.connect(configuration.getNodes()).join().     }     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     super.doStop().     if (atomix != null) {         atomix.close().     } }
false;public;0;4;;// ********************************** // Helpers for implementations // ********************************** @SuppressWarnings("unchecked") public T getAtomixComponent() {     return (T) super.getComponent(). }
false;public;0;3;;public AtomixClient getAtomix() {     return atomix. }
false;public;0;3;;public String getResourceName() {     return resourceName. }
false;public,abstract;0;1;;// ********************************** // Abstract // ********************************** public abstract C getConfiguration().
false;public,abstract;1;1;;public abstract void setConfiguration(C configuration).
