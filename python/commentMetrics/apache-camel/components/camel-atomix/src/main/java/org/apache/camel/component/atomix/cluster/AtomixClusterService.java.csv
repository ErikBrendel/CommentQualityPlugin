commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ********************************** // Properties // ********************************** public Address getAddress() {     return address. }
false;public;1;3;;public void setAddress(String address) {     this.address = new Address(address). }
false;public;1;3;;public void setAddress(Address address) {     this.address = address. }
false;public;0;3;;public AtomixClusterConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(AtomixClusterConfiguration configuration) {     this.configuration = configuration.copy(). }
false;public;0;3;;public String getStoragePath() {     return configuration.getStoragePath(). }
false;public;1;3;;public void setStoragePath(String storagePath) {     configuration.setStoragePath(storagePath). }
false;public;0;3;;public StorageLevel getStorageLevel() {     return configuration.getStorageLevel(). }
false;public;0;3;;public List<Address> getNodes() {     return configuration.getNodes(). }
false;public;1;3;;public void setNodes(List<Address> nodes) {     configuration.setNodes(nodes). }
false;public;1;3;;public void setStorageLevel(StorageLevel storageLevel) {     configuration.setStorageLevel(storageLevel). }
false;public;1;3;;public void setNodes(String nodes) {     configuration.setNodes(nodes). }
false;public;0;3;;public Class<? extends Transport> getTransport() {     return configuration.getTransport(). }
false;public;1;3;;public void setTransport(Class<? extends Transport> transport) {     configuration.setTransport(transport). }
false;public;0;3;;public AtomixReplica getAtomix() {     return configuration.getAtomix(). }
false;public;1;3;;public void setAtomix(AtomixReplica atomix) {     configuration.setAtomix(atomix). }
false;public;0;3;;public String getConfigurationUri() {     return configuration.getConfigurationUri(). }
false;public;1;3;;public void setConfigurationUri(String configurationUri) {     configuration.setConfigurationUri(configurationUri). }
false;public;0;3;;public boolean isEphemeral() {     return configuration.isEphemeral(). }
false;public;1;3;;public void setEphemeral(boolean ephemeral) {     configuration.setEphemeral(ephemeral). }
false;protected;0;4;;// ********************************************* // Lifecycle // ********************************************* @Override protected void doStart() throws Exception {     super.doStart(). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     super.doStop().     if (atomix != null) {         log.debug("Leaving atomix cluster replica {}", atomix).         atomix.leave().join().     } }
false;protected;1;4;;@Override protected AtomixClusterView createView(String namespace) throws Exception {     return new AtomixClusterView(this, namespace, getOrCreateReplica(), configuration). }
false;private;0;22;;private AtomixReplica getOrCreateReplica() throws Exception {     if (atomix == null) {         // Validate parameters         ObjectHelper.notNull(getCamelContext(), "Camel Context").         ObjectHelper.notNull(address, "Atomix Node Address").         ObjectHelper.notNull(configuration, "Atomix Node Configuration").         atomix = AtomixClusterHelper.createReplica(getCamelContext(), address, configuration).         if (ObjectHelper.isNotEmpty(configuration.getNodes())) {             log.debug("Bootstrap cluster on address {} for nodes: {}", address, configuration.getNodes()).             this.atomix.bootstrap(configuration.getNodes()).join().             log.debug("Bootstrap cluster done").         } else {             log.debug("Bootstrap cluster on address {}", address, configuration.getNodes()).             this.atomix.bootstrap().join().             log.debug("Bootstrap cluster done").         }     }     return this.atomix. }
