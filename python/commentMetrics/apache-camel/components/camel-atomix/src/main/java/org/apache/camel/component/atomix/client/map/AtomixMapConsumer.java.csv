commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;26;;@Override protected void doStart() throws Exception {     super.doStart().     this.map = getAtomixEndpoint().getAtomix().getMap(resourceName, new DistributedMap.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedMap.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))).join().     Object key = getAtomixEndpoint().getConfiguration().getKey().     if (key == null) {         log.debug("Subscribe to events for map: {}", resourceName).         this.listeners.add(this.map.onAdd(this::onEvent).join()).         this.listeners.add(this.map.onRemove(this::onEvent).join()).         this.listeners.add(this.map.onUpdate(this::onEvent).join()).     } else {         log.debug("Subscribe to events for map: {}, key: {}", resourceName, key).         this.listeners.add(this.map.onAdd(key, this::onEvent).join()).         this.listeners.add(this.map.onRemove(key, this::onEvent).join()).         this.listeners.add(this.map.onUpdate(key, this::onEvent).join()).     } }
false;protected;0;7;;@Override protected void doStop() throws Exception {     // close listeners     listeners.forEach(Listener::close).     super.doStart(). }
false;private;1;17;;// ******************************************** // Event handler // ******************************************** private void onEvent(DistributedMap.EntryEvent<Object, Object> event) {     Exchange exchange = getEndpoint().createExchange().     exchange.getIn().setHeader(AtomixClientConstants.EVENT_TYPE, event.type()).     exchange.getIn().setHeader(AtomixClientConstants.RESOURCE_KEY, event.entry().getKey()).     if (resultHeader == null) {         exchange.getIn().setBody(event.entry().getValue()).     } else {         exchange.getIn().setHeader(resultHeader, event.entry().getValue()).     }     try {         getProcessor().process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException(e).     } }
