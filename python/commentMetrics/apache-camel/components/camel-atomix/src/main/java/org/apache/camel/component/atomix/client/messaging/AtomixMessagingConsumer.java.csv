commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;16;;@Override protected void doStart() throws Exception {     super.doStart().     DistributedGroup group = getAtomixEndpoint().getAtomix().getGroup(groupName, new DistributedGroup.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(groupName)), new DistributedGroup.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(groupName))).join().     this.localMember = group.join(memberName).join().     this.consumer = localMember.messaging().consumer(channelName).     log.debug("Subscribe to group: {}, member: {}, channel: {}", groupName, memberName, channelName).     this.listeners.add(consumer.onMessage(this::onMessage)). }
false;protected;0;17;;@Override protected void doStop() throws Exception {     // close listeners     listeners.forEach(Listener::close).     if (this.consumer != null) {         this.consumer.close().         this.consumer = null.     }     // if (this.localMember != null) {     // this.localMember.leave().join().     // this.localMember = null.     // }     super.doStop(). }
false;private;1;18;;// ******************************************** // Event handler // ******************************************** private void onMessage(Message<Object> message) {     Exchange exchange = getEndpoint().createExchange().     exchange.getIn().setHeader(AtomixClientConstants.MESSAGE_ID, message.id()).     if (resultHeader == null) {         exchange.getIn().setBody(message.message()).     } else {         exchange.getIn().setHeader(resultHeader, message.message()).     }     try {         getProcessor().process(exchange).         message.ack().     } catch (Exception e) {         message.fail().         getExceptionHandler().handleException(e).     } }
