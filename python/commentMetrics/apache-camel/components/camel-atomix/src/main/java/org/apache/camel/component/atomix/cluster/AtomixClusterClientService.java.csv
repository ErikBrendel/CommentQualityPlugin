commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ********************************** // Properties // ********************************** public AtomixClientConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(AtomixClientConfiguration configuration) {     this.configuration = configuration.copy(). }
false;public;0;3;;public List<Address> getNodes() {     return configuration.getNodes(). }
false;public;1;3;;public void setNodes(List<Address> nodes) {     configuration.setNodes(nodes). }
false;public;1;3;;public void setNodes(String nodes) {     configuration.setNodes(nodes). }
false;public;0;3;;public Class<? extends Transport> getTransport() {     return configuration.getTransport(). }
false;public;1;3;;public void setTransport(Class<? extends Transport> transport) {     configuration.setTransport(transport). }
false;public;0;3;;public AtomixClient getAtomix() {     return configuration.getAtomix(). }
false;public;1;3;;public void setAtomix(AtomixClient atomix) {     configuration.setAtomix(atomix). }
false;public;0;3;;public String getConfigurationUri() {     return configuration.getConfigurationUri(). }
false;public;1;3;;public void setConfigurationUri(String configurationUri) {     configuration.setConfigurationUri(configurationUri). }
false;public;0;3;;public boolean isEphemeral() {     return configuration.isEphemeral(). }
false;public;1;3;;public void setEphemeral(boolean ephemeral) {     configuration.setEphemeral(ephemeral). }
false;protected;0;4;;// ********************************************* // Lifecycle // ********************************************* @Override protected void doStart() throws Exception {     super.doStart(). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     super.doStop().     if (atomix != null) {         LOGGER.debug("Shutdown atomix client {}", atomix).         atomix.close().join().     } }
false;protected;1;4;;@Override protected AtomixClusterView createView(String namespace) throws Exception {     return new AtomixClusterView(this, namespace, getOrCreateClient(), configuration). }
false;private;0;19;;private AtomixClient getOrCreateClient() throws Exception {     if (atomix == null) {         // Validate parameters         ObjectHelper.notNull(getCamelContext(), "Camel Context").         ObjectHelper.notNull(configuration, "Atomix Node Configuration").         if (ObjectHelper.isEmpty(configuration.getNodes())) {             throw new IllegalArgumentException("Atomix nodes should not be empty").         }         atomix = AtomixClientHelper.createClient(getCamelContext(), configuration).         LOGGER.debug("Connect to cluster nodes: {}", configuration.getNodes()).         atomix.connect(configuration.getNodes()).join().         LOGGER.debug("Connect to cluster done").     }     return this.atomix. }
