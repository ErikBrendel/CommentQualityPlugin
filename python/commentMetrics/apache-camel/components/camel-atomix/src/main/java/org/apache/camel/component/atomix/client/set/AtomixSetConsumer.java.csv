commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;17;;@Override protected void doStart() throws Exception {     super.doStart().     this.set = getAtomixEndpoint().getAtomix().getSet(resourceName, new DistributedSet.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedSet.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))).join().     log.debug("Subscribe to events for set: {}", resourceName).     this.listeners.add(this.set.onAdd(this::onEvent).join()).     this.listeners.add(this.set.onRemove(this::onEvent).join()). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     // close listeners     listeners.forEach(Listener::close).     super.doStart(). }
false;private;1;16;;// ******************************************** // Event handler // ******************************************** private void onEvent(DistributedSet.ValueEvent<Object> event) {     Exchange exchange = getEndpoint().createExchange().     exchange.getIn().setHeader(AtomixClientConstants.EVENT_TYPE, event.type()).     if (resultHeader == null) {         exchange.getIn().setBody(event.value()).     } else {         exchange.getIn().setHeader(resultHeader, event.value()).     }     try {         getProcessor().process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException(e).     } }
