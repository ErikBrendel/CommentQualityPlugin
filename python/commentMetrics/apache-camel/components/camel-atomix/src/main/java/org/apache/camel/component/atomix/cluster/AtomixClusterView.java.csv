commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override public Optional<CamelClusterMember> getLeader() {     if (group == null) {         return Optional.empty().     }     GroupMember leader = group.election().term().leader().     if (leader == null) {         return Optional.empty().     }     return Optional.of(new AtomixClusterMember(leader)). }
false;public;0;4;;@Override public CamelClusterMember getLocalMember() {     return localMember. }
false;public;0;10;;@Override public List<CamelClusterMember> getMembers() {     if (group == null) {         return Collections.emptyList().     }     return this.group.members().stream().map(AtomixClusterMember::new).collect(Collectors.toList()). }
false;protected;0;37;;@SuppressWarnings("unchecked") @Override protected void doStart() throws Exception {     if (!localMember.hasJoined()) {         log.debug("Get group {}", getNamespace()).         group = this.atomix.getGroup(getNamespace(), new DistributedGroup.Config(configuration.getResourceConfig(getNamespace())), new DistributedGroup.Options(configuration.getResourceOptions(getNamespace()))).get().         log.debug("Listen election events").         group.election().onElection(term -> {             if (isRunAllowed()) {                 fireLeadershipChangedEvent(Optional.of(toClusterMember(term.leader()))).             }         }).         log.debug("Listen join events").         group.onJoin(member -> {             if (isRunAllowed()) {                 fireMemberAddedEvent(toClusterMember(member)).             }         }).         log.debug("Listen leave events").         group.onLeave(member -> {             if (isRunAllowed()) {                 fireMemberRemovedEvent(toClusterMember(member)).             }         }).         log.debug("Join group {}", getNamespace()).         localMember.join().     } }
false;protected;0;4;;@Override protected void doStop() throws Exception {     localMember.leave(). }
false;protected;1;5;;protected CamelClusterMember toClusterMember(GroupMember member) {     return localMember != null && localMember.is(member) ? localMember : new AtomixClusterMember(member). }
false;public;0;13;;@Override public String getId() {     String id = getClusterService().getId().     if (ObjectHelper.isNotEmpty(id)) {         return id.     }     if (member == null) {         throw new IllegalStateException("The view has not yet joined the cluster").     }     return member.id(). }
false;public;0;8;;@Override public boolean isLeader() {     if (member == null) {         return false.     }     return member.equals(group.election().term().leader()). }
false;public;0;4;;@Override public boolean isLocal() {     return true. }
false;;1;5;;boolean is(GroupMember member) {     return this.member != null ? this.member.equals(member) : false. }
false;;0;3;;boolean hasJoined() {     return member != null. }
false;;0;15;;AtomixLocalMember join() throws ExecutionException, InterruptedException {     if (member == null && group != null) {         String id = getClusterService().getId().         if (ObjectHelper.isEmpty(id) || configuration.isEphemeral()) {             log.debug("Joining group: {}", group).             member = group.join().join().             log.debug("Group {} joined with id {}", group, member.id()).         } else {             log.debug("Joining group: {}, with id: {}", group, id).             member = group.join(id).join().         }     }     return this. }
false;;0;15;;AtomixLocalMember leave() {     if (member != null) {         String id = member.id().         log.debug("Member {} : leave group {}", id, group).         member.leave().join().         group.remove(id).join().         member = null.         fireLeadershipChangedEvent(Optional.empty()).     }     return this. }
false;public;0;7;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("AtomixLocalMember{").     sb.append("member=").append(member).     sb.append('}').     return sb.toString(). }
false;public;0;4;;@Override public String getId() {     return member.id(). }
false;public;0;11;;@Override public boolean isLeader() {     if (group == null) {         return false.     }     if (member == null) {         return false.     }     return member.equals(group.election().term().leader()). }
false;public;0;4;;@Override public boolean isLocal() {     return localMember != null ? localMember.is(member) : false. }
false;public;0;8;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("AtomixClusterMember{").     sb.append("group=").append(group).     sb.append(", member=").append(member).     sb.append('}').     return sb.toString(). }
