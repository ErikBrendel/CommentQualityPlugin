commented;modifiers;parameterAmount;loc;comment;code
false;;2;20;;// ********************************* // Handlers // ********************************* @InvokeOnHeader("SET") boolean onSet(Message message, AsyncCallback callback) throws Exception {     final DistributedValue<Object> value = getResource(message).     final long ttl = message.getHeader(RESOURCE_TTL, configuration::getTtl, long.class).     final Object val = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     ObjectHelper.notNull(val, RESOURCE_VALUE).     if (ttl > 0) {         value.set(val, Duration.ofMillis(ttl)).thenAccept(result -> processResult(message, callback, result)).     } else {         value.set(val).thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;;2;17;;@InvokeOnHeader("GET") boolean onGet(Message message, AsyncCallback callback) throws Exception {     final DistributedValue<Object> value = getResource(message).     final ReadConsistency consistency = message.getHeader(RESOURCE_READ_CONSISTENCY, configuration::getReadConsistency, ReadConsistency.class).     if (consistency != null) {         value.get(consistency).thenAccept(result -> processResult(message, callback, result)).     } else {         value.get().thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;;2;20;;@InvokeOnHeader("GET_AND_SET") boolean onGetAndSet(Message message, AsyncCallback callback) throws Exception {     final DistributedValue<Object> value = getResource(message).     final long ttl = message.getHeader(RESOURCE_TTL, configuration::getTtl, long.class).     final Object val = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     ObjectHelper.notNull(val, RESOURCE_VALUE).     if (ttl > 0) {         value.getAndSet(val, Duration.ofMillis(ttl)).thenAccept(result -> processResult(message, callback, result)).     } else {         value.getAndSet(val).thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;;2;22;;@InvokeOnHeader("COMPARE_AND_SET") boolean onCompareAndSet(Message message, AsyncCallback callback) throws Exception {     final DistributedValue<Object> value = getResource(message).     final long ttl = message.getHeader(RESOURCE_TTL, configuration::getTtl, long.class).     final Object newVal = message.getHeader(RESOURCE_VALUE, message::getBody, Object.class).     final Object oldVal = message.getHeader(RESOURCE_OLD_VALUE, Object.class).     ObjectHelper.notNull(newVal, RESOURCE_VALUE).     ObjectHelper.notNull(oldVal, RESOURCE_OLD_VALUE).     if (ttl > 0) {         value.compareAndSet(oldVal, newVal, Duration.ofMillis(ttl)).thenAccept(result -> processResult(message, callback, result)).     } else {         value.compareAndSet(oldVal, newVal).thenAccept(result -> processResult(message, callback, result)).     }     return false. }
false;protected;1;4;;// ********************************* // Implementation // ********************************* @Override protected String getProcessorKey(Message message) {     return message.getHeader(RESOURCE_ACTION, configuration::getDefaultAction, String.class). }
false;protected;1;4;;@Override protected String getResourceName(Message message) {     return message.getHeader(RESOURCE_NAME, getAtomixEndpoint()::getResourceName, String.class). }
false;protected;1;10;;@Override protected DistributedValue<Object> createResource(String resourceName) {     return getAtomixEndpoint().getAtomix().getValue(resourceName, new DistributedValue.Config(getAtomixEndpoint().getConfiguration().getResourceOptions(resourceName)), new DistributedValue.Options(getAtomixEndpoint().getConfiguration().getResourceConfig(resourceName))).join(). }
