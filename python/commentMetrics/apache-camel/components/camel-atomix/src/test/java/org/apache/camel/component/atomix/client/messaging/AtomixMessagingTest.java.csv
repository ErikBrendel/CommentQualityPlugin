commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// ************************************ // Setup // ************************************ @Override protected Map<String, Component> createComponents() {     AtomixMessagingComponent component = new AtomixMessagingComponent().     component.setNodes(Collections.singletonList(getReplicaAddress())).     return Collections.singletonMap("atomix-messaging", component). }
false;public;0;23;;// ************************************ // Test // ************************************ @Test public void testMessaging() throws Exception {     MockEndpoint mock1 = getMockEndpoint("mock:member-1").     mock1.expectedMessageCount(2).     mock1.expectedBodiesReceived("direct-message", "broadcast-message").     MockEndpoint mock2 = getMockEndpoint("mock:member-2").     mock2.expectedMessageCount(1).     mock2.expectedBodiesReceived("broadcast-message").     template.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMessaging.Action.DIRECT).withHeader(AtomixClientConstants.MEMBER_NAME, "member-1").withHeader(AtomixClientConstants.CHANNEL_NAME, "channel").withBody("direct-message").send().     template.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMessaging.Action.BROADCAST).withHeader(AtomixClientConstants.CHANNEL_NAME, "channel").withBody("direct-message").send(). }
false;public;0;9;;public void configure() {     from("direct:start").to("atomix-messaging:group").     from("atomix-messaging:group?memberName=member-1&channelName=channel").to("mock:member-1").     from("atomix-messaging:group?memberName=member-2&channelName=channel").to("mock:member-2"). }
false;protected;0;14;;// ************************************ // Routes // ************************************ @Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("atomix-messaging:group").             from("atomix-messaging:group?memberName=member-1&channelName=channel").to("mock:member-1").             from("atomix-messaging:group?memberName=member-2&channelName=channel").to("mock:member-2").         }     }. }
