commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// ************************************ // Setup // ************************************ @Override protected Map<String, Component> createComponents() {     AtomixMultiMapComponent component = new AtomixMultiMapComponent().     component.setNodes(Collections.singletonList(getReplicaAddress())).     return Collections.singletonMap("atomix-multimap", component). }
false;protected;0;6;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     map = getClient().getMultiMap(MAP_NAME).join(). }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     map.close().     super.tearDown(). }
false;public;0;28;;// ************************************ // Test // ************************************ @Test public void testPut() throws Exception {     final String key = context().getUuidGenerator().generateUuid().     final String val1 = context().getUuidGenerator().generateUuid().     final String val2 = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY, key).withBody(val1).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(result.getBody(Boolean.class)).     assertEquals(Arrays.asList(val1), map.get(key).join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY, key).withBody(val2).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(result.getBody(Boolean.class)).     assertEquals(Arrays.asList(val1, val2), map.get(key).join()). }
false;public;0;27;;@Test public void testGet() throws Exception {     final String key = context().getUuidGenerator().generateUuid().     final String val = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.GET).withHeader(AtomixClientConstants.RESOURCE_KEY, key).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(result.getBody(Collection.class).isEmpty()).     assertFalse(map.containsKey(key).join()).     map.put(key, val).join().     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.GET).withHeader(AtomixClientConstants.RESOURCE_KEY, key).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(Arrays.asList(val), result.getBody(Collection.class)).     assertTrue(map.containsKey(key).join()). }
false;public;0;57;;@Test public void testSizeClearIsEmpty() throws Exception {     final String key1 = context().getUuidGenerator().generateUuid().     final String key2 = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.SIZE).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(0, result.getBody(Integer.class).intValue()).     assertEquals(map.size().join(), result.getBody(Integer.class)).     map.put(key1, context().getUuidGenerator().generateUuid()).join().     map.put(key1, context().getUuidGenerator().generateUuid()).join().     map.put(key2, context().getUuidGenerator().generateUuid()).join().     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.SIZE).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(map.size().join(), result.getBody(Integer.class)).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.SIZE).withHeader(AtomixClientConstants.RESOURCE_KEY, key1).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(map.size(key1).join(), result.getBody(Integer.class)).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.IS_EMPTY).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertFalse(result.getBody(Boolean.class)).     assertFalse(map.isEmpty().join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.CLEAR).request(Message.class).     assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(0, map.size().join().intValue()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.IS_EMPTY).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(result.getBody(Boolean.class)).     assertTrue(map.isEmpty().join()). }
false;public;0;29;;@Test public void testContainsKey() throws Exception {     final String key = context().getUuidGenerator().generateUuid().     final String val = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.CONTAINS_KEY).withHeader(AtomixClientConstants.RESOURCE_KEY, key).withBody(val).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertFalse(result.getBody(Boolean.class)).     assertFalse(map.containsKey(key).join()).     map.put(key, val).join().     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.CONTAINS_KEY).withHeader(AtomixClientConstants.RESOURCE_KEY, key).withBody(val).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(result.getBody(Boolean.class)).     assertTrue(map.containsKey(key).join()). }
false;public;0;39;;// @Test // public void testContainsValue() throws Exception { // final String key = context().getUuidGenerator().generateUuid(). // final String val1 = context().getUuidGenerator().generateUuid(). // final String val2 = context().getUuidGenerator().generateUuid(). //  // Message result. //  // result = fluent.clearAll() // .withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixClientMultiMapAction.CONTAINS_VALUE) // .withHeader(AtomixClientConstants.RESOURCE_VALUE, val1) // .request(Message.class). //  // assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)). // assertFalse(result.getBody(Boolean.class)). // assertFalse(map.containsValue(val1).join()). //  // map.put(key, val1).join(). // map.put(key, val2).join(). //  // result = fluent.clearAll() // .withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixClientMultiMapAction.CONTAINS_VALUE) // .withHeader(AtomixClientConstants.RESOURCE_VALUE, val1) // .request(Message.class). //  // assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)). // assertTrue(result.getBody(Boolean.class)). // assertTrue(map.containsValue(val1).join()). //  // result = fluent.clearAll() // .withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixClientMultiMapAction.CONTAINS_VALUE) // .withHeader(AtomixClientConstants.RESOURCE_VALUE, val2) // .request(Message.class). //  // assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)). // assertTrue(result.getBody(Boolean.class)). // assertTrue(map.containsValue(val2).join()). // } //  // @Test // public void testContainsEntry() throws Exception { // final String key = context().getUuidGenerator().generateUuid(). // final String val1 = context().getUuidGenerator().generateUuid(). // final String val2 = context().getUuidGenerator().generateUuid(). // map.put(key, val1).join(). // map.put(key, val2).join(). //  // Message result. //  // result = fluent.clearAll() // .withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixClientMultiMapAction.CONTAINS_ENTRY) // .withHeader(AtomixClientConstants.RESOURCE_KEY, key) // .withHeader(AtomixClientConstants.RESOURCE_VALUE, val1) // .request(Message.class). //  // assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)). // assertTrue(result.getBody(Boolean.class)). // assertTrue(map.containsEntry(key, val1).join()). //  // result = fluent.clearAll() // .withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixClientMultiMapAction.CONTAINS_ENTRY) // .withHeader(AtomixClientConstants.RESOURCE_KEY, key) // .withHeader(AtomixClientConstants.RESOURCE_VALUE, val2) // .request(Message.class). //  // assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)). // assertTrue(result.getBody(Boolean.class)). // assertTrue(map.containsEntry(key, val2).join()). //  // } @Test public void testRemove() throws Exception {     final String key = context().getUuidGenerator().generateUuid().     final String val1 = context().getUuidGenerator().generateUuid().     final String val2 = context().getUuidGenerator().generateUuid().     final String val3 = context().getUuidGenerator().generateUuid().     map.put(key, val1).join().     map.put(key, val2).join().     map.put(key, val3).join().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_KEY, key).withHeader(AtomixClientConstants.RESOURCE_VALUE, val1).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(Arrays.asList(val2, val3), map.get(key).join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.REMOVE_VALUE).withHeader(AtomixClientConstants.RESOURCE_VALUE, val2).request(Message.class).     assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(Arrays.asList(val3), map.get(key).join()).     assertTrue(map.containsKey(key).join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMultiMap.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_KEY, key).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertFalse(map.containsKey(key).join()). }
false;public;0;6;;@Ignore @Test public void test() {     // Assert.assertFalse(map.containsValue("abc").join()).     Assert.assertFalse(map.containsEntry("abc", "abc").join()). }
false;public;0;4;;public void configure() {     from("direct:start").toF("atomix-multimap:%s", MAP_NAME). }
false;protected;0;9;;// ************************************ // Routes // ************************************ @Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").toF("atomix-multimap:%s", MAP_NAME).         }     }. }
