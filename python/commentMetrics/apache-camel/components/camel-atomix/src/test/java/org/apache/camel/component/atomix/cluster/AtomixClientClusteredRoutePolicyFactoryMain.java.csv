commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public void configure(CamelContext context) {     try {         AtomixClusterService service = new AtomixClusterService().         service.setId("node-" + id).         service.setStorageLevel(StorageLevel.MEMORY).         service.setAddress(new Address(args[0])).         service.setNodes(args.length > 1 ? args[1] : args[0]).         context.setNameStrategy(new ExplicitCamelContextNameStrategy("camel-" + id)).         context.addService(service).         context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns")).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("timer:clustered?delay=1s&period=1s").routeId("route-" + id).log("Route ${routeId} is running ..."). }
false;public,static;1;34;;public static void main(String[] args) throws Exception {     final String id = UUID.randomUUID().toString().     Main main = new Main().     main.addMainListener(new MainListenerSupport() {          @Override         public void configure(CamelContext context) {             try {                 AtomixClusterService service = new AtomixClusterService().                 service.setId("node-" + id).                 service.setStorageLevel(StorageLevel.MEMORY).                 service.setAddress(new Address(args[0])).                 service.setNodes(args.length > 1 ? args[1] : args[0]).                 context.setNameStrategy(new ExplicitCamelContextNameStrategy("camel-" + id)).                 context.addService(service).                 context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns")).             } catch (Exception e) {                 throw new RuntimeException(e).             }         }     }).     main.addRouteBuilder(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:clustered?delay=1s&period=1s").routeId("route-" + id).log("Route ${routeId} is running ...").         }     }).     main.run(). }
