commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// ************************************ // Setup // ************************************ @Override protected Map<String, Component> createComponents() {     AtomixValueComponent component = new AtomixValueComponent().     component.setNodes(Collections.singletonList(getReplicaAddress())).     return Collections.singletonMap("atomix-value", component). }
false;protected;0;6;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     value = getClient().getValue(VALUE_NAME).join(). }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     value.close().     super.tearDown(). }
false;public;0;41;;// ************************************ // Test // ************************************ @Test public void test() throws Exception {     final String val1 = context().getUuidGenerator().generateUuid().     final String val2 = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixValue.Action.SET).withBody(val1).request(Message.class).     assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(val1, value.get().join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixValue.Action.COMPARE_AND_SET).withHeader(AtomixClientConstants.RESOURCE_OLD_VALUE, val1).withBody(val2).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(val2, value.get().join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixValue.Action.GET).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(val2, result.getBody()).     assertEquals(val2, value.get().join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixValue.Action.GET_AND_SET).withBody(val1).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(val2, result.getBody()).     assertEquals(val1, value.get().join()). }
false;public;0;4;;public void configure() {     from("direct:start").toF("atomix-value:%s", VALUE_NAME). }
false;protected;0;9;;// ************************************ // Routes // ************************************ @Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").toF("atomix-value:%s", VALUE_NAME).         }     }. }
