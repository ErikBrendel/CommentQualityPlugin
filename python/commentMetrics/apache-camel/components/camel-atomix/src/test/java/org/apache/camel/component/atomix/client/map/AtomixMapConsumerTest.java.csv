commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// ************************************ // Setup // ************************************ @Override protected Map<String, Component> createComponents() {     AtomixMapComponent component = new AtomixMapComponent().     component.setNodes(Collections.singletonList(getReplicaAddress())).     return Collections.singletonMap("atomix-map", component). }
false;protected;0;6;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     map = getClient().getMap(MAP_NAME).join(). }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     map.close().     super.tearDown(). }
false;public;0;53;;// ************************************ // Test // ************************************ @Test public void testEvents() throws Exception {     String key = context().getUuidGenerator().generateUuid().     String put = context().getUuidGenerator().generateUuid().     String upd = context().getUuidGenerator().generateUuid().     MockEndpoint mock1 = getMockEndpoint("mock:result").     mock1.expectedMessageCount(6).     MockEndpoint mock2 = getMockEndpoint("mock:result-key").     mock2.expectedMessageCount(2).     mock1.message(0).body().isEqualTo(put).     mock1.message(0).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.ADD).     mock1.message(0).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(key).     mock1.message(1).body().isEqualTo(put).     mock1.message(1).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.UPDATE).     mock1.message(1).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(key).     mock1.message(2).body().isEqualTo(upd).     mock1.message(2).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.UPDATE).     mock1.message(2).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(key).     mock1.message(3).body().isEqualTo(upd).     mock1.message(3).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.REMOVE).     mock1.message(3).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(key).     mock1.message(4).body().isEqualTo(put).     mock1.message(4).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.ADD).     mock1.message(4).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(KEY_NAME).     mock1.message(5).body().isEqualTo(put).     mock1.message(5).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.REMOVE).     mock1.message(5).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(KEY_NAME).     mock2.message(0).body().isEqualTo(put).     mock2.message(0).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.ADD).     mock2.message(0).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(KEY_NAME).     mock2.message(1).body().isEqualTo(put).     mock2.message(1).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.REMOVE).     mock2.message(1).header(AtomixClientConstants.RESOURCE_KEY).isEqualTo(KEY_NAME).     map.put(key, put).join().     map.put(key, put).join().     map.replace(key, upd).join().     map.remove(key).join().     map.put(KEY_NAME, put).join().     map.remove(KEY_NAME).join().     mock1.assertIsSatisfied().     mock2.assertIsSatisfied(). }
false;public;0;6;;public void configure() {     fromF("atomix-map:%s", MAP_NAME).to("mock:result").     fromF("atomix-map:%s?key=%s", MAP_NAME, KEY_NAME).to("mock:result-key"). }
false;protected;0;11;;// ************************************ // Routes // ************************************ @Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             fromF("atomix-map:%s", MAP_NAME).to("mock:result").             fromF("atomix-map:%s?key=%s", MAP_NAME, KEY_NAME).to("mock:result-key").         }     }. }
