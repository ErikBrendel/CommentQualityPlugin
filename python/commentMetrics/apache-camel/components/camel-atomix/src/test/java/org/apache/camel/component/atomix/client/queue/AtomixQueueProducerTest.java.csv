commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// ************************************ // Setup // ************************************ @Override protected Map<String, Component> createComponents() {     AtomixQueueComponent component = new AtomixQueueComponent().     component.setNodes(Collections.singletonList(getReplicaAddress())).     return Collections.singletonMap("atomix-queue", component). }
false;protected;0;6;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     queue = getClient().getQueue(QUEUE_NAME).join(). }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     queue.close().     super.tearDown(). }
false;public;0;23;;// ************************************ // Test // ************************************ @Test public void testAdd() throws Exception {     final String val1 = context().getUuidGenerator().generateUuid().     final String val2 = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.ADD).withBody(val1).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(queue.contains(val1).join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.ADD).withBody(val2).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(queue.contains(val2).join()). }
false;public;0;30;;@Test public void testOfferPeekAndPoll() throws Exception {     final String val = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.OFFER).withBody(val).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(queue.contains(val).join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.PEEK).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(queue.contains(val).join()).     assertEquals(val, result.getBody()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.POLL).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertFalse(queue.contains(val).join()).     assertEquals(val, result.getBody()). }
false;public;0;48;;@Test public void testSizeClearIsEmpty() throws Exception {     final String val1 = context().getUuidGenerator().generateUuid().     final String val2 = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.SIZE).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(0, result.getBody(Integer.class).intValue()).     assertEquals(queue.size().join(), result.getBody(Integer.class)).     queue.add(val1).join().     queue.add(val2).join().     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.SIZE).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(queue.size().join(), result.getBody(Integer.class)).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.IS_EMPTY).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertFalse(result.getBody(Boolean.class)).     assertFalse(queue.isEmpty().join()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.CLEAR).request(Message.class).     assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(0, queue.size().join().intValue()).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.IS_EMPTY).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(result.getBody(Boolean.class)).     assertTrue(queue.isEmpty().join()). }
false;public;0;26;;@Test public void testContains() throws Exception {     final String val = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.CONTAINS).withBody(val).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertFalse(result.getBody(Boolean.class)).     assertFalse(queue.contains(val).join()).     queue.add(val).     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.CONTAINS).withBody(val).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertTrue(result.getBody(Boolean.class)).     assertTrue(queue.contains(val).join()). }
false;public;0;19;;@Test public void testRemove() throws Exception {     final String val1 = context().getUuidGenerator().generateUuid().     final String val2 = context().getUuidGenerator().generateUuid().     queue.add(val1).join().     queue.add(val2).join().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixQueue.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_VALUE, val1).request(Message.class).     assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertFalse(queue.contains(val1).join()).     assertTrue(queue.contains(val2).join()). }
false;public;0;4;;public void configure() {     from("direct:start").toF("atomix-queue:%s", QUEUE_NAME). }
false;protected;0;9;;// ************************************ // Routes // ************************************ @Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").toF("atomix-queue:%s", QUEUE_NAME).         }     }. }
