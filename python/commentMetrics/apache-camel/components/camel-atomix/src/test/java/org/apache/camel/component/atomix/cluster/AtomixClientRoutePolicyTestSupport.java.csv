commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;// ************************************ // Test // ************************************ @Test public void test() throws Exception {     AtomixReplica boot = null.     try {         boot = AtomixFactory.replica(address).         for (String id : clients) {             scheduler.submit(() -> run(id)).         }         latch.await(1, TimeUnit.MINUTES).         scheduler.shutdownNow().         Assert.assertEquals(clients.size(), results.size()).         Assert.assertTrue(results.containsAll(clients)).     } finally {         if (boot != null) {             boot.shutdown().         }     } }
false;public;0;8;;@Override public void configure() throws Exception {     from("timer:atomix?delay=1s&period=1s").routeId("route-" + id).routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")).log("From ${routeId}").process(e -> contextLatch.countDown()). }
false;private;1;37;;// ************************************ // Run a Camel node // ************************************ private void run(String id) {     try {         int events = ThreadLocalRandom.current().nextInt(2, 6).         CountDownLatch contextLatch = new CountDownLatch(events).         DefaultCamelContext context = new DefaultCamelContext().         context.disableJMX().         context.setName("context-" + id).         context.addService(createClusterService(id, address)).         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("timer:atomix?delay=1s&period=1s").routeId("route-" + id).routePolicy(ClusteredRoutePolicy.forNamespace("my-ns")).log("From ${routeId}").process(e -> contextLatch.countDown()).             }         }).         // Start the context after some random time so the startup order         // changes for each test.         Thread.sleep(ThreadLocalRandom.current().nextInt(500)).         context.start().         contextLatch.await().         LOGGER.debug("Shutting down client node {}", id).         results.add(id).         context.stop().         latch.countDown().     } catch (Exception e) {         LOGGER.warn("", e).     } }
false;protected,abstract;2;1;;protected abstract CamelClusterService createClusterService(String id, Address bootstrapNode).
