commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;// ************************************ // Test // ************************************ @Test public void test() throws Exception {     for (Address address : addresses) {         scheduler.submit(() -> run(address)).     }     latch.await(1, TimeUnit.MINUTES).     scheduler.shutdownNow().     Assert.assertEquals(addresses.size(), results.size()).     Assert.assertTrue(results.containsAll(addresses)). }
false;public;0;7;;@Override public void configure() throws Exception {     from("timer:atomix?delay=1s&period=1s").routeId("route-" + address.port()).log("From ${routeId}").process(e -> contextLatch.countDown()). }
false;private;1;43;;// ************************************ // Run a Camel node // ************************************ private void run(Address address) {     try {         int events = ThreadLocalRandom.current().nextInt(2, 6).         CountDownLatch contextLatch = new CountDownLatch(events).         AtomixClusterService service = new AtomixClusterService().         service.setId("node-" + address.port()).         service.setStorageLevel(StorageLevel.MEMORY).         service.setAddress(address).         service.setNodes(addresses).         DefaultCamelContext context = new DefaultCamelContext().         context.disableJMX().         context.setName("context-" + address.port()).         context.addService(service).         context.addRoutePolicyFactory(ClusteredRoutePolicyFactory.forNamespace("my-ns")).         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("timer:atomix?delay=1s&period=1s").routeId("route-" + address.port()).log("From ${routeId}").process(e -> contextLatch.countDown()).             }         }).         // Start the context after some random time so the startup order         // changes for each test.         Thread.sleep(ThreadLocalRandom.current().nextInt(500)).         context.start().         contextLatch.await().         LOGGER.debug("Shutting down node {}", address).         results.add(address).         context.stop().         latch.countDown().     } catch (Exception e) {         LOGGER.warn("", e).     } }
