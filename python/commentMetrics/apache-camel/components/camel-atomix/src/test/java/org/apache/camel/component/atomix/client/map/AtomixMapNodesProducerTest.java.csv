commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;// ************************************ // Setup // ************************************ @Override protected Map<String, Component> createComponents() {     return Collections.emptyMap(). }
false;protected;0;6;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     map = getClient().getMap(MAP_NAME).join(). }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     map.close().     super.tearDown(). }
false;public;0;17;;// ************************************ // Test // ************************************ @Test public void testPut() throws Exception {     final String key = context().getUuidGenerator().generateUuid().     final String val = context().getUuidGenerator().generateUuid().     Message result.     result = fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION, AtomixMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY, key).withBody(val).request(Message.class).     assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT, Boolean.class)).     assertEquals(val, result.getBody()).     assertEquals(val, map.get(key).join()). }
false;public;0;4;;public void configure() {     from("direct:start").toF("atomix-map:%s?nodes=%s:%d", MAP_NAME, replicaAddress.host(), replicaAddress.port()). }
false;protected;0;9;;// ************************************ // Routes // ************************************ @Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").toF("atomix-map:%s?nodes=%s:%d", MAP_NAME, replicaAddress.host(), replicaAddress.port()).         }     }. }
