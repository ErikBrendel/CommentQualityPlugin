commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;10;// START SNIPPET: e1 ;// START SNIPPET: e1 @Override protected CamelContext createCamelContext() throws Exception {     CamelContext answer = new DefaultCamelContext().     // enlist EJB component using the JndiContext     EjbComponent ejb = answer.getComponent("ejb", EjbComponent.class).     ejb.setContext(createEjbContext()).     return answer. }
false;private,static;0;7;;private static Context createEjbContext() throws NamingException {     // here we need to define our context factory to use OpenEJB for our testing     Properties properties = new Properties().     properties.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory").     return new InitialContext(properties). }
false;public;0;8;;// END SNIPPET: e1 @Test public void testGreaterViaCamelEjb() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: e2     from("direct:start").to("ejb:GreaterImplLocal?method=hello").to("mock:result"). // END SNIPPET: e2 }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e2             from("direct:start").to("ejb:GreaterImplLocal?method=hello").to("mock:result").         // END SNIPPET: e2         }     }. }
