commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;19;;// ************************************************************************* // Setup / tear down // ************************************************************************* @Override protected void doPreSetup() throws Exception {     client = getClient().     servers = new ArrayList<>(SERVICE_COUNT).     expectedBodies = new ArrayList<>(SERVICE_COUNT).     for (int i = 0. i < SERVICE_COUNT. i++) {         Map<String, Object> server = new HashMap<>().         server.put("name", SERVICE_NAME).         server.put("address", "127.0.0.1").         server.put("port", SERVICE_PORT_BASE + i).         client.put("/services/" + "service-" + i, MAPPER.writeValueAsString(server)).send().get().         servers.add(Collections.unmodifiableMap(server)).         expectedBodies.add("ping on " + (SERVICE_PORT_BASE + i)).     } }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     client.deleteDir("/services/").recursive().send().get(). }
false;public;0;9;;// ************************************************************************* // Test // ************************************************************************* @Test public void testServiceCall() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(SERVICE_COUNT).     getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder(expectedBodies).     servers.forEach(s -> template.sendBody("direct:start", "ping")).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     from("direct:start").serviceCall().name(SERVICE_NAME).etcdServiceDiscovery().type("on-demand").endParent().to("log:org.apache.camel.component.etcd.processor.service?level=INFO&showAll=true&multiline=true").to("mock:result").     servers.forEach(s -> fromF("jetty:http://%s:%d", s.get("address"), s.get("port")).transform().simple("${in.body} on " + s.get("port"))). }
false;protected;0;21;;// ************************************************************************* // Route // ************************************************************************* @Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").serviceCall().name(SERVICE_NAME).etcdServiceDiscovery().type("on-demand").endParent().to("log:org.apache.camel.component.etcd.processor.service?level=INFO&showAll=true&multiline=true").to("mock:result").             servers.forEach(s -> fromF("jetty:http://%s:%d", s.get("address"), s.get("port")).transform().simple("${in.body} on " + s.get("port"))).         }     }. }
