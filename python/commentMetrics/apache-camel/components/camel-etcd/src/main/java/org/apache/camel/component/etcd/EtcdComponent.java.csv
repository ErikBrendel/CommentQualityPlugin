commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ************************************ // Options // ************************************ public String getUris() {     return configuration.getUris(). }
true;public;1;3;/**  * To set the URIs the client connects.  * @param uris  */ ;/**  * To set the URIs the client connects.  * @param uris  */ public void setUris(String uris) {     configuration.setUris(uris). }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return configuration.getSslContextParameters(). }
true;public;1;3;/**  * To configure security using SSLContextParameters.  * @param sslContextParameters  */ ;/**  * To configure security using SSLContextParameters.  * @param sslContextParameters  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     configuration.setSslContextParameters(sslContextParameters). }
false;public;0;3;;public String getUserName() {     return configuration.getUserName(). }
true;public;1;3;/**  * The user name to use for basic authentication.  * @param userName  */ ;/**  * The user name to use for basic authentication.  * @param userName  */ public void setUserName(String userName) {     configuration.setUserName(userName). }
false;public;0;3;;public String getPassword() {     return configuration.getPassword(). }
true;public;1;3;/**  * The password to use for basic authentication.  * @param password  */ ;/**  * The password to use for basic authentication.  * @param password  */ public void setPassword(String password) {     configuration.setPassword(password). }
false;public;0;3;;public EtcdConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * Sets the common configuration shared among endpoints  */ ;/**  * Sets the common configuration shared among endpoints  */ public void setConfiguration(EtcdConfiguration configuration) {     this.configuration = configuration. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;protected;3;35;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     String ns = StringHelper.before(remaining, "/").     String path = StringHelper.after(remaining, "/").     if (ns == null) {         ns = remaining.     }     if (path == null) {         path = remaining.     }     EtcdNamespace namespace = getCamelContext().getTypeConverter().mandatoryConvertTo(EtcdNamespace.class, ns).     EtcdConfiguration configuration = loadConfiguration(parameters).     if (namespace != null) {         // path must start with leading slash         if (!path.startsWith("/")) {             path = "/" + path.         }         switch(namespace) {             case stats:                 return new EtcdStatsEndpoint(uri, this, configuration, namespace, path).             case watch:                 return new EtcdWatchEndpoint(uri, this, configuration, namespace, path).             case keys:                 return new EtcdKeysEndpoint(uri, this, configuration, namespace, path).             default:                 throw new IllegalStateException("No endpoint for " + remaining).         }     }     throw new IllegalStateException("No endpoint for " + remaining). }
false;protected;1;12;;protected EtcdConfiguration loadConfiguration(Map<String, Object> parameters) throws Exception {     EtcdConfiguration configuration = Optional.ofNullable(this.configuration).orElseGet(EtcdConfiguration::new).copy().     configuration.setCamelContext(getCamelContext()).     setProperties(configuration, parameters).     if (configuration.getSslContextParameters() == null) {         configuration.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return configuration. }
