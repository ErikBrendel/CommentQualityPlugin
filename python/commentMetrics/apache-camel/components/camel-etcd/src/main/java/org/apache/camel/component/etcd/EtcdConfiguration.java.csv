commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setCamelContext(CamelContext context) {     this.context = context. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return context. }
false;public;0;3;;public String getUris() {     return uris. }
true;public;1;3;/**  * To set the URIs the client connects.  */ ;/**  * To set the URIs the client connects.  */ public void setUris(String uris) {     this.uris = uris. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * To configure security using SSLContextParameters.  */ ;/**  * To configure security using SSLContextParameters.  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;3;;public String getUserName() {     return userName. }
true;public;1;3;/**  * The user name to use for basic authentication.  */ ;/**  * The user name to use for basic authentication.  */ public void setUserName(String userName) {     this.userName = userName. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * The password to use for basic authentication.  */ ;/**  * The password to use for basic authentication.  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public boolean isSendEmptyExchangeOnTimeout() {     return sendEmptyExchangeOnTimeout. }
true;public;1;3;/**  * To send an empty message in case of timeout watching for a key.  */ ;/**  * To send an empty message in case of timeout watching for a key.  */ public void setSendEmptyExchangeOnTimeout(boolean sendEmptyExchangeOnTimeout) {     this.sendEmptyExchangeOnTimeout = sendEmptyExchangeOnTimeout. }
false;public;0;3;;public boolean isRecursive() {     return recursive. }
true;public;1;3;/**  * To apply an action recursively.  */ ;/**  * To apply an action recursively.  */ public void setRecursive(boolean recursive) {     this.recursive = recursive. }
false;public;0;3;;public Integer getTimeToLive() {     return timeToLive. }
true;public;1;3;/**  * To set the lifespan of a key in milliseconds.  */ ;/**  * To set the lifespan of a key in milliseconds.  */ public void setTimeToLive(Integer timeToLive) {     this.timeToLive = timeToLive. }
false;public;0;3;;public Long getTimeout() {     return timeout. }
false;public;0;3;;public boolean hasTimeout() {     return timeout != null && timeout > 0. }
true;public;1;3;/**  * To set the maximum time an action could take to complete.  */ ;/**  * To set the maximum time an action could take to complete.  */ public void setTimeout(Long timeout) {     this.timeout = timeout. }
false;public;0;3;;public Long getFromIndex() {     return fromIndex. }
true;public;1;3;/**  * The index to watch from  */ ;/**  * The index to watch from  */ public void setFromIndex(Long fromIndex) {     this.fromIndex = fromIndex. }
false;public;0;3;;public String getServicePath() {     return servicePath. }
true;public;1;3;/**  * The path to look for for service discovery  */ ;/**  * The path to look for for service discovery  */ public void setServicePath(String servicePath) {     this.servicePath = servicePath. }
false;public;0;11;;public EtcdClient createClient() throws Exception {     return new EtcdClient(new EtcdSecurityContext(sslContextParameters != null ? sslContextParameters.createSSLContext(context) : null, userName, password), EtcdHelper.resolveURIs(context, getUris())). }
false;public;0;7;;public EtcdConfiguration copy() {     try {         return (EtcdConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
