commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public List<ServiceDefinition> getServices(String name) {     List<ServiceDefinition> servers = serversRef.get().     if (servers == null) {         serversRef.set(getServices()).         watch().     }     return serversRef.get().stream().filter(s -> name.equalsIgnoreCase(s.getName())).collect(Collectors.toList()). }
false;public;1;33;;// ************************************************************************* // Watch // ************************************************************************* @Override public void onResponse(ResponsePromise<EtcdKeysResponse> promise) {     if (!isRunAllowed()) {         return.     }     Throwable throwable = promise.getException().     if (throwable instanceof EtcdException) {         EtcdException exception = (EtcdException) throwable.         if (EtcdHelper.isOutdatedIndexException(exception)) {             LOGGER.debug("Outdated index, key={}, cause={}", servicePath, exception.etcdCause).             index.set(exception.index + 1).         }     } else {         try {             EtcdKeysResponse response = promise.get().             EtcdHelper.setIndex(index, response).             serversRef.set(getServices()).         } catch (TimeoutException e) {             LOGGER.debug("Timeout watching for {}", getConfiguration().getServicePath()).             throwable = null.         } catch (Exception e) {             throwable = e.         }     }     if (throwable == null) {         watch().     } else {         throw new RuntimeCamelException(throwable).     } }
false;private;0;16;;private void watch() {     if (!isRunAllowed()) {         return.     }     try {         getClient().get(servicePath).recursive().waitForChange(index.get()).timeout(1, TimeUnit.SECONDS).send().addListener(this).     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
