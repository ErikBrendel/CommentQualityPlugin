commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;1;5;;@Override public void onInit(Route route) {     super.onInit(route).     this.route = route. }
false;public;1;6;;@Override public void onStart(Route route) {     if (!leader.get() && shouldStopConsumer) {         stopConsumer(route).     } }
false;public;1;6;;@Override public void onStop(Route route) {     synchronized (lock) {         suspendedRoutes.remove(route).     } }
false;public,synchronized;1;6;;@Override public synchronized void onSuspend(Route route) {     synchronized (lock) {         suspendedRoutes.remove(route).     } }
false;protected;0;15;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "camelContext").     ObjectHelper.notNull(clientUris, "clientUris").     if (client == null) {         client = new EtcdClient(EtcdHelper.resolveURIs(camelContext, clientUris)).         managedClient = true.     }     setLeader(tryTakeLeadership()).     watch().     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     if (managedClient) {         client.close().     }     super.doStop(). }
false;protected;1;10;;// ************************************************************************* //  // ************************************************************************* protected void setLeader(boolean isLeader) {     if (isLeader && leader.compareAndSet(false, isLeader)) {         LOGGER.info("Leadership taken (path={}, name={})", servicePath, serviceName).         startAllStoppedConsumers().     } else {         if (!leader.getAndSet(isLeader) && isLeader) {             LOGGER.info("Leadership lost (path={}, name={})", servicePath, serviceName).         }     } }
false;private;1;12;;private void startConsumer(Route route) {     synchronized (lock) {         try {             if (suspendedRoutes.contains(route)) {                 startConsumer(route.getConsumer()).                 suspendedRoutes.remove(route).             }         } catch (Exception e) {             handleException(e).         }     } }
false;private;1;13;;private void stopConsumer(Route route) {     synchronized (lock) {         try {             if (!suspendedRoutes.contains(route)) {                 LOGGER.debug("Stopping consumer for {} ({})", route.getId(), route.getConsumer()).                 stopConsumer(route.getConsumer()).                 suspendedRoutes.add(route).             }         } catch (Exception e) {             handleException(e).         }     } }
false;private;0;14;;private void startAllStoppedConsumers() {     synchronized (lock) {         try {             for (Route route : suspendedRoutes) {                 LOGGER.debug("Starting consumer for {} ({})", route.getId(), route.getConsumer()).                 startConsumer(route.getConsumer()).             }             suspendedRoutes.clear().         } catch (Exception e) {             handleException(e).         }     } }
false;public;0;3;;// ************************************************************************* // Getter/Setters // ************************************************************************* public EtcdClient getClient() {     return client. }
false;public;0;7;;@ManagedAttribute(description = "The route id") public String getRouteId() {     if (route != null) {         return route.getId().     }     return null. }
false;public;0;7;;@ManagedAttribute(description = "The consumer endpoint", mask = true) public String getEndpointUrl() {     if (route != null && route.getConsumer() != null && route.getConsumer().getEndpoint() != null) {         return route.getConsumer().getEndpoint().toString().     }     return null. }
false;public;0;3;;public String getServiceName() {     return serviceName. }
false;public;1;4;;@ManagedAttribute(description = "The etcd service name") public void setServiceName(String serviceName) {     this.serviceName = serviceName. }
false;public;0;4;;@ManagedAttribute(description = "The etcd service path") public String getServicePath() {     return servicePath. }
false;public;1;3;;public void setServicePath(String servicePath) {     this.servicePath = servicePath. }
false;public;0;4;;@ManagedAttribute(description = "The time to live (seconds)") public int getTtl() {     return ttl. }
false;public;1;3;;public void setTtl(int ttl) {     this.ttl = ttl. }
false;public;0;4;;@ManagedAttribute(description = "The watch timeout (seconds)") public int getWatchTimeout() {     return watchTimeout. }
false;public;1;3;;public void setWatchTimeout(int watchTimeout) {     this.watchTimeout = watchTimeout. }
false;public;0;4;;@ManagedAttribute(description = "Whether to stop consumer when starting up and failed to become master") public boolean isShouldStopConsumer() {     return shouldStopConsumer. }
false;public;1;3;;public void setShouldStopConsumer(boolean shouldStopConsumer) {     this.shouldStopConsumer = shouldStopConsumer. }
false;public;0;4;;@ManagedAttribute(description = "Is this route the master or a slave") public boolean isLeader() {     return leader.get(). }
false;public;0;4;;@ManagedAttribute(description = "Etcd endpoints") public String getClientUris() {     return clientUris. }
false;public;1;3;;public void setClientUris(String clientUris) {     this.clientUris = clientUris. }
false;public;1;39;;// ************************************************************************* // Watch // ************************************************************************* @Override public void onResponse(ResponsePromise<EtcdKeysResponse> promise) {     if (!isRunAllowed()) {         return.     }     Throwable throwable = promise.getException().     if (throwable instanceof EtcdException) {         EtcdException exception = (EtcdException) throwable.         if (EtcdHelper.isOutdatedIndexException(exception)) {             LOGGER.debug("Outdated index, key={}, cause={}", servicePath, exception.etcdCause).             index.set(exception.index + 1).             throwable = null.         }     } else {         try {             EtcdKeysResponse response = promise.get().             EtcdHelper.setIndex(index, response).             if (response.node.value == null) {                 setLeader(tryTakeLeadership()).             } else if (!ObjectHelper.equal(serviceName, response.node.value) && leader.get()) {                 // Looks like I've lost leadership                 setLeader(false).             }         } catch (TimeoutException e) {             LOGGER.debug("Timeout watching for {}", servicePath).             throwable = null.         } catch (Exception e1) {             throwable = e1.         }     }     if (throwable == null) {         watch().     } else {         throw new RuntimeCamelException(throwable).     } }
false;private;0;24;;private void watch() {     if (!isRunAllowed()) {         return.     }     try {         if (leader.get()) {             EtcdHelper.setIndex(index, client.refresh(servicePath, ttl).send().get()).         }         LOGGER.debug("Watch (path={}, isLeader={}, index={})", servicePath, leader.get(), index.get()).         client.get(servicePath).waitForChange(index.get()).timeout(watchTimeout, TimeUnit.SECONDS).send().addListener(this).     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;private;0;21;;private boolean tryTakeLeadership() throws Exception {     boolean result = false.     try {         EtcdKeysResponse response = getClient().put(servicePath, serviceName).prevExist(false).ttl(ttl).send().get().         result = ObjectHelper.equal(serviceName, response.node.value).         EtcdHelper.setIndex(index, response).     } catch (EtcdException e) {         if (!e.isErrorCode(EtcdErrorCode.NodeExist)) {             throw e.         }     }     return result. }
