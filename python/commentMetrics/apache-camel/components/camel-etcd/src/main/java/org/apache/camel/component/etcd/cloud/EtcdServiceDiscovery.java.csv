commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void doStart() throws Exception {     if (client == null) {         client = configuration.createClient().     } }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (client != null) {         client.close().         client = null.     } }
false;protected;0;3;;protected EtcdConfiguration getConfiguration() {     return this.configuration. }
false;protected;0;3;;protected EtcdClient getClient() {     return this.client. }
false;protected;1;11;;protected EtcdServiceDefinition nodeFromString(String value) {     EtcdServiceDefinition server = null.     try {         server = MAPPER.readValue(value, EtcdServiceDefinition.class).     } catch (Exception e) {         LOGGER.warn("", e).     }     return server. }
false;protected;0;3;;protected List<ServiceDefinition> getServices() {     return getServices(s -> true). }
false;protected;1;30;;protected List<ServiceDefinition> getServices(Predicate<EtcdServiceDefinition> filter) {     List<ServiceDefinition> servers = Collections.emptyList().     if (isRunAllowed()) {         try {             final EtcdConfiguration conf = getConfiguration().             final EtcdKeyGetRequest request = getClient().get(conf.getServicePath()).recursive().             if (conf.hasTimeout()) {                 request.timeout(conf.getTimeout(), TimeUnit.SECONDS).             }             final EtcdKeysResponse response = request.send().get().             if (Objects.nonNull(response.node) && !response.node.nodes.isEmpty()) {                 servers = response.node.nodes.stream().map(node -> node.value).filter(ObjectHelper::isNotEmpty).map(this::nodeFromString).filter(Objects::nonNull).filter(filter).sorted(EtcdServiceDefinition.COMPARATOR).collect(Collectors.toList()).             }         } catch (Exception e) {             throw new RuntimeCamelException(e).         }     }     return servers. }
