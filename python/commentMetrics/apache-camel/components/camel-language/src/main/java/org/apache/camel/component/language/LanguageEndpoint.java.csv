commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public Producer createProducer() throws Exception {     ObjectHelper.notNull(getCamelContext(), "CamelContext", this).     if (language == null && languageName != null) {         language = getCamelContext().resolveLanguage(languageName).     }     ObjectHelper.notNull(language, "language", this).     if (cacheScript && expression == null && script != null) {         script = resolveScript(script).         expression = language.createExpression(script).     }     return new LanguageProducer(this). }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new RuntimeCamelException("Cannot consume to a LanguageEndpoint: " + getEndpointUri()). }
true;protected;1;12;/**  * Resolves the script.  *  * @param script script or uri for a script to load  * @return the script  * @throws IOException is thrown if error loading the script  */ ;/**  * Resolves the script.  *  * @param script script or uri for a script to load  * @return the script  * @throws IOException is thrown if error loading the script  */ protected String resolveScript(String script) throws IOException {     String answer.     if (ResourceHelper.hasScheme(script)) {         InputStream is = loadResource(script).         answer = getCamelContext().getTypeConverter().convertTo(String.class, is).         IOHelper.close(is).     } else {         answer = script.     }     return answer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;10;;@Override protected String createEndpointUri() {     String s = script.     try {         s = URLEncoder.encode(s, "UTF-8").     } catch (UnsupportedEncodingException e) {     // ignore     }     return languageName + ":" + s. }
false;public;0;3;;public Language getLanguage() {     return language. }
false;public;0;6;;public Expression getExpression() {     if (isContentResolvedFromResource() && isContentCacheCleared()) {         return null.     }     return expression. }
false;public;1;3;;public void setExpression(Expression expression) {     this.expression = expression. }
false;public;0;3;;public boolean isTransform() {     return transform. }
true;public;1;3;/**  * Whether or not the result of the script should be used as message body.  * <p/>  * This options is default <tt>true</tt>.  *  * @param transform <tt>true</tt> to use result as new message body, <tt>false</tt> to keep the existing message body  */ ;/**  * Whether or not the result of the script should be used as message body.  * <p/>  * This options is default <tt>true</tt>.  *  * @param transform <tt>true</tt> to use result as new message body, <tt>false</tt> to keep the existing message body  */ public void setTransform(boolean transform) {     this.transform = transform. }
false;public;0;3;;public boolean isBinary() {     return binary. }
true;public;1;3;/**  * Whether the script is binary content or text content.  * <p/>  * By default the script is read as text content (eg <tt>java.lang.String</tt>)  *  * @param binary <tt>true</tt> to read the script as binary, instead of text based.  */ ;/**  * Whether the script is binary content or text content.  * <p/>  * By default the script is read as text content (eg <tt>java.lang.String</tt>)  *  * @param binary <tt>true</tt> to read the script as binary, instead of text based.  */ public void setBinary(boolean binary) {     this.binary = binary. }
true;public;1;3;/**  * Sets the name of the language to use  *  * @param languageName the name of the language  */ ;/**  * Sets the name of the language to use  *  * @param languageName the name of the language  */ public void setLanguageName(String languageName) {     this.languageName = languageName. }
true;public;1;4;/**  * Path to the resource, or a reference to lookup a bean in the Registry to use as the resource  *  * @param resourceUri  the resource path  */ ;/**  * Path to the resource, or a reference to lookup a bean in the Registry to use as the resource  *  * @param resourceUri  the resource path  */ @Override public void setResourceUri(String resourceUri) {     super.setResourceUri(resourceUri). }
false;public;0;4;;@Override public String getResourceUri() {     return super.getResourceUri(). }
true;public;1;3;/**  * Sets the script to execute  *  * @param script the script  */ ;/**  * Sets the script to execute  *  * @param script the script  */ public void setScript(String script) {     this.script = script. }
false;public;0;3;;public String getScript() {     return script. }
false;public;0;3;;public boolean isContentResolvedFromResource() {     return contentResolvedFromResource. }
false;public;1;3;;public void setContentResolvedFromResource(boolean contentResolvedFromResource) {     this.contentResolvedFromResource = contentResolvedFromResource. }
false;public;0;3;;public boolean isCacheScript() {     return cacheScript. }
true;public;1;3;/**  * Whether to cache the compiled script and reuse  * <p/>  * Notice reusing the script can cause side effects from processing one Camel  * {@link org.apache.camel.Exchange} to the next {@link org.apache.camel.Exchange}.  */ ;/**  * Whether to cache the compiled script and reuse  * <p/>  * Notice reusing the script can cause side effects from processing one Camel  * {@link org.apache.camel.Exchange} to the next {@link org.apache.camel.Exchange}.  */ public void setCacheScript(boolean cacheScript) {     this.cacheScript = cacheScript. }
false;public;0;6;;public void clearContentCache() {     super.clearContentCache().     // must also clear expression and script     expression = null.     script = null. }
