commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public Producer createProducer() throws Exception {     initializeConnection().     return new GridFsProducer(this). }
false;public;1;5;;@Override public Consumer createConsumer(Processor processor) throws Exception {     initializeConnection().     return new GridFsConsumer(this, processor). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;15;;public void initializeConnection() throws Exception {     log.info("Initialize GridFS endpoint: {}", this).     if (database == null) {         throw new IllegalStateException("Missing required endpoint configuration: database").     }     db = mongoConnection.getDB(database).     if (db == null) {         throw new IllegalStateException("Could not initialize GridFsComponent. Database " + database + " does not exist.").     }     gridFs = new GridFS(db, bucket == null ? GridFS.DEFAULT_BUCKET : bucket) {          {             filesCollection = getFilesCollection().         }     }. }
false;protected;0;12;;@Override protected void doStart() throws Exception {     if (writeConcern != null && writeConcernRef != null) {         String msg = "Cannot set both writeConcern and writeConcernRef at the same time. Respective values: " + writeConcern + ", " + writeConcernRef + ". Aborting initialization.".         throw new IllegalArgumentException(msg).     }     mongoConnection = CamelContextHelper.mandatoryLookup(getCamelContext(), connectionBean, MongoClient.class).     log.debug("Resolved the connection with the name {} as {}", connectionBean, mongoConnection).     setWriteReadOptionsOnConnection().     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     super.doStop().     if (mongoConnection != null) {         log.debug("Closing connection").         mongoConnection.close().     } }
false;private;0;13;;private void setWriteReadOptionsOnConnection() {     // Set the WriteConcern     if (writeConcern != null) {         mongoConnection.setWriteConcern(writeConcern).     } else if (writeConcernRef != null) {         mongoConnection.setWriteConcern(writeConcernRef).     }     // Set the ReadPreference     if (readPreference != null) {         mongoConnection.setReadPreference(readPreference).     } }
true;public;0;3;// ======= Getters and setters =============================================== ;// ======= Getters and setters =============================================== public String getConnectionBean() {     return connectionBean. }
true;public;1;3;/**  * Name of {@link com.mongodb.Mongo} to use.  */ ;/**  * Name of {@link com.mongodb.Mongo} to use.  */ public void setConnectionBean(String connectionBean) {     this.connectionBean = connectionBean. }
false;public;0;3;;public Mongo getMongoConnection() {     return mongoConnection. }
true;public;1;3;/**  * Sets the Mongo instance that represents the backing connection  *  * @param mongoConnection the connection to the database  */ ;/**  * Sets the Mongo instance that represents the backing connection  *  * @param mongoConnection the connection to the database  */ public void setMongoConnection(Mongo mongoConnection) {     this.mongoConnection = mongoConnection. }
false;public;0;3;;public DB getDB() {     return db. }
false;public;0;3;;public String getDatabase() {     return database. }
true;public;1;3;/**  * Sets the name of the MongoDB database to target  *  * @param database name of the MongoDB database  */ ;/**  * Sets the name of the MongoDB database to target  *  * @param database name of the MongoDB database  */ public void setDatabase(String database) {     this.database = database. }
true;public;0;3;/**  * Sets the name of the GridFS bucket within the database.   Default is "fs".  *  * @param database name of the MongoDB database  */ ;/**  * Sets the name of the GridFS bucket within the database.   Default is "fs".  *  * @param database name of the MongoDB database  */ public String getBucket() {     return bucket. }
false;public;1;3;;public void setBucket(String bucket) {     this.bucket = bucket. }
false;public;0;3;;public String getQuery() {     return query. }
true;public;1;3;/**  * Additional query parameters (in JSON) that are used to configure the query used for finding  * files in the GridFsConsumer  * @param query  */ ;/**  * Additional query parameters (in JSON) that are used to configure the query used for finding  * files in the GridFsConsumer  * @param query  */ public void setQuery(String query) {     this.query = query. }
false;public;0;3;;public long getDelay() {     return delay. }
true;public;1;3;/**  * Sets the delay between polls within the Consumer.  Default is 500ms  * @param delay  */ ;/**  * Sets the delay between polls within the Consumer.  Default is 500ms  * @param delay  */ public void setDelay(long delay) {     this.delay = delay. }
false;public;0;3;;public long getInitialDelay() {     return initialDelay. }
true;public;1;3;/**  * Sets the initialDelay before the consumer will start polling.  Default is 1000ms  * @param initialDelay  */ ;/**  * Sets the initialDelay before the consumer will start polling.  Default is 1000ms  * @param initialDelay  */ public void setInitialDelay(long initialDelay) {     this.initialDelay = delay. }
true;public;1;3;/**  * Sets the QueryStrategy that is used for polling for new files.  Default is Timestamp  * @see QueryStrategy  * @param s  */ ;/**  * Sets the QueryStrategy that is used for polling for new files.  Default is Timestamp  * @see QueryStrategy  * @param s  */ public void setQueryStrategy(String s) {     queryStrategy = QueryStrategy.valueOf(s). }
false;public;0;3;;public QueryStrategy getQueryStrategy() {     return queryStrategy. }
true;public;1;3;/**  * If the QueryType uses a persistent timestamp, this sets the name of the collection within  * the DB to store the timestamp.  * @param s  */ ;/**  * If the QueryType uses a persistent timestamp, this sets the name of the collection within  * the DB to store the timestamp.  * @param s  */ public void setPersistentTSCollection(String s) {     persistentTSCollection = s. }
false;public;0;3;;public String getPersistentTSCollection() {     return persistentTSCollection. }
true;public;1;3;/**  * If the QueryType uses a persistent timestamp, this is the ID of the object in the collection  * to store the timestamp.  * @param s  */ ;/**  * If the QueryType uses a persistent timestamp, this is the ID of the object in the collection  * to store the timestamp.  * @param s  */ public void setPersistentTSObject(String id) {     persistentTSObject = id. }
false;public;0;3;;public String getPersistentTSObject() {     return persistentTSObject. }
true;public;1;3;/**  * If the QueryType uses a FileAttribute, this sets the name of the attribute that is used. Default is "camel-processed".  * @param f  */ ;/**  * If the QueryType uses a FileAttribute, this sets the name of the attribute that is used. Default is "camel-processed".  * @param f  */ public void setFileAttributeName(String f) {     fileAttributeName = f. }
false;public;0;3;;public String getFileAttributeName() {     return fileAttributeName. }
true;public;1;3;/**  * Set the {@link WriteConcern} for write operations on MongoDB using the standard ones.  * Resolved from the fields of the WriteConcern class by calling the {@link WriteConcern#valueOf(String)} method.  *  * @param writeConcern the standard name of the WriteConcern  * @see <a href="http://api.mongodb.org/java/current/com/mongodb/WriteConcern.html#valueOf(java.lang.String)">possible options</a>  */ ;/**  * Set the {@link WriteConcern} for write operations on MongoDB using the standard ones.  * Resolved from the fields of the WriteConcern class by calling the {@link WriteConcern#valueOf(String)} method.  *  * @param writeConcern the standard name of the WriteConcern  * @see <a href="http://api.mongodb.org/java/current/com/mongodb/WriteConcern.html#valueOf(java.lang.String)">possible options</a>  */ public void setWriteConcern(String writeConcern) {     this.writeConcern = WriteConcern.valueOf(writeConcern). }
false;public;0;3;;public WriteConcern getWriteConcern() {     return writeConcern. }
true;public;1;10;/**  * Set the {@link WriteConcern} for write operations on MongoDB, passing in the bean ref to a custom WriteConcern which exists in the Registry.  * You can also use standard WriteConcerns by passing in their key. See the {@link #setWriteConcern(String) setWriteConcern} method.  *  * @param writeConcernRef the name of the bean in the registry that represents the WriteConcern to use  */ ;/**  * Set the {@link WriteConcern} for write operations on MongoDB, passing in the bean ref to a custom WriteConcern which exists in the Registry.  * You can also use standard WriteConcerns by passing in their key. See the {@link #setWriteConcern(String) setWriteConcern} method.  *  * @param writeConcernRef the name of the bean in the registry that represents the WriteConcern to use  */ public void setWriteConcernRef(String writeConcernRef) {     WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class).     if (wc == null) {         String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef + ")  is correct. Aborting initialization.".         throw new IllegalArgumentException(msg).     }     this.writeConcernRef = wc. }
false;public;0;3;;public WriteConcern getWriteConcernRef() {     return writeConcernRef. }
true;public;1;3;/**  * Sets a MongoDB {@link ReadPreference} on the Mongo connection. Read preferences set directly on the connection will be  * overridden by this setting.  * <p/>  * The {@link com.mongodb.ReadPreference#valueOf(String)} utility method is used to resolve the passed {@code readPreference}  * value. Some examples for the possible values are {@code nearest}, {@code primary} or {@code secondary} etc.  *  * @param readPreference the name of the read preference to set  */ ;/**  * Sets a MongoDB {@link ReadPreference} on the Mongo connection. Read preferences set directly on the connection will be  * overridden by this setting.  * <p/>  * The {@link com.mongodb.ReadPreference#valueOf(String)} utility method is used to resolve the passed {@code readPreference}  * value. Some examples for the possible values are {@code nearest}, {@code primary} or {@code secondary} etc.  *  * @param readPreference the name of the read preference to set  */ public void setReadPreference(String readPreference) {     this.readPreference = ReadPreference.valueOf(readPreference). }
false;public;0;3;;public ReadPreference getReadPreference() {     return readPreference. }
true;public;1;3;/**  * Sets the operation this endpoint will execute against GridRS.  */ ;/**  * Sets the operation this endpoint will execute against GridRS.  */ public void setOperation(String operation) {     this.operation = operation. }
false;public;0;3;;public String getOperation() {     return operation. }
false;public;0;3;;public GridFS getGridFs() {     return gridFs. }
false;public;1;3;;public void setGridFs(GridFS gridFs) {     this.gridFs = gridFs. }
false;public;0;3;;public DBCollection getFilesCollection() {     return filesCollection. }
