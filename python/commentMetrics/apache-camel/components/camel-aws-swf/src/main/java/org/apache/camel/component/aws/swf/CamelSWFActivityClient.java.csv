commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;public Object scheduleActivity(String eventName, String version, Object input) {     ActivityType activity = new ActivityType().     activity.setName(eventName).     activity.setVersion(version).     Promise<?>[] promises = asPromiseArray(input).     Promise<?> promise = dynamicActivitiesClient.scheduleActivity(activity, promises, configuration.getActivitySchedulingOptions(), Object.class, null).     return promise. }
false;protected;1;18;;protected Promise<?>[] asPromiseArray(Object input) {     Promise<?>[] promises.     if (input instanceof Object[]) {         Object[] inputArray = (Object[]) input.         promises = new Promise[inputArray.length].         for (int i = 0. i < inputArray.length. i++) {             promises[i] = Promise.asPromise(inputArray[i]).         }     } else {         promises = new Promise[1].         if (input instanceof Promise) {             promises[0] = (Promise<?>) input.         } else {             promises[0] = Promise.asPromise(input).         }     }     return promises. }
false;;0;3;;DynamicActivitiesClient getDynamicActivitiesClient() {     return new DynamicActivitiesClientImpl(null, configuration.getDataConverter()). }
