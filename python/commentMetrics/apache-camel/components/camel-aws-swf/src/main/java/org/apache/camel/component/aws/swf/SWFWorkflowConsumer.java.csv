commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;public Object processWorkflow(Object[] parameters, long startTime, boolean replaying) throws Exception {     LOGGER.debug("Processing workflow task: " + Arrays.toString(parameters)).     Exchange exchange = endpoint.createExchange(parameters, SWFConstants.EXECUTE_ACTION).     exchange.getIn().setHeader(SWFConstants.WORKFLOW_START_TIME, startTime).     exchange.getIn().setHeader(SWFConstants.WORKFLOW_REPLAYING, replaying).     getProcessor().process(exchange).     return endpoint.getResult(exchange). }
false;public;1;7;;public void signalRecieved(Object[] parameters) throws Exception {     LOGGER.debug("signalRecieved: " + Arrays.toString(parameters)).     Exchange exchange = endpoint.createExchange(parameters, SWFConstants.SIGNAL_RECEIVED_ACTION).     exchange.setPattern(InOnly).     getProcessor().process(exchange). }
false;public;1;7;;public Object getWorkflowState(Object parameters) throws Exception {     LOGGER.debug("getWorkflowState: " + parameters).     Exchange exchange = endpoint.createExchange(parameters, SWFConstants.GET_STATE_ACTION).     getProcessor().process(exchange).     return endpoint.getResult(exchange). }
false;protected;0;8;;@Override protected void doStart() throws Exception {     CamelWorkflowDefinitionFactoryFactory factoryFactory = new CamelWorkflowDefinitionFactoryFactory(this, configuration).     genericWorker = new GenericWorkflowWorker(endpoint.getSWClient(), configuration.getDomainName(), configuration.getWorkflowList()).     genericWorker.setWorkflowDefinitionFactoryFactory(factoryFactory).     genericWorker.start().     super.doStart(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     genericWorker.setDisableServiceShutdownOnStop(true).     genericWorker.shutdownNow().     super.doStop(). }
false;public;0;7;;@Override public String toString() {     if (swfWorkflowConsumerToString == null) {         swfWorkflowConsumerToString = "SWFWorkflowConsumer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return swfWorkflowConsumerToString. }
