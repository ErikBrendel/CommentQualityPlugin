commented;modifiers;parameterAmount;loc;comment;code
false;public;1;50;;public void process(Exchange exchange) throws Exception {     LOGGER.debug("processing workflow task " + exchange).     try {         Operation operation = getOperation(exchange).         switch(operation) {             case CANCEL:                 camelSWFClient.requestCancelWorkflowExecution(getWorkflowId(exchange), getRunId(exchange)).                 break.             case GET_STATE:                 Object state = camelSWFClient.getWorkflowExecutionState(getWorkflowId(exchange), getRunId(exchange), getResultType(exchange)).                 endpoint.setResult(exchange, state).                 break.             case DESCRIBE:                 Map<String, Object> workflowInfo = camelSWFClient.describeWorkflowInstance(getWorkflowId(exchange), getRunId(exchange)).                 endpoint.setResult(exchange, workflowInfo).                 break.             case GET_HISTORY:                 Object history = camelSWFClient.getWorkflowExecutionHistory(getWorkflowId(exchange), getRunId(exchange)).                 endpoint.setResult(exchange, history).                 break.             case START:                 String[] ids = camelSWFClient.startWorkflowExecution(getWorkflowId(exchange), getRunId(exchange), getEventName(exchange), getVersion(exchange), getArguments(exchange), getTags(exchange)).                 setHeader(exchange, SWFConstants.WORKFLOW_ID, ids[0]).                 setHeader(exchange, SWFConstants.RUN_ID, ids[1]).                 break.             case SIGNAL:                 camelSWFClient.signalWorkflowExecution(getWorkflowId(exchange), getRunId(exchange), getSignalName(exchange), getArguments(exchange)).                 break.             case TERMINATE:                 camelSWFClient.terminateWorkflowExecution(getWorkflowId(exchange), getRunId(exchange), getReason(exchange), getDetails(exchange), getChildPolicy(exchange)).                 break.             default:                 throw new UnsupportedOperationException(operation.toString()).         }     } catch (Throwable throwable) {         throw new Exception(throwable).     } }
false;private;1;4;;private String getEventName(Exchange exchange) {     String eventName = exchange.getIn().getHeader(SWFConstants.EVENT_NAME, String.class).     return eventName != null ? eventName : configuration.getEventName(). }
false;private;1;4;;private String getVersion(Exchange exchange) {     String version = exchange.getIn().getHeader(SWFConstants.VERSION, String.class).     return version != null ? version : configuration.getVersion(). }
false;private;1;3;;private List<String> getTags(Exchange exchange) {     return exchange.getIn().getHeader(SWFConstants.TAGS, List.class). }
false;private;1;4;;private String getSignalName(Exchange exchange) {     String signalName = exchange.getIn().getHeader(SWFConstants.SIGNAL_NAME, String.class).     return signalName != null ? signalName : configuration.getSignalName(). }
false;private;1;4;;private String getChildPolicy(Exchange exchange) {     String childPolicy = exchange.getIn().getHeader(SWFConstants.CHILD_POLICY, String.class).     return childPolicy != null ? childPolicy : configuration.getChildPolicy(). }
false;private;1;4;;private String getDetails(Exchange exchange) {     String details = exchange.getIn().getHeader(SWFConstants.DETAILS, String.class).     return details != null ? details : configuration.getTerminationDetails(). }
false;private;1;4;;private String getReason(Exchange exchange) {     String reason = exchange.getIn().getHeader(SWFConstants.REASON, String.class).     return reason != null ? reason : configuration.getTerminationReason(). }
false;private;1;3;;private String getWorkflowId(Exchange exchange) {     return exchange.getIn().getHeader(SWFConstants.WORKFLOW_ID, String.class). }
false;private;1;3;;private String getRunId(Exchange exchange) {     return exchange.getIn().getHeader(SWFConstants.RUN_ID, String.class). }
false;private;1;8;;private Class<?> getResultType(Exchange exchange) throws ClassNotFoundException {     String type = exchange.getIn().getHeader(SWFConstants.STATE_RESULT_TYPE, String.class).     if (type == null) {         type = configuration.getStateResultType().     }     return type != null ? Class.forName(type) : Object.class. }
false;private;1;8;;private Operation getOperation(Exchange exchange) {     String operation = exchange.getIn().getHeader(SWFConstants.OPERATION, String.class).     if (operation == null) {         operation = configuration.getOperation().     }     return operation != null ? Operation.valueOf(operation) : Operation.START. }
false;private;3;7;;private void setHeader(Exchange exchange, String key, Object value) {     if (ExchangeHelper.isOutCapable(exchange)) {         exchange.getOut().setHeader(key, value).     } else {         exchange.getIn().setHeader(key, value).     } }
false;private;1;3;;private Object getArguments(Exchange exchange) {     return exchange.getIn().getBody(). }
false;public;0;7;;@Override public String toString() {     if (swfWorkflowProducerToString == null) {         swfWorkflowProducerToString = "SWFWorkflowProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return swfWorkflowProducerToString. }
