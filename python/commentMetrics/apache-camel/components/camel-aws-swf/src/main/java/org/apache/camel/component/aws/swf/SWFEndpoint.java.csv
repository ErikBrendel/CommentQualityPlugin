commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public Producer createProducer() throws Exception {     return isWorkflow() ? new SWFWorkflowProducer(this, new CamelSWFWorkflowClient(this, configuration)) : new SWFActivityProducer(this, new CamelSWFActivityClient(configuration)). }
false;public;1;6;;public Consumer createConsumer(Processor processor) throws Exception {     Consumer consumer = isWorkflow() ? new SWFWorkflowConsumer(this, processor, configuration) : new SWFActivityConsumer(this, processor, configuration).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;7;;@Override protected void doStart() throws Exception {     if (configuration.getAmazonSWClient() == null) {         amazonSWClient = (AmazonSimpleWorkflowClient) createSWClient().     }     super.doStart(). }
false;protected;0;10;;@Override protected void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getAmazonSWClient())) {         if (amazonSWClient != null) {             amazonSWClient.shutdown().             amazonSWClient = null.         }     }     super.doStop(). }
false;public;0;3;;public AmazonSimpleWorkflowClient getSWClient() {     return configuration.getAmazonSWClient() != null ? configuration.getAmazonSWClient() : amazonSWClient. }
false;private;0;19;;private AmazonSimpleWorkflow createSWClient() throws Exception {     AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).     AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).     ClientConfiguration clientConfiguration = new ClientConfiguration().     if (!configuration.getClientConfigurationParameters().isEmpty()) {         setProperties(clientConfiguration, configuration.getClientConfigurationParameters()).     }     AmazonSimpleWorkflowClientBuilder builder = AmazonSimpleWorkflowClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         builder = builder.withRegion(Regions.valueOf(configuration.getRegion())).     }     AmazonSimpleWorkflow client = builder.build().     if (!configuration.getSWClientParameters().isEmpty()) {         setProperties(client, configuration.getSWClientParameters()).     }     return client. }
false;public;0;10;;public StartWorkflowOptions getStartWorkflowOptions() {     StartWorkflowOptions startWorkflowOptions = new StartWorkflowOptions().     try {         EndpointHelper.setReferenceProperties(getCamelContext(), startWorkflowOptions, configuration.getStartWorkflowOptionsParameters()).         EndpointHelper.setProperties(getCamelContext(), startWorkflowOptions, configuration.getStartWorkflowOptionsParameters()).     } catch (Exception e) {         throw new RuntimeException(e).     }     return startWorkflowOptions. }
false;private;0;3;;private boolean isWorkflow() {     return configuration.getType().equalsIgnoreCase("workflow"). }
false;public;2;6;;public Exchange createExchange(Object request, String action) {     Exchange exchange = createExchange(ExchangePattern.InOut).     exchange.getIn().setBody(request).     exchange.getIn().setHeader(SWFConstants.ACTION, action).     return exchange. }
false;public;1;3;;public Object getResult(Exchange exchange) {     return ExchangeHelper.isOutCapable(exchange) ? exchange.getOut().getBody() : exchange.getIn().getBody(). }
false;public;2;7;;public void setResult(Exchange exchange, Object result) {     if (ExchangeHelper.isOutCapable(exchange)) {         exchange.getOut().setBody(result).     } else {         exchange.getIn().setBody(result).     } }
false;public;1;3;;public void setConfiguration(SWFConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public SWFConfiguration getConfiguration() {     return configuration. }
