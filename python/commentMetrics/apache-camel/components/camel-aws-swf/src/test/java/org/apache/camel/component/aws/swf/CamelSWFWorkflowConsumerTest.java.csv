commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void configure() throws Exception {     from("aws-swf://workflow?" + options).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("aws-swf://workflow?" + options).to("mock:result").         }     }. }
false;public;0;4;;@Override public boolean isUseAdviceWith() {     return true. }
false;public;1;3;;public boolean matches(Exchange exchange) {     return exchange.getIn().getHeader(SWFConstants.ACTION) != null. }
false;public;0;19;;@Test public void receivesDecisionTask() throws Exception {     // use minimum as depending on the polling we may do more than 1 in the test before we assert and stop     result.expectedMinimumMessageCount(1).     result.expectedMessagesMatches(new Predicate() {          public boolean matches(Exchange exchange) {             return exchange.getIn().getHeader(SWFConstants.ACTION) != null.         }     }).     DecisionTask decisionTask = new DecisionTask().     decisionTask.setTaskToken("token").     when(amazonSWClient.pollForDecisionTask(any(PollForDecisionTaskRequest.class))).thenReturn(decisionTask).     context.start().     assertMockEndpointsSatisfied().     verify(amazonSWClient, atLeastOnce()).pollForDecisionTask(any(PollForDecisionTaskRequest.class)). }
