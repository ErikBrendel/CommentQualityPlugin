commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void consumerReceivedPreAndPostEntryCreatedEventNotifications() throws Exception {     starter.expectedMessageCount(1).     decider.expectedMinimumMessageCount(1).     worker.expectedMessageCount(2).     template.requestBody("direct:start", "Hello world!").     assertIsSatisfied(context). }
false;public;0;25;;public void configure() {     from("aws-swf://activity?" + options + "&eventName=processActivities").log("FOUND ACTIVITY TASK ${body}").setBody(constant("1")).to("mock:worker").     from("aws-swf://workflow?" + options + "&eventName=processWorkflows").log("FOUND WORKFLOW TASK ${body}").filter(header(SWFConstants.ACTION).isEqualTo(SWFConstants.EXECUTE_ACTION)).to("aws-swf://activity?" + options + "&eventName=processActivities").setBody(constant("Message two")).to("aws-swf://activity?" + options + "&eventName=processActivities").log("SENT ACTIVITY TASK ${body}").to("mock:decider").     from("direct:start").to("aws-swf://workflow?" + options + "&eventName=processWorkflows").log("SENT WORKFLOW TASK ${body}").to("mock:starter"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("aws-swf://activity?" + options + "&eventName=processActivities").log("FOUND ACTIVITY TASK ${body}").setBody(constant("1")).to("mock:worker").             from("aws-swf://workflow?" + options + "&eventName=processWorkflows").log("FOUND WORKFLOW TASK ${body}").filter(header(SWFConstants.ACTION).isEqualTo(SWFConstants.EXECUTE_ACTION)).to("aws-swf://activity?" + options + "&eventName=processActivities").setBody(constant("Message two")).to("aws-swf://activity?" + options + "&eventName=processActivities").log("SENT ACTIVITY TASK ${body}").to("mock:decider").             from("direct:start").to("aws-swf://workflow?" + options + "&eventName=processWorkflows").log("SENT WORKFLOW TASK ${body}").to("mock:starter").         }     }. }
