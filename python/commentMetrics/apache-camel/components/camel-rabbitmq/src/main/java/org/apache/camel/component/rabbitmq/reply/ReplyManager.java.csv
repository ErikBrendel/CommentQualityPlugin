commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Sets the belonging {@link RabbitMQEndpoint}  */ ;/**  * Sets the belonging {@link RabbitMQEndpoint}  */ void setEndpoint(RabbitMQEndpoint endpoint).
true;;1;1;/**  * Sets the reply to queue the manager should listen for replies.  * <p/>  * The queue is either a temporary or a persistent queue.  */ ;/**  * Sets the reply to queue the manager should listen for replies.  * <p/>  * The queue is either a temporary or a persistent queue.  */ void setReplyTo(String replyTo).
true;;0;1;/**  * Gets the reply to queue being used  */ ;/**  * Gets the reply to queue being used  */ String getReplyTo().
true;;6;2;/**  * Register a reply  *  * @param replyManager    the reply manager being used  * @param exchange        the exchange  * @param callback        the callback  * @param originalCorrelationId  an optional original correlation id  * @param correlationId   the correlation id to expect being used  * @param requestTimeout  the timeout  * @return the correlation id used  */ ;/**  * Register a reply  *  * @param replyManager    the reply manager being used  * @param exchange        the exchange  * @param callback        the callback  * @param originalCorrelationId  an optional original correlation id  * @param correlationId   the correlation id to expect being used  * @param requestTimeout  the timeout  * @return the correlation id used  */ String registerReply(ReplyManager replyManager, Exchange exchange, AsyncCallback callback, String originalCorrelationId, String correlationId, long requestTimeout).
true;;1;1;/**  * Sets the scheduled to use when checking for timeouts (no reply received within a given time period)  */ ;/**  * Sets the scheduled to use when checking for timeouts (no reply received within a given time period)  */ void setScheduledExecutorService(ScheduledExecutorService executorService).
true;;3;1;/**  * Updates the correlation id to the new correlation id.  * <p/>  * This is only used when <tt>useMessageIDasCorrelationID</tt> option is used, which means a  * provisional correlation id is first used, then after the message has been sent, the real  * correlation id is known. This allows us then to update the internal mapping to expect the  * real correlation id.  *  * @param correlationId     the provisional correlation id  * @param newCorrelationId  the real correlation id  * @param requestTimeout    the timeout  */ ;/**  * Updates the correlation id to the new correlation id.  * <p/>  * This is only used when <tt>useMessageIDasCorrelationID</tt> option is used, which means a  * provisional correlation id is first used, then after the message has been sent, the real  * correlation id is known. This allows us then to update the internal mapping to expect the  * real correlation id.  *  * @param correlationId     the provisional correlation id  * @param newCorrelationId  the real correlation id  * @param requestTimeout    the timeout  */ void updateCorrelationId(String correlationId, String newCorrelationId, long requestTimeout).
true;;1;1;/**  * Process the reply  *  * @param holder  containing needed data to process the reply and continue routing  */ ;/**  * Process the reply  *  * @param holder  containing needed data to process the reply and continue routing  */ void processReply(ReplyHolder holder).
true;;1;1;/**  * Unregister a correlationId when you no longer need a reply  */ ;/**  * Unregister a correlationId when you no longer need a reply  */ void cancelCorrelationId(String correlationId).
