# id;timestamp;commentText;codeText;commentWords;codeWords
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1405374721;Add a consummer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consummer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1415211488;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1424618252;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1425318766;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1433798679;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1433892126;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1438356651;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1440615344;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1444282299;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1448648960;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1451464800;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1451469201;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1452690543;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void startConsumer(Channel channel) throws IOException;1452694797;Add a consumer thread for given channel;private void startConsumer(Channel channel) throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this, channel)__        consumer.start()__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,start,consumer,channel,channel,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,channel,consumer,start,this,consumers,add,consumer
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1438356651;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1440615344;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1444282299;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1448648960;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1451464800;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1451469201;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1452690543;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1452694797;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1453969280;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1454949920;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1461921869;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1471357655;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1506407330;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1515240163;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1515316978;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1524063178;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1535026090;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1537204343;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1540108163;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException, TimeoutException;1548175645;Open connection;private void openConnection() throws IOException, TimeoutException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,timeout,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void createConsumer() throws IOException;1453969280;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1454949920;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1461921869;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1471357655;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1506407330;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1515240163;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1515316978;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1524063178;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1535026090;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1537204343;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1540108163;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private void createConsumer() throws IOException;1548175645;Add a consumer thread for given channel;private void createConsumer() throws IOException {_        RabbitConsumer consumer = new RabbitConsumer(this)__        this.consumers.add(consumer)__    };add,a,consumer,thread,for,given,channel;private,void,create,consumer,throws,ioexception,rabbit,consumer,consumer,new,rabbit,consumer,this,this,consumers,add,consumer
RabbitMQConsumer -> private Channel openChannel() throws IOException;1405374721;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                             endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1415211488;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                    endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1424618252;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                    endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1425318766;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                    endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1433798679;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                            endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1433892126;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                            endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1438356651;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                            endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1440615344;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                            endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1444282299;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                            endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1448648960;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                            endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1451464800;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(),_                            endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1451469201;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(), endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1452690543;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(), endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> private Channel openChannel() throws IOException;1452694797;Open channel;private Channel openChannel() throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (endpoint.isPrefetchEnabled()) {_            channel.basicQos(endpoint.getPrefetchSize(), endpoint.getPrefetchCount(), endpoint.isPrefetchGlobal())__        }_        return channel__    };open,channel;private,channel,open,channel,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,endpoint,is,prefetch,enabled,channel,basic,qos,endpoint,get,prefetch,size,endpoint,get,prefetch,count,endpoint,is,prefetch,global,return,channel
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1438356651;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            }_            catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1440615344;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1444282299;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1448648960;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1451464800;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1451469201;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1452690543;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException, TimeoutException;1452694797;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            try {_                channel.close()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitMQConsumer -> private void createConsumers() throws IOException;1515240163;Create the consumers but don't start yet;private void createConsumers() throws IOException {_        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }_    };create,the,consumers,but,don,t,start,yet;private,void,create,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer
RabbitMQConsumer -> private void createConsumers() throws IOException;1515316978;Create the consumers but don't start yet;private void createConsumers() throws IOException {_        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }_    };create,the,consumers,but,don,t,start,yet;private,void,create,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer
RabbitMQConsumer -> private void createConsumers() throws IOException;1524063178;Create the consumers but don't start yet;private void createConsumers() throws IOException {_        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }_    };create,the,consumers,but,don,t,start,yet;private,void,create,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer
RabbitMQConsumer -> private void createConsumers() throws IOException;1535026090;Create the consumers but don't start yet;private void createConsumers() throws IOException {_        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }_    };create,the,consumers,but,don,t,start,yet;private,void,create,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer
RabbitMQConsumer -> private void createConsumers() throws IOException;1537204343;Create the consumers but don't start yet;private void createConsumers() throws IOException {_        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }_    };create,the,consumers,but,don,t,start,yet;private,void,create,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer
RabbitMQConsumer -> private void createConsumers() throws IOException;1540108163;Create the consumers but don't start yet;private void createConsumers() throws IOException {_        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }_    };create,the,consumers,but,don,t,start,yet;private,void,create,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer
RabbitMQConsumer -> private void createConsumers() throws IOException;1548175645;Create the consumers but don't start yet;private void createConsumers() throws IOException {_        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }_    };create,the,consumers,but,don,t,start,yet;private,void,create,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer
RabbitMQConsumer -> private void openConnection() throws IOException;1405374721;Open connection;private void openConnection() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException;1415211488;Open connection;private void openConnection() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException;1424618252;Open connection;private void openConnection() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException;1425318766;Open connection;private void openConnection() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException;1433798679;Open connection;private void openConnection() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> private void openConnection() throws IOException;1433892126;Open connection;private void openConnection() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executor)__        log.debug("Created connection: {}", conn)__    };open,connection;private,void,open,connection,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,log,debug,created,connection,conn
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1405374721;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1415211488;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1424618252;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1425318766;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1433798679;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1433892126;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1438356651;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1440615344;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1444282299;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1448648960;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1451464800;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1451469201;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1452690543;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void start() throws IOException;1452694797;Bind consumer to channel;public void start() throws IOException {_            tag = channel.basicConsume(endpoint.getQueue(), endpoint.isAutoAck(), this)__        };bind,consumer,to,channel;public,void,start,throws,ioexception,tag,channel,basic,consume,endpoint,get,queue,endpoint,is,auto,ack,this
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException;1405374721;Unbind consumer from channel;public void stop() throws IOException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            channel.close()__        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,if,tag,null,channel,basic,cancel,tag,channel,close
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException;1415211488;Unbind consumer from channel;public void stop() throws IOException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            channel.close()__        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,if,tag,null,channel,basic,cancel,tag,channel,close
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException;1424618252;Unbind consumer from channel;public void stop() throws IOException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            channel.close()__        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,if,tag,null,channel,basic,cancel,tag,channel,close
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException;1425318766;Unbind consumer from channel;public void stop() throws IOException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            channel.close()__        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,if,tag,null,channel,basic,cancel,tag,channel,close
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException;1433798679;Unbind consumer from channel;public void stop() throws IOException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            channel.close()__        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,if,tag,null,channel,basic,cancel,tag,channel,close
RabbitMQConsumer -> RabbitConsumer -> public void stop() throws IOException;1433892126;Unbind consumer from channel;public void stop() throws IOException {_            if (tag != null) {_                channel.basicCancel(tag)__            }_            channel.close()__        };unbind,consumer,from,channel;public,void,stop,throws,ioexception,if,tag,null,channel,basic,cancel,tag,channel,close
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1438356651;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            }_            catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1440615344;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1444282299;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1448648960;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1451464800;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1451469201;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1452690543;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1452694797;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1453969280;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1454949920;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1461921869;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.error("Timeout occured")__                throw e__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,error,timeout,occured,throw,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1471357655;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.warn("Timeout occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,warn,timeout,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1506407330;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.warn("Timeout occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,warn,timeout,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1515240163;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.warn("Timeout occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,warn,timeout,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1515316978;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.warn("Timeout occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,warn,timeout,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1524063178;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                consumer.stop()__            } catch (TimeoutException e) {_                log.warn("Timeout occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,consumer,stop,catch,timeout,exception,e,log,warn,timeout,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1535026090;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.stopAndShutdownService(consumer)__            } catch (Exception e) {_                log.warn("Error occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,service,helper,stop,and,shutdown,service,consumer,catch,exception,e,log,warn,error,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1537204343;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.stopAndShutdownService(consumer)__            } catch (Exception e) {_                log.warn("Error occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,service,helper,stop,and,shutdown,service,consumer,catch,exception,e,log,warn,error,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1540108163;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.stopAndShutdownService(consumer)__            } catch (Exception e) {_                log.warn("Error occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,service,helper,stop,and,shutdown,service,consumer,catch,exception,e,log,warn,error,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException, TimeoutException;1548175645;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException, TimeoutException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.stopAndShutdownService(consumer)__            } catch (Exception e) {_                log.warn("Error occurred while stopping consumer. This exception is ignored", e)__            }_        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,timeout,exception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,try,service,helper,stop,and,shutdown,service,consumer,catch,exception,e,log,warn,error,occurred,while,stopping,consumer,this,exception,is,ignored,e,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void startConsumers();1515240163;Start the consumers (already created);private void startConsumers() {__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };start,the,consumers,already,created;private,void,start,consumers,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> private void startConsumers();1515316978;Start the consumers (already created);private void startConsumers() {__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };start,the,consumers,already,created;private,void,start,consumers,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> private void startConsumers();1524063178;Start the consumers (already created);private void startConsumers() {__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };start,the,consumers,already,created;private,void,start,consumers,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> private void startConsumers();1535026090;Start the consumers (already created);private void startConsumers() {_        _        Throwable fail = null__        _        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.startService(consumer)__            } catch (Throwable e) {_                fail = e__            }_        }_        if (fail != null) {_            log.info("Connection failed starting consumers, will start background thread to retry!", fail)__            reconnect()__        }_    };start,the,consumers,already,created;private,void,start,consumers,throwable,fail,null,for,rabbit,consumer,consumer,this,consumers,try,service,helper,start,service,consumer,catch,throwable,e,fail,e,if,fail,null,log,info,connection,failed,starting,consumers,will,start,background,thread,to,retry,fail,reconnect
RabbitMQConsumer -> private void startConsumers();1537204343;Start the consumers (already created);private void startConsumers() {_        _        Throwable fail = null__        _        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.startService(consumer)__            } catch (Throwable e) {_                fail = e__            }_        }_        if (fail != null) {_            log.info("Connection failed starting consumers, will start background thread to retry!", fail)__            reconnect()__        }_    };start,the,consumers,already,created;private,void,start,consumers,throwable,fail,null,for,rabbit,consumer,consumer,this,consumers,try,service,helper,start,service,consumer,catch,throwable,e,fail,e,if,fail,null,log,info,connection,failed,starting,consumers,will,start,background,thread,to,retry,fail,reconnect
RabbitMQConsumer -> private void startConsumers();1540108163;Start the consumers (already created);private void startConsumers() {_        _        Throwable fail = null__        _        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.startService(consumer)__            } catch (Throwable e) {_                fail = e__            }_        }_        if (fail != null) {_            log.info("Connection failed starting consumers, will start background thread to retry!", fail)__            reconnect()__        }_    };start,the,consumers,already,created;private,void,start,consumers,throwable,fail,null,for,rabbit,consumer,consumer,this,consumers,try,service,helper,start,service,consumer,catch,throwable,e,fail,e,if,fail,null,log,info,connection,failed,starting,consumers,will,start,background,thread,to,retry,fail,reconnect
RabbitMQConsumer -> private void startConsumers();1548175645;Start the consumers (already created);private void startConsumers() {_        _        Throwable fail = null__        _        for (RabbitConsumer consumer : this.consumers) {_            try {_                ServiceHelper.startService(consumer)__            } catch (Throwable e) {_                fail = e__            }_        }_        if (fail != null) {_            log.info("Connection failed starting consumers, will start background thread to retry!", fail)__            reconnect()__        }_    };start,the,consumers,already,created;private,void,start,consumers,throwable,fail,null,for,rabbit,consumer,consumer,this,consumers,try,service,helper,start,service,consumer,catch,throwable,e,fail,e,if,fail,null,log,info,connection,failed,starting,consumers,will,start,background,thread,to,retry,fail,reconnect
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException;1405374721;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            consumer.stop()__        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,consumer,stop,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException;1415211488;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            consumer.stop()__        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,consumer,stop,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException;1424618252;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            consumer.stop()__        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,consumer,stop,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException;1425318766;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            consumer.stop()__        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,consumer,stop,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException;1433798679;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            consumer.stop()__        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,consumer,stop,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> private void closeConnectionAndChannel() throws IOException;1433892126;If needed, close Connection and Channels;private void closeConnectionAndChannel() throws IOException {_        if (startConsumerCallable != null) {_            startConsumerCallable.stop()__        }_        for (RabbitConsumer consumer : this.consumers) {_            consumer.stop()__        }_        this.consumers.clear()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channels;private,void,close,connection,and,channel,throws,ioexception,if,start,consumer,callable,null,start,consumer,callable,stop,for,rabbit,consumer,consumer,this,consumers,consumer,stop,this,consumers,clear,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1382088850;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1382960772;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1383922352;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1388443957;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1405374721;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1415211488;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1424618252;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> RabbitConsumer -> private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties);1425318766;Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()};private void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properties) {__            if (properties.getType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TYPE, properties.getType())__            }_            if (properties.getAppId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.APP_ID, properties.getAppId())__            }_            if (properties.getClusterId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CLUSTERID, properties.getClusterId())__            }_            if (properties.getContentEncoding() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_ENCODING, properties.getContentEncoding())__            }_            if (properties.getContentType() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CONTENT_TYPE, properties.getContentType())__            }_            if (properties.getCorrelationId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, properties.getCorrelationId())__            }_            if (properties.getExpiration() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.EXPIRATION, properties.getExpiration())__            }_            if (properties.getMessageId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.MESSAGE_ID, properties.getMessageId())__            }_            if (properties.getPriority() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.PRIORITY, properties.getPriority())__            }_            if (properties.getReplyTo() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo())__            }_            if (properties.getTimestamp() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.TIMESTAMP, properties.getTimestamp())__            }_            if (properties.getUserId() != null) {_                exchange.getIn().setHeader(RabbitMQConstants.USERID, properties.getUserId())__            }_        };will,take,an,link,exchange,and,add,header,values,back,to,the,link,exchange,get,in;private,void,merge,amqp,properties,exchange,exchange,amqp,basic,properties,properties,if,properties,get,type,null,exchange,get,in,set,header,rabbit,mqconstants,type,properties,get,type,if,properties,get,app,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,app,id,if,properties,get,cluster,id,null,exchange,get,in,set,header,rabbit,mqconstants,clusterid,properties,get,cluster,id,if,properties,get,content,encoding,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,encoding,if,properties,get,content,type,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,content,type,if,properties,get,correlation,id,null,exchange,get,in,set,header,rabbit,mqconstants,correlationid,properties,get,correlation,id,if,properties,get,expiration,null,exchange,get,in,set,header,rabbit,mqconstants,expiration,properties,get,expiration,if,properties,get,message,id,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,message,id,if,properties,get,priority,null,exchange,get,in,set,header,rabbit,mqconstants,priority,properties,get,priority,if,properties,get,reply,to,null,exchange,get,in,set,header,rabbit,mqconstants,properties,get,reply,to,if,properties,get,timestamp,null,exchange,get,in,set,header,rabbit,mqconstants,timestamp,properties,get,timestamp,if,properties,get,user,id,null,exchange,get,in,set,header,rabbit,mqconstants,userid,properties,get,user,id
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1453969280;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn != null && this.conn.isOpen()) {_            return this.conn__        }_        log.debug("The existing connection is closed")__        openConnection()__        return this.conn__    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,this,conn,is,open,return,this,conn,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1454949920;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn != null && this.conn.isOpen()) {_            return this.conn__        }_        log.debug("The existing connection is closed")__        openConnection()__        return this.conn__    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,this,conn,is,open,return,this,conn,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1461921869;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn != null && this.conn.isOpen()) {_            return this.conn__        }_        log.debug("The existing connection is closed")__        openConnection()__        return this.conn__    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,this,conn,is,open,return,this,conn,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1471357655;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn != null && this.conn.isOpen()) {_            return this.conn__        }_        log.debug("The existing connection is closed")__        openConnection()__        return this.conn__    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,this,conn,is,open,return,this,conn,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1506407330;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (!this.conn.isOpen() && this.endpoint.getAutomaticRecoveryEnabled()) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,endpoint,get,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1515240163;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,conn,is,open,is,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1515316978;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,conn,is,open,is,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1524063178;Returns the exiting open connection or opens a new one_@throws IOException_@throws TimeoutException;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one,throws,ioexception,throws,timeout,exception;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,conn,is,open,is,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1535026090;Returns the exiting open connection or opens a new one;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,conn,is,open,is,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1537204343;Returns the exiting open connection or opens a new one;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,conn,is,open,is,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1540108163;Returns the exiting open connection or opens a new one;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,conn,is,open,is,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> protected synchronized Connection getConnection() throws IOException, TimeoutException;1548175645;Returns the exiting open connection or opens a new one;protected synchronized Connection getConnection() throws IOException, TimeoutException {_        if (this.conn == null) {_            openConnection()__            return this.conn__        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {_            return this.conn__        } else {_            log.debug("The existing connection is closed")__            openConnection()__            return this.conn__        }_    };returns,the,exiting,open,connection,or,opens,a,new,one;protected,synchronized,connection,get,connection,throws,ioexception,timeout,exception,if,this,conn,null,open,connection,return,this,conn,else,if,this,conn,is,open,this,conn,is,open,is,automatic,recovery,enabled,return,this,conn,else,log,debug,the,existing,connection,is,closed,open,connection,return,this,conn
RabbitMQConsumer -> private void startConsumers() throws IOException;1405374721;Add a consummer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        endpoint.declareExchangeAndQueue(channel)__        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consummer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1415211488;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1424618252;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1425318766;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1433798679;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1433892126;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1438356651;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1440615344;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1444282299;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1448648960;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            endpoint.declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1451464800;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            getEndpoint().declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,get,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1451469201;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            getEndpoint().declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,get,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1452690543;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            getEndpoint().declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,get,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1452694797;Add a consumer thread for given channel;private void startConsumers() throws IOException {_        _        Channel channel = openChannel()__        if (getEndpoint().isDeclare()) {_            getEndpoint().declareExchangeAndQueue(channel)__        }_        startConsumer(channel)__        _        for (int i = 1_ i < endpoint.getConcurrentConsumers()_ i++) {_            channel = openChannel()__            startConsumer(channel)__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,channel,channel,open,channel,if,get,endpoint,is,declare,get,endpoint,declare,exchange,and,queue,channel,start,consumer,channel,for,int,i,1,i,endpoint,get,concurrent,consumers,i,channel,open,channel,start,consumer,channel
RabbitMQConsumer -> private void startConsumers() throws IOException;1453969280;Add a consumer thread for given channel;private void startConsumers() throws IOException {__        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> private void startConsumers() throws IOException;1454949920;Add a consumer thread for given channel;private void startConsumers() throws IOException {__        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> private void startConsumers() throws IOException;1461921869;Add a consumer thread for given channel;private void startConsumers() throws IOException {__        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> private void startConsumers() throws IOException;1471357655;Add a consumer thread for given channel;private void startConsumers() throws IOException {__        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> private void startConsumers() throws IOException;1506407330;Add a consumer thread for given channel;private void startConsumers() throws IOException {__        _        for (int i = 0_ i < endpoint.getConcurrentConsumers()_ i++) {_            createConsumer()__        }__        _        try {_            for (RabbitConsumer consumer : this.consumers) {_                consumer.start()__            }_        } catch (Exception e) {_            log.info("Connection failed, will start background thread to retry!", e)__            reconnect()__        }_    };add,a,consumer,thread,for,given,channel;private,void,start,consumers,throws,ioexception,for,int,i,0,i,endpoint,get,concurrent,consumers,i,create,consumer,try,for,rabbit,consumer,consumer,this,consumers,consumer,start,catch,exception,e,log,info,connection,failed,will,start,background,thread,to,retry,e,reconnect
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1373885998;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1373885999;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1374463023;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1375194480;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1375922630;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1377586849;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1380620839;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1381411594;Constructs a new instance and records its association to the passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1382088850;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1382960772;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1383922352;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1388443957;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1405374721;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1415211488;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1424618252;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1425318766;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1433798679;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1433892126;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1438356651;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1440615344;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1444282299;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1448648960;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1451464800;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1451469201;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1452690543;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
RabbitMQConsumer -> RabbitConsumer -> public RabbitConsumer(RabbitMQConsumer consumer, Channel channel);1452694797;Constructs a new instance and records its association to the_passed-in channel.__@param channel the channel to which this consumer is attached;public RabbitConsumer(RabbitMQConsumer consumer, Channel channel) {_            super(channel)__            this.consumer = consumer__            this.channel = channel__        };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel,param,channel,the,channel,to,which,this,consumer,is,attached;public,rabbit,consumer,rabbit,mqconsumer,consumer,channel,channel,super,channel,this,consumer,consumer,this,channel,channel
