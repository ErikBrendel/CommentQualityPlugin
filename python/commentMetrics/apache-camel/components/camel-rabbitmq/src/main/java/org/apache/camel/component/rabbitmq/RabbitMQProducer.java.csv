# id;timestamp;commentText;codeText;commentWords;codeWords
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1453969280;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1455957587;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1490945964;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1506407330;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1520415596;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1520415596;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1524063178;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1531637865;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1537204343;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1540108163;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1548175645;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private synchronized void checkConnectionAndChannelPool() throws Exception;1548234189;This will reconnect only if the connection is closed._@throws Exception;private synchronized void checkConnectionAndChannelPool() throws Exception {_        if (this.conn == null || !this.conn.isOpen()) {_            log.info("Reconnecting to RabbitMQ")__            try {_                closeConnectionAndChannel()__            } catch (Exception e) {_                _            }_            openConnectionAndChannelPool()__        }_    };this,will,reconnect,only,if,the,connection,is,closed,throws,exception;private,synchronized,void,check,connection,and,channel,pool,throws,exception,if,this,conn,null,this,conn,is,open,log,info,reconnecting,to,rabbit,mq,try,close,connection,and,channel,catch,exception,e,open,connection,and,channel,pool
RabbitMQProducer -> private void closeConnectionAndChannel() throws Exception;1417674549;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws Exception {_        channelPool.close()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,exception,channel,pool,close,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws Exception;1417674880;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws Exception {_        channelPool.close()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,exception,channel,pool,close,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws Exception;1417675423;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws Exception {_        channelPool.close()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,exception,channel,pool,close,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws Exception;1423037884;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws Exception {_        channelPool.close()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,exception,channel,pool,close,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws Exception;1427090237;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws Exception {_        channelPool.close()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,exception,channel,pool,close,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws Exception;1433798679;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws Exception {_        channelPool.close()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,exception,channel,pool,close,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws Exception;1433892126;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws Exception {_        channelPool.close()__        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,exception,channel,pool,close,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws IOException;1405374721;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws IOException {_        if (channel != null) {_            log.debug("Closing channel: {}", channel)__            channel.close()__            channel = null__        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,ioexception,if,channel,null,log,debug,closing,channel,channel,channel,close,channel,null,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void closeConnectionAndChannel() throws IOException;1415211488;If needed, close Connection and Channel;private void closeConnectionAndChannel() throws IOException {_        if (channel != null) {_            log.debug("Closing channel: {}", channel)__            channel.close()__            channel = null__        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel;private,void,close,connection,and,channel,throws,ioexception,if,channel,null,log,debug,closing,channel,channel,channel,close,channel,null,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception;1417674549;Send a message borrowing a channel from the pool_@param exchange Target exchange_@param routingKey Routing key_@param properties Header properties_@param body Body content;private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception {_        if (channelPool==null) {_            _            openConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                channel.basicPublish(exchange, routingKey, properties, body)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool,param,exchange,target,exchange,param,routing,key,routing,key,param,properties,header,properties,param,body,body,content;private,void,basic,publish,final,string,exchange,final,string,routing,key,final,amqp,basic,properties,properties,final,byte,body,throws,exception,if,channel,pool,null,open,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,channel,basic,publish,exchange,routing,key,properties,body,return,null
RabbitMQProducer -> private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception;1417674880;Send a message borrowing a channel from the pool.__@param exchange   Target exchange_@param routingKey Routing key_@param properties Header properties_@param body       Body content;private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception {_        if (channelPool == null) {_            _            openConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                channel.basicPublish(exchange, routingKey, properties, body)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool,param,exchange,target,exchange,param,routing,key,routing,key,param,properties,header,properties,param,body,body,content;private,void,basic,publish,final,string,exchange,final,string,routing,key,final,amqp,basic,properties,properties,final,byte,body,throws,exception,if,channel,pool,null,open,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,channel,basic,publish,exchange,routing,key,properties,body,return,null
RabbitMQProducer -> private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception;1417675423;Send a message borrowing a channel from the pool.__@param exchange   Target exchange_@param routingKey Routing key_@param properties Header properties_@param body       Body content;private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception {_        if (channelPool == null) {_            _            openConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                channel.basicPublish(exchange, routingKey, properties, body)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool,param,exchange,target,exchange,param,routing,key,routing,key,param,properties,header,properties,param,body,body,content;private,void,basic,publish,final,string,exchange,final,string,routing,key,final,amqp,basic,properties,properties,final,byte,body,throws,exception,if,channel,pool,null,open,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,channel,basic,publish,exchange,routing,key,properties,body,return,null
RabbitMQProducer -> private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception;1423037884;Send a message borrowing a channel from the pool.__@param exchange   Target exchange_@param routingKey Routing key_@param properties Header properties_@param body       Body content;private void basicPublish(final String exchange, final String routingKey, final AMQP.BasicProperties properties, final byte[] body) throws Exception {_        if (channelPool == null) {_            _            openConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                channel.basicPublish(exchange, routingKey, properties, body)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool,param,exchange,target,exchange,param,routing,key,routing,key,param,properties,header,properties,param,body,body,content;private,void,basic,publish,final,string,exchange,final,string,routing,key,final,amqp,basic,properties,properties,final,byte,body,throws,exception,if,channel,pool,null,open,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,channel,basic,publish,exchange,routing,key,properties,body,return,null
RabbitMQProducer -> public void setChannelPoolMaxSize(int channelPoolMaxSize);1417674549;Set maximum number of opened channel in pool_@param channelPoolMaxSize Maximum number of opened channel in pool;public void setChannelPoolMaxSize(int channelPoolMaxSize) {_            this.channelPoolMaxSize = channelPoolMaxSize__    };set,maximum,number,of,opened,channel,in,pool,param,channel,pool,max,size,maximum,number,of,opened,channel,in,pool;public,void,set,channel,pool,max,size,int,channel,pool,max,size,this,channel,pool,max,size,channel,pool,max,size
RabbitMQProducer -> public void setChannelPoolMaxSize(int channelPoolMaxSize);1417674880;Set maximum number of opened channel in pool__@param channelPoolMaxSize Maximum number of opened channel in pool;public void setChannelPoolMaxSize(int channelPoolMaxSize) {_        this.channelPoolMaxSize = channelPoolMaxSize__    };set,maximum,number,of,opened,channel,in,pool,param,channel,pool,max,size,maximum,number,of,opened,channel,in,pool;public,void,set,channel,pool,max,size,int,channel,pool,max,size,this,channel,pool,max,size,channel,pool,max,size
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1453969280;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1455957587;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1490945964;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1506407330;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1520415596;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1520415596;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1524063178;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1531637865;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1537204343;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1540108163;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1548175645;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private synchronized void openConnectionAndChannelPool() throws Exception;1548234189;Open connection and initialize channel pool_@throws Exception;private synchronized void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        attemptDeclaration()__    };open,connection,and,initialize,channel,pool,throws,exception;private,synchronized,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,attempt,declaration
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1382960772;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1383922352;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1384235230;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1385476973;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1388443957;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1405374721;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1415211488;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1417674549;Strategy to test if the given header is valid__@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1417674880;Strategy to test if the given header is valid__@param headerValue the header value_@return the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1417675423;Strategy to test if the given header is valid__@param headerValue the header value_@return the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1423037884;Strategy to test if the given header is valid__@param headerValue the header value_@return the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> private Object getValidRabbitMQHeaderValue(Object headerValue);1427090237;Strategy to test if the given header is valid__@param headerValue the header value_@return the value to use, <tt>null</tt> to ignore this header_@see com.rabbitmq.client.impl.Frame#fieldValueSize;private Object getValidRabbitMQHeaderValue(Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigDecimal) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue__        } else if (headerValue instanceof byte[]) {_            return headerValue__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header,see,com,rabbitmq,client,impl,frame,field,value,size;private,object,get,valid,rabbit,mqheader,value,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,decimal,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,else,if,header,value,instanceof,byte,return,header,value,return,null
RabbitMQProducer -> public void setChannelPoolMaxWait(long channelPoolMaxWait);1417674549;Set the maximum number of milliseconds to wait for a channel from the pool_@param channelPoolMaxWait Maximum number of milliseconds waiting for a channel;public void setChannelPoolMaxWait(long channelPoolMaxWait) {_            this.channelPoolMaxWait = channelPoolMaxWait__    };set,the,maximum,number,of,milliseconds,to,wait,for,a,channel,from,the,pool,param,channel,pool,max,wait,maximum,number,of,milliseconds,waiting,for,a,channel;public,void,set,channel,pool,max,wait,long,channel,pool,max,wait,this,channel,pool,max,wait,channel,pool,max,wait
RabbitMQProducer -> public void setChannelPoolMaxWait(long channelPoolMaxWait);1417674880;Set the maximum number of milliseconds to wait for a channel from the pool__@param channelPoolMaxWait Maximum number of milliseconds waiting for a channel;public void setChannelPoolMaxWait(long channelPoolMaxWait) {_        this.channelPoolMaxWait = channelPoolMaxWait__    };set,the,maximum,number,of,milliseconds,to,wait,for,a,channel,from,the,pool,param,channel,pool,max,wait,maximum,number,of,milliseconds,waiting,for,a,channel;public,void,set,channel,pool,max,wait,long,channel,pool,max,wait,this,channel,pool,max,wait,channel,pool,max,wait
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1433798679;Send a message borrowing a channel from the pool.__@param exchange   Target exchange_@param routingKey Routing key_@param properties Header properties_@param body       Body content;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            openConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool,param,exchange,target,exchange,param,routing,key,routing,key,param,properties,header,properties,param,body,body,content;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,open,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1433892126;Send a message borrowing a channel from the pool.__@param exchange   Target exchange_@param routingKey Routing key_@param properties Header properties_@param body       Body content;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            openConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool,param,exchange,target,exchange,param,routing,key,routing,key,param,properties,header,properties,param,body,body,content;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,open,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1453969280;Send a message borrowing a channel from the pool.__@param exchange   Target exchange_@param routingKey Routing key_@param properties Header properties_@param body       Body content;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool,param,exchange,target,exchange,param,routing,key,routing,key,param,properties,header,properties,param,body,body,content;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1455957587;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1490945964;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1506407330;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1520415596;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1520415596;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1524063178;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1531637865;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1537204343;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1540108163;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1548175645;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception;1548234189;Send a message borrowing a channel from the pool.;private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {_        if (channelPool == null) {_            _            checkConnectionAndChannelPool()__        }_        execute(new ChannelCallback<Void>() {_            @Override_            public Void doWithChannel(Channel channel) throws Exception {_                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey)__                return null__            }_        })__    };send,a,message,borrowing,a,channel,from,the,pool;private,void,basic,publish,final,exchange,camel,exchange,final,string,rabbit,exchange,final,string,routing,key,throws,exception,if,channel,pool,null,check,connection,and,channel,pool,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,publish,exchange,to,channel,camel,exchange,channel,routing,key,return,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1453969280;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1455957587;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1490945964;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1506407330;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1520415596;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1520415596;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1524063178;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1531637865;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1537204343;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1540108163;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1548175645;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private synchronized void closeConnectionAndChannel() throws IOException;1548234189;If needed, close Connection and Channel_@throws IOException;private synchronized void closeConnectionAndChannel() throws IOException {_        if (channelPool != null) {_            try {_                channelPool.close()__                channelPool = null__            } catch (Exception e) {_                throw new IOException("Error closing channelPool", e)__            }_        }_        if (conn != null) {_            log.debug("Closing connection: {} with timeout: {} ms.", conn, closeTimeout)__            conn.close(closeTimeout)__            conn = null__        }_    };if,needed,close,connection,and,channel,throws,ioexception;private,synchronized,void,close,connection,and,channel,throws,ioexception,if,channel,pool,null,try,channel,pool,close,channel,pool,null,catch,exception,e,throw,new,ioexception,error,closing,channel,pool,e,if,conn,null,log,debug,closing,connection,with,timeout,ms,conn,close,timeout,conn,close,close,timeout,conn,null
RabbitMQProducer -> private void openConnectionAndChannel() throws IOException;1405374721;Open connection and channel;private void openConnectionAndChannel() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel...")__        this.channel = conn.createChannel()__        log.debug("Created channel: {}", channel)___        getEndpoint().declareExchangeAndQueue(this.channel)__    };open,connection,and,channel;private,void,open,connection,and,channel,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,this,channel,conn,create,channel,log,debug,created,channel,channel,get,endpoint,declare,exchange,and,queue,this,channel
RabbitMQProducer -> private void openConnectionAndChannel() throws IOException;1415211488;Open connection and channel;private void openConnectionAndChannel() throws IOException {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel...")__        this.channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        if (getEndpoint().isDeclare()) {_            getEndpoint().declareExchangeAndQueue(this.channel)__        }        _    };open,connection,and,channel;private,void,open,connection,and,channel,throws,ioexception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,this,channel,conn,create,channel,log,debug,created,channel,channel,if,get,endpoint,is,declare,get,endpoint,declare,exchange,and,queue,this,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1417674549;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel = channelPool.borrowObject()__        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1417674880;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel = channelPool.borrowObject()__        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1417675423;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel = channelPool.borrowObject()__        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1423037884;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel = channelPool.borrowObject()__        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1427090237;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel = channelPool.borrowObject()__        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1433798679;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel = channelPool.borrowObject()__        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1433892126;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel = channelPool.borrowObject()__        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1453969280;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool")__            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,check,connection,and,channel,pool,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1455957587;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool")__            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,check,connection,and,channel,pool,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1490945964;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool")__            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,check,connection,and,channel,pool,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1506407330;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1520415596;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1520415596;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1524063178;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1531637865;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1537204343;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1540108163;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1548175645;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private <T> T execute(ChannelCallback<T> callback) throws Exception;1548234189;Do something with a pooled channel (similar to Spring JDBC TransactionTemplate#execute);private <T> T execute(ChannelCallback<T> callback) throws Exception {_        Channel channel__        try {_            channel = channelPool.borrowObject()__        } catch (IllegalStateException e) {_            _            _            checkConnectionAndChannelPool()__            channel = channelPool.borrowObject()__        }_        if (!channel.isOpen()) {_            log.warn("Got a closed channel from the pool. Invalidating and borrowing a new one from the pool.")__            channelPool.invalidateObject(channel)__            _            checkConnectionAndChannelPool()__            attemptDeclaration()__            channel = channelPool.borrowObject()__        }_        try {_            return callback.doWithChannel(channel)__        } finally {_            channelPool.returnObject(channel)__        }_    };do,something,with,a,pooled,channel,similar,to,spring,jdbc,transaction,template,execute;private,t,t,execute,channel,callback,t,callback,throws,exception,channel,channel,try,channel,channel,pool,borrow,object,catch,illegal,state,exception,e,check,connection,and,channel,pool,channel,channel,pool,borrow,object,if,channel,is,open,log,warn,got,a,closed,channel,from,the,pool,invalidating,and,borrowing,a,new,one,from,the,pool,channel,pool,invalidate,object,channel,check,connection,and,channel,pool,attempt,declaration,channel,channel,pool,borrow,object,try,return,callback,do,with,channel,channel,finally,channel,pool,return,object,channel
RabbitMQProducer -> private void openConnectionAndChannelPool() throws Exception;1417674549;Open connection and initialize channel pool;private void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<>(new PoolableChannelFactory(this.conn), getChannelPoolMaxSize(), GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool;private,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,new,poolable,channel,factory,this,conn,get,channel,pool,max,size,generic,object,pool,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private void openConnectionAndChannelPool() throws Exception;1417674880;Open connection and initialize channel pool;private void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getChannelPoolMaxSize(), GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool;private,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,channel,pool,max,size,generic,object,pool,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private void openConnectionAndChannelPool() throws Exception;1417675423;Open connection and initialize channel pool;private void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool;private,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private void openConnectionAndChannelPool() throws Exception;1423037884;Open connection and initialize channel pool;private void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool;private,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private void openConnectionAndChannelPool() throws Exception;1427090237;Open connection and initialize channel pool;private void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool;private,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private void openConnectionAndChannelPool() throws Exception;1433798679;Open connection and initialize channel pool;private void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool;private,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> private void openConnectionAndChannelPool() throws Exception;1433892126;Open connection and initialize channel pool;private void openConnectionAndChannelPool() throws Exception {_        log.trace("Creating connection...")__        this.conn = getEndpoint().connect(executorService)__        log.debug("Created connection: {}", conn)___        log.trace("Creating channel pool...")__        channelPool = new GenericObjectPool<Channel>(new PoolableChannelFactory(this.conn), getEndpoint().getChannelPoolMaxSize(),_                GenericObjectPool.WHEN_EXHAUSTED_BLOCK, getEndpoint().getChannelPoolMaxWait())__        if (getEndpoint().isDeclare()) {_            execute(new ChannelCallback<Void>() {_                @Override_                public Void doWithChannel(Channel channel) throws Exception {_                    getEndpoint().declareExchangeAndQueue(channel)__                    return null__                }_            })__        }_    };open,connection,and,initialize,channel,pool;private,void,open,connection,and,channel,pool,throws,exception,log,trace,creating,connection,this,conn,get,endpoint,connect,executor,service,log,debug,created,connection,conn,log,trace,creating,channel,pool,channel,pool,new,generic,object,pool,channel,new,poolable,channel,factory,this,conn,get,endpoint,get,channel,pool,max,size,generic,object,pool,get,endpoint,get,channel,pool,max,wait,if,get,endpoint,is,declare,execute,new,channel,callback,void,override,public,void,do,with,channel,channel,channel,throws,exception,get,endpoint,declare,exchange,and,queue,channel,return,null
RabbitMQProducer -> public long getChannelPoolMaxWait();1417674549;Get the maximum number of milliseconds to wait for a channel from the pool_@return Maximum number of milliseconds waiting for a channel;public long getChannelPoolMaxWait() {_            return channelPoolMaxWait__    };get,the,maximum,number,of,milliseconds,to,wait,for,a,channel,from,the,pool,return,maximum,number,of,milliseconds,waiting,for,a,channel;public,long,get,channel,pool,max,wait,return,channel,pool,max,wait
RabbitMQProducer -> public long getChannelPoolMaxWait();1417674880;Get the maximum number of milliseconds to wait for a channel from the pool__@return Maximum number of milliseconds waiting for a channel;public long getChannelPoolMaxWait() {_        return channelPoolMaxWait__    };get,the,maximum,number,of,milliseconds,to,wait,for,a,channel,from,the,pool,return,maximum,number,of,milliseconds,waiting,for,a,channel;public,long,get,channel,pool,max,wait,return,channel,pool,max,wait
RabbitMQProducer -> public int getChannelPoolMaxSize();1417674549;Get maximum number of opened channel in pool_@return Maximum number of opened channel in pool;public int getChannelPoolMaxSize() {_            return channelPoolMaxSize__    };get,maximum,number,of,opened,channel,in,pool,return,maximum,number,of,opened,channel,in,pool;public,int,get,channel,pool,max,size,return,channel,pool,max,size
RabbitMQProducer -> public int getChannelPoolMaxSize();1417674880;Get maximum number of opened channel in pool__@return Maximum number of opened channel in pool;public int getChannelPoolMaxSize() {_        return channelPoolMaxSize__    };get,maximum,number,of,opened,channel,in,pool,return,maximum,number,of,opened,channel,in,pool;public,int,get,channel,pool,max,size,return,channel,pool,max,size
