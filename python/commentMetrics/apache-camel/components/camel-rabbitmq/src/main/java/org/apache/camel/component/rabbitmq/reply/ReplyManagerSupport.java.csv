# id;timestamp;commentText;codeText;commentWords;codeWords
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1433798679;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                            new Object[]{correlationID, counter, answer})__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,new,object,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1433892126;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                            new Object[]{correlationID, counter, answer})__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,new,object,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1451037299;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                            new Object[]{correlationID, counter, answer})__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,new,object,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1451464800;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1453969280;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1454611355;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1455957587;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1532419836;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1537204343;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1540108163;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1548175645;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
ReplyManagerSupport -> protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message);1548234189;<b>IMPORTANT:</b> This logic is only being used due to high performance in-memory only_testing using InOut over JMS. Its unlikely to happen in a real life situation with communication_to a remote broker, which always will be slower to send back reply, before Camel had a chance_to update it's internal correlation map.;protected ReplyHandler waitForProvisionCorrelationToBeUpdated(String correlationID, byte[] message) {_        _        _        _        _        if (log.isWarnEnabled()) {_            log.warn("Early reply received with correlationID [{}] -> {}", correlationID, message)__        }__        ReplyHandler answer = null___        _        boolean done = false__        int counter = 0__        while (!done && counter++ < 50) {_            log.trace("Early reply not found handler at attempt {}. Waiting a bit longer.", counter)__            try {_                Thread.sleep(100)__            } catch (InterruptedException e) {_                _            }__            _            answer = correlation.get(correlationID)__            done = answer != null___            if (answer != null) {_                if (log.isTraceEnabled()) {_                    log.trace("Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}",_                              correlationID, counter, answer)__                }_            }_        }__        return answer__    };b,important,b,this,logic,is,only,being,used,due,to,high,performance,in,memory,only,testing,using,in,out,over,jms,its,unlikely,to,happen,in,a,real,life,situation,with,communication,to,a,remote,broker,which,always,will,be,slower,to,send,back,reply,before,camel,had,a,chance,to,update,it,s,internal,correlation,map;protected,reply,handler,wait,for,provision,correlation,to,be,updated,string,correlation,id,byte,message,if,log,is,warn,enabled,log,warn,early,reply,received,with,correlation,id,correlation,id,message,reply,handler,answer,null,boolean,done,false,int,counter,0,while,done,counter,50,log,trace,early,reply,not,found,handler,at,attempt,waiting,a,bit,longer,counter,try,thread,sleep,100,catch,interrupted,exception,e,answer,correlation,get,correlation,id,done,answer,null,if,answer,null,if,log,is,trace,enabled,log,trace,early,reply,with,correlation,id,has,been,matched,after,attempts,and,can,be,processed,using,handler,correlation,id,counter,answer,return,answer
