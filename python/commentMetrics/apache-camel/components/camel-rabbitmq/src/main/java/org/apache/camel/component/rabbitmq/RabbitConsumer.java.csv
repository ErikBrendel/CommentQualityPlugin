# id;timestamp;commentText;codeText;commentWords;codeWords
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1453969280;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1461921869;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1464083528;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1471357332;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1471357400;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1471357655;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1506407330;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1515240163;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1517561276;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1530520107;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1531462660;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1531462865;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1535026090;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1536687142;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1537204343;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> public void handleConsumeOk(String consumerTag);1548175645;Stores the most recently passed-in consumerTag - semantically, there_should be only one.__@see Consumer#handleConsumeOk;public void handleConsumeOk(String consumerTag) {_        this.consumerTag = consumerTag__    };stores,the,most,recently,passed,in,consumer,tag,semantically,there,should,be,only,one,see,consumer,handle,consume,ok;public,void,handle,consume,ok,string,consumer,tag,this,consumer,tag,consumer,tag
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1453969280;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1461921869;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1464083528;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1471357332;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1471357400;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1471357655;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1506407330;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1515240163;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1517561276;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1530520107;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1531462660;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1531462865;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1535026090;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1536687142;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1537204343;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> private Channel openChannel(Connection conn) throws IOException;1548175645;Open channel;private Channel openChannel(Connection conn) throws IOException {_        log.trace("Creating channel...")__        Channel channel = conn.createChannel()__        log.debug("Created channel: {}", channel)__        _        if (consumer.getEndpoint().isPrefetchEnabled()) {_            channel.basicQos(consumer.getEndpoint().getPrefetchSize(), consumer.getEndpoint().getPrefetchCount(),_                    consumer.getEndpoint().isPrefetchGlobal())__        }__        _        _        if (consumer.getEndpoint().isDeclare()) {_            consumer.getEndpoint().declareExchangeAndQueue(channel)__        }_        return channel__    };open,channel;private,channel,open,channel,connection,conn,throws,ioexception,log,trace,creating,channel,channel,channel,conn,create,channel,log,debug,created,channel,channel,if,consumer,get,endpoint,is,prefetch,enabled,channel,basic,qos,consumer,get,endpoint,get,prefetch,size,consumer,get,endpoint,get,prefetch,count,consumer,get,endpoint,is,prefetch,global,if,consumer,get,endpoint,is,declare,consumer,get,endpoint,declare,exchange,and,queue,channel,return,channel
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1461921869;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1464083528;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1471357332;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1471357400;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1471357655;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1506407330;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1515240163;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1517561276;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1530520107;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1531462660;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1531462865;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1535026090;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1536687142;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1537204343;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> RabbitConsumer(RabbitMQConsumer consumer);1548175645;Constructs a new instance and records its association to the passed-in_channel.;RabbitConsumer(RabbitMQConsumer consumer) {_        _        this.consumer = consumer__        try {_            Connection conn = consumer.getConnection()__            this.channel = openChannel(conn)__        } catch (IOException | TimeoutException e) {_            log.warn("Unable to open channel for RabbitMQConsumer. Continuing and will try again", e)__        }_    };constructs,a,new,instance,and,records,its,association,to,the,passed,in,channel;rabbit,consumer,rabbit,mqconsumer,consumer,this,consumer,consumer,try,connection,conn,consumer,get,connection,this,channel,open,channel,conn,catch,ioexception,timeout,exception,e,log,warn,unable,to,open,channel,for,rabbit,mqconsumer,continuing,and,will,try,again,e
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1453969280;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Recieved recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,recieved,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1461921869;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Recieved recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,recieved,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1464083528;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Recieved recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,recieved,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1471357332;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Recieved recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,recieved,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1471357400;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Recieved recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,recieved,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1471357655;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1506407330;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1515240163;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1517561276;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1530520107;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1531462660;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1531462865;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1535026090;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1536687142;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1537204343;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleRecoverOk(String consumerTag);1548175645;No-op implementation of {@link Consumer#handleRecoverOk}.;public void handleRecoverOk(String consumerTag) {_        _        log.debug("Received recover ok signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,recover,ok;public,void,handle,recover,ok,string,consumer,tag,log,debug,received,recover,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void start() throws IOException;1453969280;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1461921869;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1464083528;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1471357332;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1471357400;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1471357655;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1506407330;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1515240163;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1517561276;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,this
RabbitConsumer -> public void start() throws IOException;1530520107;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), "", false, consumer.getEndpoint().isExclusiveConsumer(), null, this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,false,consumer,get,endpoint,is,exclusive,consumer,null,this
RabbitConsumer -> public void start() throws IOException;1531462660;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), "", false, consumer.getEndpoint().isExclusiveConsumer(), null, this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,false,consumer,get,endpoint,is,exclusive,consumer,null,this
RabbitConsumer -> public void start() throws IOException;1531462865;Bind consumer to channel;public void start() throws IOException {_        if (channel == null) {_            throw new IOException("The RabbitMQ channel is not open")__        }_        tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), "", false, consumer.getEndpoint().isExclusiveConsumer(), null, this)__    };bind,consumer,to,channel;public,void,start,throws,ioexception,if,channel,null,throw,new,ioexception,the,rabbit,mq,channel,is,not,open,tag,channel,basic,consume,consumer,get,endpoint,get,queue,consumer,get,endpoint,is,auto,ack,false,consumer,get,endpoint,is,exclusive,consumer,null,this
RabbitConsumer -> public void handleCancelOk(String consumerTag);1453969280;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Recieved cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,recieved,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1461921869;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Recieved cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,recieved,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1464083528;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Recieved cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,recieved,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1471357332;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Recieved cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,recieved,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1471357400;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Recieved cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,recieved,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1471357655;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1506407330;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1515240163;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1517561276;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1530520107;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1531462660;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1531462865;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1535026090;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1536687142;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1537204343;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancelOk(String consumerTag);1548175645;No-op implementation of {@link Consumer#handleCancelOk}.__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancelOk(String consumerTag) {_        _        log.debug("Received cancelOk signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,ok,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,ok,string,consumer,tag,log,debug,received,cancel,ok,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public String getConsumerTag();1453969280;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1461921869;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1464083528;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1471357332;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1471357400;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1471357655;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1506407330;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1515240163;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1517561276;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1530520107;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1531462660;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1531462865;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1535026090;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1536687142;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1537204343;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public String getConsumerTag();1548175645;Retrieve the consumer tag.__@return the most recently notified consumer tag.;public String getConsumerTag() {_        return consumerTag__    };retrieve,the,consumer,tag,return,the,most,recently,notified,consumer,tag;public,string,get,consumer,tag,return,consumer,tag
RabbitConsumer -> public void reconnect() throws Exception;1535026090;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws Exception {_        if (isChannelOpen()) {_            _            start()__            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,exception,if,is,channel,open,start,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws Exception;1536687142;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws Exception {_        if (isChannelOpen()) {_            _            start()__            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,exception,if,is,channel,open,start,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws Exception;1537204343;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws Exception {_        if (isChannelOpen()) {_            _            start()__            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,exception,if,is,channel,open,start,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws Exception;1548175645;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws Exception {_        if (isChannelOpen()) {_            _            start()__            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,exception,if,is,channel,open,start,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1453969280;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        }_        log.info("Attempting to open a new rabbitMQ channel")__        Connection conn = consumer.getConnection()__        channel = openChannel(conn)__        _        start()__    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1461921869;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        }_        log.info("Attempting to open a new rabbitMQ channel")__        Connection conn = consumer.getConnection()__        channel = openChannel(conn)__        _        start()__    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1464083528;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        }_        log.info("Attempting to open a new rabbitMQ channel")__        Connection conn = consumer.getConnection()__        channel = openChannel(conn)__        _        start()__    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1471357332;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        }_        log.info("Attempting to open a new rabbitMQ channel")__        Connection conn = consumer.getConnection()__        channel = openChannel(conn)__        _        start()__    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1471357400;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        }_        log.info("Attempting to open a new rabbitMQ channel")__        Connection conn = consumer.getConnection()__        channel = openChannel(conn)__        _        start()__    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1471357655;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        }_        log.info("Attempting to open a new rabbitMQ channel")__        Connection conn = consumer.getConnection()__        channel = openChannel(conn)__        _        start()__    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1506407330;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        } else if (!isChannelOpen() && this.consumer.getEndpoint().getAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (!this.consumer.getEndpoint().getAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,else,if,is,channel,open,this,consumer,get,endpoint,get,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,this,consumer,get,endpoint,get,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1515240163;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1517561276;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1530520107;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1531462660;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void reconnect() throws IOException, TimeoutException;1531462865;If the RabbitMQ connection is good this returns without changing_anything. If the connection is down it will attempt to reconnect;public void reconnect() throws IOException, TimeoutException {_        if (isChannelOpen()) {_            _            return__        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {_            _            throw new IOException("Waiting for channel to re-open.")__        } else if (channel == null || !isAutomaticRecoveryEnabled()) {_            log.info("Attempting to open a new rabbitMQ channel")__            Connection conn = consumer.getConnection()__            channel = openChannel(conn)__            _            start()__        }_    };if,the,rabbit,mq,connection,is,good,this,returns,without,changing,anything,if,the,connection,is,down,it,will,attempt,to,reconnect;public,void,reconnect,throws,ioexception,timeout,exception,if,is,channel,open,return,else,if,channel,null,channel,is,open,is,automatic,recovery,enabled,throw,new,ioexception,waiting,for,channel,to,re,open,else,if,channel,null,is,automatic,recovery,enabled,log,info,attempting,to,open,a,new,rabbit,mq,channel,connection,conn,consumer,get,connection,channel,open,channel,conn,start
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1453969280;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null) {_            channel.basicCancel(tag)__        }_        try {_            channel.close()__        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1461921869;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null) {_            channel.basicCancel(tag)__        }_        try {_            channel.close()__        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,channel,basic,cancel,tag,try,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1464083528;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1471357332;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_			lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_            lock.release()__		} catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_        	log.error("Thread Interrupted!")__        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,lock,release,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1471357400;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_			lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_		} catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_        	log.error("Thread Interrupted!")__        } finally {_            lock.release()__			_		}_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1471357655;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_            log.error("Thread Interrupted!")__        } finally {_            lock.release()___        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1506407330;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_            log.error("Thread Interrupted!")__        } finally {_            lock.release()___        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1515240163;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_            log.error("Thread Interrupted!")__        } finally {_            lock.release()___        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1517561276;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_            log.error("Thread Interrupted!")__        } finally {_            lock.release()___        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1530520107;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_            log.error("Thread Interrupted!")__        } finally {_            lock.release()___        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1531462660;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_            log.error("Thread Interrupted!")__        } finally {_            lock.release()___        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void stop() throws IOException, TimeoutException;1531462865;Unbind consumer from channel;public void stop() throws IOException, TimeoutException {_        stopping = true__        if (channel == null) {_            return__        }_        if (tag != null && isChannelOpen()) {_            channel.basicCancel(tag)__        }_        try {_            lock.acquire()__            if (isChannelOpen()) {_                channel.close()__            }_        } catch (TimeoutException e) {_            log.error("Timeout occured")__            throw e__        } catch (InterruptedException e1) {_            log.error("Thread Interrupted!")__        } finally {_            lock.release()___        }_    };unbind,consumer,from,channel;public,void,stop,throws,ioexception,timeout,exception,stopping,true,if,channel,null,return,if,tag,null,is,channel,open,channel,basic,cancel,tag,try,lock,acquire,if,is,channel,open,channel,close,catch,timeout,exception,e,log,error,timeout,occured,throw,e,catch,interrupted,exception,e1,log,error,thread,interrupted,finally,lock,release
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1453969280;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Recieved shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,recieved,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1461921869;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Recieved shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,recieved,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1464083528;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Recieved shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,recieved,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1471357332;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Recieved shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,recieved,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1471357400;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Recieved shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,recieved,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1471357655;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1506407330;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1515240163;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1517561276;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1530520107;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again")___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1531462660;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again." + " Caused by: " + e.getMessage())___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,caused,by,e,get,message,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1531462865;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !stopping) {_                try {_                    reconnect()__                    connected = true__                } catch (IOException | TimeoutException e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again. Caused by: " + e.getMessage() + ". Stacktrace logged at DEBUG logging level.")__                    _                    log.debug(e.getMessage(), e)___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,stopping,try,reconnect,connected,true,catch,ioexception,timeout,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,caused,by,e,get,message,stacktrace,logged,at,debug,logging,level,log,debug,e,get,message,e,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1535026090;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !isStopping()) {_                try {_                    reconnect()__                    connected = true__                } catch (Exception e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again. Caused by: " + e.getMessage() + ". Stacktrace logged at DEBUG logging level.")__                    _                    log.debug(e.getMessage(), e)___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,is,stopping,try,reconnect,connected,true,catch,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,caused,by,e,get,message,stacktrace,logged,at,debug,logging,level,log,debug,e,get,message,e,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1536687142;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !isStopping()) {_                try {_                    reconnect()__                    connected = true__                } catch (Exception e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again. Caused by: {}. Stacktrace logged at DEBUG logging level.", e.getMessage())__                    _                    log.debug(e.getMessage(), e)___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,is,stopping,try,reconnect,connected,true,catch,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,caused,by,stacktrace,logged,at,debug,logging,level,e,get,message,log,debug,e,get,message,e,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1537204343;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !isStopping()) {_                try {_                    reconnect()__                    connected = true__                } catch (Exception e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again. Caused by: {}. Stacktrace logged at DEBUG logging level.", e.getMessage())__                    _                    log.debug(e.getMessage(), e)___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,is,stopping,try,reconnect,connected,true,catch,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,caused,by,stacktrace,logged,at,debug,logging,level,e,get,message,log,debug,e,get,message,e,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);1548175645;No-op implementation of {@link Consumer#handleShutdownSignal}.;public void handleShutdownSignal(String consumerTag, ShutdownSignalException sig) {_        log.info("Received shutdown signal on the rabbitMQ channel")___        _        if (!sig.isInitiatedByApplication()) {_            _            boolean connected = false__            while (!connected && !isStopping()) {_                try {_                    reconnect()__                    connected = true__                } catch (Exception e) {_                    log.warn("Unable to obtain a RabbitMQ channel. Will try again. Caused by: {}. Stacktrace logged at DEBUG logging level.", e.getMessage())__                    _                    log.debug(e.getMessage(), e)___                    Integer networkRecoveryInterval = consumer.getEndpoint().getNetworkRecoveryInterval()__                    final long connectionRetryInterval = networkRecoveryInterval != null && networkRecoveryInterval > 0_                            ? networkRecoveryInterval : 100L__                    try {_                        Thread.sleep(connectionRetryInterval)__                    } catch (InterruptedException e1) {_                        Thread.currentThread().interrupt()__                    }_                }_            }_        }_    };no,op,implementation,of,link,consumer,handle,shutdown,signal;public,void,handle,shutdown,signal,string,consumer,tag,shutdown,signal,exception,sig,log,info,received,shutdown,signal,on,the,rabbit,mq,channel,if,sig,is,initiated,by,application,boolean,connected,false,while,connected,is,stopping,try,reconnect,connected,true,catch,exception,e,log,warn,unable,to,obtain,a,rabbit,mq,channel,will,try,again,caused,by,stacktrace,logged,at,debug,logging,level,e,get,message,log,debug,e,get,message,e,integer,network,recovery,interval,consumer,get,endpoint,get,network,recovery,interval,final,long,connection,retry,interval,network,recovery,interval,null,network,recovery,interval,0,network,recovery,interval,100l,try,thread,sleep,connection,retry,interval,catch,interrupted,exception,e1,thread,current,thread,interrupt
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1453969280;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        _        log.debug("Recieved cancel signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,recieved,cancel,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1461921869;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        _        log.debug("Recieved cancel signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,recieved,cancel,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1464083528;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        _        log.debug("Recieved cancel signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,recieved,cancel,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1471357332;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        _        log.debug("Recieved cancel signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,recieved,cancel,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1471357400;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        _        log.debug("Recieved cancel signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,recieved,cancel,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1471357655;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        _        log.debug("Received cancel signal on the rabbitMQ channel")__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1506407330;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)__        this.start()__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,this,start
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1515240163;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)__        this.start()__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,this,start
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1517561276;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)__        this.start()__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,this,start
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1530520107;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)__        this.start()__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,this,start
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1531462660;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)__        this.start()__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,this,start
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1531462865;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)__        this.start()__    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,this,start
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1535026090;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)___        try {_            this.start()__        } catch (Exception e) {_            throw new IOException("Error starting consumer", e)__        }_    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,try,this,start,catch,exception,e,throw,new,ioexception,error,starting,consumer,e
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1536687142;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)___        try {_            this.start()__        } catch (Exception e) {_            throw new IOException("Error starting consumer", e)__        }_    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,try,this,start,catch,exception,e,throw,new,ioexception,error,starting,consumer,e
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1537204343;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)___        try {_            this.start()__        } catch (Exception e) {_            throw new IOException("Error starting consumer", e)__        }_    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,try,this,start,catch,exception,e,throw,new,ioexception,error,starting,consumer,e
RabbitConsumer -> public void handleCancel(String consumerTag) throws IOException;1548175645;No-op implementation of {@link Consumer#handleCancel(String)}__@param consumerTag_the defined consumer tag (client- or server-generated);public void handleCancel(String consumerTag) throws IOException {_        log.debug("Received cancel signal on the rabbitMQ channel.")___        try {_            channel.basicCancel(tag)__        } catch (Exception e) {_            _        }__        this.consumer.getEndpoint().declareExchangeAndQueue(channel)___        try {_            this.start()__        } catch (Exception e) {_            throw new IOException("Error starting consumer", e)__        }_    };no,op,implementation,of,link,consumer,handle,cancel,string,param,consumer,tag,the,defined,consumer,tag,client,or,server,generated;public,void,handle,cancel,string,consumer,tag,throws,ioexception,log,debug,received,cancel,signal,on,the,rabbit,mq,channel,try,channel,basic,cancel,tag,catch,exception,e,this,consumer,get,endpoint,declare,exchange,and,queue,channel,try,this,start,catch,exception,e,throw,new,ioexception,error,starting,consumer,e
