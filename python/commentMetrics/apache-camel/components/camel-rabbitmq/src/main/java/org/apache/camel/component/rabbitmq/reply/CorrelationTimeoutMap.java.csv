commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void setListener(CorrelationListener listener) {     // there is only one listener needed     this.listener = listener. }
false;public;2;21;;public boolean onEviction(String key, ReplyHandler value) {     try {         if (listener != null) {             listener.onEviction(key).         }     } catch (Throwable e) {     // ignore     }     // trigger timeout     try {         value.onTimeout(key).     } catch (Throwable e) {         // must ignore so we ensure we evict the element         log.warn("Error processing onTimeout for correlationID: " + key + " due: " + e.getMessage() + ". This exception is ignored.", e).     }     // return true to remove the element     log.trace("Evicted correlationID: {}", key).     return true. }
false;public;1;6;;@Override public ReplyHandler get(String key) {     ReplyHandler answer = super.get(key).     log.trace("Get correlationID: {} -> {}", key, answer != null).     return answer. }
false;public;3;20;;@Override public ReplyHandler put(String key, ReplyHandler value, long timeoutMillis) {     try {         if (listener != null) {             listener.onPut(key).         }     } catch (Throwable e) {     // ignore     }     ReplyHandler result.     if (timeoutMillis <= 0) {         // no timeout (must use Integer.MAX_VALUE)         result = super.put(key, value, Integer.MAX_VALUE).     } else {         result = super.put(key, value, timeoutMillis).     }     log.debug("Added correlationID: {} to timeout after: {} millis", key, timeoutMillis).     return result. }
false;public;3;26;;@Override public ReplyHandler putIfAbsent(String key, ReplyHandler value, long timeoutMillis) {     log.trace("putIfAbsent with key {}", key).     try {         if (listener != null) {             listener.onPut(key).         }     } catch (Throwable e) {     // ignore     }     ReplyHandler result.     if (timeoutMillis <= 0) {         // no timeout (must use Integer.MAX_VALUE)         result = super.putIfAbsent(key, value, Integer.MAX_VALUE).     } else {         result = super.putIfAbsent(key, value, timeoutMillis).     }     if (result == null) {         log.trace("Added correlationID: {} to timeout after: {} millis", key, timeoutMillis).     } else {         log.trace("Duplicate correlationID: {} detected", key).     }     return result. }
false;public;1;14;;@Override public ReplyHandler remove(String key) {     try {         if (listener != null) {             listener.onRemove(key).         }     } catch (Throwable e) {     // ignore     }     ReplyHandler answer = super.remove(key).     log.trace("Removed correlationID: {} -> {}", key, answer != null).     return answer. }
