commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;9;/**  * Helper method for creating a RabbitMQ connection to the test instance of the  * RabbitMQ server.  * @return  * @throws IOException  * @throws TimeoutException  */ ;/**  * Helper method for creating a RabbitMQ connection to the test instance of the  * RabbitMQ server.  * @return  * @throws IOException  * @throws TimeoutException  */ protected Connection connection() throws IOException, TimeoutException {     ConnectionFactory factory = new ConnectionFactory().     factory.setHost("localhost").     factory.setPort(5672).     factory.setUsername("cameltest").     factory.setPassword("cameltest").     factory.setVirtualHost("/").     return factory.newConnection(). }
true;protected,static;0;9;/**  * Helper method for creating a Qpid Broker-J system configuration for the  * initiate of the local AMQP server.  */ ;/**  * Helper method for creating a Qpid Broker-J system configuration for the  * initiate of the local AMQP server.  */ protected static Map<String, Object> createQpidSystemConfig() {     Map<String, Object> attributes = new HashMap<>().     URL initialConfig = AbstractRabbitMQIntTest.class.getClassLoader().getResource(INITIAL_CONFIGURATION).     attributes.put(ConfiguredObject.TYPE, "Memory").     attributes.put(SystemConfig.INITIAL_CONFIGURATION_LOCATION, initialConfig.toExternalForm()).     attributes.put(SystemConfig.STARTUP_LOGGED_TO_SYSTEM_OUT, false).     return attributes. }
