commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from(from).to(to).     from(headersExchangeWithQueue).to(to).     from(headersExchangeWithQueueDefiniedInline).to(to). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(from).to(to).             from(headersExchangeWithQueue).to(to).             from(headersExchangeWithQueueDefiniedInline).to(to).         }     }. }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     Map<String, Object> bindingArgs = new HashMap<>().     jndi.bind("args", bindingArgs).     return jndi. }
false;public;0;14;;@Test public void sentMessageIsReceived() throws InterruptedException, IOException, TimeoutException {     to.expectedMessageCount(1).     to.expectedHeaderReceived(RabbitMQConstants.REPLY_TO, "myReply").     AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties.Builder().     properties.replyTo("myReply").     Channel channel = connection().createChannel().     channel.basicPublish(EXCHANGE, "", properties.build(), MSG.getBytes()).     to.assertIsSatisfied(). }
false;public;0;14;;@Test public void sentMessageIsDeliveryModeSet() throws InterruptedException, IOException, TimeoutException {     to.expectedMessageCount(1).     to.expectedHeaderReceived(RabbitMQConstants.DELIVERY_MODE, 1).     AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties.Builder().     properties.deliveryMode(1).     Channel channel = connection().createChannel().     channel.basicPublish(EXCHANGE, "", properties.build(), MSG.getBytes()).     to.assertIsSatisfied(). }
false;public;0;16;;@Test public void sentMessageWithTimestampIsReceived() throws InterruptedException, IOException, TimeoutException {     Date timestamp = currentTimestampWithoutMillis().     to.expectedMessageCount(1).     to.expectedHeaderReceived(RabbitMQConstants.TIMESTAMP, timestamp).     AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties.Builder().     properties.timestamp(timestamp).     Channel channel = connection().createChannel().     channel.basicPublish(EXCHANGE, "", properties.build(), MSG.getBytes()).     to.assertIsSatisfied(). }
true;public;0;13;/**  * Tests the proper rabbit binding arguments are in place when the headersExchangeWithQueue is created.  * Should only receive messages with the header [foo=bar]  */ ;/**  * Tests the proper rabbit binding arguments are in place when the headersExchangeWithQueue is created.  * Should only receive messages with the header [foo=bar]  */ @Test public void sentMessageIsReceivedWithHeadersRouting() throws InterruptedException, IOException, TimeoutException {     // should only be one message that makes it through because only     // one has the correct header set     to.expectedMessageCount(1).     Channel channel = connection().createChannel().     channel.basicPublish(HEADERS_EXCHANGE, "", propertiesWithHeader("foo", "bar"), MSG.getBytes()).     channel.basicPublish(HEADERS_EXCHANGE, "", null, MSG.getBytes()).     channel.basicPublish(HEADERS_EXCHANGE, "", propertiesWithHeader("foo", "bra"), MSG.getBytes()).     to.assertIsSatisfied(). }
false;public;0;12;;@Test public void sentMessageIsReceivedWithHeadersRoutingMultiValueMapBindings() throws Exception {     to.expectedMessageCount(3).     Channel channel = connection().createChannel().     channel.basicPublish("ex7", "", propertiesWithHeader("fizz", "buzz"), MSG.getBytes()).     channel.basicPublish("ex7", "", propertiesWithHeader("fizz", "buzz"), MSG.getBytes()).     channel.basicPublish("ex7", "", propertiesWithHeader("fizz", "buzz"), MSG.getBytes()).     channel.basicPublish("ex7", "", propertiesWithHeader("fizz", "nope"), MSG.getBytes()).     to.assertIsSatisfied(). }
false;private;2;5;;private AMQP.BasicProperties propertiesWithHeader(String headerName, String headerValue) {     AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties.Builder().     properties.headers(Collections.singletonMap(headerName, headerValue)).     return properties.build(). }
false;private;0;5;;private Date currentTimestampWithoutMillis() {     Calendar calendar = Calendar.getInstance().     calendar.set(Calendar.MILLISECOND, 0).     return calendar.getTime(). }
