commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void configure() throws Exception {     from(foo).log("FOO received: ${body}").to(bar).     from(bar).log("BAR received: ${body}").to(mock).transform().simple("Bye ${body}"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(foo).log("FOO received: ${body}").to(bar).             from(bar).log("BAR received: ${body}").to(mock).transform().simple("Bye ${body}").         }     }. }
false;public;0;10;;@Test public void sentBasicInOnly() throws Exception {     mock.expectedBodiesReceived("World").     log.info("Sending to FOO").     template.sendBody(foo, "World").     log.info("Sending to FOO done").     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void sentBasicInOut() throws Exception {     mock.expectedBodiesReceived("World").     log.info("Sending to FOO").     String out = template.requestBody(foo, "World", String.class).     assertEquals("Bye World", out).     log.info("Sending to FOO done").     mock.assertIsSatisfied(). }
false;public;0;13;;@Test public void sentBasicInOutTwo() throws Exception {     mock.expectedBodiesReceived("World", "Camel").     log.info("Sending to FOO").     String out = template.requestBody(foo, "World", String.class).     assertEquals("Bye World", out).     out = template.requestBody(foo, "Camel", String.class).     assertEquals("Bye Camel", out).     log.info("Sending to FOO done").     mock.assertIsSatisfied(). }
