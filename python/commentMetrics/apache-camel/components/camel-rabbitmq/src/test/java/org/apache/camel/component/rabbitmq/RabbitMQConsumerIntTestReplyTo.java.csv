commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUpRabbitMQ() throws Exception {     connection = connection().     channel = connection.createChannel(). }
false;public;0;8;;@Override public void configure() throws Exception {     log.info("Building routes...").     from(from).log(body().toString()).setBody(simple(REPLY)). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     context().setTracing(true).     return new RouteBuilder() {          @Override         public void configure() throws Exception {             log.info("Building routes...").             from(from).log(body().toString()).setBody(simple(REPLY)).         }     }. }
false;public;0;12;;@Test public void replyMessageIsReceived() throws IOException, TimeoutException, InterruptedException {     final List<String> received = new ArrayList<>().     AMQP.BasicProperties.Builder prop = new AMQP.BasicProperties.Builder().     prop.replyTo(QUEUE).     channel.basicConsume(QUEUE, true, new ArrayPopulatingConsumer(received)).     channel.basicPublish(EXCHANGE, ROUTING_KEY, prop.build(), REQUEST.getBytes()).     assertThatBodiesReceivedIn(received, REPLY). }
false;private;2;8;;private void assertThatBodiesReceivedIn(final List<String> received, final String... expected) throws InterruptedException {     Thread.sleep(500).     assertListSize(received, expected.length).     for (String body : expected) {         assertEquals(body, received.get(0)).     } }
false;public;4;7;;@Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {     received.add(new String(body)). }
