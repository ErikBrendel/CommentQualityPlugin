commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").routeId("producer").log("sending ${body}").to(rabbitMQEndpoint).     from(rabbitMQEndpoint).routeId("consumer").log("got ${body}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("producer").log("sending ${body}").to(rabbitMQEndpoint).             from(rabbitMQEndpoint).routeId("consumer").log("got ${body}").to("mock:result").         }     }. }
false;public;0;29;;@Test public void testSuspendedResume() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedBodiesReceived("hello").     template.sendBody("hello").     assertMockEndpointsSatisfied().     context.getRouteController().resumeRoute("consumer").     // sleep a bit to ensure its properly suspended     Thread.sleep(2000).     resetMocks().     resultEndpoint.expectedMessageCount(0).     template.sendBody("Hello2").     assertMockEndpointsSatisfied(1, TimeUnit.SECONDS).     resetMocks().     resultEndpoint.expectedBodiesReceived("Hello2").     resultEndpoint.expectedMessageCount(1).     context.getRouteController().resumeRoute("consumer").     assertMockEndpointsSatisfied(). }
