commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override @SuppressWarnings("unchecked") public void configure() throws Exception {     from("direct:rabbitMQ").id("producingRoute").onException(AlreadyClosedException.class, ConnectException.class).maximumRedeliveries(10).redeliveryDelay(500L).end().log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint).     from(rabbitMQEndpoint).id("consumingRoute").log("Receiving message").to(consumingMockEndpoint). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         @SuppressWarnings("unchecked")         public void configure() throws Exception {             from("direct:rabbitMQ").id("producingRoute").onException(AlreadyClosedException.class, ConnectException.class).maximumRedeliveries(10).redeliveryDelay(500L).end().log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint).             from(rabbitMQEndpoint).id("consumingRoute").log("Receiving message").to(consumingMockEndpoint).         }     }. }
false;public;0;17;;@Test public void testSendEndReceive() throws Exception {     int nbMessages = 50.     int failedMessages = 0.     for (int i = 0. i < nbMessages. i++) {         try {             directProducer.sendBodyAndHeader("Message #" + i, RabbitMQConstants.ROUTING_KEY, "rk3").         } catch (CamelExecutionException e) {             log.debug("Can not send message", e).             failedMessages++.         }         Thread.sleep(500L).     }     producingMockEndpoint.expectedMessageCount(nbMessages - failedMessages).     consumingMockEndpoint.expectedMessageCount(nbMessages - failedMessages).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
