commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:rabbitMQ").id("producingRoute").log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint).     from(rabbitMQEndpoint).id("consumingRoute").log("Receiving message").to(consumingMockEndpoint). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:rabbitMQ").id("producingRoute").log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint).             from(rabbitMQEndpoint).id("consumingRoute").log("Receiving message").to(consumingMockEndpoint).         }     }. }
false;public;0;7;;@Override public void run() {     for (int i = 0. i < MESSAGE_COUNT. i++) {         directProducer.sendBodyAndHeader("Message #" + i, RabbitMQConstants.ROUTING_KEY, ROUTING_KEY).     } }
false;public;0;25;;@Test public void testSendEndReceive() throws Exception {     // Start producers     ExecutorService executorService = Executors.newFixedThreadPool(PRODUCER_COUNT).     List<Future<?>> futures = new ArrayList<>(PRODUCER_COUNT).     for (int i = 0. i < PRODUCER_COUNT. i++) {         futures.add(executorService.submit(new Runnable() {              @Override             public void run() {                 for (int i = 0. i < MESSAGE_COUNT. i++) {                     directProducer.sendBodyAndHeader("Message #" + i, RabbitMQConstants.ROUTING_KEY, ROUTING_KEY).                 }             }         })).     }     // Wait for producers to end     for (Future<?> future : futures) {         future.get(5, TimeUnit.SECONDS).     }     // Check message count     producingMockEndpoint.expectedMessageCount(PRODUCER_COUNT * MESSAGE_COUNT).     consumingMockEndpoint.expectedMessageCount(PRODUCER_COUNT * MESSAGE_COUNT).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
