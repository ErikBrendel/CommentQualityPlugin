commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:rabbitMQ").id("producingRoute").log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint).     from(rabbitMQEndpoint).onException(Exception.class).handled(false).end().id("consumingRoute").log("Receiving message").inOnly(consumingMockEndpoint).throwException(new Exception("Simulated unhandled exception")). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:rabbitMQ").id("producingRoute").log("Sending message").inOnly(rabbitMQEndpoint).to(producingMockEndpoint).             from(rabbitMQEndpoint).onException(Exception.class).handled(false).end().id("consumingRoute").log("Receiving message").inOnly(consumingMockEndpoint).throwException(new Exception("Simulated unhandled exception")).         }     }. }
false;public;0;10;;@Test public void testTrueRequeueHeaderWithUnandleExceptionCausesRequeue() throws Exception {     producingMockEndpoint.expectedMessageCount(1).     consumingMockEndpoint.setMinimumExpectedMessageCount(2).     directProducer.sendBodyAndHeader("Hello, World!", RabbitMQConstants.REQUEUE, true).     producingMockEndpoint.assertIsSatisfied().     consumingMockEndpoint.assertIsSatisfied(). }
