commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testPollingConsumer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived("test").     mock.expectedHeaderReceived(SshResult.EXIT_VALUE, 0).     mock.expectedHeaderReceived(SshResult.STDERR, "Error:test").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() {     from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A").to("mock:result").         }     }. }
