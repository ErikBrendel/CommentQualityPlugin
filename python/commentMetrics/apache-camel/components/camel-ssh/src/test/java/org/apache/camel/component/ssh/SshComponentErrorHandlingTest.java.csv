commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testRedelivery() throws Exception {     final String msg = "test".     MockEndpoint mockError = getMockEndpoint("mock:error").     mockError.expectedMinimumMessageCount(0).     MockEndpoint mock = getMockEndpoint("mock:success").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(msg).     mock.expectedHeaderReceived(Exchange.REDELIVERED, true).     sshd.stop().     template.sendBody("direct:redeliver", msg).     assertMockEndpointsSatisfied(). }
false;public;1;16;;@Override public void process(Exchange exchange) throws Exception {     final Message in = exchange.getIn().     final int count = in.getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).     final int maxCount = in.getHeader(Exchange.REDELIVERY_MAX_COUNTER, Integer.class).     log.info("Redelivery count = {}", count).     // Restart the sshd server before the last redelivery attempt     if (count >= (maxCount - 1)) {         if (sshd != null) {             sshd.start().             log.info("Restarting SSHD").         }     } }
false;public;0;29;;@Override public void configure() {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(3).redeliveryDelay(// speedup unit test by not waiting between redeliveries     0L).onRedelivery(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             final Message in = exchange.getIn().             final int count = in.getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).             final int maxCount = in.getHeader(Exchange.REDELIVERY_MAX_COUNTER, Integer.class).             log.info("Redelivery count = {}", count).             // Restart the sshd server before the last redelivery attempt             if (count >= (maxCount - 1)) {                 if (sshd != null) {                     sshd.start().                     log.info("Restarting SSHD").                 }             }         }     })).     from("direct:redeliver").tracing().to("ssh://smx:smx@localhost:" + port).to("mock:success"). }
false;protected;0;34;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(3).redeliveryDelay(// speedup unit test by not waiting between redeliveries             0L).onRedelivery(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     final Message in = exchange.getIn().                     final int count = in.getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).                     final int maxCount = in.getHeader(Exchange.REDELIVERY_MAX_COUNTER, Integer.class).                     log.info("Redelivery count = {}", count).                     // Restart the sshd server before the last redelivery attempt                     if (count >= (maxCount - 1)) {                         if (sshd != null) {                             sshd.start().                             log.info("Restarting SSHD").                         }                     }                 }             })).             from("direct:redeliver").tracing().to("ssh://smx:smx@localhost:" + port).to("mock:success").         }     }. }
