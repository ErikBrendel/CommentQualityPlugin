commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testProducerWithValidFile() throws Exception {     final String msg = "test".     MockEndpoint mock = getMockEndpoint("mock:password").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(msg).     mock.expectedHeaderReceived(SshResult.EXIT_VALUE, 0).     mock.expectedHeaderReceived(SshResult.STDERR, "Error:test").     template.sendBody("direct:ssh", msg).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testProducerWithInvalidFile() throws Exception {     final String msg = "test".     MockEndpoint mock = getMockEndpoint("mock:password").     mock.expectedMessageCount(0).     template.sendBody("direct:sshInvalid", msg).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testProducerWithInvalidFileWarnOnly() throws Exception {     final String msg = "test".     MockEndpoint mock = getMockEndpoint("mock:password").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(msg).     mock.expectedHeaderReceived(SshResult.EXIT_VALUE, 0).     mock.expectedHeaderReceived(SshResult.STDERR, "Error:test").     template.sendBody("direct:sshInvalidWarnOnly", msg).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testPollingConsumerWithValidKnownHostFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived("test").     mock.expectedHeaderReceived(SshResult.EXIT_VALUE, 0).     mock.expectedHeaderReceived(SshResult.STDERR, "Error:test").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Test public void testPollingConsumerWithInvalidKnownHostFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:resultInvalid").     mock.expectedMessageCount(0).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testPollingConsumerWithInvalidKnownHostFileWarnOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:resultInvalidWarnOnly").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived("test").     mock.expectedHeaderReceived(SshResult.EXIT_VALUE, 0).     mock.expectedHeaderReceived(SshResult.STDERR, "Error:test").     assertMockEndpointsSatisfied(). }
false;public;0;25;;@Override public void configure() {     onException(Exception.class).handled(true).to("mock:error").     from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_valid&failOnUnknownHost=true").to("mock:result").     from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_invalid&failOnUnknownHost=true").to("mock:resultInvalid").     from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_invalid").to("mock:resultInvalidWarnOnly").     from("direct:ssh").to("ssh://smx:smx@localhost:" + port + "?timeout=3000&knownHostsResource=classpath:known_hosts_valid&failOnUnknownHost=true").to("mock:password").     from("direct:sshInvalid").to("ssh://smx:smx@localhost:" + port + "?timeout=3000&knownHostsResource=classpath:known_hosts_invalid&failOnUnknownHost=true").to("mock:password").     from("direct:sshInvalidWarnOnly").to("ssh://smx:smx@localhost:" + port + "?timeout=3000&knownHostsResource=classpath:known_hosts_invalid").to("mock:password"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             onException(Exception.class).handled(true).to("mock:error").             from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_valid&failOnUnknownHost=true").to("mock:result").             from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_invalid&failOnUnknownHost=true").to("mock:resultInvalid").             from("ssh://smx:smx@localhost:" + port + "?useFixedDelay=true&delay=40000&pollCommand=test%0A&knownHostsResource=classpath:known_hosts_invalid").to("mock:resultInvalidWarnOnly").             from("direct:ssh").to("ssh://smx:smx@localhost:" + port + "?timeout=3000&knownHostsResource=classpath:known_hosts_valid&failOnUnknownHost=true").to("mock:password").             from("direct:sshInvalid").to("ssh://smx:smx@localhost:" + port + "?timeout=3000&knownHostsResource=classpath:known_hosts_invalid&failOnUnknownHost=true").to("mock:password").             from("direct:sshInvalidWarnOnly").to("ssh://smx:smx@localhost:" + port + "?timeout=3000&knownHostsResource=classpath:known_hosts_invalid").to("mock:password").         }     }. }
