commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String[] getResources() {     return resources. }
false;public;1;3;;public void setResources(String[] resources) {     this.resources = resources. }
false;public;0;3;;public Supplier<char[]> getPasswordFinder() {     return passwordFinder. }
false;public;1;3;;public void setPasswordFinder(Supplier<char[]> passwordFinder) {     this.passwordFinder = passwordFinder. }
false;public;0;44;;@Override public Iterable<KeyPair> loadKeys() {     if (!SecurityUtils.isBouncyCastleRegistered()) {         throw new IllegalStateException("BouncyCastle must be registered as a JCE provider").     }     final List<KeyPair> keys = new ArrayList<>(this.resources.length).     for (String resource : resources) {         PEMParser r = null.         InputStreamReader isr = null.         InputStream is = null.         try {             is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, resource).             isr = new InputStreamReader(is).             r = new PEMParser(isr).             Object o = r.readObject().             JcaPEMKeyConverter pemConverter = new JcaPEMKeyConverter().             pemConverter.setProvider("BC").             if (passwordFinder != null && o instanceof PEMEncryptedKeyPair) {                 JcePEMDecryptorProviderBuilder decryptorBuilder = new JcePEMDecryptorProviderBuilder().                 PEMDecryptorProvider pemDecryptor = decryptorBuilder.build(passwordFinder.get()).                 o = pemConverter.getKeyPair(((PEMEncryptedKeyPair) o).decryptKeyPair(pemDecryptor)).             }             if (o instanceof PEMKeyPair) {                 o = pemConverter.getKeyPair((PEMKeyPair) o).                 keys.add((KeyPair) o).             } else if (o instanceof KeyPair) {                 keys.add((KeyPair) o).             }         } catch (Exception e) {             log.warn("Unable to read key", e).         } finally {             IoUtils.closeQuietly(r, is, isr).         }     }     return keys. }
