commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     client = SshClient.setUpDefaultClient().     client.start().     super.doStart(). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     super.doStop().     if (client != null) {         client.stop().         client = null.     } }
false;protected;0;32;;@Override protected int poll() throws Exception {     if (!isRunAllowed()) {         return 0.     }     String command = endpoint.getPollCommand().     Exchange exchange = endpoint.createExchange().     String knownHostResource = endpoint.getKnownHostsResource().     if (knownHostResource != null) {         client.setServerKeyVerifier(new ResourceBasedSSHKeyVerifier(exchange.getContext(), knownHostResource, endpoint.isFailOnUnknownHost())).     }     SshResult result = SshHelper.sendExecCommand(exchange.getIn().getHeaders(), command, endpoint, client).     exchange.getIn().setBody(result.getStdout()).     exchange.getIn().setHeader(SshResult.EXIT_VALUE, result.getExitValue()).     exchange.getIn().setHeader(SshResult.STDERR, result.getStderr()).     try {         // send message to next processor in the route         getProcessor().process(exchange).         // number of messages polled         return 1.     } finally {         // log exception if an exception occurred and was not handled         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     } }
