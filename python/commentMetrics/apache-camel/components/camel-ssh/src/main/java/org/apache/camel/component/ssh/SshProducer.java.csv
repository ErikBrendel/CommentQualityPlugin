commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     client = SshClient.setUpDefaultClient().     client.start().     super.doStart(). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     super.doStop().     if (client != null) {         client.stop().         client = null.     } }
false;public;1;25;;@Override public void process(Exchange exchange) throws Exception {     final Message in = exchange.getIn().     String command = in.getMandatoryBody(String.class).     final Map<String, Object> headers = exchange.getIn().getHeaders().     try {         String knownHostResource = endpoint.getKnownHostsResource().         if (knownHostResource != null) {             client.setServerKeyVerifier(new ResourceBasedSSHKeyVerifier(exchange.getContext(), knownHostResource, endpoint.isFailOnUnknownHost())).         }         SshResult result = SshHelper.sendExecCommand(headers, command, endpoint, client).         exchange.getOut().setBody(result.getStdout()).         exchange.getOut().setHeader(SshResult.EXIT_VALUE, result.getExitValue()).         exchange.getOut().setHeader(SshResult.STDERR, result.getStderr()).     } catch (Exception e) {         throw new CamelExchangeException("Cannot execute command: " + command, exchange, e).     }     // propagate headers and attachments     exchange.getOut().getHeaders().putAll(in.getHeaders()).     exchange.getOut().setAttachments(in.getAttachments()). }
