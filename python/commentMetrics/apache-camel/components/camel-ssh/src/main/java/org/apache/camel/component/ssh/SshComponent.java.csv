commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;10;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     URI u = new URI(uri).     SshConfiguration newConfig = configuration.copy().     newConfig.configure(u).     SshEndpoint endpoint = new SshEndpoint(uri, this, newConfig).     setProperties(endpoint.getConfiguration(), parameters).     return endpoint. }
false;public;0;3;;public SshConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * To use the shared SSH configuration  */ ;/**  * To use the shared SSH configuration  */ public void setConfiguration(SshConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public String getHost() {     return getConfiguration().getHost(). }
true;public;1;3;/**  * Sets the hostname of the remote SSH server.  *  * @param host String representing hostname of SSH server.  */ ;/**  * Sets the hostname of the remote SSH server.  *  * @param host String representing hostname of SSH server.  */ public void setHost(String host) {     getConfiguration().setHost(host). }
false;public;0;3;;public int getPort() {     return getConfiguration().getPort(). }
true;public;1;3;/**  * Sets the port number for the remote SSH server.  *  * @param port int representing port number on remote host. Defaults to 22.  */ ;/**  * Sets the port number for the remote SSH server.  *  * @param port int representing port number on remote host. Defaults to 22.  */ public void setPort(int port) {     getConfiguration().setPort(port). }
false;public;0;3;;public String getUsername() {     return getConfiguration().getUsername(). }
true;public;1;4;/**  * Sets the username to use in logging into the remote SSH server.  *  * @param username String representing login username.  */ ;/**  * Sets the username to use in logging into the remote SSH server.  *  * @param username String representing login username.  */ @Metadata(label = "security", secret = true) public void setUsername(String username) {     getConfiguration().setUsername(username). }
false;public;0;3;;public String getPassword() {     return getConfiguration().getPassword(). }
true;public;1;4;/**  * Sets the password to use in connecting to remote SSH server.  * Requires keyPairProvider to be set to null.  *  * @param password String representing password for username at remote host.  */ ;/**  * Sets the password to use in connecting to remote SSH server.  * Requires keyPairProvider to be set to null.  *  * @param password String representing password for username at remote host.  */ @Metadata(label = "security", secret = true) public void setPassword(String password) {     getConfiguration().setPassword(password). }
false;public;0;3;;public String getPollCommand() {     return getConfiguration().getPollCommand(). }
true;public;1;3;/**  * Sets the command string to send to the remote SSH server during every poll cycle.  * Only works with camel-ssh component being used as a consumer, i.e. from("ssh://...").  * You may need to end your command with a newline, and that must be URL encoded %0A  *  * @param pollCommand String representing the command to send.  */ ;/**  * Sets the command string to send to the remote SSH server during every poll cycle.  * Only works with camel-ssh component being used as a consumer, i.e. from("ssh://...").  * You may need to end your command with a newline, and that must be URL encoded %0A  *  * @param pollCommand String representing the command to send.  */ public void setPollCommand(String pollCommand) {     getConfiguration().setPollCommand(pollCommand). }
false;public;0;3;;public KeyPairProvider getKeyPairProvider() {     return getConfiguration().getKeyPairProvider(). }
true;public;1;4;/**  * Sets the KeyPairProvider reference to use when connecting using Certificates to the remote SSH Server.  *  * @param keyPairProvider KeyPairProvider reference to use in authenticating. If set to 'null',  *                        then will attempt to connect using username/password settings.  *  * @see KeyPairProvider  */ ;/**  * Sets the KeyPairProvider reference to use when connecting using Certificates to the remote SSH Server.  *  * @param keyPairProvider KeyPairProvider reference to use in authenticating. If set to 'null',  *                        then will attempt to connect using username/password settings.  *  * @see KeyPairProvider  */ @Metadata(label = "security") public void setKeyPairProvider(KeyPairProvider keyPairProvider) {     getConfiguration().setKeyPairProvider(keyPairProvider). }
false;public;0;3;;public String getKeyType() {     return getConfiguration().getKeyType(). }
true;public;1;4;/**  * Sets the key type to pass to the KeyPairProvider as part of authentication.  * KeyPairProvider.loadKey(...) will be passed this value. Defaults to "ssh-rsa".  *  * @param keyType String defining the type of KeyPair to use for authentication.  *  * @see KeyPairProvider  */ ;/**  * Sets the key type to pass to the KeyPairProvider as part of authentication.  * KeyPairProvider.loadKey(...) will be passed this value. Defaults to "ssh-rsa".  *  * @param keyType String defining the type of KeyPair to use for authentication.  *  * @see KeyPairProvider  */ @Metadata(label = "security") public void setKeyType(String keyType) {     getConfiguration().setKeyType(keyType). }
false;public;0;3;;public long getTimeout() {     return getConfiguration().getTimeout(). }
true;public;1;3;/**  * Sets the timeout in milliseconds to wait in establishing the remote SSH server connection.  * Defaults to 30000 milliseconds.  *  * @param timeout long milliseconds to wait.  */ ;/**  * Sets the timeout in milliseconds to wait in establishing the remote SSH server connection.  * Defaults to 30000 milliseconds.  *  * @param timeout long milliseconds to wait.  */ public void setTimeout(long timeout) {     getConfiguration().setTimeout(timeout). }
true;public;0;4;/**  * @deprecated As of version 2.11, replaced by {@link #getCertResource()}  */ ;/**  * @deprecated As of version 2.11, replaced by {@link #getCertResource()}  */ @Deprecated public String getCertFilename() {     return getConfiguration().getCertFilename(). }
true;public;1;5;/**  * Sets the resource path of the certificate to use for Authentication.  *  * @deprecated As of version 2.11, replaced by {@link #setCertResource(String)}  */ ;/**  * Sets the resource path of the certificate to use for Authentication.  *  * @deprecated As of version 2.11, replaced by {@link #setCertResource(String)}  */ @Deprecated @Metadata(label = "security", deprecationNote = "As of version 2.11, replaced by certResource.") public void setCertFilename(String certFilename) {     getConfiguration().setCertFilename(certFilename). }
false;public;0;3;;public String getCertResource() {     return getConfiguration().getCertResource(). }
true;public;1;4;/**  * Sets the resource path of the certificate to use for Authentication.  * Will use {@link ResourceHelperKeyPairProvider} to resolve file based certificate, and depends on keyType setting.  *  * @param certResource String file, classpath, or http url for the certificate  */ ;/**  * Sets the resource path of the certificate to use for Authentication.  * Will use {@link ResourceHelperKeyPairProvider} to resolve file based certificate, and depends on keyType setting.  *  * @param certResource String file, classpath, or http url for the certificate  */ @Metadata(label = "security") public void setCertResource(String certResource) {     getConfiguration().setCertResource(certResource). }
true;public;1;4;/**  * Sets the channel type to pass to the Channel as part of command execution.  * Defaults to "exec".  *  * @param channelType  *            String defining the type of Channel to use for command execution.  *  * @see org.apache.sshd.common.channel.Channel  */ ;/**  * Sets the channel type to pass to the Channel as part of command execution.  * Defaults to "exec".  *  * @param channelType  *            String defining the type of Channel to use for command execution.  *  * @see org.apache.sshd.common.channel.Channel  */ @Metadata(label = "advanced") public void setChannelType(String channelType) {     getConfiguration().setChannelType(channelType). }
true;public;1;4;/**  * Sets the shellPrompt to be dropped when response is read after command execution  *  * @param shellPrompt  *            String defining ending string of command line which has to be dropped when response is  *            read after command execution.  */ ;/**  * Sets the shellPrompt to be dropped when response is read after command execution  *  * @param shellPrompt  *            String defining ending string of command line which has to be dropped when response is  *            read after command execution.  */ @Metadata(label = "advanced") public void setShellPrompt(String shellPrompt) {     getConfiguration().setShellPrompt(shellPrompt). }
true;public;1;4;/**  * Sets the sleep period in milliseconds to wait reading response from shell prompt.  * Defaults to 100 milliseconds.  *  * @param sleepForShellPrompt  *            long milliseconds to wait.  */ ;/**  * Sets the sleep period in milliseconds to wait reading response from shell prompt.  * Defaults to 100 milliseconds.  *  * @param sleepForShellPrompt  *            long milliseconds to wait.  */ @Metadata(label = "advanced") public void setSleepForShellPrompt(long sleepForShellPrompt) {     getConfiguration().setSleepForShellPrompt(sleepForShellPrompt). }
