commented;modifiers;parameterAmount;loc;comment;code
false;public;1;26;;public void configure(URI uri) {     // UserInfo can contain both username and password as: user:pwd@sshserver     // see: http://en.wikipedia.org/wiki/URI_scheme     String username = uri.getUserInfo().     String pw = null.     if (username != null && username.contains(":")) {         pw = StringHelper.after(username, ":").         username = StringHelper.before(username, ":").     }     if (username != null) {         setUsername(username).     }     if (pw != null) {         setPassword(pw).     }     if (getHost() == null && uri.getHost() != null) {         setHost(uri.getHost()).     }     // URI.getPort returns -1 if port not defined, else use default port     int uriPort = uri.getPort().     if (getPort() == DEFAULT_SSH_PORT && uriPort != -1) {         setPort(uriPort).     } }
false;public;0;7;;public SshConfiguration copy() {     try {         return (SshConfiguration) clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;3;/**  * Sets the username to use in logging into the remote SSH server.  *  * @param username  *            String representing login username.  */ ;/**  * Sets the username to use in logging into the remote SSH server.  *  * @param username  *            String representing login username.  */ public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * Sets the hostname of the remote SSH server.  *  * @param host  *            String representing hostname of SSH server.  */ ;/**  * Sets the hostname of the remote SSH server.  *  * @param host  *            String representing hostname of SSH server.  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public int getPort() {     return port. }
true;public;1;3;/**  * Sets the port number for the remote SSH server.  *  * @param port  *            int representing port number on remote host. Defaults to 22.  */ ;/**  * Sets the port number for the remote SSH server.  *  * @param port  *            int representing port number on remote host. Defaults to 22.  */ public void setPort(int port) {     this.port = port. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Sets the password to use in connecting to remote SSH server. Requires  * keyPairProvider to be set to null.  *  * @param password  *            String representing password for username at remote host.  */ ;/**  * Sets the password to use in connecting to remote SSH server. Requires  * keyPairProvider to be set to null.  *  * @param password  *            String representing password for username at remote host.  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public String getPollCommand() {     return pollCommand. }
true;public;1;3;/**  * Sets the command string to send to the remote SSH server during every poll  * cycle. Only works with camel-ssh component being used as a consumer, i.e.  * from("ssh://...") You may need to end your command with a newline, and that  * must be URL encoded %0A  *  * @param pollCommand  *            String representing the command to send.  */ ;/**  * Sets the command string to send to the remote SSH server during every poll  * cycle. Only works with camel-ssh component being used as a consumer, i.e.  * from("ssh://...") You may need to end your command with a newline, and that  * must be URL encoded %0A  *  * @param pollCommand  *            String representing the command to send.  */ public void setPollCommand(String pollCommand) {     this.pollCommand = pollCommand. }
false;public;0;3;;public KeyPairProvider getKeyPairProvider() {     return keyPairProvider. }
true;public;1;3;/**  * Sets the KeyPairProvider reference to use when connecting using Certificates  * to the remote SSH Server.  *  * @param keyPairProvider  *            KeyPairProvider reference to use in authenticating. If set to  *            'null', then will attempt to connect using username/password  *            settings.  *  * @see KeyPairProvider  */ ;/**  * Sets the KeyPairProvider reference to use when connecting using Certificates  * to the remote SSH Server.  *  * @param keyPairProvider  *            KeyPairProvider reference to use in authenticating. If set to  *            'null', then will attempt to connect using username/password  *            settings.  *  * @see KeyPairProvider  */ public void setKeyPairProvider(KeyPairProvider keyPairProvider) {     this.keyPairProvider = keyPairProvider. }
false;public;0;3;;public String getKeyType() {     return keyType. }
true;public;1;3;/**  * Sets the key type to pass to the KeyPairProvider as part of authentication.  * KeyPairProvider.loadKey(...) will be passed this value. Defaults to  * "ssh-rsa".  *  * @param keyType  *            String defining the type of KeyPair to use for authentication.  *  * @see KeyPairProvider  */ ;/**  * Sets the key type to pass to the KeyPairProvider as part of authentication.  * KeyPairProvider.loadKey(...) will be passed this value. Defaults to  * "ssh-rsa".  *  * @param keyType  *            String defining the type of KeyPair to use for authentication.  *  * @see KeyPairProvider  */ public void setKeyType(String keyType) {     this.keyType = keyType. }
false;public;0;3;;public long getTimeout() {     return timeout. }
true;public;1;3;/**  * Sets the timeout in milliseconds to wait in establishing the remote SSH  * server connection. Defaults to 30000 milliseconds.  *  * @param timeout  *            long milliseconds to wait.  */ ;/**  * Sets the timeout in milliseconds to wait in establishing the remote SSH  * server connection. Defaults to 30000 milliseconds.  *  * @param timeout  *            long milliseconds to wait.  */ public void setTimeout(long timeout) {     this.timeout = timeout. }
true;public;0;4;/**  * @deprecated As of version 2.11, replaced by {@link #getCertResource()}  */ ;/**  * @deprecated As of version 2.11, replaced by {@link #getCertResource()}  */ @Deprecated public String getCertFilename() {     return ((certResource != null) && certResource.startsWith("file:")) ? certResource.substring(5) : null. }
true;public;1;5;/**  * @deprecated As of version 2.11, replaced by {@link #setCertResource(String)}  */ ;/**  * @deprecated As of version 2.11, replaced by {@link #setCertResource(String)}  */ @Deprecated @Metadata(deprecationNote = "As of version 2.11, replaced by certResource.") public void setCertFilename(String certFilename) {     this.certResource = "file:" + certFilename. }
false;public;0;3;;public String getCertResource() {     return certResource. }
true;public;1;3;/**  * Sets the resource path of the certificate to use for Authentication. Will use  * {@link ResourceHelperKeyPairProvider} to resolve file based certificate, and  * depends on keyType setting.  *  * @param certResource  *            String file, classpath, or http url for the certificate  */ ;/**  * Sets the resource path of the certificate to use for Authentication. Will use  * {@link ResourceHelperKeyPairProvider} to resolve file based certificate, and  * depends on keyType setting.  *  * @param certResource  *            String file, classpath, or http url for the certificate  */ public void setCertResource(String certResource) {     this.certResource = certResource. }
false;public;0;3;;public String getKnownHostsResource() {     return knownHostsResource. }
true;public;1;3;/**  * Sets the resource path for a known_hosts file  *  * @param knownHostsResource  *            String file, classpath, or http url for the certificate  */ ;/**  * Sets the resource path for a known_hosts file  *  * @param knownHostsResource  *            String file, classpath, or http url for the certificate  */ public void setKnownHostsResource(String knownHostsResource) {     this.knownHostsResource = knownHostsResource. }
false;public;0;3;;public boolean isFailOnUnknownHost() {     return failOnUnknownHost. }
true;public;1;3;/**  * Specifies whether a connection to an unknown host should fail or not. This  * value is only checked when the property knownHosts is set.  *  * @param failOnUnknownHost  *            boolean flag, whether a connection to an unknown host should fail  */ ;/**  * Specifies whether a connection to an unknown host should fail or not. This  * value is only checked when the property knownHosts is set.  *  * @param failOnUnknownHost  *            boolean flag, whether a connection to an unknown host should fail  */ public void setFailOnUnknownHost(boolean failOnUnknownHost) {     this.failOnUnknownHost = failOnUnknownHost. }
false;public;0;3;;public String getChannelType() {     return channelType. }
true;public;1;3;/**  * Sets the channel type to pass to the Channel as part of command execution.  * Defaults to "exec".  *  * @param channelType  *            String defining the type of Channel to use for command execution.  *  * @see org.apache.sshd.common.channel.Channel  */ ;/**  * Sets the channel type to pass to the Channel as part of command execution.  * Defaults to "exec".  *  * @param channelType  *            String defining the type of Channel to use for command execution.  *  * @see org.apache.sshd.common.channel.Channel  */ public void setChannelType(String channelType) {     this.channelType = channelType. }
false;public;0;3;;public String getShellPrompt() {     return shellPrompt. }
true;public;1;3;/**  * Sets the shellPrompt to be dropped when response is read after command execution  *  * @param shellPrompt  *            String defining ending string of command line which has to be dropped when response is  *            read after command execution.  */ ;/**  * Sets the shellPrompt to be dropped when response is read after command execution  *  * @param shellPrompt  *            String defining ending string of command line which has to be dropped when response is  *            read after command execution.  */ public void setShellPrompt(String shellPrompt) {     this.shellPrompt = shellPrompt. }
false;public;0;3;;public long getSleepForShellPrompt() {     return sleepForShellPrompt. }
true;public;1;3;/**  * Sets the sleep period in milliseconds to wait reading response from shell prompt.  * Defaults to 100 milliseconds.  *  * @param sleepForShellPrompt  *            long milliseconds to wait.  */ ;/**  * Sets the sleep period in milliseconds to wait reading response from shell prompt.  * Defaults to 100 milliseconds.  *  * @param sleepForShellPrompt  *            long milliseconds to wait.  */ public void setSleepForShellPrompt(long sleepForShellPrompt) {     this.sleepForShellPrompt = sleepForShellPrompt. }
