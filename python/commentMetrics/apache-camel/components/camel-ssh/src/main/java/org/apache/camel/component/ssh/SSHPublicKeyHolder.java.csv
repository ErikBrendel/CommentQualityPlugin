commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getKeyType() {     return keyType. }
false;public;1;3;;public void setKeyType(String keyType) {     this.keyType = keyType. }
false;public;0;3;;public BigInteger getE() {     return e. }
false;public;1;3;;public void setE(BigInteger e) {     this.e = e. }
false;public;0;3;;public BigInteger getM() {     return m. }
false;public;1;3;;public void setM(BigInteger m) {     this.m = m. }
false;public;0;3;;public BigInteger getG() {     return g. }
false;public;1;3;;public void setG(BigInteger g) {     this.g = g. }
false;public;0;3;;public BigInteger getP() {     return p. }
false;public;1;3;;public void setP(BigInteger p) {     this.p = p. }
false;public;0;3;;public BigInteger getQ() {     return q. }
false;public;1;3;;public void setQ(BigInteger q) {     this.q = q. }
false;public;0;3;;public BigInteger getY() {     return y. }
false;public;1;3;;public void setY(BigInteger y) {     this.y = y. }
false;public;1;37;;public void push(byte[] keyPart) {     if (keyType == null) {         this.keyType = new String(keyPart, Charset.forName("UTF-8")).         return.     }     if (SSH_RSA.equals(keyType)) {         if (e == null) {             this.e = new BigInteger(keyPart).             return.         }         if (m == null) {             this.m = new BigInteger(keyPart).             return.         }     }     if (SSH_DSS.equals(keyType)) {         if (p == null) {             this.p = new BigInteger(keyPart).         }         if (q == null) {             this.q = new BigInteger(keyPart).         }         if (g == null) {             this.g = new BigInteger(keyPart).         }         if (y == null) {             this.y = new BigInteger(keyPart).         }     } }
false;public;0;25;;public PublicKey toPublicKey() throws NoSuchAlgorithmException, InvalidKeySpecException {     PublicKey returnValue = null.     if (SSH_RSA.equals(keyType)) {         RSAPublicKeySpec dsaPublicKeySpec = new RSAPublicKeySpec(m, e).         KeyFactory factory = KeyFactory.getInstance("RSA").         returnValue = factory.generatePublic(dsaPublicKeySpec).     }     if (SSH_DSS.equals(keyType)) {         DSAPublicKeySpec dsaPublicKeySpec = new DSAPublicKeySpec(y, p, q, g).         KeyFactory factory = KeyFactory.getInstance("DSA").         returnValue = factory.generatePublic(dsaPublicKeySpec).     }     if (SSH_ED25519.equals(keyType)) {         throw new UnsupportedOperationException().     }     if (SSH_ECDSA.equals(keyType)) {         throw new UnsupportedOperationException().     }     return returnValue. }
