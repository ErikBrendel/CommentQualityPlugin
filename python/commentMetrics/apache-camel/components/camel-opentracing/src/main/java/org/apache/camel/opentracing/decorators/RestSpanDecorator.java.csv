commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getComponent() {     return "rest". }
false;public;2;4;;@Override public String getOperationName(Exchange exchange, Endpoint endpoint) {     return getPath(endpoint.getEndpointUri()). }
false;public;3;18;;@Override public void pre(Span span, Exchange exchange, Endpoint endpoint) {     super.pre(span, exchange, endpoint).     getParameters(getPath(endpoint.getEndpointUri())).forEach(param -> {         Object value = exchange.getIn().getHeader(param).         if (value != null) {             if (value instanceof String) {                 span.setTag(param, (String) value).             } else if (value instanceof Number) {                 span.setTag(param, (Number) value).             } else if (value instanceof Boolean) {                 span.setTag(param, (Boolean) value).             }         }     }). }
false;protected,static;1;22;;protected static String getPath(String uri) {     // Obtain the 'path' part of the URI format: rest://method:path[:uriTemplate]?[options]     String path = null.     int index = uri.indexOf(':').     if (index != -1) {         index = uri.indexOf(':', index + 1).         if (index != -1) {             path = uri.substring(index + 1).             index = path.indexOf('?').             if (index != -1) {                 path = path.substring(0, index).             }             path = path.replaceAll(":", "").             try {                 path = URLDecoder.decode(path, "UTF-8").             } catch (UnsupportedEncodingException e) {                 LOG.debug("Failed to decode URL path '" + path + "', ignoring exception", e).             }         }     }     return path. }
false;protected,static;1;20;;protected static List<String> getParameters(String path) {     List<String> parameters = null.     int startIndex = path.indexOf('{').     while (startIndex != -1) {         int endIndex = path.indexOf('}', startIndex).         if (endIndex != -1) {             if (parameters == null) {                 parameters = new ArrayList<>().             }             parameters.add(path.substring(startIndex + 1, endIndex)).             startIndex = path.indexOf('{', endIndex).         } else {             // Break out of loop as no valid end token             startIndex = -1.         }     }     return parameters == null ? Collections.emptyList() : parameters. }
