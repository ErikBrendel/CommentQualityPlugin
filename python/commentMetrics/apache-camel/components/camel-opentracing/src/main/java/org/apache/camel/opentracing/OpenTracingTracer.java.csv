commented;modifiers;parameterAmount;loc;comment;code
false;public;3;6;;@Override public RoutePolicy createRoutePolicy(CamelContext camelContext, String routeId, NamedNode route) {     // ensure this opentracing tracer gets initialized when Camel starts     init(camelContext).     return new OpenTracingRoutePolicy(routeId). }
true;public;1;12;/**  * Registers this {@link OpenTracingTracer} on the {@link CamelContext} if  * not already registered.  */ ;/**  * Registers this {@link OpenTracingTracer} on the {@link CamelContext} if  * not already registered.  */ public void init(CamelContext camelContext) {     if (!camelContext.hasService(this)) {         try {             // start this service eager so we init before Camel is starting             // up             camelContext.addService(this, true, true).         } catch (Exception e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     } }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public Set<String> getExcludePatterns() {     return excludePatterns. }
false;public;1;3;;public void setExcludePatterns(Set<String> excludePatterns) {     this.excludePatterns = excludePatterns. }
false;public;0;3;;public boolean isEncoding() {     return encoding. }
false;public;1;3;;public void setEncoding(boolean encoding) {     this.encoding = encoding. }
true;public;1;3;/**  * Adds an exclude pattern that will disable tracing for Camel messages that  * matches the pattern.  *  * @param pattern the pattern such as route id, endpoint url  */ ;/**  * Adds an exclude pattern that will disable tracing for Camel messages that  * matches the pattern.  *  * @param pattern the pattern such as route id, endpoint url  */ public void addExcludePattern(String pattern) {     excludePatterns.add(pattern). }
false;public;0;3;;public Tracer getTracer() {     return tracer. }
false;public;1;3;;public void setTracer(Tracer tracer) {     this.tracer = tracer. }
false;protected;0;28;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext", this).     camelContext.getManagementStrategy().addEventNotifier(eventNotifier).     if (!camelContext.getRoutePolicyFactories().contains(this)) {         camelContext.addRoutePolicyFactory(this).     }     camelContext.addLogListener(logListener).     if (tracer == null) {         Set<Tracer> tracers = camelContext.getRegistry().findByType(Tracer.class).         if (tracers.size() == 1) {             tracer = tracers.iterator().next().         }     }     if (tracer == null) {         tracer = TracerResolver.resolveTracer().     }     if (tracer == null) {         // No tracer is available, so setup NoopTracer         tracer = NoopTracerFactory.create().     }     ServiceHelper.startService(eventNotifier). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     // stop event notifier     camelContext.getManagementStrategy().removeEventNotifier(eventNotifier).     ServiceHelper.stopService(eventNotifier).     // remove route policy     camelContext.getRoutePolicyFactories().remove(this). }
false;protected;1;12;;protected SpanDecorator getSpanDecorator(Endpoint endpoint) {     SpanDecorator sd = SpanDecorator.DEFAULT.     String uri = endpoint.getEndpointUri().     String[] splitURI = StringHelper.splitOnCharacter(uri, ":", 2).     if (splitURI[1] != null) {         String scheme = splitURI[0].         sd = decorators.getOrDefault(scheme, sd).     }     return sd. }
false;private;2;11;;private boolean isExcluded(Exchange exchange, Endpoint endpoint) {     String url = endpoint.getEndpointUri().     if (url != null && !excludePatterns.isEmpty()) {         for (String pattern : excludePatterns) {             if (EndpointHelper.matchEndpoint(exchange.getContext(), url, pattern)) {                 return true.             }         }     }     return false. }
false;public;1;48;;@Override public void notify(CamelEvent event) throws Exception {     try {         if (event instanceof ExchangeSendingEvent) {             ExchangeSendingEvent ese = (ExchangeSendingEvent) event.             SpanDecorator sd = getSpanDecorator(ese.getEndpoint()).             if (!sd.newSpan() || isExcluded(ese.getExchange(), ese.getEndpoint())) {                 return.             }             Span parent = ActiveSpanManager.getSpan(ese.getExchange()).             SpanBuilder spanBuilder = tracer.buildSpan(sd.getOperationName(ese.getExchange(), ese.getEndpoint())).withTag(Tags.SPAN_KIND.getKey(), sd.getInitiatorSpanKind()).             // parent             if (parent != null) {                 spanBuilder.asChildOf(parent).             }             Span span = spanBuilder.start().             sd.pre(span, ese.getExchange(), ese.getEndpoint()).             tracer.inject(span.context(), Format.Builtin.TEXT_MAP, sd.getInjectAdapter(ese.getExchange().getIn().getHeaders(), encoding)).             ActiveSpanManager.activate(ese.getExchange(), span).             if (log.isTraceEnabled()) {                 log.trace("OpenTracing: start client span={}", span).             }         } else if (event instanceof ExchangeSentEvent) {             ExchangeSentEvent ese = (ExchangeSentEvent) event.             SpanDecorator sd = getSpanDecorator(ese.getEndpoint()).             if (!sd.newSpan() || isExcluded(ese.getExchange(), ese.getEndpoint())) {                 return.             }             Span span = ActiveSpanManager.getSpan(ese.getExchange()).             if (span != null) {                 if (log.isTraceEnabled()) {                     log.trace("OpenTracing: start client span={}", span).                 }                 sd.post(span, ese.getExchange(), ese.getEndpoint()).                 span.finish().                 ActiveSpanManager.deactivate(ese.getExchange()).             } else {                 log.warn("OpenTracing: could not find managed span for exchange={}", ese.getExchange()).             }         }     } catch (Throwable t) {         // This exception is ignored         log.warn("OpenTracing: Failed to capture tracing data", t).     } }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeSendingEvent || event instanceof ExchangeSentEvent. }
false;public;0;4;;@Override public String toString() {     return "OpenTracingEventNotifier". }
false;public;2;20;;@Override public void onExchangeBegin(Route route, Exchange exchange) {     try {         if (isExcluded(exchange, route.getEndpoint())) {             return.         }         SpanDecorator sd = getSpanDecorator(route.getEndpoint()).         Span span = tracer.buildSpan(sd.getOperationName(exchange, route.getEndpoint())).asChildOf(tracer.extract(Format.Builtin.TEXT_MAP, sd.getExtractAdapter(exchange.getIn().getHeaders(), encoding))).withTag(Tags.SPAN_KIND.getKey(), sd.getReceiverSpanKind()).start().         sd.pre(span, exchange, route.getEndpoint()).         ActiveSpanManager.activate(exchange, span).         if (log.isTraceEnabled()) {             log.trace("OpenTracing: start server span={}", span).         }     } catch (Throwable t) {         // This exception is ignored         log.warn("OpenTracing: Failed to capture tracing data", t).     } }
false;public;2;23;;@Override public void onExchangeDone(Route route, Exchange exchange) {     try {         if (isExcluded(exchange, route.getEndpoint())) {             return.         }         Span span = ActiveSpanManager.getSpan(exchange).         if (span != null) {             if (log.isTraceEnabled()) {                 log.trace("OpenTracing: finish server span={}", span).             }             SpanDecorator sd = getSpanDecorator(route.getEndpoint()).             sd.post(span, exchange, route.getEndpoint()).             span.finish().             ActiveSpanManager.deactivate(exchange).         } else {             log.warn("OpenTracing: could not find managed span for exchange={}", exchange).         }     } catch (Throwable t) {         // This exception is ignored         log.warn("OpenTracing: Failed to capture tracing data", t).     } }
false;public;3;15;;@Override public String onLog(Exchange exchange, CamelLogger camelLogger, String message) {     try {         Span span = ActiveSpanManager.getSpan(exchange).         if (span != null) {             Map<String, Object> fields = new HashMap<>().             fields.put("message", message).             span.log(fields).         }     } catch (Throwable t) {         // This exception is ignored         log.warn("OpenTracing: Failed to capture tracing data", t).     }     return message. }
