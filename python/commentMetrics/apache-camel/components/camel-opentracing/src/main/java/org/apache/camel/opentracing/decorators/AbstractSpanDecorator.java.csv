commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean newSpan() {     return true. }
false;public;2;9;;@Override public String getOperationName(Exchange exchange, Endpoint endpoint) {     // identify a meaningful operation name     return getComponentName(endpoint). }
true;public,static;1;10;/**  * This method removes the scheme, any leading slash characters and options  * from the supplied URI. This is intended to extract a meaningful name from  * the URI that can be used in situations, such as the operation name.  *  * @param endpoint The endpoint  * @return The stripped value from the URI  */ ;/**  * This method removes the scheme, any leading slash characters and options  * from the supplied URI. This is intended to extract a meaningful name from  * the URI that can be used in situations, such as the operation name.  *  * @param endpoint The endpoint  * @return The stripped value from the URI  */ public static String stripSchemeAndOptions(Endpoint endpoint) {     int start = endpoint.getEndpointUri().indexOf(':').     start++.     // Remove any leading '/'     while (endpoint.getEndpointUri().charAt(start) == '/') {         start++.     }     int end = endpoint.getEndpointUri().indexOf('?').     return end == -1 ? endpoint.getEndpointUri().substring(start) : endpoint.getEndpointUri().substring(start, end). }
false;public;3;10;;@Override public void pre(Span span, Exchange exchange, Endpoint endpoint) {     String scheme = getComponentName(endpoint).     span.setTag(Tags.COMPONENT.getKey(), CAMEL_COMPONENT + scheme).     // Including the endpoint URI provides access to any options that may     // have been provided, for     // subsequent analysis     span.setTag("camel.uri", URISupport.sanitizeUri(endpoint.getEndpointUri())). }
false;public;3;13;;@Override public void post(Span span, Exchange exchange, Endpoint endpoint) {     if (exchange.isFailed()) {         span.setTag(Tags.ERROR.getKey(), true).         if (exchange.getException() != null) {             Map<String, String> logEvent = new HashMap<>().             logEvent.put("event", "error").             logEvent.put("error.kind", "Exception").             logEvent.put("message", exchange.getException().getMessage()).             span.log(logEvent).         }     } }
false;public;0;4;;@Override public String getInitiatorSpanKind() {     return Tags.SPAN_KIND_CLIENT. }
false;public;0;4;;@Override public String getReceiverSpanKind() {     return Tags.SPAN_KIND_SERVER. }
false;public,static;1;15;;public static Map<String, String> toQueryParameters(String uri) {     int index = uri.indexOf('?').     if (index != -1) {         String queryString = uri.substring(index + 1).         Map<String, String> map = new HashMap<>().         for (String param : queryString.split("&")) {             String[] parts = param.split("=").             if (parts.length == 2) {                 map.put(parts[0], parts[1]).             }         }         return map.     }     return Collections.emptyMap(). }
false;private,static;1;8;;private static String getComponentName(Endpoint endpoint) {     String[] splitURI = StringHelper.splitOnCharacter(endpoint.getEndpointUri(), ":", 2).     if (splitURI.length > 0) {         return splitURI[0].     } else {         return null.     } }
false;public;2;5;;@Override public TextMap getExtractAdapter(final Map<String, Object> map, boolean encoding) {     // no encoding supported per default     return new CamelHeadersExtractAdapter(map). }
false;public;2;5;;@Override public TextMap getInjectAdapter(final Map<String, Object> map, boolean encoding) {     // no encoding supported per default     return new CamelHeadersInjectAdapter(map). }
