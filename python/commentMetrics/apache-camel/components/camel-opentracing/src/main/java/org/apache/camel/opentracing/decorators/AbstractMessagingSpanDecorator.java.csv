commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public String getOperationName(Exchange exchange, Endpoint endpoint) {     // Use the destination name     return getDestination(exchange, endpoint). }
false;public;3;11;;@Override public void pre(Span span, Exchange exchange, Endpoint endpoint) {     super.pre(span, exchange, endpoint).     span.setTag(Tags.MESSAGE_BUS_DESTINATION.getKey(), getDestination(exchange, endpoint)).     String messageId = getMessageId(exchange).     if (messageId != null) {         span.setTag(MESSAGE_BUS_ID, messageId).     } }
true;protected;2;3;/**  * This method identifies the destination from the supplied exchange and/or  * endpoint.  *  * @param exchange The exchange  * @param endpoint The endpoint  * @return The message bus destination  */ ;/**  * This method identifies the destination from the supplied exchange and/or  * endpoint.  *  * @param exchange The exchange  * @param endpoint The endpoint  * @return The message bus destination  */ protected String getDestination(Exchange exchange, Endpoint endpoint) {     return stripSchemeAndOptions(endpoint). }
false;public;0;4;;@Override public String getInitiatorSpanKind() {     return "producer". }
false;public;0;4;;@Override public String getReceiverSpanKind() {     return "consumer". }
true;protected;1;3;/**  * This method identifies the message id for the messaging exchange.  *  * @return The message id, or null if no id exists for the exchange  */ ;/**  * This method identifies the message id for the messaging exchange.  *  * @return The message id, or null if no id exists for the exchange  */ protected String getMessageId(Exchange exchange) {     return null. }
false;public;2;4;;@Override public TextMap getExtractAdapter(final Map<String, Object> map, final boolean jmsEncoding) {     return new CamelMessagingHeadersExtractAdapter(map, jmsEncoding). }
false;public;2;4;;@Override public TextMap getInjectAdapter(final Map<String, Object> map, final boolean jmsEncoding) {     return new CamelMessagingHeadersInjectAdapter(map, jmsEncoding). }
