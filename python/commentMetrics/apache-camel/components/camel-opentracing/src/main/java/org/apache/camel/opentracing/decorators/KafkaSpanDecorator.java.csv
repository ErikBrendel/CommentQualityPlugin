commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getComponent() {     return "kafka". }
false;public;2;9;;@Override public String getDestination(Exchange exchange, Endpoint endpoint) {     String topic = (String) exchange.getIn().getHeader(TOPIC).     if (topic == null) {         Map<String, String> queryParameters = toQueryParameters(endpoint.getEndpointUri()).         topic = queryParameters.get("topic").     }     return topic != null ? topic : super.getDestination(exchange, endpoint). }
false;public;3;24;;@Override public void pre(Span span, Exchange exchange, Endpoint endpoint) {     super.pre(span, exchange, endpoint).     String partition = getValue(exchange, PARTITION, Integer.class).     if (partition != null) {         span.setTag(KAFKA_PARTITION_TAG, partition).     }     String partitionKey = (String) exchange.getIn().getHeader(PARTITION_KEY).     if (partitionKey != null) {         span.setTag(KAFKA_PARTITION_KEY_TAG, partitionKey).     }     String key = (String) exchange.getIn().getHeader(KEY).     if (key != null) {         span.setTag(KAFKA_KEY_TAG, key).     }     String offset = getValue(exchange, OFFSET, Long.class).     if (offset != null) {         span.setTag(KAFKA_OFFSET_TAG, offset).     } }
true;private;3;4;/**  * Extracts header value from the exchange for given header  * @param exchange the {@link Exchange}  * @param header the header name  * @param type the class type of the exchange header  * @return  */ ;/**  * Extracts header value from the exchange for given header  * @param exchange the {@link Exchange}  * @param header the header name  * @param type the class type of the exchange header  * @return  */ private <T> String getValue(final Exchange exchange, final String header, Class<T> type) {     T partition = exchange.getIn().getHeader(header, type).     return partition != null ? String.valueOf(partition) : exchange.getIn().getHeader(header, String.class). }
