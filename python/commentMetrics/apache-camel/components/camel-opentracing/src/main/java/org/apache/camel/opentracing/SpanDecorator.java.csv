commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getComponent() {     return null. }
true;;0;1;/**  * This method indicates whether the component associated with the SpanDecorator  * should result in a new span being created.  *  * @return Whether a new span should be created  */ ;/**  * This method indicates whether the component associated with the SpanDecorator  * should result in a new span being created.  *  * @return Whether a new span should be created  */ boolean newSpan().
true;;0;1;/**  * The camel component associated with the decorator.  *  * @return The camel component name  */ ;/**  * The camel component associated with the decorator.  *  * @return The camel component name  */ String getComponent().
true;;2;1;/**  * This method returns the operation name to use with the Span representing  * this exchange and endpoint.  *  * @param exchange The exchange  * @param endpoint The endpoint  * @return The operation name  */ ;/**  * This method returns the operation name to use with the Span representing  * this exchange and endpoint.  *  * @param exchange The exchange  * @param endpoint The endpoint  * @return The operation name  */ String getOperationName(Exchange exchange, Endpoint endpoint).
true;;3;1;/**  * This method adds appropriate details (tags/logs) to the supplied span  * based on the pre processing of the exchange.  *  * @param span The span  * @param exchange The exchange  * @param endpoint The endpoint  */ ;/**  * This method adds appropriate details (tags/logs) to the supplied span  * based on the pre processing of the exchange.  *  * @param span The span  * @param exchange The exchange  * @param endpoint The endpoint  */ void pre(Span span, Exchange exchange, Endpoint endpoint).
true;;3;1;/**  * This method adds appropriate details (tags/logs) to the supplied span  * based on the post processing of the exchange.  *  * @param span The span  * @param exchange The exchange  * @param endpoint The endpoint  */ ;/**  * This method adds appropriate details (tags/logs) to the supplied span  * based on the post processing of the exchange.  *  * @param span The span  * @param exchange The exchange  * @param endpoint The endpoint  */ void post(Span span, Exchange exchange, Endpoint endpoint).
true;;0;1;/**  * This method returns the 'span.kind' value for use when the component  * is initiating a communication.  *  * @return The kind  */ ;/**  * This method returns the 'span.kind' value for use when the component  * is initiating a communication.  *  * @return The kind  */ String getInitiatorSpanKind().
true;;0;1;/**  * This method returns the 'span.kind' value for use when the component  * is receiving a communication.  *  * @return The kind  */ ;/**  * This method returns the 'span.kind' value for use when the component  * is receiving a communication.  *  * @return The kind  */ String getReceiverSpanKind().
true;;2;1;/**  * This method returns the map to be used for headers extraction  * when the component is receiving a communication.  *  * @param map a map containing the objects  * @param encoding whether the headers are encoded  * @return The extraction map  */ ;/**  * This method returns the map to be used for headers extraction  * when the component is receiving a communication.  *  * @param map a map containing the objects  * @param encoding whether the headers are encoded  * @return The extraction map  */ TextMap getExtractAdapter(Map<String, Object> map, boolean encoding).
true;;2;1;/**  * This method returns the map to be used for headers injection  *  when the component is receiving a communication.  *  * @param map a map containing the objects  * @param encoding whether the headers are encoded  * @return The injection map  */ ;/**  * This method returns the map to be used for headers injection  *  when the component is receiving a communication.  *  * @param map a map containing the objects  * @param encoding whether the headers are encoded  * @return The injection map  */ TextMap getInjectAdapter(Map<String, Object> map, boolean encoding).
