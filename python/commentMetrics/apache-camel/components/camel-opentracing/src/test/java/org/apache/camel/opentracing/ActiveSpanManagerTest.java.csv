commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testNoSpan() {     Exchange exchange = createExchange().     assertNull(ActiveSpanManager.getSpan(exchange)). }
false;public;0;10;;@Test public void testCurrentSpan() {     Exchange exchange = createExchange().     Span span = tracer.buildSpan("test").start().     ActiveSpanManager.activate(exchange, span).     assertEquals(span, ActiveSpanManager.getSpan(exchange)).     ActiveSpanManager.deactivate(exchange).     assertNull(ActiveSpanManager.getSpan(exchange)). }
false;public;0;13;;@Test public void testCreateChild() {     Exchange exchange = createExchange().     Span parent = tracer.buildSpan("parent").start().     ActiveSpanManager.activate(exchange, parent).     Span child = tracer.buildSpan("child").start().     ActiveSpanManager.activate(exchange, child).     assertEquals(child, ActiveSpanManager.getSpan(exchange)).     ActiveSpanManager.deactivate(exchange).     assertEquals(parent, ActiveSpanManager.getSpan(exchange)). }
false;public;0;25;;@Test public void testIsolatedConcurrentExchanges() {     Exchange exchange = createExchange().     Span parent = tracer.buildSpan("parent").start().     ActiveSpanManager.activate(exchange, parent).     Exchange path1 = exchange.copy().     Exchange path2 = exchange.copy().     // Check the parent span is available in the new exchanges     assertEquals(parent, ActiveSpanManager.getSpan(path1)).     assertEquals(parent, ActiveSpanManager.getSpan(path2)).     Span child1 = tracer.buildSpan("child1").start().     ActiveSpanManager.activate(path1, child1).     Span child2 = tracer.buildSpan("child2").start().     ActiveSpanManager.activate(path2, child2).     ActiveSpanManager.deactivate(path2).     // Check that the current span in path2 is back to parent     // and hasn't been affected by path1 creating its own child     ActiveSpanManager.activate(path2, parent). }
