commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testGetOperationName() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(MONGODB_STATEMENT).     SpanDecorator decorator = new MongoDBSpanDecorator().     assertEquals("findOneByQuery", decorator.getOperationName(null, endpoint)). }
false;public;0;8;;@Test public void testToQueryParameters() {     Map<String, String> params = AbstractSpanDecorator.toQueryParameters(MONGODB_STATEMENT).     assertEquals(3, params.size()).     assertEquals("flights", params.get("database")).     assertEquals("tickets", params.get("collection")).     assertEquals("findOneByQuery", params.get("operation")). }
false;public;0;17;;@Test public void testPre() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(MONGODB_STATEMENT).     SpanDecorator decorator = new MongoDBSpanDecorator().     MockTracer tracer = new MockTracer().     MockSpan span = tracer.buildSpan("TestSpan").start().     decorator.pre(span, null, endpoint).     assertEquals("mongodb", span.tags().get(Tags.DB_TYPE.getKey())).     assertEquals("flights", span.tags().get(Tags.DB_INSTANCE.getKey())).     assertTrue(span.tags().containsKey(Tags.DB_STATEMENT.getKey())). }
