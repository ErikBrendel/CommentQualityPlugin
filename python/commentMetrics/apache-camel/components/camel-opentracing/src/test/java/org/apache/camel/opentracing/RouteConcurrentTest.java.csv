commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSingleInvocationsOfRoute() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(2).create().     template.sendBody("seda:foo", "Hello World").     assertTrue(notify.matches(30, TimeUnit.SECONDS)).     verify(). }
false;public;0;12;;@Test public void testConcurrentInvocationsOfRoute() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(10).create().     for (int i = 0. i < 5. i++) {         template.sendBody("seda:foo", "Hello World").     }     assertTrue(notify.matches(30, TimeUnit.SECONDS)).     verifyTraceSpanNumbers(5, testdata.length). }
false;public;0;11;;@Override public void configure() throws Exception {     from("seda:foo?concurrentConsumers=5").routeId("foo").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).to("seda:bar").     from("seda:bar?concurrentConsumers=5").routeId("bar").log("routing at ${routeId}").delay(simple("${random(0,500)}")). }
false;protected;0;16;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo?concurrentConsumers=5").routeId("foo").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).to("seda:bar").             from("seda:bar?concurrentConsumers=5").routeId("bar").log("routing at ${routeId}").delay(simple("${random(0,500)}")).         }     }. }
