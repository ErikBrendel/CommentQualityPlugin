commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;17;;@Test public void testGetOperationName() {     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_METHOD)).thenReturn("PUT").     AbstractHttpSpanDecorator decorator = new AbstractHttpSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     assertEquals("PUT", decorator.getOperationName(exchange, null)). }
false;public;0;10;;@Test public void testGetMethodFromMethodHeader() {     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_METHOD)).thenReturn("PUT").     assertEquals("PUT", AbstractHttpSpanDecorator.getHttpMethod(exchange, null)). }
false;public;0;11;;@Test public void testGetMethodQueryStringHeader() {     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_QUERY)).thenReturn("MyQuery").     assertEquals(AbstractHttpSpanDecorator.GET_METHOD, AbstractHttpSpanDecorator.getHttpMethod(exchange, null)). }
false;public;0;13;;@Test public void testGetMethodQueryStringInEndpoint() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn("http://localhost:8080/endpoint?query=hello").     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_URI)).thenReturn("http://localhost:8080/endpoint?query=hello").     assertEquals(AbstractHttpSpanDecorator.GET_METHOD, AbstractHttpSpanDecorator.getHttpMethod(exchange, endpoint)). }
false;public;0;14;;@Test public void testGetMethodBodyNotNull() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_URI)).thenReturn(TEST_URI).     Mockito.when(message.getBody()).thenReturn("Message Body").     assertEquals(AbstractHttpSpanDecorator.POST_METHOD, AbstractHttpSpanDecorator.getHttpMethod(exchange, endpoint)). }
false;public;0;13;;@Test public void testGetMethodDefault() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_URI)).thenReturn(TEST_URI).     assertEquals(AbstractHttpSpanDecorator.GET_METHOD, AbstractHttpSpanDecorator.getHttpMethod(exchange, endpoint)). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;25;;@Test public void testPreUri() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_URI)).thenReturn(TEST_URI).     SpanDecorator decorator = new AbstractHttpSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     MockTracer tracer = new MockTracer().     MockSpan span = tracer.buildSpan("TestSpan").start().     decorator.pre(span, exchange, endpoint).     assertEquals(TEST_URI, span.tags().get(Tags.HTTP_URL.getKey())).     assertTrue(span.tags().containsKey(Tags.HTTP_METHOD.getKey())). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;20;;@Test public void testGetHttpURLFromHeaderUrl() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_URI)).thenReturn("Another URL").     Mockito.when(message.getHeader(Exchange.HTTP_URL)).thenReturn(TEST_URI).     AbstractHttpSpanDecorator decorator = new AbstractHttpSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     assertEquals(TEST_URI, decorator.getHttpURL(exchange, endpoint)). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;19;;@Test public void testGetHttpURLFromHeaderUri() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     Mockito.when(exchange.getIn()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_URI)).thenReturn(TEST_URI).     AbstractHttpSpanDecorator decorator = new AbstractHttpSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     assertEquals(TEST_URI, decorator.getHttpURL(exchange, endpoint)). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;18;;@Test public void testGetHttpURLFromEndpointUri() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     Mockito.when(exchange.getIn()).thenReturn(message).     AbstractHttpSpanDecorator decorator = new AbstractHttpSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     assertEquals(TEST_URI, decorator.getHttpURL(exchange, endpoint)). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;18;;@Test public void testGetHttpURLFromEndpointUriWithAdditionalScheme() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn("netty-http:" + TEST_URI).     Mockito.when(exchange.getIn()).thenReturn(message).     AbstractHttpSpanDecorator decorator = new AbstractHttpSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     assertEquals(TEST_URI, decorator.getHttpURL(exchange, endpoint)). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;23;;@Test public void testPostResponseCode() {     Exchange exchange = Mockito.mock(Exchange.class).     Message message = Mockito.mock(Message.class).     Mockito.when(exchange.hasOut()).thenReturn(true).     Mockito.when(exchange.getOut()).thenReturn(message).     Mockito.when(message.getHeader(Exchange.HTTP_RESPONSE_CODE)).thenReturn(200).     SpanDecorator decorator = new AbstractHttpSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     MockTracer tracer = new MockTracer().     MockSpan span = tracer.buildSpan("TestSpan").start().     decorator.post(span, exchange, null).     assertEquals(200, span.tags().get(Tags.HTTP_STATUS.getKey())). }
