commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;17;;@Test public void testGetOperationName() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     SpanDecorator decorator = new AbstractSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     // Operation name is scheme, as no specific span decorator to     // identify an appropriate name     assertEquals("test", decorator.getOperationName(null, endpoint)). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;20;;@Test public void testPre() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn(TEST_URI).     SpanDecorator decorator = new AbstractSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     MockTracer tracer = new MockTracer().     MockSpan span = tracer.buildSpan("TestSpan").start().     decorator.pre(span, null, endpoint).     assertEquals("camel-test", span.tags().get(Tags.COMPONENT.getKey())). }
false;public;0;4;;@Override public String getComponent() {     return null. }
false;public;0;27;;@Test public void testPostExchangeFailed() {     Exchange exchange = Mockito.mock(Exchange.class).     Mockito.when(exchange.isFailed()).thenReturn(true).     Exception e = new Exception("Test Message").     Mockito.when(exchange.getException()).thenReturn(e).     SpanDecorator decorator = new AbstractSpanDecorator() {          @Override         public String getComponent() {             return null.         }     }.     MockTracer tracer = new MockTracer().     MockSpan span = tracer.buildSpan("TestSpan").start().     decorator.post(span, exchange, null).     assertEquals(true, span.tags().get(Tags.ERROR.getKey())).     assertEquals(1, span.logEntries().size()).     assertEquals("error", span.logEntries().get(0).fields().get("event")).     assertEquals("Exception", span.logEntries().get(0).fields().get("error.kind")).     assertEquals(e.getMessage(), span.logEntries().get(0).fields().get("message")). }
false;public;0;8;;@Test public void testStripSchemeNoOptions() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn("direct:hello").     assertEquals("hello", AbstractSpanDecorator.stripSchemeAndOptions(endpoint)). }
false;public;0;8;;@Test public void testStripSchemeNoOptionsWithSlashes() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn("direct://hello").     assertEquals("hello", AbstractSpanDecorator.stripSchemeAndOptions(endpoint)). }
false;public;0;8;;@Test public void testStripSchemeAndOptions() {     Endpoint endpoint = Mockito.mock(Endpoint.class).     Mockito.when(endpoint.getEndpointUri()).thenReturn("direct:hello?world=true").     assertEquals("hello", AbstractSpanDecorator.stripSchemeAndOptions(endpoint)). }
