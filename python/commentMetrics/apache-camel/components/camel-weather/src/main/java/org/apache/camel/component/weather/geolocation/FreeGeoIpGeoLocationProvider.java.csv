commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;@Override public GeoLocation getCurrentGeoLocation() throws Exception {     HttpClient httpClient = component.getHttpClient().     if (isEmpty(component.getGeolocationAccessKey())) {         throw new IllegalStateException("The geolocation service requires a mandatory geolocationAccessKey").     }     if (isEmpty(component.getGeolocationRequestHostIP())) {         throw new IllegalStateException("The geolocation service requires a mandatory geolocationRequestHostIP").     }     GetMethod getMethod = new GetMethod("http://api.ipstack.com/" + component.getGeolocationRequestHostIP()).     getMethod.setQueryString(new NameValuePair[] { new NameValuePair("access_key", component.getGeolocationAccessKey()), new NameValuePair("legacy", "1"), new NameValuePair("output", "json") }).     try {         int statusCode = httpClient.executeMethod(getMethod).         if (statusCode != HttpStatus.SC_OK) {             throw new IllegalStateException("Got the unexpected http-status '" + getMethod.getStatusLine() + "' for the geolocation").         }         String geoLocation = component.getCamelContext().getTypeConverter().mandatoryConvertTo(String.class, getMethod.getResponseBodyAsStream()).         if (isEmpty(geoLocation)) {             throw new IllegalStateException("Got the unexpected value '" + geoLocation + "' for the geolocation").         }         ObjectMapper mapper = new ObjectMapper().         JsonNode node = mapper.readValue(geoLocation, JsonNode.class).         JsonNode latitudeNode = notNull(node.get("latitude"), "latitude").         JsonNode longitudeNode = notNull(node.get("longitude"), "longitude").         return new GeoLocation(longitudeNode.asText(), latitudeNode.asText()).     } finally {         getMethod.releaseConnection().     } }
