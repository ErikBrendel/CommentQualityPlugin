commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getQuery() throws Exception {     return getQuery(weatherConfiguration.getLocation()). }
false;public;1;53;;public String getQuery(String location) throws Exception {     String answer = "http://api.openweathermap.org/data/2.5/".     if (weatherConfiguration.getLat() != null && weatherConfiguration.getLon() != null && weatherConfiguration.getRightLon() == null && weatherConfiguration.getTopLat() == null) {         location = createLatLonQueryString().     } else if (weatherConfiguration.getLat() != null && weatherConfiguration.getLon() != null && weatherConfiguration.getRightLon() != null && weatherConfiguration.getTopLat() != null) {         location = "bbox=" + weatherConfiguration.getLon() + "," + weatherConfiguration.getLat() + "," + weatherConfiguration.getRightLon() + "," + weatherConfiguration.getTopLat() + "," + weatherConfiguration.getZoom() + "&cluster=yes".     } else if (!isEmpty(weatherConfiguration.getZip())) {         location = "zip=" + weatherConfiguration.getZip().     } else if (weatherConfiguration.getIds() != null && weatherConfiguration.getIds().size() > 0) {         location = "id=" + String.join(",", weatherConfiguration.getIds()).     } else if (isEmpty(location) || "current".equals(location)) {         GeoLocation geoLocation = getCurrentGeoLocation().         weatherConfiguration.setLat(geoLocation.getLatitude()).         weatherConfiguration.setLon(geoLocation.getLongitude()).         location = createLatLonQueryString().     } else {         // assuming the location is a town or country         location = "q=" + location.     }     location = location + "&lang=" + weatherConfiguration.getLanguage().     String context = createContext().     answer += context + location.     if (!isEmpty(weatherConfiguration.getPeriod())) {         answer += "&cnt=" + weatherConfiguration.getPeriod().     } else if (weatherConfiguration.getCnt() != null) {         answer += "&cnt=" + weatherConfiguration.getCnt().     }     // append the desired measurement unit if not the default (which is metric)     if (weatherConfiguration.getUnits() != null) {         answer += "&units=" + weatherConfiguration.getUnits().name().toLowerCase().     }     // append the desired output mode if not the default (which is json)     if (weatherConfiguration.getMode() != JSON) {         answer += "&mode=" + weatherConfiguration.getMode().name().toLowerCase().     }     if (weatherConfiguration.getAppid() != null) {         answer += "&APPID=" + weatherConfiguration.getAppid().     }     return answer. }
false;private;0;41;;private String createContext() {     String answer.     if (isBoxedQuery()) {         if (weatherConfiguration.getWeatherApi() == WeatherApi.Station) {             answer = "box/station?".         } else {             answer = "box/city?".         }     } else if (isGeoLocation() && weatherConfiguration.getCnt() != null) {         if (weatherConfiguration.getWeatherApi() == WeatherApi.Station) {             answer = "station/find?".         } else {             answer = "find?".         }     } else if (weatherConfiguration.getIds() != null && weatherConfiguration.getIds().size() > 0) {         if (weatherConfiguration.getIds().size() == 1) {             if (!isEmpty(weatherConfiguration.getPeriod())) {                 if (weatherConfiguration.getWeatherApi() == WeatherApi.Hourly) {                     answer = "forecast?".                 } else {                     answer = "forecast/daily?".                 }             } else if (weatherConfiguration.getWeatherApi() == WeatherApi.Station) {                 answer = "station?".             } else {                 answer = "weather?".             }         } else {             answer = "group?".         }     } else if (isEmpty(weatherConfiguration.getPeriod())) {         answer = "weather?".     } else {         if (weatherConfiguration.getWeatherApi() == WeatherApi.Hourly) {             answer = "forecast?".         } else {             answer = "forecast/daily?".         }     }     return answer. }
false;private;0;3;;private boolean isGeoLocation() {     return weatherConfiguration.getLat() != null && weatherConfiguration.getLon() != null. }
false;private;0;3;;private String createLatLonQueryString() {     return "lat=" + weatherConfiguration.getLat() + "&lon=" + weatherConfiguration.getLon(). }
false;private;0;3;;private boolean isBoxedQuery() {     return weatherConfiguration.getTopLat() != null && weatherConfiguration.getRightLon() != null. }
false;;0;3;;GeoLocation getCurrentGeoLocation() throws Exception {     return geoLocationProvider.getCurrentGeoLocation(). }
false;;1;3;;void setGeoLocationProvider(GeoLocationProvider geoLocationProvider) {     this.geoLocationProvider = geoLocationProvider. }
