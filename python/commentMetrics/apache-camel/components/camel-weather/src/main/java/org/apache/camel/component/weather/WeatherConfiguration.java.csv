commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getPeriod() {     return period. }
true;public;1;12;/**  * If null, the current weather will be returned, else use values of 5, 7,  * 14 days. Only the numeric value for the forecast period is actually  * parsed, so spelling, capitalisation of the time period is up to you (its  * ignored)  */ ;/**  * If null, the current weather will be returned, else use values of 5, 7,  * 14 days. Only the numeric value for the forecast period is actually  * parsed, so spelling, capitalisation of the time period is up to you (its  * ignored)  */ public void setPeriod(String period) {     notNull(period, "period").     int result = 0.     try {         result = new Scanner(period).useDelimiter("\\D+").nextInt().     } catch (Exception e) {     // ignore and fallback the period to be an empty string     }     if (result != 0) {         this.period = "" + result.     } }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public WeatherMode getMode() {     return mode. }
true;public;1;3;/**  * The output format of the weather data.  */ ;/**  * The output format of the weather data.  */ public void setMode(WeatherMode mode) {     this.mode = notNull(mode, "mode"). }
false;public;0;3;;public WeatherUnits getUnits() {     return units. }
true;public;1;3;/**  * The units for temperature measurement.  */ ;/**  * The units for temperature measurement.  */ public void setUnits(WeatherUnits units) {     this.units = notNull(units, "units"). }
false;public;0;3;;public String getLocation() {     return location. }
true;public;1;3;/**  * If null Camel will try and determine your current location using the  * geolocation of your ip address, else specify the city,country. For well  * known city names, Open Weather Map will determine the best fit, but  * multiple results may be returned. Hence specifying and country as well  * will return more accurate data. If you specify "current" as the location  * then the component will try to get the current latitude and longitude and  * use that to get the weather details. You can use lat and lon options  * instead of location.  */ ;/**  * If null Camel will try and determine your current location using the  * geolocation of your ip address, else specify the city,country. For well  * known city names, Open Weather Map will determine the best fit, but  * multiple results may be returned. Hence specifying and country as well  * will return more accurate data. If you specify "current" as the location  * then the component will try to get the current latitude and longitude and  * use that to get the weather details. You can use lat and lon options  * instead of location.  */ public void setLocation(String location) {     this.location = location. }
false;public;0;3;;public String getHeaderName() {     return headerName. }
true;public;1;3;/**  * To store the weather result in this header instead of the message body.  * This is useable if you want to keep current message body as-is.  */ ;/**  * To store the weather result in this header instead of the message body.  * This is useable if you want to keep current message body as-is.  */ public void setHeaderName(String headerName) {     this.headerName = headerName. }
false;public;0;3;;public String getLat() {     return lat. }
true;public;1;3;/**  * Latitude of location. You can use lat and lon options instead of  * location. For boxed queries this is the bottom latitude.  */ ;/**  * Latitude of location. You can use lat and lon options instead of  * location. For boxed queries this is the bottom latitude.  */ public void setLat(String lat) {     this.lat = lat. }
false;public;0;3;;public String getLon() {     return lon. }
true;public;1;3;/**  * Longitude of location. You can use lat and lon options instead of  * location. For boxed queries this is the left longtitude.  */ ;/**  * Longitude of location. You can use lat and lon options instead of  * location. For boxed queries this is the left longtitude.  */ public void setLon(String lon) {     this.lon = lon. }
true;public;1;3;/**  * APPID ID used to authenticate the user connected to the API Server  */ ;/**  * APPID ID used to authenticate the user connected to the API Server  */ public void setAppid(String appid) {     this.appid = appid. }
false;public;0;3;;public String getAppid() {     return appid. }
false;;0;3;;String getQuery() throws Exception {     return weatherQuery.getQuery(). }
false;;1;3;;String getQuery(String location) throws Exception {     return weatherQuery.getQuery(location). }
false;public;0;3;;public WeatherLanguage getLanguage() {     return language. }
true;public;1;3;/**  * Language of the response.  */ ;/**  * Language of the response.  */ public void setLanguage(WeatherLanguage language) {     this.language = language. }
false;public;0;3;;public String getRightLon() {     return rightLon. }
true;public;1;3;/**  * For boxed queries this is the right longtitude. Needs to be used in  * combination with topLat and zoom.  */ ;/**  * For boxed queries this is the right longtitude. Needs to be used in  * combination with topLat and zoom.  */ public void setRightLon(String rightLon) {     this.rightLon = rightLon. }
false;public;0;3;;public String getTopLat() {     return topLat. }
true;public;1;3;/**  * For boxed queries this is the top latitude. Needs to be used in  * combination with rightLon and zoom.  */ ;/**  * For boxed queries this is the top latitude. Needs to be used in  * combination with rightLon and zoom.  */ public void setTopLat(String topLat) {     this.topLat = topLat. }
false;public;0;3;;public Integer getZoom() {     return zoom. }
true;public;1;3;/**  * For boxed queries this is the zoom. Needs to be used in combination with  * rightLon and topLat.  */ ;/**  * For boxed queries this is the zoom. Needs to be used in combination with  * rightLon and topLat.  */ public void setZoom(Integer zoom) {     this.zoom = zoom. }
false;public;0;3;;public HttpConnectionManager getHttpConnectionManager() {     return httpConnectionManager. }
true;public;1;3;/**  * To use a custom HttpConnectionManager to manage connections  */ ;/**  * To use a custom HttpConnectionManager to manage connections  */ public void setHttpConnectionManager(HttpConnectionManager httpConnectionManager) {     this.httpConnectionManager = httpConnectionManager. }
false;public;0;3;;public String getProxyHost() {     return proxyHost. }
true;public;1;3;/**  * The proxy host name  */ ;/**  * The proxy host name  */ public void setProxyHost(String proxyHost) {     this.proxyHost = proxyHost. }
false;public;0;3;;public Integer getProxyPort() {     return proxyPort. }
true;public;1;3;/**  * The proxy port number  */ ;/**  * The proxy port number  */ public void setProxyPort(Integer proxyPort) {     this.proxyPort = proxyPort. }
false;public;0;3;;public String getProxyAuthMethod() {     return proxyAuthMethod. }
true;public;1;3;/**  * Authentication method for proxy, either as Basic, Digest or NTLM.  */ ;/**  * Authentication method for proxy, either as Basic, Digest or NTLM.  */ public void setProxyAuthMethod(String proxyAuthMethod) {     this.proxyAuthMethod = proxyAuthMethod. }
false;public;0;3;;public String getProxyAuthUsername() {     return proxyAuthUsername. }
true;public;1;3;/**  * Username for proxy authentication  */ ;/**  * Username for proxy authentication  */ public void setProxyAuthUsername(String proxyAuthUsername) {     this.proxyAuthUsername = proxyAuthUsername. }
false;public;0;3;;public String getProxyAuthPassword() {     return proxyAuthPassword. }
true;public;1;3;/**  * Password for proxy authentication  */ ;/**  * Password for proxy authentication  */ public void setProxyAuthPassword(String proxyAuthPassword) {     this.proxyAuthPassword = proxyAuthPassword. }
false;public;0;3;;public String getProxyAuthDomain() {     return proxyAuthDomain. }
true;public;1;3;/**  * Domain for proxy NTLM authentication  */ ;/**  * Domain for proxy NTLM authentication  */ public void setProxyAuthDomain(String proxyAuthDomain) {     this.proxyAuthDomain = proxyAuthDomain. }
false;public;0;3;;public String getProxyAuthHost() {     return proxyAuthHost. }
true;public;1;3;/**  * Optional host for proxy NTLM authentication  */ ;/**  * Optional host for proxy NTLM authentication  */ public void setProxyAuthHost(String proxyAuthHost) {     this.proxyAuthHost = proxyAuthHost. }
false;public;0;3;;public String getZip() {     return zip. }
true;public;1;3;/**  * Zip-code, e.g. 94040,us  */ ;/**  * Zip-code, e.g. 94040,us  */ public void setZip(String zip) {     this.zip = zip. }
false;public;0;3;;public List<String> getIds() {     return ids. }
true;public;1;10;/**  * List of id's of city/stations. You can separate multiple ids by comma.  */ ;/**  * List of id's of city/stations. You can separate multiple ids by comma.  */ public void setIds(String id) {     if (ids == null) {         ids = new ArrayList<>().     }     Iterator<?> it = ObjectHelper.createIterator(id).     while (it.hasNext()) {         String myId = (String) it.next().         ids.add(myId).     } }
false;public;1;3;;public void setIds(List<String> ids) {     this.ids = ids. }
false;public;0;3;;public Integer getCnt() {     return cnt. }
true;public;1;3;/**  * Number of results to be found  */ ;/**  * Number of results to be found  */ public void setCnt(Integer cnt) {     this.cnt = cnt. }
false;public;0;3;;public WeatherApi getWeatherApi() {     return weatherApi. }
true;public;1;3;/**  * The API to be use (current, forecast/3 hour, forecast daily, station)  */ ;/**  * The API to be use (current, forecast/3 hour, forecast daily, station)  */ public void setWeatherApi(WeatherApi weatherApi) {     this.weatherApi = weatherApi. }
false;public;0;3;;public String getGeolocationAccessKey() {     return geolocationAccessKey. }
true;public;1;3;/**  * The geolocation service now needs an accessKey to be used  */ ;/**  * The geolocation service now needs an accessKey to be used  */ public void setGeolocationAccessKey(String geolocationAccessKey) {     this.geolocationAccessKey = geolocationAccessKey. }
false;public;0;3;;public String getGeolocationRequestHostIP() {     return geolocationRequestHostIP. }
true;public;1;3;/**  * The geolocation service now needs to specify the IP associated to the  * accessKey you're using  */ ;/**  * The geolocation service now needs to specify the IP associated to the  * accessKey you're using  */ public void setGeolocationRequestHostIP(String geolocationRequestHostIP) {     this.geolocationRequestHostIP = geolocationRequestHostIP. }
