commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;13;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     WeatherConfiguration configuration = new WeatherConfiguration(this).     // and then override from parameters     setProperties(configuration, parameters).     httpClient = createHttpClient(configuration).     geolocationAccessKey = configuration.getGeolocationAccessKey().     geolocationRequestHostIP = configuration.getGeolocationRequestHostIP().     WeatherEndpoint endpoint = new WeatherEndpoint(uri, this, configuration).     return endpoint. }
false;private;1;25;;private HttpClient createHttpClient(WeatherConfiguration configuration) {     HttpConnectionManager connectionManager = configuration.getHttpConnectionManager().     if (connectionManager == null) {         connectionManager = new MultiThreadedHttpConnectionManager().     }     HttpClient httpClient = new HttpClient(connectionManager).     if (configuration.getProxyHost() != null && configuration.getProxyPort() != null) {         httpClient.getHostConfiguration().setProxy(configuration.getProxyHost(), configuration.getProxyPort()).     }     if (configuration.getProxyAuthUsername() != null && configuration.getProxyAuthMethod() == null) {         throw new IllegalArgumentException("Option proxyAuthMethod must be provided to use proxy authentication").     }     CompositeHttpConfigurer configurer = new CompositeHttpConfigurer().     if (configuration.getProxyAuthMethod() != null) {         configureProxyAuth(configurer, configuration.getProxyAuthMethod(), configuration.getProxyAuthUsername(), configuration.getProxyAuthPassword(), configuration.getProxyAuthDomain(), configuration.getProxyAuthHost()).     }     configurer.configureHttpClient(httpClient).     return httpClient. }
false;private;6;30;;private HttpClientConfigurer configureProxyAuth(CompositeHttpConfigurer configurer, String authMethod, String username, String password, String domain, String host) {     // no proxy auth is in use     if (username == null && authMethod == null) {         return configurer.     }     // validate mandatory options given     if (username != null && authMethod == null) {         throw new IllegalArgumentException("Option proxyAuthMethod must be provided to use proxy authentication").     }     ObjectHelper.notNull(authMethod, "proxyAuthMethod").     ObjectHelper.notNull(username, "proxyAuthUsername").     ObjectHelper.notNull(password, "proxyAuthPassword").     AuthenticationMethod auth = getCamelContext().getTypeConverter().convertTo(AuthenticationMethod.class, authMethod).     if (auth == AuthenticationMethod.Basic || auth == AuthenticationMethod.Digest) {         configurer.addConfigurer(AuthenticationHttpClientConfigurer.basicAutenticationConfigurer(true, username, password)).         return configurer.     } else if (auth == AuthenticationMethod.NTLM) {         // domain is mandatory for NTML         ObjectHelper.notNull(domain, "proxyAuthDomain").         configurer.addConfigurer(AuthenticationHttpClientConfigurer.ntlmAutenticationConfigurer(true, username, password, domain, host)).         return configurer.     }     throw new IllegalArgumentException("Unknown proxyAuthMethod " + authMethod). }
false;public;0;3;;public HttpClient getHttpClient() {     return httpClient. }
false;public;0;3;;public String getGeolocationAccessKey() {     return geolocationAccessKey. }
true;public;1;3;/**  * The geolocation service now needs an accessKey to be used  */ ;/**  * The geolocation service now needs an accessKey to be used  */ public void setGeolocationAccessKey(String geolocationAccessKey) {     this.geolocationAccessKey = geolocationAccessKey. }
false;public;0;3;;public String getGeolocationRequestHostIP() {     return geolocationRequestHostIP. }
true;public;1;3;/**  * The geolocation service now needs to specify the IP associated to the  * accessKey you're using  */ ;/**  * The geolocation service now needs to specify the IP associated to the  * accessKey you're using  */ public void setGeolocationRequestHostIP(String geolocationRequestHostIP) {     this.geolocationRequestHostIP = geolocationRequestHostIP. }
