commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public WeatherEndpoint getEndpoint() {     return (WeatherEndpoint) super.getEndpoint(). }
false;protected;0;34;;@Override protected int poll() throws Exception {     log.debug("Going to execute the Weather query {}", query).     HttpClient httpClient = ((WeatherComponent) getEndpoint().getComponent()).getHttpClient().     GetMethod getMethod = new GetMethod(query).     try {         int status = httpClient.executeMethod(getMethod).         if (status != HttpStatus.SC_OK) {             log.warn("HTTP call for weather returned error status code {} - {} as a result with query: {}", status, getMethod.getStatusLine(), query).             return 0.         }         String weather = getEndpoint().getCamelContext().getTypeConverter().mandatoryConvertTo(String.class, getMethod.getResponseBodyAsStream()).         log.debug("Got back the Weather information {}", weather).         if (ObjectHelper.isEmpty(weather)) {             // empty response             return 0.         }         Exchange exchange = getEndpoint().createExchange().         String header = getEndpoint().getConfiguration().getHeaderName().         if (header != null) {             exchange.getIn().setHeader(header, weather).         } else {             exchange.getIn().setBody(weather).         }         exchange.getIn().setHeader(WeatherConstants.WEATHER_QUERY, query).         getProcessor().process(exchange).         return 1.     } finally {         getMethod.releaseConnection().     } }
