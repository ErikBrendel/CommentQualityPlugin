commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testGrabbingListOfEntries() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // as the default delay option is one hour long, we expect exactly one message exchange     mock.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertNotNull(exchange).     Message in = exchange.getIn().     assertNotNull(in).     String weather = assertIsInstanceOf(String.class, in.getBody()).     checkWeatherContent(weather). }
false;public;0;18;;@Test public void testHeaderOverride() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // as the default delay option is one hour long, we expect exactly one message exchange     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", WeatherConstants.WEATHER_LOCATION, "Paris,France").     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertNotNull(exchange).     Message in = exchange.getIn().     assertNotNull(in).     String weather = assertIsInstanceOf(String.class, in.getBody()).     checkWeatherContent(weather). }
false;public;0;18;;@Test public void testHeaderOverrideCurrent() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // as the default delay option is one hour long, we expect exactly one message exchange     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", WeatherConstants.WEATHER_LOCATION, "Rome,Italy").     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertNotNull(exchange).     Message in = exchange.getIn().     assertNotNull(in).     String weather = assertIsInstanceOf(String.class, in.getBody()).     checkWeatherContent(weather). }
false;public;0;8;;@Override public void configure() throws Exception {     /* The Camel Route uses the apache-camel appid to access the openweathermap service */     from("direct:start").to("weather:foo?location=Madrid,Spain&appid=9162755b2efa555823cfe0451d7fff38&geolocationAccessKey=test&geolocationRequestHostIP=test").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             /* The Camel Route uses the apache-camel appid to access the openweathermap service */             from("direct:start").to("weather:foo?location=Madrid,Spain&appid=9162755b2efa555823cfe0451d7fff38&geolocationAccessKey=test&geolocationRequestHostIP=test").to("mock:result").         }     }. }
