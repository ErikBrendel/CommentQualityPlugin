commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;@BeforeClass public static void beforeClass() throws Exception {     startServers(PORT).     Olingo2SampleServer.generateSampleData(TEST_SERVICE_URL).     setupClient(). }
false;public,static;0;10;;@AfterClass public static void afterClass() throws Exception {     if (olingoApp != null) {         olingoApp.close().     }     if (server != null) {         server.stop().         server.destroy().     } }
false;protected,static;1;4;;protected static void startServers(int port) throws Exception {     server = new Olingo2SampleServer(port, "/olingo2_ref").     server.start(). }
false;protected,static;0;20;;protected static void setupClient() throws Exception {     olingoApp = new Olingo2AppImpl(TEST_SERVICE_URL + "/").     olingoApp.setContentType(TEST_FORMAT_STRING).     LOG.info("Read Edm ").     final TestOlingo2ResponseHandler<Edm> responseHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(null, Olingo2AppImpl.METADATA, null, null, responseHandler).     edm = responseHandler.await().     LOG.info("Read default EntityContainer:  {}", responseHandler.await().getDefaultEntityContainer().getName()).     edmEntitySetMap = new HashMap<>().     for (EdmEntitySet ees : edm.getEntitySets()) {         edmEntitySetMap.put(ees.getName(), ees).     }     // wait for generated data to be registered in server     Thread.sleep(2000). }
false;public;0;16;;@Test public void testServiceDocument() throws Exception {     final TestOlingo2ResponseHandler<ServiceDocument> responseHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(null, "", null, null, responseHandler).     final ServiceDocument serviceDocument = responseHandler.await().     final List<Collection> collections = serviceDocument.getAtomInfo().getWorkspaces().get(0).getCollections().     assertEquals("Service Atom Collections", 3, collections.size()).     LOG.info("Service Atom Collections:  {}", collections).     final List<EdmEntitySetInfo> entitySetsInfo = serviceDocument.getEntitySetsInfo().     assertEquals("Service Entity Sets", 3, entitySetsInfo.size()).     LOG.info("Service Document Entries:  {}", entitySetsInfo). }
false;public;0;10;;@Test public void testReadFeed() throws Exception {     final TestOlingo2ResponseHandler<ODataFeed> responseHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(edm, MANUFACTURERS, null, null, responseHandler).     final ODataFeed dataFeed = responseHandler.await().     assertNotNull("Data feed", dataFeed).     LOG.info("Entries:  {}", prettyPrint(dataFeed)). }
false;public;0;13;;@Test public void testReadUnparsedFeed() throws Exception {     final TestOlingo2ResponseHandler<InputStream> responseHandler = new TestOlingo2ResponseHandler<>().     olingoApp.uread(edm, MANUFACTURERS, null, null, responseHandler).     final InputStream rawfeed = responseHandler.await().     assertNotNull("Data feed", rawfeed).     // for this test, we just let EP to verify the stream data     final ODataFeed dataFeed = EntityProvider.readFeed(TEST_FORMAT_STRING, edmEntitySetMap.get(MANUFACTURERS), rawfeed, EntityProviderReadProperties.init().build()).     LOG.info("Entries:  {}", prettyPrint(dataFeed)). }
false;public;0;23;;@Test public void testReadEntry() throws Exception {     final TestOlingo2ResponseHandler<ODataEntry> responseHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(edm, TEST_MANUFACTURER, null, null, responseHandler).     ODataEntry entry = responseHandler.await().     LOG.info("Single Entry:  {}", prettyPrint(entry)).     responseHandler.reset().     olingoApp.read(edm, TEST_CAR, null, null, responseHandler).     entry = responseHandler.await().     LOG.info("Single Entry:  {}", prettyPrint(entry)).     responseHandler.reset().     final Map<String, String> queryParams = new HashMap<>().     queryParams.put(SystemQueryOption.$expand.toString(), CARS).     olingoApp.read(edm, TEST_MANUFACTURER, queryParams, null, responseHandler).     ODataEntry entryExpanded = responseHandler.await().     LOG.info("Single Entry with expanded Cars relation:  {}", prettyPrint(entryExpanded)). }
false;public;0;29;;@Test public void testReadUnparsedEntry() throws Exception {     final TestOlingo2ResponseHandler<InputStream> responseHandler = new TestOlingo2ResponseHandler<>().     olingoApp.uread(edm, TEST_MANUFACTURER, null, null, responseHandler).     InputStream rawentry = responseHandler.await().     ODataEntry entry = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(MANUFACTURERS), rawentry, EntityProviderReadProperties.init().build()).     LOG.info("Single Entry:  {}", prettyPrint(entry)).     responseHandler.reset().     olingoApp.uread(edm, TEST_CAR, null, null, responseHandler).     rawentry = responseHandler.await().     entry = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(CARS), rawentry, EntityProviderReadProperties.init().build()).     LOG.info("Single Entry:  {}", prettyPrint(entry)).     responseHandler.reset().     final Map<String, String> queryParams = new HashMap<>().     queryParams.put(SystemQueryOption.$expand.toString(), CARS).     olingoApp.uread(edm, TEST_MANUFACTURER, queryParams, null, responseHandler).     rawentry = responseHandler.await().     ODataEntry entryExpanded = EntityProvider.readEntry(TEST_FORMAT_STRING, edmEntitySetMap.get(MANUFACTURERS), rawentry, EntityProviderReadProperties.init().build()).     LOG.info("Single Entry with expanded Cars relation:  {}", prettyPrint(entryExpanded)). }
false;public;0;58;;@Test public void testReadUpdateProperties() throws Exception {     // test simple property Manufacturer.Founded     final TestOlingo2ResponseHandler<Map<String, Object>> propertyHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, null, propertyHandler).     Calendar founded = (Calendar) propertyHandler.await().get(FOUNDED_PROPERTY).     LOG.info("Founded property {}", founded).     final TestOlingo2ResponseHandler<Calendar> valueHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(edm, TEST_MANUFACTURER_FOUNDED_VALUE, null, null, valueHandler).     founded = valueHandler.await().     LOG.info("Founded property {}", founded).     final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler = new TestOlingo2ResponseHandler<>().     final HashMap<String, Object> properties = new HashMap<>().     properties.put(FOUNDED_PROPERTY, new Date()).     // olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, properties, statusHandler).     // requires a plain Date for XML     olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, null, new Date(), statusHandler).     LOG.info("Founded property updated with status {}", statusHandler.await().getStatusCode()).     statusHandler.reset().     olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_VALUE, null, new Date(), statusHandler).     LOG.info("Founded property updated with status {}", statusHandler.await().getStatusCode()).     // test complex property Manufacturer.Address     propertyHandler.reset().     olingoApp.read(edm, TEST_MANUFACTURER_ADDRESS_PROPERTY, null, null, propertyHandler).     final Map<String, Object> address = propertyHandler.await().     LOG.info("Address property {}", prettyPrint(address, 0)).     statusHandler.reset().     address.clear().     // Olingo2 sample server MERGE/PATCH behaves like PUT!!!     // address.put("Street", "Main Street").     address.put("Street", "Star Street 137").     address.put("City", "Stuttgart").     address.put("ZipCode", "70173").     address.put("Country", "Germany").     // olingoApp.patch(edm, TEST_MANUFACTURER_ADDRESS_PROPERTY, address, statusHandler).     olingoApp.merge(edm, TEST_MANUFACTURER_ADDRESS_PROPERTY, null, address, statusHandler).     LOG.info("Address property updated with status {}", statusHandler.await().getStatusCode()). }
false;public;0;64;;@Test public void testReadDeleteCreateLinks() throws Exception {     final TestOlingo2ResponseHandler<List<String>> linksHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(edm, TEST_MANUFACTURER_LINKS_CARS, null, null, linksHandler).     final List<String> links = linksHandler.await().     assertFalse(links.isEmpty()).     LOG.info("Read links: {}", links).     final TestOlingo2ResponseHandler<String> linkHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(edm, TEST_CAR_LINK_MANUFACTURER, null, null, linkHandler).     final String link = linkHandler.await().     LOG.info("Read link: {}", link). // Deleting relationships through links is not supported in Olingo2 at the time of writing this test /*         final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler =             new TestOlingo2ResponseHandler<HttpStatusCodes>().          final ArrayList<Map<String, Object>> carKeys = new ArrayList<Map<String, Object>>().         for (String carLink : links) {             final Matcher matcher = LINK_PATTERN.matcher(carLink).             assertTrue("Link pattern " + carLink, matcher.matches()).             final String carId = matcher.group(1).              final HashMap<String, Object> keys = new HashMap<String, Object>().             keys.put(ID_PROPERTY, carId).             carKeys.add(keys).              // delete manufacturer->car link             statusHandler.reset().             final String resourcePath = TEST_MANUFACTURER_LINKS_CARS + "('" + carId + "')".             olingoApp.delete(resourcePath, statusHandler).              assertEquals("Delete car link " + resourcePath, HttpStatusCodes.OK.getStatusCode(),                 statusHandler.await().getStatusCode()).         }          // add links to all Cars         statusHandler.reset().         olingoApp.create(edm, TEST_MANUFACTURER_LINKS_CARS, carKeys, statusHandler).          assertEquals("Links update", HttpStatusCodes.ACCEPTED.getStatusCode(), statusHandler.await().getStatusCode()).          // delete car->manufacturer link         statusHandler.reset().         olingoApp.delete(TEST_CAR_LINK_MANUFACTURER, statusHandler).          assertEquals("Delete manufacturer link " + TEST_CAR_LINK_MANUFACTURER, HttpStatusCodes.OK.getStatusCode(),             statusHandler.await().getStatusCode()).          // add link to Manufacturer         statusHandler.reset().         final HashMap<String, Object> manufacturerKey = new HashMap<String, Object>().         manufacturerKey.put(ID_PROPERTY, "1").          olingoApp.create(edm, TEST_CAR_LINK_MANUFACTURER, manufacturerKey, statusHandler).          assertEquals("Link update", HttpStatusCodes.ACCEPTED.getStatusCode(), statusHandler.await().getStatusCode()). */ }
false;public;0;23;;@Test public void testReadCount() throws Exception {     final TestOlingo2ResponseHandler<Long> countHandler = new TestOlingo2ResponseHandler<>().     olingoApp.read(edm, MANUFACTURERS + COUNT_OPTION, null, null, countHandler).     LOG.info("Manufacturers count: {}", countHandler.await()).     countHandler.reset().     olingoApp.read(edm, TEST_MANUFACTURER + COUNT_OPTION, null, null, countHandler).     LOG.info("Manufacturer count: {}", countHandler.await()).     countHandler.reset().     olingoApp.read(edm, TEST_MANUFACTURER_LINKS_CARS + COUNT_OPTION, null, null, countHandler).     LOG.info("Manufacturers links count: {}", countHandler.await()).     countHandler.reset().     olingoApp.read(edm, TEST_CAR_LINK_MANUFACTURER + COUNT_OPTION, null, null, countHandler).     LOG.info("Manufacturer link count: {}", countHandler.await()). }
false;public;0;52;;@Test public void testCreateUpdateDeleteEntry() throws Exception {     // create entry to update     final TestOlingo2ResponseHandler<ODataEntry> entryHandler = new TestOlingo2ResponseHandler<>().     olingoApp.create(edm, MANUFACTURERS, null, getEntityData(), entryHandler).     ODataEntry createdEntry = entryHandler.await().     LOG.info("Created Entry:  {}", prettyPrint(createdEntry)).     Map<String, Object> data = getEntityData().     @SuppressWarnings("unchecked")     Map<String, Object> address = (Map<String, Object>) data.get(ADDRESS).     data.put("Name", "MyCarManufacturer Renamed").     address.put("Street", "Main Street").     final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler = new TestOlingo2ResponseHandler<>().     olingoApp.update(edm, TEST_CREATE_MANUFACTURER, null, data, statusHandler).     statusHandler.await().     statusHandler.reset().     data.put("Name", "MyCarManufacturer Patched").     olingoApp.patch(edm, TEST_CREATE_MANUFACTURER, null, data, statusHandler).     statusHandler.await().     entryHandler.reset().     olingoApp.read(edm, TEST_CREATE_MANUFACTURER, null, null, entryHandler).     ODataEntry updatedEntry = entryHandler.await().     LOG.info("Updated Entry successfully:  {}", prettyPrint(updatedEntry)).     statusHandler.reset().     olingoApp.delete(TEST_CREATE_MANUFACTURER, null, statusHandler).     HttpStatusCodes statusCode = statusHandler.await().     LOG.info("Deletion of Entry was successful:  {}: {}", statusCode.getStatusCode(), statusCode.getInfo()).     try {         LOG.info("Verify Delete Entry").         entryHandler.reset().         olingoApp.read(edm, TEST_CREATE_MANUFACTURER, null, null, entryHandler).         entryHandler.await().         fail("Entry not deleted!").     } catch (Exception e) {         LOG.info("Deleted entry not found: {}", e.getMessage()).     } }
false;public;0;73;;@Test public void testBatchRequest() throws Exception {     final List<Olingo2BatchRequest> batchParts = new ArrayList<>().     // Edm query     batchParts.add(Olingo2BatchQueryRequest.resourcePath(Olingo2AppImpl.METADATA).build()).     // feed query     batchParts.add(Olingo2BatchQueryRequest.resourcePath(MANUFACTURERS).build()).     // read     batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_MANUFACTURER).build()).     // read with expand     final HashMap<String, String> queryParams = new HashMap<>().     queryParams.put(SystemQueryOption.$expand.toString(), CARS).     batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_MANUFACTURER).queryParams(queryParams).build()).     // create     final Map<String, Object> data = getEntityData().     batchParts.add(Olingo2BatchChangeRequest.resourcePath(MANUFACTURERS).contentId(TEST_RESOURCE_CONTENT_ID).operation(Operation.CREATE).body(data).build()).     // update     final Map<String, Object> updateData = new HashMap<>(data).     @SuppressWarnings("unchecked")     Map<String, Object> address = (Map<String, Object>) updateData.get(ADDRESS).     updateData.put("Name", "MyCarManufacturer Renamed").     address.put("Street", "Main Street").     batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.UPDATE).body(updateData).build()).     // delete     batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build()).     final TestOlingo2ResponseHandler<List<Olingo2BatchResponse>> responseHandler = new TestOlingo2ResponseHandler<>().     // read to verify delete     batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build()).     olingoApp.batch(edm, null, batchParts, responseHandler).     final List<Olingo2BatchResponse> responseParts = responseHandler.await(15, TimeUnit.MINUTES).     assertEquals("Batch responses expected", 8, responseParts.size()).     assertNotNull(responseParts.get(0).getBody()).     final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody().     assertNotNull(feed).     LOG.info("Batch feed:  {}", prettyPrint(feed)).     ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody().     assertNotNull(dataEntry).     LOG.info("Batch read entry:  {}", prettyPrint(dataEntry)).     dataEntry = (ODataEntry) responseParts.get(3).getBody().     assertNotNull(dataEntry).     LOG.info("Batch read entry with expand:  {}", prettyPrint(dataEntry)).     dataEntry = (ODataEntry) responseParts.get(4).getBody().     assertNotNull(dataEntry).     LOG.info("Batch create entry:  {}", prettyPrint(dataEntry)).     assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), responseParts.get(5).getStatusCode()).     assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), responseParts.get(6).getStatusCode()).     assertEquals(HttpStatusCodes.NOT_FOUND.getStatusCode(), responseParts.get(7).getStatusCode()).     final Exception exception = (Exception) responseParts.get(7).getBody().     assertNotNull(exception).     LOG.info("Batch retrieve deleted entry:  {}", exception). }
false;private;0;13;;private Map<String, Object> getEntityData() {     Map<String, Object> data = new HashMap<>().     data.put(ID_PROPERTY, "123").     data.put("Name", "MyCarManufacturer").     data.put(FOUNDED_PROPERTY, new Date()).     Map<String, Object> address = new HashMap<>().     address.put("Street", "Main").     address.put("ZipCode", "42421").     address.put("City", "Fairy City").     address.put("Country", "FarFarAway").     data.put(ADDRESS, address).     return data. }
false;private,static;1;9;;private static String prettyPrint(ODataFeed dataFeed) {     StringBuilder builder = new StringBuilder().     builder.append("[\n").     for (ODataEntry entry : dataFeed.getEntries()) {         builder.append(prettyPrint(entry.getProperties(), 1)).append('\n').     }     builder.append("]\n").     return builder.toString(). }
false;private,static;1;3;;private static String prettyPrint(ODataEntry createdEntry) {     return prettyPrint(createdEntry.getProperties(), 0). }
false;private,static;2;36;;private static String prettyPrint(Map<String, Object> properties, int level) {     StringBuilder b = new StringBuilder().     Set<Map.Entry<String, Object>> entries = properties.entrySet().     for (Map.Entry<String, Object> entry : entries) {         indent(b, level).         b.append(entry.getKey()).append(": ").         Object value = entry.getValue().         if (value instanceof Map) {             @SuppressWarnings("unchecked")             final Map<String, Object> objectMap = (Map<String, Object>) value.             value = prettyPrint(objectMap, level + 1).             b.append(value).append(NEW_LINE).         } else if (value instanceof Calendar) {             Calendar cal = (Calendar) value.             value = DateFormat.getInstance().format(cal.getTime()).             b.append(value).append(NEW_LINE).         } else if (value instanceof ODataDeltaFeed) {             ODataDeltaFeed feed = (ODataDeltaFeed) value.             List<ODataEntry> inlineEntries = feed.getEntries().             b.append("{").             for (ODataEntry oDataEntry : inlineEntries) {                 value = prettyPrint(oDataEntry.getProperties(), level + 1).                 b.append("\n[\n").append(value).append("\n],").             }             b.deleteCharAt(b.length() - 1).             indent(b, level).             b.append("}\n").         } else {             b.append(value).append(NEW_LINE).         }     }     // remove last line break     b.deleteCharAt(b.length() - 1).     return b.toString(). }
false;private,static;2;5;;private static void indent(StringBuilder builder, int indentLevel) {     for (int i = 0. i < indentLevel. i++) {         builder.append("  ").     } }
false;public;2;14;;@Override public void onResponse(T response, Map<String, String> responseHeaders) {     this.response = response.     if (LOG.isDebugEnabled()) {         if (response instanceof ODataFeed) {             LOG.debug("Received response: {}", prettyPrint((ODataFeed) response)).         } else if (response instanceof ODataEntry) {             LOG.debug("Received response: {}", prettyPrint((ODataEntry) response)).         } else {             LOG.debug("Received response: {}", response).         }     }     latch.countDown(). }
false;public;1;5;;@Override public void onException(Exception ex) {     error = ex.     latch.countDown(). }
false;public;0;5;;@Override public void onCanceled() {     error = new IllegalStateException("Request Canceled").     latch.countDown(). }
false;public;0;3;;public T await() throws Exception {     return await(TIMEOUT, TimeUnit.SECONDS). }
false;public;2;8;;public T await(long timeout, TimeUnit unit) throws Exception {     assertTrue("Timeout waiting for response", latch.await(timeout, unit)).     if (error != null) {         throw error.     }     assertNotNull("Response", response).     return response. }
false;public;0;6;;public void reset() {     latch.countDown().     latch = new CountDownLatch(1).     response = null.     error = null. }
