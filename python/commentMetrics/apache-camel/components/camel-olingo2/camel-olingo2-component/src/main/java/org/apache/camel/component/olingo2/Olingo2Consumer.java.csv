commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public void onResponse(Object response, Map<String, String> responseHeaders) {     if (resultIndex != null) {         response = resultIndex.filterResponse(response).     }     result[0] = response.     latch.countDown(). }
false;public;1;5;;@Override public void onException(Exception ex) {     error[0] = ex.     latch.countDown(). }
false;public;0;5;;@Override public void onCanceled() {     error[0] = new RuntimeCamelException("OData HTTP Request cancelled").     latch.countDown(). }
false;protected;0;63;;@Override protected int poll() throws Exception {     // invoke the consumer method     final Map<String, Object> args = new HashMap<>().     args.putAll(endpoint.getEndpointProperties()).     // let the endpoint and the Consumer intercept properties     endpoint.interceptProperties(args).     interceptProperties(args).     try {         // create responseHandler         final CountDownLatch latch = new CountDownLatch(1).         final Object[] result = new Object[1].         final Exception[] error = new Exception[1].         args.put(Olingo2Endpoint.RESPONSE_HANDLER_PROPERTY, new Olingo2ResponseHandler<Object>() {              @Override             public void onResponse(Object response, Map<String, String> responseHeaders) {                 if (resultIndex != null) {                     response = resultIndex.filterResponse(response).                 }                 result[0] = response.                 latch.countDown().             }              @Override             public void onException(Exception ex) {                 error[0] = ex.                 latch.countDown().             }              @Override             public void onCanceled() {                 error[0] = new RuntimeCamelException("OData HTTP Request cancelled").                 latch.countDown().             }         }).         doInvokeMethod(args).         // guaranteed to return, since an exception on timeout is expected!!!         latch.await().         if (error[0] != null) {             throw error[0].         }         //          if (result[0] instanceof ODataFeed && (((ODataFeed) result[0]).getEntries().isEmpty())) {             return 0.         } else {             int processed = ApiConsumerHelper.getResultsProcessed(this, result[0], isSplitResult()).             return processed.         }     } catch (Throwable t) {         throw RuntimeCamelException.wrapRuntimeCamelException(t).     } }
false;public;1;17;;@Override public void interceptProperties(Map<String, Object> properties) {     //      // If we have a filterAlreadySeen property then initialise the filter index     //      Object value = properties.get(Olingo2Endpoint.FILTER_ALREADY_SEEN).     if (value == null) {         return.     }     //      if (Boolean.parseBoolean(value.toString()) && resultIndex == null) {         resultIndex = new Olingo2Index().     } }
false;public;2;8;;@Override public void interceptResult(Object result, Exchange resultExchange) {     if (resultIndex == null) {         return.     }     resultIndex.index(result). }
false;public;1;15;;@Override public Object splitResult(Object result) {     List<Object> splitResult = new ArrayList<>().     if (result instanceof ODataFeed) {         ODataFeed odataFeed = (ODataFeed) result.         for (ODataEntry entry : odataFeed.getEntries()) {             splitResult.add(entry).         }     } else if (result instanceof ODataEntry) {         splitResult.add(result).     }     return splitResult. }
