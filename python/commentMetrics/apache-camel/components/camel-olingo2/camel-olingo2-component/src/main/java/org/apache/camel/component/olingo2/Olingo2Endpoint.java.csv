commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new Olingo2Producer(this). }
false;public;1;14;;public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     // only read method is supported     if (!READ_METHOD.equals(methodName) && !UREAD_METHOD.equals(methodName)) {         throw new IllegalArgumentException("Only read method is supported for consumer endpoints").     }     final Olingo2Consumer consumer = new Olingo2Consumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<Olingo2Configuration> getPropertiesHelper() {     return Olingo2PropertiesHelper.getHelper(). }
false;protected;0;3;;protected String getThreadProfileName() {     return Olingo2Constants.THREAD_PROFILE_NAME. }
false;public;1;7;;@Override public void configureProperties(Map<String, Object> options) {     // handle individual query params     parseQueryParams(options).     super.configureProperties(options). }
false;protected;0;9;;@Override protected void afterConfigureProperties() {     // set default inBody     if (!(READ_METHOD.equals(methodName) || DELETE_METHOD.equals(methodName) || UREAD_METHOD.equals(methodName)) && inBody == null) {         inBody = DATA_PROPERTY.     }     createProxy(). }
false;public,synchronized;2;4;;@Override public synchronized Object getApiProxy(ApiMethod method, Map<String, Object> args) {     return apiProxy.getOlingo2App(). }
false;public;0;4;;@Override public Olingo2Component getComponent() {     return (Olingo2Component) super.getComponent(). }
false;protected;0;6;;@Override protected void doStart() throws Exception {     if (apiProxy == null) {         createProxy().     } }
false;protected;0;8;;@Override protected void doStop() throws Exception {     if (apiProxy != null) {         // close the apiProxy         getComponent().closeApiProxy(apiProxy).         apiProxy = null.     } }
false;public;1;9;;@Override public void interceptPropertyNames(Set<String> propertyNames) {     // edm is computed on first call to getApiProxy(), and responseHandler is provided by consumer and producer     if (!DELETE_METHOD.equals(methodName)) {         propertyNames.add(EDM_PROPERTY).     }     propertyNames.add(RESPONSE_HANDLER_PROPERTY). }
false;public;1;28;;@Override public void interceptProperties(Map<String, Object> properties) {     // read Edm if not set yet     properties.put(EDM_PROPERTY, apiProxy.getEdm()).     // handle filterAlreadySeen property     properties.put(FILTER_ALREADY_SEEN, configuration.getFilterAlreadySeen()).     // handle keyPredicate     final String keyPredicate = (String) properties.get(KEY_PREDICATE_PROPERTY).     if (keyPredicate != null) {         // make sure a resource path is provided         final String resourcePath = (String) properties.get(RESOURCE_PATH_PROPERTY).         if (resourcePath == null) {             throw new IllegalArgumentException("Resource path must be provided in endpoint URI, or URI parameter '" + RESOURCE_PATH_PROPERTY + "', or exchange header '" + Olingo2Constants.PROPERTY_PREFIX + RESOURCE_PATH_PROPERTY + "'").         }         // append keyPredicate to dynamically create resource path         properties.put(RESOURCE_PATH_PROPERTY, resourcePath + '(' + keyPredicate + ')').     }     // handle individual queryParams     parseQueryParams(properties). }
false;private;0;3;;private void createProxy() {     apiProxy = getComponent().createApiProxy(getConfiguration()). }
false;private;1;43;;private void parseQueryParams(Map<String, Object> options) {     // extract non-endpoint properties as query params     final Map<String, String> queryParams = new HashMap<>().     for (Iterator<Map.Entry<String, Object>> it = options.entrySet().iterator(). it.hasNext(). ) {         final Map.Entry<String, Object> entry = it.next().         final String paramName = entry.getKey().         /**          * Avoid swallowing consumer scheduler properties, which          * get processed in configureProperties()          */         if (paramName.startsWith("consumer.")) {             continue.         }         if (!endpointPropertyNames.contains(paramName)) {             // add to query params             final Object value = entry.getValue().             if (value == null) {                 throw new IllegalArgumentException("Null value for query parameter " + paramName).             }             queryParams.put(paramName, value.toString()).             // remove entry from supplied options             it.remove().         }     }     if (!queryParams.isEmpty()) {         @SuppressWarnings("unchecked")         final Map<String, String> oldParams = (Map<String, String>) options.get(QUERY_PARAMS_PROPERTY).         if (oldParams == null) {             // set queryParams property             options.put(QUERY_PARAMS_PROPERTY, queryParams).         } else {             // overwrite old params in supplied map             oldParams.putAll(queryParams).         }     } }
