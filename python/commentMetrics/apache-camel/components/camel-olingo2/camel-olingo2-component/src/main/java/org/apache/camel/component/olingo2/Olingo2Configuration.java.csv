commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Olingo2ApiName getApiName() {     return apiName. }
true;public;1;3;/**  * What kind of operation to perform  */ ;/**  * What kind of operation to perform  */ public void setApiName(Olingo2ApiName apiName) {     this.apiName = apiName. }
false;public;0;3;;public String getMethodName() {     return methodName. }
true;public;1;3;/**  * What sub operation to use for the selected operation  */ ;/**  * What sub operation to use for the selected operation  */ public void setMethodName(String methodName) {     this.methodName = methodName. }
false;public;0;3;;public String getServiceUri() {     return serviceUri. }
true;public;1;3;/**  * Target OData service base URI, e.g. http://services.odata.org/OData/OData.svc  */ ;/**  * Target OData service base URI, e.g. http://services.odata.org/OData/OData.svc  */ public void setServiceUri(String serviceUri) {     this.serviceUri = serviceUri. }
false;public;0;3;;public String getContentType() {     return contentType. }
true;public;1;3;/**  * Content-Type header value can be used to specify JSON or XML message format, defaults to application/json.charset=utf-8  */ ;/**  * Content-Type header value can be used to specify JSON or XML message format, defaults to application/json.charset=utf-8  */ public void setContentType(String contentType) {     this.contentType = contentType. }
false;public;0;3;;public Map<String, String> getHttpHeaders() {     return httpHeaders. }
true;public;1;3;/**  * Custom HTTP headers to inject into every request, this could include OAuth tokens, etc.  */ ;/**  * Custom HTTP headers to inject into every request, this could include OAuth tokens, etc.  */ public void setHttpHeaders(Map<String, String> httpHeaders) {     this.httpHeaders = httpHeaders. }
false;public;0;3;;public int getConnectTimeout() {     return connectTimeout. }
true;public;1;3;/**  * HTTP connection creation timeout in milliseconds, defaults to 30,000 (30 seconds)  */ ;/**  * HTTP connection creation timeout in milliseconds, defaults to 30,000 (30 seconds)  */ public void setConnectTimeout(int connectTimeout) {     this.connectTimeout = connectTimeout. }
false;public;0;3;;public int getSocketTimeout() {     return socketTimeout. }
true;public;1;3;/**  * HTTP request timeout in milliseconds, defaults to 30,000 (30 seconds)  */ ;/**  * HTTP request timeout in milliseconds, defaults to 30,000 (30 seconds)  */ public void setSocketTimeout(int socketTimeout) {     this.socketTimeout = socketTimeout. }
false;public;0;3;;public HttpHost getProxy() {     return proxy. }
true;public;1;3;/**  * HTTP proxy server configuration  */ ;/**  * HTTP proxy server configuration  */ public void setProxy(HttpHost proxy) {     this.proxy = proxy. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * To configure security using SSLContextParameters  */ ;/**  * To configure security using SSLContextParameters  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;3;;public HttpAsyncClientBuilder getHttpAsyncClientBuilder() {     return httpAsyncClientBuilder. }
true;public;1;3;/**  * Custom HTTP async client builder for more complex HTTP client configuration, overrides connectionTimeout, socketTimeout, proxy and sslContext.  * Note that a socketTimeout MUST be specified in the builder, otherwise OData requests could block indefinitely  */ ;/**  * Custom HTTP async client builder for more complex HTTP client configuration, overrides connectionTimeout, socketTimeout, proxy and sslContext.  * Note that a socketTimeout MUST be specified in the builder, otherwise OData requests could block indefinitely  */ public void setHttpAsyncClientBuilder(HttpAsyncClientBuilder httpAsyncClientBuilder) {     this.httpAsyncClientBuilder = httpAsyncClientBuilder. }
false;public;0;3;;public HttpClientBuilder getHttpClientBuilder() {     return httpClientBuilder. }
true;public;1;3;/**  * Custom HTTP client builder for more complex HTTP client configuration, overrides connectionTimeout, socketTimeout, proxy and sslContext.  * Note that a socketTimeout MUST be specified in the builder, otherwise OData requests could block indefinitely  */ ;/**  * Custom HTTP client builder for more complex HTTP client configuration, overrides connectionTimeout, socketTimeout, proxy and sslContext.  * Note that a socketTimeout MUST be specified in the builder, otherwise OData requests could block indefinitely  */ public void setHttpClientBuilder(HttpClientBuilder httpClientBuilder) {     this.httpClientBuilder = httpClientBuilder. }
true;public;0;3;/**  * Filter flag for filtering out already seen results  */ ;/**  * Filter flag for filtering out already seen results  */ public boolean getFilterAlreadySeen() {     return filterAlreadySeen. }
true;public;1;3;/**  * Set this to true to filter out results that have already been communicated by this component.  * @param filterAlreadySeen  */ ;/**  * Set this to true to filter out results that have already been communicated by this component.  * @param filterAlreadySeen  */ public void setFilterAlreadySeen(boolean filterAlreadySeen) {     this.filterAlreadySeen = filterAlreadySeen. }
false;public;0;14;;@Override public int hashCode() {     return new HashCodeBuilder().append(serviceUri).append(contentType).append(httpHeaders).append(connectTimeout).append(socketTimeout).append(proxy).append(sslContextParameters).append(httpAsyncClientBuilder).append(httpClientBuilder).hashCode(). }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (obj instanceof Olingo2Configuration) {         Olingo2Configuration other = (Olingo2Configuration) obj.         return serviceUri == null ? other.serviceUri == null : serviceUri.equals(other.serviceUri) && contentType == null ? other.contentType == null : contentType.equals(other.contentType) && httpHeaders == null ? other.httpHeaders == null : httpHeaders.equals(other.httpHeaders) && connectTimeout == other.connectTimeout && socketTimeout == other.socketTimeout && proxy == null ? other.proxy == null : proxy.equals(other.proxy) && sslContextParameters == null ? other.sslContextParameters == null : sslContextParameters.equals(other.sslContextParameters) && httpAsyncClientBuilder == null ? other.httpAsyncClientBuilder == null : httpAsyncClientBuilder.equals(other.httpAsyncClientBuilder) && httpClientBuilder == null ? other.httpClientBuilder == null : httpClientBuilder.equals(other.httpClientBuilder).     }     return false. }
