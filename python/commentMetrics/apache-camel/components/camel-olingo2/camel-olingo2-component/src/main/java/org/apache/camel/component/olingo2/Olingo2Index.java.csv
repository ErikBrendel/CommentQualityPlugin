commented;modifiers;parameterAmount;loc;comment;code
true;private;1;7;/**  * Hash only certain data since other parts change between message  * exchanges.  *  * @param metadata  * @return hashcode of metadata  */ ;/**  * Hash only certain data since other parts change between message  * exchanges.  *  * @param metadata  * @return hashcode of metadata  */ private int hash(EntryMetadata metadata) {     final int prime = 31.     int result = 1.     result = prime * result + ((metadata.getId() == null) ? 0 : metadata.getId().hashCode()).     result = prime * result + ((metadata.getUri() == null) ? 0 : metadata.getUri().hashCode()).     return result. }
true;private;1;12;/**  * Hash entry leaving out certain fields that change between exchange  * messages  *  * @param entry  * @return hascode of entry  */ ;/**  * Hash entry leaving out certain fields that change between exchange  * messages  *  * @param entry  * @return hascode of entry  */ private int hash(ODataEntry entry) {     final int prime = 31.     int result = 1.     // Hash metadata to ignore certain entries     result = prime * result + ((entry.getMetadata() == null) ? 0 : hash(entry.getMetadata())).     result = prime * result + ((entry.getProperties() == null) ? 0 : entry.getProperties().hashCode()).     return result. }
false;private;1;6;;private Object filter(Object o) {     if (resultIndex.contains(o.hashCode())) {         return null.     }     return o. }
false;private;1;3;;private void indexDefault(Object o) {     resultIndex.add(o.hashCode()). }
false;private;1;11;;private Iterable<?> filter(Iterable<?> iterable) {     List<Object> filtered = new ArrayList<>().     for (Object o : iterable) {         if (resultIndex.contains(o.hashCode())) {             continue.         }         filtered.add(o).     }     return filtered. }
false;private;1;5;;private void index(Iterable<?> iterable) {     for (Object o : iterable) {         resultIndex.add(o.hashCode()).     } }
false;private;1;17;;private ODataFeed filter(ODataFeed odataFeed) {     List<ODataEntry> entries = odataFeed.getEntries().     if (entries.isEmpty()) {         return odataFeed.     }     List<ODataEntry> copyEntries = new ArrayList<>().     copyEntries.addAll(entries).     for (ODataEntry entry : copyEntries) {         if (resultIndex.contains(hash(entry))) {             entries.remove(entry).         }     }     return odataFeed. }
false;private;1;5;;private void index(ODataFeed odataFeed) {     for (ODataEntry entry : odataFeed.getEntries()) {         resultIndex.add(hash(entry)).     } }
true;public;1;9;/**  * Index the results  */ ;/**  * Index the results  */ public void index(Object result) {     if (result instanceof ODataFeed) {         index((ODataFeed) result).     } else if (result instanceof Iterable) {         index((Iterable<?>) result).     } else {         indexDefault(result).     } }
false;public;1;19;;@SuppressWarnings("unchecked") public Object filterResponse(Object response) {     if (response instanceof ODataFeed) {         response = filter((ODataFeed) response).     } else if (response instanceof Iterable) {         response = filter((Iterable<Object>) response).     } else if (response.getClass().isArray()) {         List<Object> result = new ArrayList<>().         final int size = Array.getLength(response).         for (int i = 0. i < size. i++) {             result.add(Array.get(response, i)).         }         response = filter(result).     } else {         response = filter(response).     }     return response. }
