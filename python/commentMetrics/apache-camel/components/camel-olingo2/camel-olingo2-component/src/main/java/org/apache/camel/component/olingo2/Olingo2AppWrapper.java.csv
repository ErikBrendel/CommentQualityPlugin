commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Olingo2App getOlingo2App() {     return olingo2App. }
false;public;0;3;;public void close() {     olingo2App.close(). }
false;public;2;5;;@Override public void onResponse(Edm response, Map<String, String> responseHeaders) {     edm = response.     latch.countDown(). }
false;public;1;5;;@Override public void onException(Exception ex) {     error[0] = ex.     latch.countDown(). }
false;public;0;5;;@Override public void onCanceled() {     error[0] = new RuntimeCamelException("OData HTTP request cancelled!").     latch.countDown(). }
true;public;0;58;// double checked locking based singleton Edm reader ;// double checked locking based singleton Edm reader public Edm getEdm() throws RuntimeCamelException {     Edm localEdm = edm.     if (localEdm == null) {         synchronized (this) {             localEdm = edm.             if (localEdm == null) {                 final CountDownLatch latch = new CountDownLatch(1).                 final Exception[] error = new Exception[1].                 olingo2App.read(null, "$metadata", null, null, new Olingo2ResponseHandler<Edm>() {                      @Override                     public void onResponse(Edm response, Map<String, String> responseHeaders) {                         edm = response.                         latch.countDown().                     }                      @Override                     public void onException(Exception ex) {                         error[0] = ex.                         latch.countDown().                     }                      @Override                     public void onCanceled() {                         error[0] = new RuntimeCamelException("OData HTTP request cancelled!").                         latch.countDown().                     }                 }).                 try {                     // wait until response or timeout                     latch.await().                     final Exception ex = error[0].                     if (ex != null) {                         if (ex instanceof RuntimeCamelException) {                             throw (RuntimeCamelException) ex.                         } else {                             final String message = ex.getMessage() != null ? ex.getMessage() : ex.getClass().getName().                             throw new RuntimeCamelException("Error reading EDM: " + message, ex).                         }                     }                 } catch (InterruptedException e) {                     throw new RuntimeCamelException(e.getMessage(), e).                 }                 localEdm = edm.             }         }     }     return localEdm. }
