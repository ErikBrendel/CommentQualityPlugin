commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void consumerReceivedPreAndPostEntryVisitedEventNotifications() throws Exception {     currentCache().put(KEY_ONE, VALUE_ONE).     mockResult.expectedMessageCount(2).     mockResult.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_VISITED").     mockResult.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(true).     mockResult.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResult.message(0).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE).     mockResult.message(1).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_VISITED").     mockResult.message(1).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false).     mockResult.message(1).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResult.message(1).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE).     currentCache().get(KEY_ONE).     mockResult.assertIsSatisfied(). }
false;public;0;5;;@Override public void configure() {     from("infinispan?cacheContainer=#cacheContainer&sync=false&eventTypes=CACHE_ENTRY_VISITED").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("infinispan?cacheContainer=#cacheContainer&sync=false&eventTypes=CACHE_ENTRY_VISITED").to("mock:result").         }     }. }
