commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override public void createCacheManagers() throws Throwable {     builderUsed = new ConfigurationBuilder().     builderUsed.clustering().cacheMode(cacheMode).     if (tx) {         builderUsed.transaction().transactionMode(TransactionMode.TRANSACTIONAL).     }     if (cacheMode.isDistributed()) {         builderUsed.clustering().hash().numOwners(1).     }     if (cacheName != null) {         createClusteredCaches(clusterSize, cacheName, builderUsed).     } else {         createClusteredCaches(clusterSize, builderUsed).     } }
false;public;0;13;;@Override @Before public void setUp() throws Exception {     ClusteredCacheSupport cluster = new ClusteredCacheSupport(CacheMode.DIST_SYNC, false, 2).     try {         cluster.createCacheManagers().         clusteredCacheContainers = cluster.getCacheManagers().     } catch (Throwable ex) {         throw new Exception(ex).     }     super.setUp(). }
false;public;0;9;;@Override public void tearDown() throws Exception {     super.tearDown().     // Has to be done later, maybe CamelTestSupport should     for (BasicCacheContainer container : clusteredCacheContainers) {         container.stop().     } }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("cacheContainer", clusteredCacheContainers.get(0)).     return registry. }
false;protected;0;3;;protected Cache<Object, Object> defaultCache() {     return clusteredCacheContainers.get(0).getCache(). }
false;protected;1;3;;protected Cache<Object, Object> defaultCache(int index) {     return clusteredCacheContainers.get(index).getCache(). }
false;protected;1;3;;protected Cache<Object, Object> namedCache(String name) {     return clusteredCacheContainers.get(0).getCache(name). }
false;protected;2;3;;protected Cache<Object, Object> namedCache(int index, String name) {     return clusteredCacheContainers.get(index).getCache(name). }
false;protected;0;6;;protected void injectTimeService() {     ts0 = new ControlledTimeService(0).     TestingUtil.replaceComponent(clusteredCacheContainers.get(0), TimeService.class, ts0, true).     ts1 = new ControlledTimeService(0).     TestingUtil.replaceComponent(clusteredCacheContainers.get(1), TimeService.class, ts1, true). }
