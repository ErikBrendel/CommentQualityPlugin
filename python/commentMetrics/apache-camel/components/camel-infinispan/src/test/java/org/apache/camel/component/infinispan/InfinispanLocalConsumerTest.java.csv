commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void consumerReceivedPreAndPostEntryCreatedEventNotifications() throws Exception {     mockResult.expectedMessageCount(2).     mockResult.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_CREATED").     mockResult.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(true).     mockResult.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResult.message(0).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE).     mockResult.message(1).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_CREATED").     mockResult.message(1).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false).     mockResult.message(1).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResult.message(1).outHeader(InfinispanConstants.KEY).isEqualTo(KEY_ONE).     currentCache().put(KEY_ONE, VALUE_ONE).     mockResult.assertIsSatisfied(). }
false;public;0;16;;@Test public void consumerReceivedExpirationEventNotification() throws Exception {     mockResult2.expectedMessageCount(1).     mockResult2.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_EXPIRED").     mockResult2.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false).     mockResult2.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResult2.message(0).outHeader(InfinispanConstants.KEY).isEqualTo("keyTwo").     injectTimeService().     currentCache().put("keyTwo", "valueTwo", 1000, TimeUnit.MILLISECONDS).     ts.advance(1001).     // expiration events are thrown only after a get if expiration reaper thread is not enabled     assertNull(currentCache().get("keyTwo")).     mockResult2.assertIsSatisfied(). }
false;public;0;7;;@Override public void configure() {     from("infinispan?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_CREATED").to("mock:result").     from("infinispan?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_EXPIRED").to("mock:result2"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("infinispan?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_CREATED").to("mock:result").             from("infinispan?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_EXPIRED").to("mock:result2").         }     }. }
