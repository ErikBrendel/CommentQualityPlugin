commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     GlobalConfiguration global = new GlobalConfigurationBuilder().globalJmxStatistics().allowDuplicateDomains(true).build().     Configuration conf = new ConfigurationBuilder().build().     basicCacheContainer = new DefaultCacheManager(global, conf).     basicCacheContainer.start().     idempotentRepository = InfinispanIdempotentRepository.infinispanIdempotentRepository(basicCacheContainer, cacheName). }
false;public;0;4;;@After public void tearDown() throws Exception {     basicCacheContainer.stop(). }
false;public;0;8;;@Test public void addsNewKeysToCache() throws Exception {     assertTrue(idempotentRepository.add("One")).     assertTrue(idempotentRepository.add("Two")).     assertTrue(getCache().containsKey("One")).     assertTrue(getCache().containsKey("Two")). }
false;public;0;5;;@Test public void skipsAddingSecondTimeTheSameKey() throws Exception {     assertTrue(idempotentRepository.add("One")).     assertFalse(idempotentRepository.add("One")). }
false;public;0;8;;@Test public void containsPreviouslyAddedKey() throws Exception {     assertFalse(idempotentRepository.contains("One")).     idempotentRepository.add("One").     assertTrue(idempotentRepository.contains("One")). }
false;public;0;8;;@Test public void removesAnExistingKey() throws Exception {     idempotentRepository.add("One").     assertTrue(idempotentRepository.remove("One")).     assertFalse(idempotentRepository.contains("One")). }
false;public;0;4;;@Test public void doesntRemoveMissingKey() throws Exception {     assertFalse(idempotentRepository.remove("One")). }
false;public;0;13;;@Test public void clearCache() throws Exception {     assertTrue(idempotentRepository.add("One")).     assertTrue(idempotentRepository.add("Two")).     assertTrue(getCache().containsKey("One")).     assertTrue(getCache().containsKey("Two")).     idempotentRepository.clear().     assertFalse(getCache().containsKey("One")).     assertFalse(getCache().containsKey("Two")). }
false;private;0;3;;private BasicCache<Object, Object> getCache() {     return basicCacheContainer.getCache(cacheName). }
