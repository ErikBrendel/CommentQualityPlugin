commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() {     TestResourceTracker.testStarted(InfinispanClusteredConsumerTest.class.getName()). }
false;public,static;0;4;;@AfterClass public static void afterClass() {     TestResourceTracker.testFinished(InfinispanClusteredConsumerTest.class.getName()). }
false;public;0;14;;@Test public void consumerReceivedPostEntryCreatedEventNotifications() throws Exception {     MagicKey key = new MagicKey(defaultCache(1)).     mockResultCreatedEvents.expectedMessageCount(1).     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_CREATED").     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false).     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.KEY).isEqualTo(key.toString()).     defaultCache(1).put(key, "value").     mockResultCreatedEvents.assertIsSatisfied(). }
false;public;0;28;;@Test public void consumerReceivedExpirationEventNotifications() throws Exception {     MagicKey key = new MagicKey(defaultCache(1)).     mockResultCreatedEvents.expectedMessageCount(1).     mockResultExpiredEvents.expectedMessageCount(1).     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_CREATED").     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false).     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResultCreatedEvents.message(0).outHeader(InfinispanConstants.KEY).isEqualTo(key.toString()).     mockResultExpiredEvents.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_EXPIRED").     mockResultExpiredEvents.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(false).     mockResultExpiredEvents.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull().     mockResultExpiredEvents.message(0).outHeader(InfinispanConstants.KEY).isEqualTo(key.toString()).     injectTimeService().     defaultCache(1).put(key, "value", 1000, TimeUnit.MILLISECONDS).     ts0.advance(1001).     ts1.advance(1001).     assertNull(defaultCache(1).get(key)).     mockResultCreatedEvents.assertIsSatisfied().     mockResultExpiredEvents.assertIsSatisfied(WAIT_TIMEOUT). }
false;public;0;7;;@Override public void configure() {     from("infinispan?cacheContainer=#cacheContainer&clusteredListener=true&eventTypes=CACHE_ENTRY_CREATED").to("mock:resultCreated").     from("infinispan?cacheContainer=#cacheContainer&clusteredListener=true&eventTypes=CACHE_ENTRY_EXPIRED").to("mock:resultExpired"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("infinispan?cacheContainer=#cacheContainer&clusteredListener=true&eventTypes=CACHE_ENTRY_CREATED").to("mock:resultCreated").             from("infinispan?cacheContainer=#cacheContainer&clusteredListener=true&eventTypes=CACHE_ENTRY_EXPIRED").to("mock:resultExpired").         }     }. }
