commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public Query build(QueryFactory queryFactory) {     return queryFactory.from(User.class).having("name").like("%abc%").toBuilder().build(). }
false;public;1;6;;@Override public Query build(QueryFactory queryFactory) {     return queryFactory.from(User.class).having("name").like("%A").toBuilder().build(). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("myCustomContainer", manager).     registry.bind("noResultQueryBuilder", NO_RESULT_QUERY_BUILDER).     registry.bind("withResultQueryBuilder", WITH_RESULT_QUERY_BUILDER).     return registry. }
false;public;0;9;;@Override public void configure() {     from("direct:start").to("infinispan:remote_query?cacheContainer=#myCustomContainer").     from("direct:noQueryResults").to("infinispan:remote_query?cacheContainer=#myCustomContainer&queryBuilder=#noResultQueryBuilder").     from("direct:queryWithResults").to("infinispan:remote_query?cacheContainer=#myCustomContainer&queryBuilder=#withResultQueryBuilder"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("infinispan:remote_query?cacheContainer=#myCustomContainer").             from("direct:noQueryResults").to("infinispan:remote_query?cacheContainer=#myCustomContainer&queryBuilder=#noResultQueryBuilder").             from("direct:queryWithResults").to("infinispan:remote_query?cacheContainer=#myCustomContainer&queryBuilder=#withResultQueryBuilder").         }     }. }
false;protected;0;22;;@Override protected void doPreSetup() throws IOException {     ConfigurationBuilder builder = new ConfigurationBuilder().addServer().host("localhost").port(11222).marshaller(new ProtoStreamMarshaller()).     manager = new RemoteCacheManager(builder.build()).     RemoteCache<String, String> metadataCache = manager.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME).     metadataCache.put("sample_bank_account/bank.proto", Util.read(InfinispanRemoteQueryProducerIT.class.getResourceAsStream("/sample_bank_account/bank.proto"))).     MarshallerRegistration.registerMarshallers(ProtoStreamMarshaller.getSerializationContext(manager)).     SerializationContext serCtx = ProtoStreamMarshaller.getSerializationContext(manager).     serCtx.registerProtoFiles(FileDescriptorSource.fromResources("/sample_bank_account/bank.proto")).     serCtx.registerMarshaller(new UserMarshaller()).     serCtx.registerMarshaller(new GenderMarshaller()). }
false;protected;0;16;;@Override protected void doPostSetup() throws Exception {     // pre-load data     RemoteCache<Object, Object> cache = manager.getCache("remote_query").     assertNotNull(cache).     cache.clear().     assertTrue(cache.isEmpty()).     for (final User user : USERS) {         String key = createKey(user).         cache.put(key, user).         assertTrue(cache.containsKey(key)).     } }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(OPERATION, InfinispanOperation.QUERY). }
false;public;0;13;;@Test public void producerQueryOperationWithoutQueryBuilder() throws Exception {     Exchange request = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(OPERATION, InfinispanOperation.QUERY).         }     }).     assertNull(request.getException()).     List<User> queryResult = request.getIn().getBody(List.class).     assertNull(queryResult). }
false;public;0;4;;@Test public void producerQueryWithoutResult() throws Exception {     producerQueryWithoutResult("direct:start", NO_RESULT_QUERY_BUILDER). }
false;public;0;4;;@Test public void producerQueryWithoutResultAndQueryBuilderFromConfig() throws Exception {     producerQueryWithoutResult("direct:noQueryResults", null). }
false;private;2;9;;private void producerQueryWithoutResult(String endpoint, final InfinispanQueryBuilder builder) throws Exception {     Exchange request = template.request(endpoint, createQueryProcessor(builder)).     assertNull(request.getException()).     List<User> queryResult = request.getIn().getBody(List.class).     assertNotNull(queryResult).     assertEquals(0, queryResult.size()). }
false;public;0;4;;@Test public void producerQueryWithResult() throws Exception {     producerQueryWithResult("direct:start", WITH_RESULT_QUERY_BUILDER). }
false;public;0;4;;@Test public void producerQueryWithResultAndQueryBuilderFromConfig() throws Exception {     producerQueryWithResult("direct:queryWithResults", null). }
false;private;2;10;;private void producerQueryWithResult(String endpoint, final InfinispanQueryBuilder builder) throws Exception {     Exchange request = template.request(endpoint, createQueryProcessor(builder)).     assertNull(request.getException()).     List<User> queryResult = request.getIn().getBody(List.class).     assertNotNull(queryResult).     assertEquals(2, queryResult.size()).     assertTrue(hasUser(queryResult, "nameA", "surnameA")).     assertTrue(hasUser(queryResult, "nameA", "surnameB")). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(OPERATION, InfinispanOperation.QUERY).     if (builder != null) {         exchange.getIn().setHeader(QUERY_BUILDER, builder).     } }
false;private;1;11;;private Processor createQueryProcessor(final InfinispanQueryBuilder builder) {     return new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(OPERATION, InfinispanOperation.QUERY).             if (builder != null) {                 exchange.getIn().setHeader(QUERY_BUILDER, builder).             }         }     }. }
