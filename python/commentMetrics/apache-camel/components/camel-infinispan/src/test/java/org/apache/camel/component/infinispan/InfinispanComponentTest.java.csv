commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void consumerReceivedEntryCreatedEventNotifications() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(2).     namedCache(cacheName).put(KEY_ONE, VALUE_ONE).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void producerPublishesKeyAndValue() throws Exception {     fluentTemplate().to("direct:start").withHeader(InfinispanConstants.KEY, KEY_ONE).withHeader(InfinispanConstants.VALUE, VALUE_ONE).send().     assertThat(namedCache(cacheName).get(KEY_ONE).toString(), is(VALUE_ONE)). }
false;public;0;7;;@Override public void configure() {     fromF("infinispan:%s?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_CREATED", cacheName).to("mock:result").     from("direct:start").toF("infinispan:%s?cacheContainer=#cacheContainer", cacheName). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             fromF("infinispan:%s?cacheContainer=#cacheContainer&eventTypes=CACHE_ENTRY_CREATED", cacheName).to("mock:result").             from("direct:start").toF("infinispan:%s?cacheContainer=#cacheContainer", cacheName).         }     }. }
