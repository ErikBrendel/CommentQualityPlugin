commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static boolean isEmbedded(BasicCacheContainer container) {     try {         return container instanceof EmbeddedCacheManager.     } catch (Throwable e) {         return false.     } }
false;public,static;1;7;;public static <K, V> boolean isEmbedded(BasicCache<K, V> cache) {     try {         return cache instanceof Cache.     } catch (Throwable e) {         return false.     } }
false;public,static;1;7;;public static boolean isRemote(BasicCacheContainer container) {     try {         return container instanceof RemoteCacheManager.     } catch (Throwable e) {         return false.     } }
false;public,static;1;3;;public static RemoteCacheManager asRemote(BasicCacheContainer container) {     return RemoteCacheManager.class.cast(container). }
false;public,static;1;7;;public static <K, V> boolean isRemote(BasicCache<K, V> cache) {     try {         return cache instanceof RemoteCache.     } catch (Throwable e) {         return false.     } }
false;public,static;1;4;;@SuppressWarnings("unchecked") public static <K, V> Cache<K, V> asEmbedded(BasicCache<K, V> cache) {     return Cache.class.cast(cache). }
false;public,static;1;4;;@SuppressWarnings("unchecked") public static <K, V> RemoteCache<K, V> asRemote(BasicCache<K, V> cache) {     return RemoteCache.class.cast(cache). }
false;public,static;1;4;;@SuppressWarnings("unchecked") public static <K, V> AdvancedCache<K, V> asAdvanced(BasicCache<K, V> cache) {     return Cache.class.cast(cache).getAdvancedCache(). }
false;public,static;1;7;;public static <K, V> BasicCache<K, V> ignoreReturnValuesCache(BasicCache<K, V> cache) {     if (isEmbedded(cache)) {         return ((Cache<K, V>) cache).getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES).     } else {         return cache.     } }
false;public,static;2;3;;public static boolean isInHeaderEmpty(Exchange exchange, String header) {     return isHeaderEmpty(exchange.getIn(), header). }
false;public,static;2;3;;public static boolean isHeaderEmpty(Message message, String header) {     return ObjectHelper.isEmpty(message.getHeader(header)). }
false;public,static;2;11;;public static Properties loadProperties(CamelContext camelContext, String uri) throws Exception {     try (InputStream is = openInputStream(camelContext, uri)) {         Properties properties = new Properties().         properties.load(is).         return properties.     } catch (IOException e) {     }     throw new FileNotFoundException("Cannot find resource: " + uri). }
false;public,static;2;8;;public static InputStream openInputStream(CamelContext camelContext, String uri) throws Exception {     if (camelContext != null) {         uri = camelContext.resolvePropertyPlaceholders(uri).         return ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, uri).     }     return Thread.currentThread().getContextClassLoader().getResourceAsStream(uri). }
