commented;modifiers;parameterAmount;loc;comment;code
false;public;0;71;;@Override public void start() throws Exception {     cacheContainer = configuration.getCacheContainer().     if (cacheContainer == null) {         final Object containerConf = configuration.getCacheContainerConfiguration().         // it and discard any other additional configuration.         if (containerConf != null) {             if (containerConf instanceof org.infinispan.client.hotrod.configuration.Configuration) {                 cacheContainer = new RemoteCacheManager((org.infinispan.client.hotrod.configuration.Configuration) containerConf, true).             } else if (containerConf instanceof org.infinispan.configuration.cache.Configuration) {                 cacheContainer = new DefaultCacheManager((org.infinispan.configuration.cache.Configuration) containerConf, true).             } else {                 throw new IllegalArgumentException("Unsupported CacheContainer Configuration type: " + containerConf.getClass()).             }         }         // connect to a remote cache so set-up a RemoteCacheManager         if (cacheContainer == null && configuration.getHosts() != null) {             ConfigurationBuilder builder = new ConfigurationBuilder().             builder.addServers(configuration.getHosts()).             if (camelContext != null && camelContext.getApplicationContextClassLoader() != null) {                 builder.classLoader(camelContext.getApplicationContextClassLoader()).             } else {                 builder.classLoader(Thread.currentThread().getContextClassLoader()).             }             Properties properties = new Properties().             // file.             if (ObjectHelper.isNotEmpty(configuration.getConfigurationUri())) {                 properties.putAll(InfinispanUtil.loadProperties(camelContext, configuration.getConfigurationUri())).             }             if (ObjectHelper.isNotEmpty(configuration.getConfigurationProperties())) {                 properties.putAll(configuration.getConfigurationProperties()).             }             if (!properties.isEmpty()) {                 builder.withProperties(properties).             }             cacheContainer = new RemoteCacheManager(builder.build(), true).         }         // file.         if (cacheContainer == null) {             if (ObjectHelper.isNotEmpty(configuration.getConfigurationUri())) {                 try (InputStream is = InfinispanUtil.openInputStream(camelContext, configuration.getConfigurationUri())) {                     cacheContainer = new DefaultCacheManager(is, true).                 }             } else {                 cacheContainer = new DefaultCacheManager(new org.infinispan.configuration.cache.ConfigurationBuilder().build()).             }         }         isManagedCacheContainer = true.     } }
false;public;0;6;;@Override public void stop() throws Exception {     if (isManagedCacheContainer) {         cacheContainer.stop().     } }
false;public;0;3;;public BasicCacheContainer getCacheContainer() {     return cacheContainer. }
false;public;0;3;;public boolean isCacheContainerEmbedded() {     return InfinispanUtil.isEmbedded(cacheContainer). }
false;public;0;3;;public boolean isCacheContainerRemote() {     return InfinispanUtil.isRemote(cacheContainer). }
false;public;1;17;;public <K, V> BasicCache<K, V> getCache(String cacheName) {     BasicCache<K, V> cache.     if (ObjectHelper.isEmpty(cacheName)) {         cache = cacheContainer.getCache().         cacheName = cache.getName().     } else {         cache = cacheContainer.getCache(cacheName).     }     LOGGER.trace("Cache[{}]", cacheName).     if (configuration.hasFlags() && InfinispanUtil.isEmbedded(cache)) {         cache = new DecoratedCache(InfinispanUtil.asAdvanced(cache), configuration.getFlags()).     }     return cache. }
false;public;2;17;;public <K, V> BasicCache<K, V> getCache(String cacheName, boolean forceReturnValue) {     if (isCacheContainerRemote()) {         BasicCache<K, V> cache.         if (ObjectHelper.isEmpty(cacheName)) {             cache = InfinispanUtil.asRemote(cacheContainer).getCache(forceReturnValue).             cacheName = cache.getName().         } else {             cache = InfinispanUtil.asRemote(cacheContainer).getCache(cacheName, forceReturnValue).         }         LOGGER.trace("Cache[{}]", cacheName).         return cache.     } else {         return getCache(cacheName).     } }
false;public;2;3;;public <K, V> BasicCache<K, V> getCache(Exchange exchange, String defaultCache) {     return getCache(exchange.getIn(), defaultCache). }
false;public;2;7;;public <K, V> BasicCache<K, V> getCache(Message message, String defaultCache) {     BasicCache<K, V> cache = getCache(message.getHeader(InfinispanConstants.CACHE_NAME, defaultCache, String.class)).     return message.getHeader(InfinispanConstants.IGNORE_RETURN_VALUES) != null ? cache : InfinispanUtil.ignoreReturnValuesCache(cache). }
