commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testMarshalWithEncoding() throws Exception {     PurchaseOrder bean = new PurchaseOrder().     bean.setName("Beer").     bean.setAmount(23).     bean.setPrice(2.5).     MockEndpoint mock = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     mock.message(0).body(String.class).startsWith("<?xml version=\"1.0\" encoding=\"iso-8859-1\" standalone=\"yes\"?>").     mock.message(0).body(String.class).contains("purchaseOrder").     mock.message(0).body(String.class).contains("amount=\"23.0\"").     mock.message(0).body(String.class).contains("price=\"2.5\"").     mock.message(0).body(String.class).contains("name=\"Beer\"").     template.sendBody("direct:start", bean).     mock.assertIsSatisfied(). }
false;public;0;19;;@Test public void testMarshalWithEncodingPropertyInExchange() throws Exception {     PurchaseOrder bean = new PurchaseOrder().     bean.setName("Beer").     bean.setAmount(23).     bean.setPrice(2.5).     MockEndpoint mock = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     mock.message(0).body(String.class).startsWith("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>").     mock.message(0).body(String.class).contains("purchaseOrder").     mock.message(0).body(String.class).contains("amount=\"23.0\"").     mock.message(0).body(String.class).contains("price=\"2.5\"").     mock.message(0).body(String.class).contains("name=\"Beer\"").     // the property should override the jaxb configuration     template.sendBodyAndProperty("direct:start", bean, Exchange.CHARSET_NAME, "utf-8").     mock.assertIsSatisfied(). }
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/example/springDataFormatWithEncoding.xml"). }
