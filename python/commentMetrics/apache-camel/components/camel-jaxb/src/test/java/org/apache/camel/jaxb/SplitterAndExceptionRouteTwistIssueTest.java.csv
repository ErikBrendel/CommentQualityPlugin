commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testErrorHandlingJaxb() throws Exception {     String correctExample = "abcdef".     String errorExample = "myerror\u0010".     mockRejectEndpoint.expectedMessageCount(1).     mockOutput.expectedMessageCount(4).     templateError.sendBody(correctExample).     templateError.sendBody(errorExample).     templateError.sendBody(correctExample).     templateError.sendBody(correctExample).     templateError.sendBody(correctExample).     mockRejectEndpoint.assertIsSatisfied().     mockOutput.assertIsSatisfied(). }
false;public;0;17;;@Test public void testErrorHandlingPlumber() throws Exception {     String correctExample = "abcdef".     String errorExample = "myerror\u0010".     mockRejectEndpoint.expectedMessageCount(1).     mockOutput.expectedMessageCount(4).     templateError2.sendBody(correctExample).     templateError2.sendBody(errorExample).     templateError2.sendBody(correctExample).     templateError2.sendBody(correctExample).     templateError2.sendBody(correctExample).     mockRejectEndpoint.assertIsSatisfied().     mockOutput.assertIsSatisfied(). }
false;public;1;11;;@Override public void process(Exchange exchange) throws Exception {     String text = (String) exchange.getIn().getBody().     Twits twits = new Twits().     Twit twit1 = new Twit().     twit1.setText(text).     twits.getTwits().add(twit1).     exchange.getIn().setBody(twits). }
false;public;1;15;;@Override public void process(Exchange exchange) throws Exception {     String text = (String) exchange.getIn().getBody().     StringBuilder twits = new StringBuilder().     twits.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>").     twits.append("<twits>").     twits.append("<twit>").     twits.append(text).     twits.append("</twit>").     twits.append("</twits>").     exchange.getIn().setBody(twits.toString()). }
false;public;0;56;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel(mockRejectEndpoint).useOriginalMessage().maximumRedeliveries(0).retryAttemptedLogLevel(LoggingLevel.WARN).logExhausted(true).logStackTrace(true).logRetryStackTrace(true)).     from("direct:error").handleFault().convertBodyTo(String.class, "UTF-8").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String text = (String) exchange.getIn().getBody().             Twits twits = new Twits().             Twit twit1 = new Twit().             twit1.setText(text).             twits.getTwits().add(twit1).             exchange.getIn().setBody(twits).         }     }).split().xpath("//twits/twit").streaming().to(mockOutput).     from("direct:error2").handleFault().convertBodyTo(String.class, "UTF-8").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String text = (String) exchange.getIn().getBody().             StringBuilder twits = new StringBuilder().             twits.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>").             twits.append("<twits>").             twits.append("<twit>").             twits.append(text).             twits.append("</twit>").             twits.append("</twits>").             exchange.getIn().setBody(twits.toString()).         }     }).split().xpath("//twits/twit").streaming().to(mockOutput). }
false;protected;0;62;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel(mockRejectEndpoint).useOriginalMessage().maximumRedeliveries(0).retryAttemptedLogLevel(LoggingLevel.WARN).logExhausted(true).logStackTrace(true).logRetryStackTrace(true)).             from("direct:error").handleFault().convertBodyTo(String.class, "UTF-8").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String text = (String) exchange.getIn().getBody().                     Twits twits = new Twits().                     Twit twit1 = new Twit().                     twit1.setText(text).                     twits.getTwits().add(twit1).                     exchange.getIn().setBody(twits).                 }             }).split().xpath("//twits/twit").streaming().to(mockOutput).             from("direct:error2").handleFault().convertBodyTo(String.class, "UTF-8").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String text = (String) exchange.getIn().getBody().                     StringBuilder twits = new StringBuilder().                     twits.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>").                     twits.append("<twits>").                     twits.append("<twit>").                     twits.append(text).                     twits.append("</twit>").                     twits.append("</twits>").                     exchange.getIn().setBody(twits.toString()).                 }             }).split().xpath("//twits/twit").streaming().to(mockOutput).         }     }. }
false;public;0;6;;public List<Twit> getTwits() {     if (twits == null) {         twits = new ArrayList<>().     }     return this.twits. }
false;public;0;7;;@Override public String toString() {     if (twits == null || twits.isEmpty()) {         return super.toString().     }     return super.toString() + "[" + twits.get(0).toString() + "]". }
false;public;0;3;;public String getText() {     return text. }
false;public;1;3;;public void setText(String value) {     this.text = value. }
false;public;0;4;;@Override public String toString() {     return text. }
