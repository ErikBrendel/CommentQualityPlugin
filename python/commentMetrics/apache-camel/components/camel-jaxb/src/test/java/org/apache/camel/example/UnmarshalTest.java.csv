commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSendXmlAndUnmarshal() throws Exception {     PurchaseOrder expected = new PurchaseOrder().     expected.setName("Wine").     expected.setAmount(123.45).     expected.setPrice(2.22).     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedBodiesReceived(expected).     template.sendBody("direct:start", "<purchaseOrder name='Wine' amount='123.45' price='2.22'/>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;7;;public void configure() {     DataFormat jaxb = new JaxbDataFormat("org.apache.camel.example").     from("direct:start").unmarshal(jaxb).to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             DataFormat jaxb = new JaxbDataFormat("org.apache.camel.example").             from("direct:start").unmarshal(jaxb).to("mock:result").         }     }. }
