commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;9;;public Object call() throws Exception {     PurchaseOrder bean = new PurchaseOrder().     bean.setName("Beer").     bean.setAmount(Double.valueOf("" + index)).     bean.setPrice(Double.valueOf("" + index) * 2).     template.sendBody("direct:start", bean).     return null. }
false;private;2;23;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").assertNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 PurchaseOrder bean = new PurchaseOrder().                 bean.setName("Beer").                 bean.setAmount(Double.valueOf("" + index)).                 bean.setPrice(Double.valueOf("" + index) * 2).                 template.sendBody("direct:start", bean).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;0;11;;public void configure() {     DataFormat jaxb = new JaxbDataFormat("org.apache.camel.example").     from("direct:start").marshal(jaxb).to("direct:marshalled").     from("direct:marshalled").unmarshal(jaxb).to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             DataFormat jaxb = new JaxbDataFormat("org.apache.camel.example").             from("direct:start").marshal(jaxb).to("direct:marshalled").             from("direct:marshalled").unmarshal(jaxb).to("mock:result").         }     }. }
