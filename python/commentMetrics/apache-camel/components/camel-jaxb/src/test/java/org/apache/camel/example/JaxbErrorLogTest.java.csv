commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testErrorHandling() throws Exception {     // the 2nd message is set to fail, but the 4 others should be routed     getMockEndpoint("mock:end").expectedMessageCount(4).     // FailingBean will cause message at index 2 to throw exception     for (int i = 0. i < 5. i++) {         sendBody("seda:test", new CannotMarshal(i)).     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("seda:test").bean(new FailingBean()).to("log:end", "mock:end"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:test").bean(new FailingBean()).to("log:end", "mock:end").         }     }. }
false;public;1;7;;@Handler public void handle(@Body CannotMarshal body) {     if (body.getMessageNo() == 2) {         // fail on second message         throw new RuntimeException("Kaboom").     } }
false;public;0;3;;public int getMessageNo() {     return messageNo. }
false;public;1;3;;public void setMessageNo(int messageNo) {     this.messageNo = messageNo. }
false;public;1;2;;public void setUhoh(String name) { }
false;public;0;3;;public String getUhoh() {     throw new RuntimeException("Can't marshal this"). }
false;public;0;4;;@Override public String toString() {     return "MessageNo. " + messageNo. }
