# id;timestamp;commentText;codeText;commentWords;codeWords
DataFormatConcurrentTest -> public Foo[] createFoo(int testCount) throws Exception;1333724606;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public Foo[] createFoo(int testCount) throws Exception {_        Foo[] foos = new Foo[testCount]__        for (int i = 0_ i < testCount_ i++) {_            Foo foo = new Foo()__            for (int x = 0_ x < fooBarSize_ x++) {_                Bar bar = new Bar()__                bar.setName("Name: " + x)__                bar.setValue("value: " + x)__                foo.getBarRefs().add(bar)__            }__            foos[i] = foo__        }__        return foos__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,foo,create,foo,int,test,count,throws,exception,foo,foos,new,foo,test,count,for,int,i,0,i,test,count,i,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,foos,i,foo,return,foos
DataFormatConcurrentTest -> public Foo[] createFoo(int testCount) throws Exception;1334399354;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public Foo[] createFoo(int testCount) throws Exception {_        Foo[] foos = new Foo[testCount]__        for (int i = 0_ i < testCount_ i++) {_            Foo foo = new Foo()__            for (int x = 0_ x < fooBarSize_ x++) {_                Bar bar = new Bar()__                bar.setName("Name: " + x)__                bar.setValue("value: " + x)__                foo.getBarRefs().add(bar)__            }__            foos[i] = foo__        }__        return foos__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,foo,create,foo,int,test,count,throws,exception,foo,foos,new,foo,test,count,for,int,i,0,i,test,count,i,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,foos,i,foo,return,foos
DataFormatConcurrentTest -> public Foo[] createFoo(int testCount) throws Exception;1334422300;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public Foo[] createFoo(int testCount) throws Exception {_        Foo[] foos = new Foo[testCount]__        for (int i = 0_ i < testCount_ i++) {_            Foo foo = new Foo()__            for (int x = 0_ x < fooBarSize_ x++) {_                Bar bar = new Bar()__                bar.setName("Name: " + x)__                bar.setValue("value: " + x)__                foo.getBarRefs().add(bar)__            }__            foos[i] = foo__        }__        return foos__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,foo,create,foo,int,test,count,throws,exception,foo,foos,new,foo,test,count,for,int,i,0,i,test,count,i,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,foos,i,foo,return,foos
DataFormatConcurrentTest -> public Foo[] createFoo(int testCount) throws Exception;1540108161;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public Foo[] createFoo(int testCount) throws Exception {_        Foo[] foos = new Foo[testCount]__        for (int i = 0_ i < testCount_ i++) {_            Foo foo = new Foo()__            for (int x = 0_ x < fooBarSize_ x++) {_                Bar bar = new Bar()__                bar.setName("Name: " + x)__                bar.setValue("value: " + x)__                foo.getBarRefs().add(bar)__            }__            foos[i] = foo__        }__        return foos__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,foo,create,foo,int,test,count,throws,exception,foo,foos,new,foo,test,count,for,int,i,0,i,test,count,i,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,foos,i,foo,return,foos
DataFormatConcurrentTest -> public ByteArrayInputStream[] createPayloads(int testCount) throws Exception;1333724606;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public ByteArrayInputStream[] createPayloads(int testCount) throws Exception {_        Foo foo = new Foo()__        for (int x = 0_ x < fooBarSize_ x++) {_            Bar bar = new Bar()__            bar.setName("Name: " + x)__            bar.setValue("value: " + x)__            foo.getBarRefs().add(bar)__        }_        Marshaller m = JAXBContext.newInstance(Foo.class, Bar.class).createMarshaller()__        StringWriter writer = new StringWriter()__        m.marshal(foo, writer)___        byte[] payload = writer.toString().getBytes()__        ByteArrayInputStream[] streams = new ByteArrayInputStream[testCount]__        for (int i = 0_ i < testCount_ i++) {_            streams[i] = new ByteArrayInputStream(payload)__        }__        return streams__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,byte,array,input,stream,create,payloads,int,test,count,throws,exception,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,marshaller,m,jaxbcontext,new,instance,foo,class,bar,class,create,marshaller,string,writer,writer,new,string,writer,m,marshal,foo,writer,byte,payload,writer,to,string,get,bytes,byte,array,input,stream,streams,new,byte,array,input,stream,test,count,for,int,i,0,i,test,count,i,streams,i,new,byte,array,input,stream,payload,return,streams
DataFormatConcurrentTest -> public ByteArrayInputStream[] createPayloads(int testCount) throws Exception;1334399354;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public ByteArrayInputStream[] createPayloads(int testCount) throws Exception {_        Foo foo = new Foo()__        for (int x = 0_ x < fooBarSize_ x++) {_            Bar bar = new Bar()__            bar.setName("Name: " + x)__            bar.setValue("value: " + x)__            foo.getBarRefs().add(bar)__        }_        Marshaller m = JAXBContext.newInstance(Foo.class, Bar.class).createMarshaller()__        StringWriter writer = new StringWriter()__        m.marshal(foo, writer)___        byte[] payload = writer.toString().getBytes()__        ByteArrayInputStream[] streams = new ByteArrayInputStream[testCount]__        for (int i = 0_ i < testCount_ i++) {_            streams[i] = new ByteArrayInputStream(payload)__        }__        return streams__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,byte,array,input,stream,create,payloads,int,test,count,throws,exception,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,marshaller,m,jaxbcontext,new,instance,foo,class,bar,class,create,marshaller,string,writer,writer,new,string,writer,m,marshal,foo,writer,byte,payload,writer,to,string,get,bytes,byte,array,input,stream,streams,new,byte,array,input,stream,test,count,for,int,i,0,i,test,count,i,streams,i,new,byte,array,input,stream,payload,return,streams
DataFormatConcurrentTest -> public ByteArrayInputStream[] createPayloads(int testCount) throws Exception;1334422300;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public ByteArrayInputStream[] createPayloads(int testCount) throws Exception {_        Foo foo = new Foo()__        for (int x = 0_ x < fooBarSize_ x++) {_            Bar bar = new Bar()__            bar.setName("Name: " + x)__            bar.setValue("value: " + x)__            foo.getBarRefs().add(bar)__        }_        Marshaller m = JAXBContext.newInstance(Foo.class, Bar.class).createMarshaller()__        StringWriter writer = new StringWriter()__        m.marshal(foo, writer)___        byte[] payload = writer.toString().getBytes()__        ByteArrayInputStream[] streams = new ByteArrayInputStream[testCount]__        for (int i = 0_ i < testCount_ i++) {_            streams[i] = new ByteArrayInputStream(payload)__        }__        return streams__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,byte,array,input,stream,create,payloads,int,test,count,throws,exception,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,marshaller,m,jaxbcontext,new,instance,foo,class,bar,class,create,marshaller,string,writer,writer,new,string,writer,m,marshal,foo,writer,byte,payload,writer,to,string,get,bytes,byte,array,input,stream,streams,new,byte,array,input,stream,test,count,for,int,i,0,i,test,count,i,streams,i,new,byte,array,input,stream,payload,return,streams
DataFormatConcurrentTest -> public ByteArrayInputStream[] createPayloads(int testCount) throws Exception;1540108161;the individual size of one record is:_fooBarSize = 1  -> 104 bytes_fooBarSize = 50 -> 2046 bytes_@return the payloads used for this stress test_@throws Exception;public ByteArrayInputStream[] createPayloads(int testCount) throws Exception {_        Foo foo = new Foo()__        for (int x = 0_ x < fooBarSize_ x++) {_            Bar bar = new Bar()__            bar.setName("Name: " + x)__            bar.setValue("value: " + x)__            foo.getBarRefs().add(bar)__        }_        Marshaller m = JAXBContext.newInstance(Foo.class, Bar.class).createMarshaller()__        StringWriter writer = new StringWriter()__        m.marshal(foo, writer)___        byte[] payload = writer.toString().getBytes()__        ByteArrayInputStream[] streams = new ByteArrayInputStream[testCount]__        for (int i = 0_ i < testCount_ i++) {_            streams[i] = new ByteArrayInputStream(payload)__        }__        return streams__    };the,individual,size,of,one,record,is,foo,bar,size,1,104,bytes,foo,bar,size,50,2046,bytes,return,the,payloads,used,for,this,stress,test,throws,exception;public,byte,array,input,stream,create,payloads,int,test,count,throws,exception,foo,foo,new,foo,for,int,x,0,x,foo,bar,size,x,bar,bar,new,bar,bar,set,name,name,x,bar,set,value,value,x,foo,get,bar,refs,add,bar,marshaller,m,jaxbcontext,new,instance,foo,class,bar,class,create,marshaller,string,writer,writer,new,string,writer,m,marshal,foo,writer,byte,payload,writer,to,string,get,bytes,byte,array,input,stream,streams,new,byte,array,input,stream,test,count,for,int,i,0,i,test,count,i,streams,i,new,byte,array,input,stream,payload,return,streams
