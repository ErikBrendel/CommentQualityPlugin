commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void writeStartElement(String s) throws XMLStreamException {     writer.writeStartElement(s + "-Foo"). }
false;public;2;4;;@Override public void writeStartElement(String s, String s2) throws XMLStreamException {     writer.writeStartElement(s, s2 + "-Foo"). }
false;public;3;4;;@Override public void writeStartElement(String s, String s2, String s3) throws XMLStreamException {     writer.writeStartElement(s, s2 + "-Foo", s3). }
false;public;2;4;;@Override public void writeEmptyElement(String s, String s2) throws XMLStreamException {     writer.writeEmptyElement(s, s2). }
false;public;3;4;;@Override public void writeEmptyElement(String s, String s2, String s3) throws XMLStreamException {     writer.writeEmptyElement(s, s2, s3). }
false;public;1;4;;@Override public void writeEmptyElement(String s) throws XMLStreamException {     writer.writeEmptyElement(s). }
false;public;0;4;;@Override public void writeEndElement() throws XMLStreamException {     writer.writeEndElement(). }
false;public;0;4;;@Override public void writeEndDocument() throws XMLStreamException {     writer.writeEndDocument(). }
false;public;0;4;;@Override public void close() throws XMLStreamException {     writer.close(). }
false;public;0;4;;@Override public void flush() throws XMLStreamException {     writer.flush(). }
false;public;2;4;;@Override public void writeAttribute(String s, String s2) throws XMLStreamException {     writer.writeAttribute(s, s2). }
false;public;4;4;;@Override public void writeAttribute(String s, String s2, String s3, String s4) throws XMLStreamException {     writer.writeAttribute(s, s2, s3, s4). }
false;public;3;4;;@Override public void writeAttribute(String s, String s2, String s3) throws XMLStreamException {     writer.writeAttribute(s, s2, s3). }
false;public;2;4;;@Override public void writeNamespace(String s, String s2) throws XMLStreamException {     writer.writeNamespace(s, s2). }
false;public;1;4;;@Override public void writeDefaultNamespace(String s) throws XMLStreamException {     writer.writeDefaultNamespace(s). }
false;public;1;4;;@Override public void writeComment(String s) throws XMLStreamException {     writer.writeComment(s). }
false;public;1;4;;@Override public void writeProcessingInstruction(String s) throws XMLStreamException {     writer.writeProcessingInstruction(s). }
false;public;2;4;;@Override public void writeProcessingInstruction(String s, String s2) throws XMLStreamException {     writer.writeProcessingInstruction(s, s2). }
false;public;1;4;;@Override public void writeCData(String s) throws XMLStreamException {     writer.writeCData(s). }
false;public;1;4;;@Override public void writeDTD(String s) throws XMLStreamException {     writer.writeDTD(s). }
false;public;1;4;;@Override public void writeEntityRef(String s) throws XMLStreamException {     writer.writeEntityRef(s). }
false;public;0;4;;@Override public void writeStartDocument() throws XMLStreamException {     writer.writeStartDocument(). }
false;public;1;4;;@Override public void writeStartDocument(String s) throws XMLStreamException {     writer.writeStartDocument(s). }
false;public;2;4;;@Override public void writeStartDocument(String s, String s2) throws XMLStreamException {     writer.writeStartDocument(s, s2). }
false;public;1;4;;@Override public void writeCharacters(String s) throws XMLStreamException {     writer.writeCharacters(s). }
false;public;3;4;;@Override public void writeCharacters(char[] chars, int i, int i2) throws XMLStreamException {     writer.writeCharacters(chars, i, i2). }
false;public;1;4;;@Override public String getPrefix(String s) throws XMLStreamException {     return writer.getPrefix(s). }
false;public;2;4;;@Override public void setPrefix(String s, String s2) throws XMLStreamException {     writer.setPrefix(s, s2). }
false;public;1;4;;@Override public void setDefaultNamespace(String s) throws XMLStreamException {     writer.setDefaultNamespace(s). }
false;public;1;4;;@Override public void setNamespaceContext(NamespaceContext namespaceContext) throws XMLStreamException {     writer.setNamespaceContext(namespaceContext). }
false;public;0;4;;@Override public NamespaceContext getNamespaceContext() {     return writer.getNamespaceContext(). }
false;public;1;4;;@Override public Object getProperty(String s) throws IllegalArgumentException {     return writer.getProperty(s). }
false;public;1;164;;@Override public XMLStreamWriter wrapWriter(final XMLStreamWriter writer) {     return new XMLStreamWriter() {          @Override         public void writeStartElement(String s) throws XMLStreamException {             writer.writeStartElement(s + "-Foo").         }          @Override         public void writeStartElement(String s, String s2) throws XMLStreamException {             writer.writeStartElement(s, s2 + "-Foo").         }          @Override         public void writeStartElement(String s, String s2, String s3) throws XMLStreamException {             writer.writeStartElement(s, s2 + "-Foo", s3).         }          @Override         public void writeEmptyElement(String s, String s2) throws XMLStreamException {             writer.writeEmptyElement(s, s2).         }          @Override         public void writeEmptyElement(String s, String s2, String s3) throws XMLStreamException {             writer.writeEmptyElement(s, s2, s3).         }          @Override         public void writeEmptyElement(String s) throws XMLStreamException {             writer.writeEmptyElement(s).         }          @Override         public void writeEndElement() throws XMLStreamException {             writer.writeEndElement().         }          @Override         public void writeEndDocument() throws XMLStreamException {             writer.writeEndDocument().         }          @Override         public void close() throws XMLStreamException {             writer.close().         }          @Override         public void flush() throws XMLStreamException {             writer.flush().         }          @Override         public void writeAttribute(String s, String s2) throws XMLStreamException {             writer.writeAttribute(s, s2).         }          @Override         public void writeAttribute(String s, String s2, String s3, String s4) throws XMLStreamException {             writer.writeAttribute(s, s2, s3, s4).         }          @Override         public void writeAttribute(String s, String s2, String s3) throws XMLStreamException {             writer.writeAttribute(s, s2, s3).         }          @Override         public void writeNamespace(String s, String s2) throws XMLStreamException {             writer.writeNamespace(s, s2).         }          @Override         public void writeDefaultNamespace(String s) throws XMLStreamException {             writer.writeDefaultNamespace(s).         }          @Override         public void writeComment(String s) throws XMLStreamException {             writer.writeComment(s).         }          @Override         public void writeProcessingInstruction(String s) throws XMLStreamException {             writer.writeProcessingInstruction(s).         }          @Override         public void writeProcessingInstruction(String s, String s2) throws XMLStreamException {             writer.writeProcessingInstruction(s, s2).         }          @Override         public void writeCData(String s) throws XMLStreamException {             writer.writeCData(s).         }          @Override         public void writeDTD(String s) throws XMLStreamException {             writer.writeDTD(s).         }          @Override         public void writeEntityRef(String s) throws XMLStreamException {             writer.writeEntityRef(s).         }          @Override         public void writeStartDocument() throws XMLStreamException {             writer.writeStartDocument().         }          @Override         public void writeStartDocument(String s) throws XMLStreamException {             writer.writeStartDocument(s).         }          @Override         public void writeStartDocument(String s, String s2) throws XMLStreamException {             writer.writeStartDocument(s, s2).         }          @Override         public void writeCharacters(String s) throws XMLStreamException {             writer.writeCharacters(s).         }          @Override         public void writeCharacters(char[] chars, int i, int i2) throws XMLStreamException {             writer.writeCharacters(chars, i, i2).         }          @Override         public String getPrefix(String s) throws XMLStreamException {             return writer.getPrefix(s).         }          @Override         public void setPrefix(String s, String s2) throws XMLStreamException {             writer.setPrefix(s, s2).         }          @Override         public void setDefaultNamespace(String s) throws XMLStreamException {             writer.setDefaultNamespace(s).         }          @Override         public void setNamespaceContext(NamespaceContext namespaceContext) throws XMLStreamException {             writer.setNamespaceContext(namespaceContext).         }          @Override         public NamespaceContext getNamespaceContext() {             return writer.getNamespaceContext().         }          @Override         public Object getProperty(String s) throws IllegalArgumentException {             return writer.getProperty(s).         }     }. // To change body of implemented methods use File | Settings | File Templates. }
