commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testJaxbModel() throws Exception {     Object foo = new Foo().     getMockEndpoint("mock:a").expectedBodiesReceived(foo).     getMockEndpoint("mock:b").expectedBodiesReceived(foo).     template.sendBody("direct:a", foo).     assertMockEndpointsSatisfied().     assertEquals(0, failed.get()).     assertEquals(0, failed2.get()). }
false;public;0;13;;@Test public void testNoneJaxbModel() throws Exception {     Object camel = "Camel".     getMockEndpoint("mock:a").expectedBodiesReceived(camel).     getMockEndpoint("mock:b").expectedBodiesReceived(camel).     template.sendBody("direct:a", camel).     assertMockEndpointsSatisfied().     assertEquals(1, failed.get()).     assertEquals(0, failed2.get()). }
false;public;0;13;;@Test public void testAnotherJaxbModel() throws Exception {     Object bar = new Bar().     getMockEndpoint("mock:a").expectedBodiesReceived(bar).     getMockEndpoint("mock:b").expectedBodiesReceived(bar).     template.sendBody("direct:a", bar).     assertMockEndpointsSatisfied().     assertEquals(1, failed.get()).     assertEquals(0, failed2.get()). }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     try {         exchange.getIn().getBody(List.class).     } catch (TypeConversionException e) {         // there is no type converters from the POJO -> List         // so we should really not fail at all at this point         failed2.incrementAndGet().     } }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     try {         exchange.getIn().getBody(Foo.class).     } catch (TypeConversionException e) {         failed.incrementAndGet().     } }
false;public;0;25;;@Override public void configure() throws Exception {     from("direct:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             try {                 exchange.getIn().getBody(Foo.class).             } catch (TypeConversionException e) {                 failed.incrementAndGet().             }         }     }).to("mock:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             try {                 exchange.getIn().getBody(List.class).             } catch (TypeConversionException e) {                 // there is no type converters from the POJO -> List                 // so we should really not fail at all at this point                 failed2.incrementAndGet().             }         }     }).to("mock:b"). }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder(context) {          @Override         public void configure() throws Exception {             from("direct:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     try {                         exchange.getIn().getBody(Foo.class).                     } catch (TypeConversionException e) {                         failed.incrementAndGet().                     }                 }             }).to("mock:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     try {                         exchange.getIn().getBody(List.class).                     } catch (TypeConversionException e) {                         // there is no type converters from the POJO -> List                         // so we should really not fail at all at this point                         failed2.incrementAndGet().                     }                 }             }).to("mock:b").         }     }. }
