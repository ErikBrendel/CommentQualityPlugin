commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "jaxb". }
false;public;3;58;;public void marshal(Exchange exchange, Object graph, OutputStream stream) throws IOException {     try {         // must create a new instance of marshaller as its not thread safe         Marshaller marshaller = createMarshaller().         if (isPrettyPrint()) {             marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE).         }         // exchange take precedence over encoding option         String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class).         if (charset == null) {             charset = encoding.             // Propagate the encoding of the exchange             if (charset != null) {                 exchange.setProperty(Exchange.CHARSET_NAME, charset).             }         }         if (charset != null) {             marshaller.setProperty(Marshaller.JAXB_ENCODING, charset).         }         if (isFragment()) {             marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE).         }         if (ObjectHelper.isNotEmpty(schemaLocation)) {             marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, schemaLocation).         }         if (ObjectHelper.isNotEmpty(noNamespaceSchemaLocation)) {             marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION, noNamespaceSchemaLocation).         }         if (namespacePrefixMapper != null) {             marshaller.setProperty(namespacePrefixMapper.getRegistrationKey(), namespacePrefixMapper).         }         // Inject any JAX-RI custom properties from the exchange or from the instance into the marshaller         Map<String, Object> customProperties = exchange.getProperty(JaxbConstants.JAXB_PROVIDER_PROPERTIES, Map.class).         if (customProperties == null) {             customProperties = getJaxbProviderProperties().         }         if (customProperties != null) {             for (Entry<String, Object> property : customProperties.entrySet()) {                 if (log.isDebugEnabled()) {                     log.debug("Using JAXB Provider Property {}={}", property.getKey(), property.getValue()).                 }                 marshaller.setProperty(property.getKey(), property.getValue()).             }         }         doMarshal(exchange, graph, stream, marshaller, charset).         if (contentTypeHeader) {             if (exchange.hasOut()) {                 exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml").             } else {                 exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/xml").             }         }     } catch (Exception e) {         throw new IOException(e).     } }
false;;5;75;;void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller marshaller, String charset) throws Exception {     Object element = graph.     QName partNamespaceOnDataFormat = getPartNamespace().     String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class).     String partNamespaceFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_NAMESPACE, String.class).     if ((partialClass != null || partClassFromHeader != null) && (partNamespaceOnDataFormat != null || partNamespaceFromHeader != null)) {         if (partClassFromHeader != null) {             try {                 partialClass = camelContext.getClassResolver().resolveMandatoryClass(partClassFromHeader, Object.class).             } catch (ClassNotFoundException e) {                 throw new JAXBException(e).             }         }         if (partNamespaceFromHeader != null) {             partNamespaceOnDataFormat = QName.valueOf(partNamespaceFromHeader).         }         element = new JAXBElement<>(partNamespaceOnDataFormat, partialClass, graph).     }     // only marshal if its possible     if (introspector.isElement(element)) {         if (asXmlStreamWriter(exchange)) {             XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream).             if (needFiltering(exchange)) {                 writer = new FilteringXmlStreamWriter(writer, charset).             }             if (xmlStreamWriterWrapper != null) {                 writer = xmlStreamWriterWrapper.wrapWriter(writer).             }             marshaller.marshal(element, writer).         } else {             marshaller.marshal(element, stream).         }         return.     } else if (objectFactory && element != null) {         Method objectFactoryMethod = JaxbHelper.getJaxbElementFactoryMethod(camelContext, element.getClass()).         if (objectFactoryMethod != null) {             try {                 Object instance = objectFactoryMethod.getDeclaringClass().newInstance().                 if (instance != null) {                     Object toMarshall = objectFactoryMethod.invoke(instance, element).                     if (asXmlStreamWriter(exchange)) {                         XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream).                         if (needFiltering(exchange)) {                             writer = new FilteringXmlStreamWriter(writer, charset).                         }                         if (xmlStreamWriterWrapper != null) {                             writer = xmlStreamWriterWrapper.wrapWriter(writer).                         }                         marshaller.marshal(toMarshall, writer).                     } else {                         marshaller.marshal(toMarshall, stream).                     }                     return.                 }             } catch (Exception e) {                 log.debug("Unable to create JAXBElement object for type " + element.getClass() + " due to " + e.getMessage(), e).             }         }     }     // cannot marshal     if (!mustBeJAXBElement) {         // write the graph as is to the output stream         if (log.isDebugEnabled()) {             log.debug("Attempt to marshalling non JAXBElement with type {} as InputStream", ObjectHelper.classCanonicalName(graph)).         }         InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph).         IOHelper.copyAndCloseInput(is, stream).     } else {         throw new InvalidPayloadException(exchange, JAXBElement.class).     } }
false;private;1;3;;private boolean asXmlStreamWriter(Exchange exchange) {     return needFiltering(exchange) || (xmlStreamWriterWrapper != null). }
false;public;2;33;;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {     try {         Object answer.         final XMLStreamReader xmlReader.         if (needFiltering(exchange)) {             xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream)).         } else {             xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream).         }         String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class).         if (partialClass != null || partClassFromHeader != null) {             // partial unmarshalling             if (partClassFromHeader != null) {                 try {                     partialClass = camelContext.getClassResolver().resolveMandatoryClass(partClassFromHeader, Object.class).                 } catch (ClassNotFoundException e) {                     throw new JAXBException(e).                 }             }             answer = createUnmarshaller().unmarshal(xmlReader, partialClass).         } else {             answer = createUnmarshaller().unmarshal(xmlReader).         }         if (answer instanceof JAXBElement && isIgnoreJAXBElement()) {             answer = ((JAXBElement<?>) answer).getValue().         }         return answer.     } catch (JAXBException e) {         throw new IOException(e).     } }
false;private;2;3;;private NonXmlFilterReader createNonXmlFilterReader(Exchange exchange, InputStream stream) throws UnsupportedEncodingException {     return new NonXmlFilterReader(new InputStreamReader(stream, ExchangeHelper.getCharsetName(exchange))). }
false;protected;1;4;;protected boolean needFiltering(Exchange exchange) {     // exchange property takes precedence over data format property     return exchange == null ? filterNonXmlChars : exchange.getProperty(Exchange.FILTER_NON_XML_CHARS, filterNonXmlChars, Boolean.class). }
true;public;0;3;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- public boolean isIgnoreJAXBElement() {     return ignoreJAXBElement. }
false;public;1;3;;public void setIgnoreJAXBElement(boolean flag) {     ignoreJAXBElement = flag. }
false;public;0;3;;public boolean isMustBeJAXBElement() {     return mustBeJAXBElement. }
false;public;1;3;;public void setMustBeJAXBElement(boolean mustBeJAXBElement) {     this.mustBeJAXBElement = mustBeJAXBElement. }
false;public;0;3;;public JAXBContext getContext() {     return context. }
false;public;1;3;;public void setContext(JAXBContext context) {     this.context = context. }
false;public;0;3;;public String getContextPath() {     return contextPath. }
false;public;1;3;;public void setContextPath(String contextPath) {     this.contextPath = contextPath. }
false;public;0;6;;public SchemaFactory getSchemaFactory() {     if (schemaFactory == null) {         return getOrCreateSchemaFactory().     }     return schemaFactory. }
false;public;1;3;;public void setSchemaFactory(SchemaFactory schemaFactory) {     this.schemaFactory = schemaFactory. }
false;public;0;3;;public String getSchema() {     return schema. }
false;public;1;3;;public void setSchema(String schema) {     this.schema = schema. }
false;public;0;3;;public int getSchemaSeverityLevel() {     return schemaSeverityLevel. }
false;public;1;3;;public void setSchemaSeverityLevel(int schemaSeverityLevel) {     this.schemaSeverityLevel = schemaSeverityLevel. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
false;public;1;3;;public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public boolean isObjectFactory() {     return objectFactory. }
false;public;1;3;;public void setObjectFactory(boolean objectFactory) {     this.objectFactory = objectFactory. }
false;public;0;3;;public boolean isFragment() {     return fragment. }
false;public;1;3;;public void setFragment(boolean fragment) {     this.fragment = fragment. }
false;public;0;3;;public boolean isFilterNonXmlChars() {     return filterNonXmlChars. }
false;public;1;3;;public void setFilterNonXmlChars(boolean filterNonXmlChars) {     this.filterNonXmlChars = filterNonXmlChars. }
false;public;0;3;;public String getEncoding() {     return encoding. }
false;public;1;3;;public void setEncoding(String encoding) {     this.encoding = encoding. }
false;public;0;3;;public QName getPartNamespace() {     return partNamespace. }
false;public;1;3;;public void setPartNamespace(QName partNamespace) {     this.partNamespace = partNamespace. }
false;public;0;3;;public String getPartClass() {     return partClass. }
false;public;1;3;;public void setPartClass(String partClass) {     this.partClass = partClass. }
false;public;0;3;;public Map<String, String> getNamespacePrefix() {     return namespacePrefix. }
false;public;1;3;;public void setNamespacePrefix(Map<String, String> namespacePrefix) {     this.namespacePrefix = namespacePrefix. }
false;public;0;3;;public String getNamespacePrefixRef() {     return namespacePrefixRef. }
false;public;1;3;;public void setNamespacePrefixRef(String namespacePrefixRef) {     this.namespacePrefixRef = namespacePrefixRef. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public JaxbXmlStreamWriterWrapper getXmlStreamWriterWrapper() {     return xmlStreamWriterWrapper. }
false;public;1;3;;public void setXmlStreamWriterWrapper(JaxbXmlStreamWriterWrapper xmlStreamWriterWrapper) {     this.xmlStreamWriterWrapper = xmlStreamWriterWrapper. }
false;public;0;3;;public String getSchemaLocation() {     return schemaLocation. }
false;public;1;3;;public void setSchemaLocation(String schemaLocation) {     this.schemaLocation = schemaLocation. }
false;public;0;3;;public String getNoNamespaceSchemaLocation() {     return schemaLocation. }
false;public;1;3;;public void setNoNamespaceSchemaLocation(String schemaLocation) {     this.noNamespaceSchemaLocation = schemaLocation. }
false;public;0;3;;public Map<String, Object> getJaxbProviderProperties() {     return jaxbProviderProperties. }
false;public;1;3;;public void setJaxbProviderProperties(Map<String, Object> jaxbProviderProperties) {     this.jaxbProviderProperties = jaxbProviderProperties. }
false;public;0;3;;public boolean isContentTypeHeader() {     return contentTypeHeader. }
true;public;1;3;/**  * If enabled then JAXB will set the Content-Type header to <tt>application/xml</tt> when marshalling.  */ ;/**  * If enabled then JAXB will set the Content-Type header to <tt>application/xml</tt> when marshalling.  */ public void setContentTypeHeader(boolean contentTypeHeader) {     this.contentTypeHeader = contentTypeHeader. }
false;protected;0;27;;@Override @SuppressWarnings("unchecked") protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext").     if (context == null) {         // if context not injected, create one and resolve partial class up front so they are ready to be used         context = createContext().     }     introspector = context.createJAXBIntrospector().     if (partClass != null) {         partialClass = camelContext.getClassResolver().resolveMandatoryClass(partClass, Object.class).     }     if (namespacePrefixRef != null) {         namespacePrefix = CamelContextHelper.mandatoryLookup(camelContext, namespacePrefixRef, Map.class).     }     if (namespacePrefix != null) {         namespacePrefixMapper = NamespacePrefixMapperFactory.newNamespacePrefixMapper(camelContext, namespacePrefix).     }     typeConverter = camelContext.getTypeConverter().     if (schema != null) {         cachedSchema = createSchema(getSources()).     }     log.debug("JaxbDataFormat [prettyPrint={}, objectFactory={}]", prettyPrint, objectFactory). }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
true;protected;0;17;/**  * Strategy to create JAXB context  */ ;/**  * Strategy to create JAXB context  */ protected JAXBContext createContext() throws JAXBException {     if (contextPath != null) {         // prefer to use application class loader which is most likely to be able to         // load the class which has been JAXB annotated         ClassLoader cl = camelContext.getApplicationContextClassLoader().         if (cl != null) {             log.debug("Creating JAXBContext with contextPath: " + contextPath + " and ApplicationContextClassLoader: " + cl).             return JAXBContext.newInstance(contextPath, cl).         } else {             log.debug("Creating JAXBContext with contextPath: {}", contextPath).             return JAXBContext.newInstance(contextPath).         }     } else {         log.debug("Creating JAXBContext").         return JAXBContext.newInstance().     } }
false;public;1;4;;public boolean handleEvent(ValidationEvent event) {     // continue if the severity is lower than the configured level     return event.getSeverity() < getSchemaSeverityLevel(). }
false;protected;0;14;;protected Unmarshaller createUnmarshaller() throws JAXBException {     Unmarshaller unmarshaller = getContext().createUnmarshaller().     if (schema != null) {         unmarshaller.setSchema(cachedSchema).         unmarshaller.setEventHandler(new ValidationEventHandler() {              public boolean handleEvent(ValidationEvent event) {                 // continue if the severity is lower than the configured level                 return event.getSeverity() < getSchemaSeverityLevel().             }         }).     }     return unmarshaller. }
false;public;1;4;;public boolean handleEvent(ValidationEvent event) {     // continue if the severity is lower than the configured level     return event.getSeverity() < getSchemaSeverityLevel(). }
false;protected;0;14;;protected Marshaller createMarshaller() throws JAXBException {     Marshaller marshaller = getContext().createMarshaller().     if (schema != null) {         marshaller.setSchema(cachedSchema).         marshaller.setEventHandler(new ValidationEventHandler() {              public boolean handleEvent(ValidationEvent event) {                 // continue if the severity is lower than the configured level                 return event.getSeverity() < getSchemaSeverityLevel().             }         }).     }     return marshaller. }
false;private;1;8;;private Schema createSchema(Source[] sources) throws SAXException {     SchemaFactory factory = getOrCreateSchemaFactory().     try {         return factory.newSchema(sources).     } finally {         returnSchemaFactory(factory).     } }
false;private;0;10;;private Source[] getSources() throws FileNotFoundException, MalformedURLException {     // we support multiple schema by delimiting they by ','     String[] schemas = schema.split(",").     Source[] sources = new Source[schemas.length].     for (int i = 0. i < schemas.length. i++) {         URL schemaUrl = ResourceHelper.resolveMandatoryResourceAsUrl(camelContext.getClassResolver(), schemas[i]).         sources[i] = new StreamSource(schemaUrl.toExternalForm()).     }     return sources. }
false;private;0;7;;private SchemaFactory getOrCreateSchemaFactory() {     SchemaFactory factory = SCHEMA_FACTORY_POOL.poll().     if (factory == null) {         factory = createSchemaFactory().     }     return factory. }
false;public,static;0;3;;public static SchemaFactory createSchemaFactory() {     return SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI). }
false;private;1;5;;private void returnSchemaFactory(SchemaFactory factory) {     if (factory != schemaFactory) {         SCHEMA_FACTORY_POOL.offer(factory).     } }
