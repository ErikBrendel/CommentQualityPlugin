commented;modifiers;parameterAmount;loc;comment;code
true;;1;10;/**  * Determines whether specified character needs to be filtered.  */ ;/**  * Determines whether specified character needs to be filtered.  */ boolean isFiltered(char c) {     // Won't be checking last interval, as it goes beyond 0xFFFF.     if (c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFD)) {         return false.     }     return true. }
true;public;3;19;/**  * Filter specified char array by replacing non-XML chars with space. Only  * part of array specified by <code>offset</code> and <code>length</code> is  * affected.  *  * @return <code>true</code> if <code>content</code> was modified,  *         <code>false</code> otherwise.  */ ;/**  * Filter specified char array by replacing non-XML chars with space. Only  * part of array specified by <code>offset</code> and <code>length</code> is  * affected.  *  * @return <code>true</code> if <code>content</code> was modified,  *         <code>false</code> otherwise.  */ public boolean filter(char[] content, int offset, int length) {     if (content == null) {         return false.     }     boolean filtered = false.     for (int i = offset. i < offset + length. i++) {         if (isFiltered(content[i])) {             filtered = true.             content[i] = REPLACEMENT_CHAR.         }     }     if (filtered) {         LOG.warn("Identified and replaced non-XML chars").     }     return filtered. }
true;public;1;15;/**  * Filter specified string by replacing illegal chars with space.  *  * @return filtered string  */ ;/**  * Filter specified string by replacing illegal chars with space.  *  * @return filtered string  */ public String filter(String original) {     if (original == null) {         return null.     }     char[] chars = original.toCharArray().     if (!filter(chars, 0, chars.length)) {         return original.     }     String filtered = new String(chars).     LOG.warn("Illegal characters were filtered. original => \"" + original + "\", filtered => \"" + filtered + "\"").     return filtered. }
