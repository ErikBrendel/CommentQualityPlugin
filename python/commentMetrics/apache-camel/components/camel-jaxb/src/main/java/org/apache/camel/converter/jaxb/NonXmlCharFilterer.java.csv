# id;timestamp;commentText;codeText;commentWords;codeWords
NonXmlCharFilterer -> public String filter(String original);1263047103;Filter specified string by replacing illegal chars with space.__@return filtered string;public String filter(String original) {_        if (original == null) {_            return null__        }__        char[] chars = original.toCharArray()__        if (!filter(chars, 0, chars.length)) {_            return original__        }__        String filtered = new String(chars)__        LOG.warn("Illegal characters were filtered_ original => \"" + original_                + "\", filtered => \"" + filtered + "\"")__        return filtered__    };filter,specified,string,by,replacing,illegal,chars,with,space,return,filtered,string;public,string,filter,string,original,if,original,null,return,null,char,chars,original,to,char,array,if,filter,chars,0,chars,length,return,original,string,filtered,new,string,chars,log,warn,illegal,characters,were,filtered,original,original,filtered,filtered,return,filtered
NonXmlCharFilterer -> public String filter(String original);1296495624;Filter specified string by replacing illegal chars with space.__@return filtered string;public String filter(String original) {_        if (original == null) {_            return null__        }__        char[] chars = original.toCharArray()__        if (!filter(chars, 0, chars.length)) {_            return original__        }__        String filtered = new String(chars)__        LOG.warn("Illegal characters were filtered_ original => \"" + original_                + "\", filtered => \"" + filtered + "\"")__        return filtered__    };filter,specified,string,by,replacing,illegal,chars,with,space,return,filtered,string;public,string,filter,string,original,if,original,null,return,null,char,chars,original,to,char,array,if,filter,chars,0,chars,length,return,original,string,filtered,new,string,chars,log,warn,illegal,characters,were,filtered,original,original,filtered,filtered,return,filtered
NonXmlCharFilterer -> public String filter(String original);1376549254;Filter specified string by replacing illegal chars with space.__@return filtered string;public String filter(String original) {_        if (original == null) {_            return null__        }__        char[] chars = original.toCharArray()__        if (!filter(chars, 0, chars.length)) {_            return original__        }__        String filtered = new String(chars)__        LOG.warn("Illegal characters were filtered_ original => \"" + original_                + "\", filtered => \"" + filtered + "\"")__        return filtered__    };filter,specified,string,by,replacing,illegal,chars,with,space,return,filtered,string;public,string,filter,string,original,if,original,null,return,null,char,chars,original,to,char,array,if,filter,chars,0,chars,length,return,original,string,filtered,new,string,chars,log,warn,illegal,characters,were,filtered,original,original,filtered,filtered,return,filtered
NonXmlCharFilterer -> public String filter(String original);1540108161;Filter specified string by replacing illegal chars with space.__@return filtered string;public String filter(String original) {_        if (original == null) {_            return null__        }__        char[] chars = original.toCharArray()__        if (!filter(chars, 0, chars.length)) {_            return original__        }__        String filtered = new String(chars)__        LOG.warn("Illegal characters were filtered_ original => \"" + original_                + "\", filtered => \"" + filtered + "\"")__        return filtered__    };filter,specified,string,by,replacing,illegal,chars,with,space,return,filtered,string;public,string,filter,string,original,if,original,null,return,null,char,chars,original,to,char,array,if,filter,chars,0,chars,length,return,original,string,filtered,new,string,chars,log,warn,illegal,characters,were,filtered,original,original,filtered,filtered,return,filtered
NonXmlCharFilterer -> public boolean filter(char[] content, int offset, int length);1263047103;Filter specified char array by replacing non-XML chars with space. Only_part of array specified by <code>offset</code> and <code>length</code> is_affected.__@return <code>true</code> if <code>content</code> was modified,_<code>false</code> otherwise.;public boolean filter(char[] content, int offset, int length) {_        if (content == null) {_            return false__        }__        boolean filtered = false__        for (int i = offset_ i < offset + length_ i++) {_            if (isFiltered(content[i])) {_                filtered = true__                content[i] = REPLACEMENT_CHAR__            }_        }__        if (filtered) {_            LOG.warn("Identified and replaced non-XML chars")__        }__        return filtered__    };filter,specified,char,array,by,replacing,non,xml,chars,with,space,only,part,of,array,specified,by,code,offset,code,and,code,length,code,is,affected,return,code,true,code,if,code,content,code,was,modified,code,false,code,otherwise;public,boolean,filter,char,content,int,offset,int,length,if,content,null,return,false,boolean,filtered,false,for,int,i,offset,i,offset,length,i,if,is,filtered,content,i,filtered,true,content,i,if,filtered,log,warn,identified,and,replaced,non,xml,chars,return,filtered
NonXmlCharFilterer -> public boolean filter(char[] content, int offset, int length);1296495624;Filter specified char array by replacing non-XML chars with space. Only_part of array specified by <code>offset</code> and <code>length</code> is_affected.__@return <code>true</code> if <code>content</code> was modified,_<code>false</code> otherwise.;public boolean filter(char[] content, int offset, int length) {_        if (content == null) {_            return false__        }__        boolean filtered = false__        for (int i = offset_ i < offset + length_ i++) {_            if (isFiltered(content[i])) {_                filtered = true__                content[i] = REPLACEMENT_CHAR__            }_        }__        if (filtered) {_            LOG.warn("Identified and replaced non-XML chars")__        }__        return filtered__    };filter,specified,char,array,by,replacing,non,xml,chars,with,space,only,part,of,array,specified,by,code,offset,code,and,code,length,code,is,affected,return,code,true,code,if,code,content,code,was,modified,code,false,code,otherwise;public,boolean,filter,char,content,int,offset,int,length,if,content,null,return,false,boolean,filtered,false,for,int,i,offset,i,offset,length,i,if,is,filtered,content,i,filtered,true,content,i,if,filtered,log,warn,identified,and,replaced,non,xml,chars,return,filtered
NonXmlCharFilterer -> public boolean filter(char[] content, int offset, int length);1376549254;Filter specified char array by replacing non-XML chars with space. Only_part of array specified by <code>offset</code> and <code>length</code> is_affected.__@return <code>true</code> if <code>content</code> was modified,_<code>false</code> otherwise.;public boolean filter(char[] content, int offset, int length) {_        if (content == null) {_            return false__        }__        boolean filtered = false__        for (int i = offset_ i < offset + length_ i++) {_            if (isFiltered(content[i])) {_                filtered = true__                content[i] = REPLACEMENT_CHAR__            }_        }__        if (filtered) {_            LOG.warn("Identified and replaced non-XML chars")__        }__        return filtered__    };filter,specified,char,array,by,replacing,non,xml,chars,with,space,only,part,of,array,specified,by,code,offset,code,and,code,length,code,is,affected,return,code,true,code,if,code,content,code,was,modified,code,false,code,otherwise;public,boolean,filter,char,content,int,offset,int,length,if,content,null,return,false,boolean,filtered,false,for,int,i,offset,i,offset,length,i,if,is,filtered,content,i,filtered,true,content,i,if,filtered,log,warn,identified,and,replaced,non,xml,chars,return,filtered
NonXmlCharFilterer -> public boolean filter(char[] content, int offset, int length);1540108161;Filter specified char array by replacing non-XML chars with space. Only_part of array specified by <code>offset</code> and <code>length</code> is_affected.__@return <code>true</code> if <code>content</code> was modified,_<code>false</code> otherwise.;public boolean filter(char[] content, int offset, int length) {_        if (content == null) {_            return false__        }__        boolean filtered = false__        for (int i = offset_ i < offset + length_ i++) {_            if (isFiltered(content[i])) {_                filtered = true__                content[i] = REPLACEMENT_CHAR__            }_        }__        if (filtered) {_            LOG.warn("Identified and replaced non-XML chars")__        }__        return filtered__    };filter,specified,char,array,by,replacing,non,xml,chars,with,space,only,part,of,array,specified,by,code,offset,code,and,code,length,code,is,affected,return,code,true,code,if,code,content,code,was,modified,code,false,code,otherwise;public,boolean,filter,char,content,int,offset,int,length,if,content,null,return,false,boolean,filtered,false,for,int,i,offset,i,offset,length,i,if,is,filtered,content,i,filtered,true,content,i,if,filtered,log,warn,identified,and,replaced,non,xml,chars,return,filtered
NonXmlCharFilterer -> boolean isFiltered(char c);1263047103;Determines whether specified character needs to be filtered.;boolean isFiltered(char c) {_        _        _        _        if (c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF)_                || (c >= 0xE000 && c <= 0xFFFD)) {_            return false__        }_        return true__    };determines,whether,specified,character,needs,to,be,filtered;boolean,is,filtered,char,c,if,c,0x9,c,0x,a,c,0x,d,c,0x20,c,0x,d7ff,c,0x,e000,c,0x,fffd,return,false,return,true
NonXmlCharFilterer -> boolean isFiltered(char c);1296495624;Determines whether specified character needs to be filtered.;boolean isFiltered(char c) {_        _        _        _        if (c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF)_                || (c >= 0xE000 && c <= 0xFFFD)) {_            return false__        }_        return true__    };determines,whether,specified,character,needs,to,be,filtered;boolean,is,filtered,char,c,if,c,0x9,c,0x,a,c,0x,d,c,0x20,c,0x,d7ff,c,0x,e000,c,0x,fffd,return,false,return,true
NonXmlCharFilterer -> boolean isFiltered(char c);1376549254;Determines whether specified character needs to be filtered.;boolean isFiltered(char c) {_        _        _        _        if (c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF)_                || (c >= 0xE000 && c <= 0xFFFD)) {_            return false__        }_        return true__    };determines,whether,specified,character,needs,to,be,filtered;boolean,is,filtered,char,c,if,c,0x9,c,0x,a,c,0x,d,c,0x20,c,0x,d7ff,c,0x,e000,c,0x,fffd,return,false,return,true
NonXmlCharFilterer -> boolean isFiltered(char c);1540108161;Determines whether specified character needs to be filtered.;boolean isFiltered(char c) {_        _        _        _        if (c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF)_                || (c >= 0xE000 && c <= 0xFFFD)) {_            return false__        }_        return true__    };determines,whether,specified,character,needs,to,be,filtered;boolean,is,filtered,char,c,if,c,0x9,c,0x,a,c,0x,d,c,0x20,c,0x,d7ff,c,0x,e000,c,0x,fffd,return,false,return,true
