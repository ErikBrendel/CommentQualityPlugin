commented;modifiers;parameterAmount;loc;comment;code
true;public;4;5;/**  * This method applies filtering before delegating call to {@link #writer}.  */ ;/**  * This method applies filtering before delegating call to {@link #writer}.  */ public void writeAttribute(String prefix, String namespaceURI, String localName, String value) throws XMLStreamException {     String filteredValue = nonXmlCharFilterer.filter(value).     writer.writeAttribute(prefix, namespaceURI, localName, filteredValue). }
true;public;3;5;/**  * This method applies filtering before delegating call to {@link #writer}.  */ ;/**  * This method applies filtering before delegating call to {@link #writer}.  */ public void writeAttribute(String namespaceURI, String localName, String value) throws XMLStreamException {     String filteredValue = nonXmlCharFilterer.filter(value).     writer.writeAttribute(namespaceURI, localName, filteredValue). }
true;public;2;4;/**  * This method applies filtering before delegating call to {@link #writer}.  */ ;/**  * This method applies filtering before delegating call to {@link #writer}.  */ public void writeAttribute(String localName, String value) throws XMLStreamException {     String filteredValue = nonXmlCharFilterer.filter(value).     writer.writeAttribute(localName, filteredValue). }
true;public;1;4;/**  * This method applies filtering before delegating call to {@link #writer}.  */ ;/**  * This method applies filtering before delegating call to {@link #writer}.  */ public void writeCData(String data) throws XMLStreamException {     String filteredData = nonXmlCharFilterer.filter(data).     writer.writeCData(filteredData). }
true;public;3;4;/**  * This method applies filtering before delegating call to {@link #writer}.  */ ;/**  * This method applies filtering before delegating call to {@link #writer}.  */ public void writeCharacters(char[] text, int start, int len) throws XMLStreamException {     nonXmlCharFilterer.filter(text, start, len).     writer.writeCharacters(text, start, len). }
true;public;1;4;/**  * This method applies filtering before delegating call to {@link #writer}.  */ ;/**  * This method applies filtering before delegating call to {@link #writer}.  */ public void writeCharacters(String text) throws XMLStreamException {     String filteredText = nonXmlCharFilterer.filter(text).     writer.writeCharacters(filteredText). }
true;public;1;4;/**  * This method applies filtering before delegating call to {@link #writer}.  */ ;/**  * This method applies filtering before delegating call to {@link #writer}.  */ public void writeComment(String data) throws XMLStreamException {     String filteredData = nonXmlCharFilterer.filter(data).     writer.writeComment(filteredData). }
false;public;0;3;;public void close() throws XMLStreamException {     writer.close(). }
false;public;0;3;;public void flush() throws XMLStreamException {     writer.flush(). }
false;public;0;3;;public NamespaceContext getNamespaceContext() {     return writer.getNamespaceContext(). }
false;public;1;3;;public String getPrefix(String uri) throws XMLStreamException {     return writer.getPrefix(uri). }
false;public;1;3;;public Object getProperty(String name) throws IllegalArgumentException {     return writer.getProperty(name). }
false;public;1;3;;public void setDefaultNamespace(String uri) throws XMLStreamException {     writer.setDefaultNamespace(uri). }
false;public;1;3;;public void setNamespaceContext(NamespaceContext context) throws XMLStreamException {     writer.setNamespaceContext(context). }
false;public;2;3;;public void setPrefix(String prefix, String uri) throws XMLStreamException {     writer.setPrefix(prefix, uri). }
false;public;1;3;;public void writeDefaultNamespace(String namespaceURI) throws XMLStreamException {     writer.writeDefaultNamespace(namespaceURI). }
false;public;1;3;;public void writeDTD(String dtd) throws XMLStreamException {     writer.writeDTD(dtd). }
false;public;3;4;;public void writeEmptyElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {     writer.writeEmptyElement(prefix, localName, namespaceURI). }
false;public;2;3;;public void writeEmptyElement(String namespaceURI, String localName) throws XMLStreamException {     writer.writeEmptyElement(namespaceURI, localName). }
false;public;1;3;;public void writeEmptyElement(String localName) throws XMLStreamException {     writer.writeEmptyElement(localName). }
false;public;0;3;;public void writeEndDocument() throws XMLStreamException {     writer.writeEndDocument(). }
false;public;0;3;;public void writeEndElement() throws XMLStreamException {     writer.writeEndElement(). }
false;public;1;3;;public void writeEntityRef(String name) throws XMLStreamException {     writer.writeEntityRef(name). }
false;public;2;3;;public void writeNamespace(String prefix, String namespaceURI) throws XMLStreamException {     writer.writeNamespace(prefix, namespaceURI). }
false;public;2;3;;public void writeProcessingInstruction(String target, String data) throws XMLStreamException {     writer.writeProcessingInstruction(target, data). }
false;public;1;3;;public void writeProcessingInstruction(String target) throws XMLStreamException {     writer.writeProcessingInstruction(target). }
false;public;0;7;;public void writeStartDocument() throws XMLStreamException {     if (encoding != null) {         this.writeStartDocument(encoding, null).     } else {         writer.writeStartDocument().     } }
false;public;2;3;;public void writeStartDocument(String encoding, String version) throws XMLStreamException {     writer.writeStartDocument(encoding, version). }
false;public;1;7;;public void writeStartDocument(String version) throws XMLStreamException {     if (encoding != null) {         this.writeStartDocument(encoding, version).     } else {         writer.writeStartDocument(version).     } }
false;public;3;4;;public void writeStartElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {     writer.writeStartElement(prefix, localName, namespaceURI). }
false;public;2;3;;public void writeStartElement(String namespaceURI, String localName) throws XMLStreamException {     writer.writeStartElement(namespaceURI, localName). }
false;public;1;3;;public void writeStartElement(String localName) throws XMLStreamException {     writer.writeStartElement(localName). }
