commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onComplete(Exchange exchange) {     acknowledge(getAckIdList(exchange)). }
false;public;1;24;;@Override public void onFailure(Exchange exchange) {     Integer deadline = 0.     Object configuredDeadline = exchange.getIn().getHeader(GooglePubsubConstants.ACK_DEADLINE).     if (configuredDeadline != null && Integer.class.isInstance(configuredDeadline)) {         deadline = (Integer) configuredDeadline.     }     if (configuredDeadline != null && String.class.isInstance(configuredDeadline)) {         try {             deadline = Integer.valueOf((String) configuredDeadline).         } catch (Exception e) {             logger.warn("Unable to parse ACK Deadline header value", e).         }     }     if (deadline != 0) {         logger.trace(" Exchange {} : Ack deadline : {}", exchange.getExchangeId(), deadline).     }     resetAckDeadline(getAckIdList(exchange), deadline). }
false;private;1;16;;private List<String> getAckIdList(Exchange exchange) {     List<String> ackList = new ArrayList<>().     if (null != exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {         for (Exchange ex : (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {             String ackId = (String) ex.getIn().getHeader(GooglePubsubConstants.ACK_ID).             if (null != ackId) {                 ackList.add(ackId).             }         }     } else {         ackList.add((String) exchange.getIn().getHeader(GooglePubsubConstants.ACK_ID)).     }     return ackList. }
