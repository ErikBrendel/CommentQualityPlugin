commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected void doStart() throws Exception {     super.doStart().     localLog.info("Starting Google PubSub consumer for {}/{}", endpoint.getProjectId(), endpoint.getDestinationName()).     executor = endpoint.createExecutor().     for (int i = 0. i < endpoint.getConcurrentConsumers(). i++) {         executor.submit(new PubsubPoller(i + "")).     } }
false;protected;0;14;;@Override protected void doStop() throws Exception {     super.doStop().     localLog.info("Stopping Google PubSub consumer for {}/{}", endpoint.getProjectId(), endpoint.getDestinationName()).     if (executor != null) {         if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {             getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor).         } else {             executor.shutdownNow().         }     }     executor = null. }
false;public;0;67;;@Override public void run() {     if (localLog.isDebugEnabled()) {         localLog.debug("Subscribing {} to {}", threadId, subscriptionFullName).     }     while (isRunAllowed() && !isSuspendingOrSuspended()) {         try {             PullRequest pullRequest = new PullRequest().setMaxMessages(endpoint.getMaxMessagesPerPoll()).             PullResponse pullResponse.             try {                 if (localLog.isTraceEnabled()) {                     localLog.trace("Polling : {}", threadId).                 }                 pullResponse = GooglePubsubConsumer.this.pubsub.projects().subscriptions().pull(subscriptionFullName, pullRequest).execute().             } catch (SocketTimeoutException ste) {                 if (localLog.isTraceEnabled()) {                     localLog.trace("Socket timeout : {}", threadId).                 }                 continue.             }             if (null == pullResponse.getReceivedMessages()) {                 continue.             }             List<ReceivedMessage> receivedMessages = pullResponse.getReceivedMessages().             for (ReceivedMessage receivedMessage : receivedMessages) {                 PubsubMessage pubsubMessage = receivedMessage.getMessage().                 byte[] body = pubsubMessage.decodeData().                 if (localLog.isTraceEnabled()) {                     localLog.trace("Received message ID : {}", pubsubMessage.getMessageId()).                 }                 Exchange exchange = endpoint.createExchange().                 exchange.getIn().setBody(body).                 exchange.getIn().setHeader(GooglePubsubConstants.ACK_ID, receivedMessage.getAckId()).                 exchange.getIn().setHeader(GooglePubsubConstants.MESSAGE_ID, pubsubMessage.getMessageId()).                 exchange.getIn().setHeader(GooglePubsubConstants.PUBLISH_TIME, pubsubMessage.getPublishTime()).                 if (null != receivedMessage.getMessage().getAttributes()) {                     exchange.getIn().setHeader(GooglePubsubConstants.ATTRIBUTES, receivedMessage.getMessage().getAttributes()).                 }                 if (endpoint.getAckMode() != GooglePubsubConstants.AckMode.NONE) {                     exchange.addOnCompletion(GooglePubsubConsumer.this.ackStrategy).                 }                 try {                     processor.process(exchange).                 } catch (Throwable e) {                     exchange.setException(e).                 }             }         } catch (Exception e) {             localLog.error("Failure getting messages from PubSub : ", e).         }     } }
