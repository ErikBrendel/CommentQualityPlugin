commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public GooglePubsubComponent getComponent() {     return (GooglePubsubComponent) super.getComponent(). }
false;public;0;16;;public void afterPropertiesSet() throws Exception {     if (Strings.isNullOrEmpty(loggerId)) {         log = LoggerFactory.getLogger(this.getClass().getName()).     } else {         log = LoggerFactory.getLogger(loggerId).     }     // Default pubsub connection.     // With the publisher endpoints - the main publisher     // with the consumer endpoints  - the ack client     pubsub = getConnectionFactory().getDefaultClient().     log.trace("Credential file location : {}", getConnectionFactory().getCredentialsFileLocation()).     log.trace("Project ID: {}", this.projectId).     log.trace("Destination Name: {}", this.destinationName). }
false;public;0;4;;public Producer createProducer() throws Exception {     afterPropertiesSet().     return new GooglePubsubProducer(this). }
false;public;1;5;;public Consumer createConsumer(Processor processor) throws Exception {     afterPropertiesSet().     setExchangePattern(ExchangePattern.InOnly).     return new GooglePubsubConsumer(this, processor). }
false;public;0;7;;public ExecutorService createExecutor() {     return getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, "GooglePubsubConsumer[" + getDestinationName() + "]", concurrentConsumers). }
false;public;0;3;;public boolean isSingleton() {     return false. }
false;public;0;3;;public String getProjectId() {     return projectId. }
false;public;1;3;;public void setProjectId(String projectId) {     this.projectId = projectId. }
false;public;0;3;;public String getLoggerId() {     return loggerId. }
false;public;1;3;;public void setLoggerId(String loggerId) {     this.loggerId = loggerId. }
false;public;0;3;;public String getDestinationName() {     return destinationName. }
false;public;1;3;;public void setDestinationName(String destinationName) {     this.destinationName = destinationName. }
false;public;0;3;;public Integer getConcurrentConsumers() {     return concurrentConsumers. }
false;public;1;3;;public void setConcurrentConsumers(Integer concurrentConsumers) {     this.concurrentConsumers = concurrentConsumers. }
false;public;0;3;;public Integer getMaxMessagesPerPoll() {     return maxMessagesPerPoll. }
false;public;1;3;;public void setMaxMessagesPerPoll(Integer maxMessagesPerPoll) {     this.maxMessagesPerPoll = maxMessagesPerPoll. }
false;public;0;3;;public GooglePubsubConstants.AckMode getAckMode() {     return ackMode. }
false;public;1;3;;public void setAckMode(GooglePubsubConstants.AckMode ackMode) {     this.ackMode = ackMode. }
false;public;0;3;;public Pubsub getPubsub() {     return pubsub. }
true;public;0;5;/**  * ConnectionFactory to obtain connection to PubSub Service. If non provided the default will be used.  */ ;/**  * ConnectionFactory to obtain connection to PubSub Service. If non provided the default will be used.  */ public GooglePubsubConnectionFactory getConnectionFactory() {     return (null == connectionFactory) ? getComponent().getConnectionFactory() : connectionFactory. }
false;public;1;3;;public void setConnectionFactory(GooglePubsubConnectionFactory connectionFactory) {     this.connectionFactory = connectionFactory. }
