commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;12;;private static Properties loadProperties() {     Properties testProperties = new Properties().     InputStream fileIn = PubsubTestSupport.class.getClassLoader().getResourceAsStream("simple.properties").     try {         testProperties.load(fileIn).     } catch (Exception e) {         throw new RuntimeException(e).     }     return testProperties. }
false;protected;1;13;;protected void addPubsubComponent(CamelContext context) {     GooglePubsubConnectionFactory cf = new GooglePubsubConnectionFactory().setServiceAccount(SERVICE_ACCOUNT).setServiceAccountKey(SERVICE_KEY).setServiceURL(SERVICE_URL).     GooglePubsubComponent component = new GooglePubsubComponent().     component.setConnectionFactory(cf).     context.addComponent("google-pubsub", component).     context.addComponent("properties", new PropertiesComponent("ref:prop")). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("prop", loadProperties()).     return jndi. }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     addPubsubComponent(context).     return context. }
false;public,static;2;3;;public static void createTopicSubscriptionPair(String topicName, String subscriptionName) throws Exception {     createTopicSubscriptionPair(topicName, subscriptionName, 10). }
false;public,static;3;38;;public static void createTopicSubscriptionPair(String topicName, String subscriptionName, int ackDealineSeconds) throws Exception {     Pubsub pubsub = new GooglePubsubConnectionFactory().setServiceAccount(SERVICE_ACCOUNT).setServiceAccountKey(SERVICE_KEY).setServiceURL(SERVICE_URL).getDefaultClient().     String topicFullName = String.format("projects/%s/topics/%s", PubsubTestSupport.PROJECT_ID, topicName).     String subscriptionFullName = String.format("projects/%s/subscriptions/%s", PubsubTestSupport.PROJECT_ID, subscriptionName).     try {         pubsub.projects().topics().create(topicFullName, new Topic()).execute().     } catch (Exception e) {         handleAlreadyExistsException(e).     }     try {         Subscription subscription = new Subscription().setTopic(topicFullName).setAckDeadlineSeconds(ackDealineSeconds).         pubsub.projects().subscriptions().create(subscriptionFullName, subscription).execute().     } catch (Exception e) {         handleAlreadyExistsException(e).     } }
false;private,static;1;10;;private static void handleAlreadyExistsException(Exception e) throws Exception {     if (e instanceof GoogleJsonResponseException) {         GoogleJsonResponseException exc = (GoogleJsonResponseException) e.         // 409 indicates that the resource is available already         if (409 == exc.getStatusCode()) {             return.         }     }     throw e. }
