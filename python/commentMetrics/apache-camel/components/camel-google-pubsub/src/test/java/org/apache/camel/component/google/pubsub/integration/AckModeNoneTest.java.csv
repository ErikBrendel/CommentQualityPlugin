commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void createPubSub() throws Exception {     createTopicSubscriptionPair(TOPIC_NAME, SUBSCRIPTION_NAME, 1). }
false;public;0;10;;public void configure() {     from(directIn).routeId("AckNONE_SEND").to(pubsubTopic).     from(pubsubSub).routeId("AckNONE_RECV").autoStartup(true).to(receiveResult). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from(directIn).routeId("AckNONE_SEND").to(pubsubTopic).             from(pubsubSub).routeId("AckNONE_RECV").autoStartup(true).to(receiveResult).         }     }. }
true;public;0;11;/**  * Expecting two messages received for the one sent.  * With Ack mode set to NONE the same message will be delivered again and again,  * after the deadline expiration.  * Setting deadline to 1 second and waiting for more than 2 to ensure the message has been resent.  * @throws Exception  */ ;/**  * Expecting two messages received for the one sent.  * With Ack mode set to NONE the same message will be delivered again and again,  * after the deadline expiration.  * Setting deadline to 1 second and waiting for more than 2 to ensure the message has been resent.  * @throws Exception  */ @Test public void singleMessage() throws Exception {     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("ACK NONE  : " + exchange.getExchangeId()).     receiveResult.expectedMessageCount(2).     producer.send(exchange).     receiveResult.assertIsSatisfied(4000). }
