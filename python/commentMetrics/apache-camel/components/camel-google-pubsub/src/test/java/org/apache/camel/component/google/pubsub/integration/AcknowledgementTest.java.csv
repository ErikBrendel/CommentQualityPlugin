# id;timestamp;commentText;codeText;commentWords;codeWords
AcknowledgementTest -> @Test     public void singleMessage() throws Exception;1479108222;Testing acknowledgements._Three checks to be performed.__Check 1 : Successful round trip._Message received and acknowledged._If the ACK fails for the first message, it will be delivered again for the second check and the body comparison will fail.__Check 2 : Failure. As the route throws and exception and the message is NACK'ed._The message should remain in the PubSub Subscription for the third check.__Check 3 : Success for the second message._The message received should match the second message sent.__@throws Exception;@Test_    public void singleMessage() throws Exception {__        Exchange firstExchange = new DefaultExchange(context)__        Exchange secondExchange = new DefaultExchange(context)___        firstExchange.getIn().setBody("SUCCESS  : " + firstExchange.getExchangeId())__        secondExchange.getIn().setBody("fail  : " + secondExchange.getExchangeId())___        _        System.out.println("Acknowledgement Test : Stage 1")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(firstExchange.getIn().getBody())__        producer.send(firstExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 2")__        receiveResult.reset()__        fail = true__        receiveResult.expectedMessageCount(0)__        producer.send(secondExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 3")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(secondExchange.getIn().getBody())__        receiveResult.assertIsSatisfied(3000)__    };testing,acknowledgements,three,checks,to,be,performed,check,1,successful,round,trip,message,received,and,acknowledged,if,the,ack,fails,for,the,first,message,it,will,be,delivered,again,for,the,second,check,and,the,body,comparison,will,fail,check,2,failure,as,the,route,throws,and,exception,and,the,message,is,nack,ed,the,message,should,remain,in,the,pub,sub,subscription,for,the,third,check,check,3,success,for,the,second,message,the,message,received,should,match,the,second,message,sent,throws,exception;test,public,void,single,message,throws,exception,exchange,first,exchange,new,default,exchange,context,exchange,second,exchange,new,default,exchange,context,first,exchange,get,in,set,body,success,first,exchange,get,exchange,id,second,exchange,get,in,set,body,fail,second,exchange,get,exchange,id,system,out,println,acknowledgement,test,stage,1,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,first,exchange,get,in,get,body,producer,send,first,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,2,receive,result,reset,fail,true,receive,result,expected,message,count,0,producer,send,second,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,3,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,second,exchange,get,in,get,body,receive,result,assert,is,satisfied,3000
AcknowledgementTest -> @Test     public void singleMessage() throws Exception;1535627650;Testing acknowledgements._Three checks to be performed.__Check 1 : Successful round trip._Message received and acknowledged._If the ACK fails for the first message, it will be delivered again for the second check and the body comparison will fail.__Check 2 : Failure. As the route throws and exception and the message is NACK'ed._The message should remain in the PubSub Subscription for the third check.__Check 3 : Success for the second message._The message received should match the second message sent.__@throws Exception;@Test_    public void singleMessage() throws Exception {__        Exchange firstExchange = new DefaultExchange(context)__        Exchange secondExchange = new DefaultExchange(context)___        firstExchange.getIn().setBody("SUCCESS  : " + firstExchange.getExchangeId())__        secondExchange.getIn().setBody("fail  : " + secondExchange.getExchangeId())___        _        System.out.println("Acknowledgement Test : Stage 1")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(firstExchange.getIn().getBody())__        producer.send(firstExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 2")__        receiveResult.reset()__        fail = true__        receiveResult.expectedMessageCount(0)__        producer.send(secondExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 3")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(secondExchange.getIn().getBody())__        receiveResult.assertIsSatisfied(3000)__    };testing,acknowledgements,three,checks,to,be,performed,check,1,successful,round,trip,message,received,and,acknowledged,if,the,ack,fails,for,the,first,message,it,will,be,delivered,again,for,the,second,check,and,the,body,comparison,will,fail,check,2,failure,as,the,route,throws,and,exception,and,the,message,is,nack,ed,the,message,should,remain,in,the,pub,sub,subscription,for,the,third,check,check,3,success,for,the,second,message,the,message,received,should,match,the,second,message,sent,throws,exception;test,public,void,single,message,throws,exception,exchange,first,exchange,new,default,exchange,context,exchange,second,exchange,new,default,exchange,context,first,exchange,get,in,set,body,success,first,exchange,get,exchange,id,second,exchange,get,in,set,body,fail,second,exchange,get,exchange,id,system,out,println,acknowledgement,test,stage,1,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,first,exchange,get,in,get,body,producer,send,first,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,2,receive,result,reset,fail,true,receive,result,expected,message,count,0,producer,send,second,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,3,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,second,exchange,get,in,get,body,receive,result,assert,is,satisfied,3000
AcknowledgementTest -> @Test     public void singleMessage() throws Exception;1537290824;Testing acknowledgements._Three checks to be performed.__Check 1 : Successful round trip._Message received and acknowledged._If the ACK fails for the first message, it will be delivered again for the second check and the body comparison will fail.__Check 2 : Failure. As the route throws and exception and the message is NACK'ed._The message should remain in the PubSub Subscription for the third check.__Check 3 : Success for the second message._The message received should match the second message sent.__@throws Exception;@Test_    public void singleMessage() throws Exception {__        Exchange firstExchange = new DefaultExchange(context)__        Exchange secondExchange = new DefaultExchange(context)___        firstExchange.getIn().setBody("SUCCESS  : " + firstExchange.getExchangeId())__        secondExchange.getIn().setBody("fail  : " + secondExchange.getExchangeId())___        _        System.out.println("Acknowledgement Test : Stage 1")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(firstExchange.getIn().getBody())__        producer.send(firstExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 2")__        receiveResult.reset()__        fail = true__        receiveResult.expectedMessageCount(0)__        producer.send(secondExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 3")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(secondExchange.getIn().getBody())__        receiveResult.assertIsSatisfied(3000)__    };testing,acknowledgements,three,checks,to,be,performed,check,1,successful,round,trip,message,received,and,acknowledged,if,the,ack,fails,for,the,first,message,it,will,be,delivered,again,for,the,second,check,and,the,body,comparison,will,fail,check,2,failure,as,the,route,throws,and,exception,and,the,message,is,nack,ed,the,message,should,remain,in,the,pub,sub,subscription,for,the,third,check,check,3,success,for,the,second,message,the,message,received,should,match,the,second,message,sent,throws,exception;test,public,void,single,message,throws,exception,exchange,first,exchange,new,default,exchange,context,exchange,second,exchange,new,default,exchange,context,first,exchange,get,in,set,body,success,first,exchange,get,exchange,id,second,exchange,get,in,set,body,fail,second,exchange,get,exchange,id,system,out,println,acknowledgement,test,stage,1,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,first,exchange,get,in,get,body,producer,send,first,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,2,receive,result,reset,fail,true,receive,result,expected,message,count,0,producer,send,second,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,3,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,second,exchange,get,in,get,body,receive,result,assert,is,satisfied,3000
AcknowledgementTest -> @Test     public void singleMessage() throws Exception;1540108163;Testing acknowledgements._Three checks to be performed.__Check 1 : Successful round trip._Message received and acknowledged._If the ACK fails for the first message, it will be delivered again for the second check and the body comparison will fail.__Check 2 : Failure. As the route throws and exception and the message is NACK'ed._The message should remain in the PubSub Subscription for the third check.__Check 3 : Success for the second message._The message received should match the second message sent.__@throws Exception;@Test_    public void singleMessage() throws Exception {__        Exchange firstExchange = new DefaultExchange(context)__        Exchange secondExchange = new DefaultExchange(context)___        firstExchange.getIn().setBody("SUCCESS  : " + firstExchange.getExchangeId())__        secondExchange.getIn().setBody("fail  : " + secondExchange.getExchangeId())___        _        System.out.println("Acknowledgement Test : Stage 1")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(firstExchange.getIn().getBody())__        producer.send(firstExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 2")__        receiveResult.reset()__        fail = true__        receiveResult.expectedMessageCount(0)__        producer.send(secondExchange)__        receiveResult.assertIsSatisfied(3000)___        _        System.out.println("Acknowledgement Test : Stage 3")__        receiveResult.reset()__        fail = false__        receiveResult.expectedMessageCount(1)__        receiveResult.expectedBodiesReceivedInAnyOrder(secondExchange.getIn().getBody())__        receiveResult.assertIsSatisfied(3000)__    };testing,acknowledgements,three,checks,to,be,performed,check,1,successful,round,trip,message,received,and,acknowledged,if,the,ack,fails,for,the,first,message,it,will,be,delivered,again,for,the,second,check,and,the,body,comparison,will,fail,check,2,failure,as,the,route,throws,and,exception,and,the,message,is,nack,ed,the,message,should,remain,in,the,pub,sub,subscription,for,the,third,check,check,3,success,for,the,second,message,the,message,received,should,match,the,second,message,sent,throws,exception;test,public,void,single,message,throws,exception,exchange,first,exchange,new,default,exchange,context,exchange,second,exchange,new,default,exchange,context,first,exchange,get,in,set,body,success,first,exchange,get,exchange,id,second,exchange,get,in,set,body,fail,second,exchange,get,exchange,id,system,out,println,acknowledgement,test,stage,1,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,first,exchange,get,in,get,body,producer,send,first,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,2,receive,result,reset,fail,true,receive,result,expected,message,count,0,producer,send,second,exchange,receive,result,assert,is,satisfied,3000,system,out,println,acknowledgement,test,stage,3,receive,result,reset,fail,false,receive,result,expected,message,count,1,receive,result,expected,bodies,received,in,any,order,second,exchange,get,in,get,body,receive,result,assert,is,satisfied,3000
