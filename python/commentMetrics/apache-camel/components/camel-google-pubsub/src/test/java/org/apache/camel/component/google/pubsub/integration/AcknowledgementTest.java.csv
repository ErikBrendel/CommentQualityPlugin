commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void createTopicSubscription() throws Exception {     createTopicSubscriptionPair(TOPIC_NAME, SUBSCRIPTION_NAME). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     if (AcknowledgementTest.fail) {         Thread.sleep(750).         throw new Exception("fail").     } }
false;public;0;21;;public void configure() {     from(directIn).routeId("Send_to_Fail").to(pubsubTopic).     from(pubsubSubscription).routeId("Fail_Receive").autoStartup(true).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             if (AcknowledgementTest.fail) {                 Thread.sleep(750).                 throw new Exception("fail").             }         }     }).to(receiveResult). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from(directIn).routeId("Send_to_Fail").to(pubsubTopic).             from(pubsubSubscription).routeId("Fail_Receive").autoStartup(true).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     if (AcknowledgementTest.fail) {                         Thread.sleep(750).                         throw new Exception("fail").                     }                 }             }).to(receiveResult).         }     }. }
false;public;0;34;;/**  * Testing acknowledgements.  * Three checks to be performed.  *  * Check 1 : Successful round trip.  * Message received and acknowledged.  * If the ACK fails for the first message, it will be delivered again for the second check and the body comparison will fail.  *  * Check 2 : Failure. As the route throws and exception and the message is NACK'ed.  * The message should remain in the PubSub Subscription for the third check.  *  * Check 3 : Success for the second message.  * The message received should match the second message sent.  *  * @throws Exception  */ @Test public void singleMessage() throws Exception {     Exchange firstExchange = new DefaultExchange(context).     Exchange secondExchange = new DefaultExchange(context).     firstExchange.getIn().setBody("SUCCESS  : " + firstExchange.getExchangeId()).     secondExchange.getIn().setBody("fail  : " + secondExchange.getExchangeId()).     // Check 1 : Successful roundtrip.     System.out.println("Acknowledgement Test : Stage 1").     receiveResult.reset().     fail = false.     receiveResult.expectedMessageCount(1).     receiveResult.expectedBodiesReceivedInAnyOrder(firstExchange.getIn().getBody()).     producer.send(firstExchange).     receiveResult.assertIsSatisfied(3000).     // Check 2 : Failure for the second message.     System.out.println("Acknowledgement Test : Stage 2").     receiveResult.reset().     fail = true.     receiveResult.expectedMessageCount(0).     producer.send(secondExchange).     receiveResult.assertIsSatisfied(3000).     // Check 3 : Success for the second message.     System.out.println("Acknowledgement Test : Stage 3").     receiveResult.reset().     fail = false.     receiveResult.expectedMessageCount(1).     receiveResult.expectedBodiesReceivedInAnyOrder(secondExchange.getIn().getBody()).     receiveResult.assertIsSatisfied(3000). }
