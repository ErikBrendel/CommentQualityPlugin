# id;timestamp;commentText;codeText;commentWords;codeWords
GroupedExchangeRoundtripTest -> @Test     public void sendGrouped() throws Exception;1479108222;Tests that a grouped exhcange is successfully received__@throws Exception;@Test_    public void sendGrouped() throws Exception {__        Exchange exchange1 = new DefaultExchange(context)__        Exchange exchange2 = new DefaultExchange(context)___        String body1 = "Group 1.1 : " + exchange1.getExchangeId()__        String body2 = "Group 1.2 : " + exchange2.getExchangeId()___        receiveResult.expectedMessageCount(2)__        receiveResult.expectedBodiesReceivedInAnyOrder(body1, body2)___        exchange1.getIn().setBody(body1)__        exchange2.getIn().setBody(body2)___        producer.send(exchange1)__        producer.send(exchange2)___        receiveResult.assertIsSatisfied(3000)___        _        List<Exchange> results = sendResult.getExchanges()__        assertEquals("Received exchanges", 1, results.size())___        List exchangeGrouped = (List) results_                .get(0)_                .getProperty(Exchange.GROUPED_EXCHANGE)__        assertEquals("Received messages within the exchange", 2, exchangeGrouped.size())__    };tests,that,a,grouped,exhcange,is,successfully,received,throws,exception;test,public,void,send,grouped,throws,exception,exchange,exchange1,new,default,exchange,context,exchange,exchange2,new,default,exchange,context,string,body1,group,1,1,exchange1,get,exchange,id,string,body2,group,1,2,exchange2,get,exchange,id,receive,result,expected,message,count,2,receive,result,expected,bodies,received,in,any,order,body1,body2,exchange1,get,in,set,body,body1,exchange2,get,in,set,body,body2,producer,send,exchange1,producer,send,exchange2,receive,result,assert,is,satisfied,3000,list,exchange,results,send,result,get,exchanges,assert,equals,received,exchanges,1,results,size,list,exchange,grouped,list,results,get,0,get,property,exchange,assert,equals,received,messages,within,the,exchange,2,exchange,grouped,size
GroupedExchangeRoundtripTest -> @Test     public void sendGrouped() throws Exception;1535627650;Tests that a grouped exhcange is successfully received__@throws Exception;@Test_    public void sendGrouped() throws Exception {__        Exchange exchange1 = new DefaultExchange(context)__        Exchange exchange2 = new DefaultExchange(context)___        String body1 = "Group 1.1 : " + exchange1.getExchangeId()__        String body2 = "Group 1.2 : " + exchange2.getExchangeId()___        receiveResult.expectedMessageCount(2)__        receiveResult.expectedBodiesReceivedInAnyOrder(body1, body2)___        exchange1.getIn().setBody(body1)__        exchange2.getIn().setBody(body2)___        producer.send(exchange1)__        producer.send(exchange2)___        receiveResult.assertIsSatisfied(3000)___        _        List<Exchange> results = sendResult.getExchanges()__        assertEquals("Received exchanges", 1, results.size())___        List exchangeGrouped = (List) results_                .get(0)_                .getProperty(Exchange.GROUPED_EXCHANGE)__        assertEquals("Received messages within the exchange", 2, exchangeGrouped.size())__    };tests,that,a,grouped,exhcange,is,successfully,received,throws,exception;test,public,void,send,grouped,throws,exception,exchange,exchange1,new,default,exchange,context,exchange,exchange2,new,default,exchange,context,string,body1,group,1,1,exchange1,get,exchange,id,string,body2,group,1,2,exchange2,get,exchange,id,receive,result,expected,message,count,2,receive,result,expected,bodies,received,in,any,order,body1,body2,exchange1,get,in,set,body,body1,exchange2,get,in,set,body,body2,producer,send,exchange1,producer,send,exchange2,receive,result,assert,is,satisfied,3000,list,exchange,results,send,result,get,exchanges,assert,equals,received,exchanges,1,results,size,list,exchange,grouped,list,results,get,0,get,property,exchange,assert,equals,received,messages,within,the,exchange,2,exchange,grouped,size
GroupedExchangeRoundtripTest -> @Test     public void sendGrouped() throws Exception;1537290824;Tests that a grouped exhcange is successfully received__@throws Exception;@Test_    public void sendGrouped() throws Exception {__        Exchange exchange1 = new DefaultExchange(context)__        Exchange exchange2 = new DefaultExchange(context)___        String body1 = "Group 1.1 : " + exchange1.getExchangeId()__        String body2 = "Group 1.2 : " + exchange2.getExchangeId()___        receiveResult.expectedMessageCount(2)__        receiveResult.expectedBodiesReceivedInAnyOrder(body1, body2)___        exchange1.getIn().setBody(body1)__        exchange2.getIn().setBody(body2)___        producer.send(exchange1)__        producer.send(exchange2)___        receiveResult.assertIsSatisfied(3000)___        _        List<Exchange> results = sendResult.getExchanges()__        assertEquals("Received exchanges", 1, results.size())___        List exchangeGrouped = (List) results_                .get(0)_                .getProperty(Exchange.GROUPED_EXCHANGE)__        assertEquals("Received messages within the exchange", 2, exchangeGrouped.size())__    };tests,that,a,grouped,exhcange,is,successfully,received,throws,exception;test,public,void,send,grouped,throws,exception,exchange,exchange1,new,default,exchange,context,exchange,exchange2,new,default,exchange,context,string,body1,group,1,1,exchange1,get,exchange,id,string,body2,group,1,2,exchange2,get,exchange,id,receive,result,expected,message,count,2,receive,result,expected,bodies,received,in,any,order,body1,body2,exchange1,get,in,set,body,body1,exchange2,get,in,set,body,body2,producer,send,exchange1,producer,send,exchange2,receive,result,assert,is,satisfied,3000,list,exchange,results,send,result,get,exchanges,assert,equals,received,exchanges,1,results,size,list,exchange,grouped,list,results,get,0,get,property,exchange,assert,equals,received,messages,within,the,exchange,2,exchange,grouped,size
GroupedExchangeRoundtripTest -> @Test     public void sendGrouped() throws Exception;1540108163;Tests that a grouped exhcange is successfully received__@throws Exception;@Test_    public void sendGrouped() throws Exception {__        Exchange exchange1 = new DefaultExchange(context)__        Exchange exchange2 = new DefaultExchange(context)___        String body1 = "Group 1.1 : " + exchange1.getExchangeId()__        String body2 = "Group 1.2 : " + exchange2.getExchangeId()___        receiveResult.expectedMessageCount(2)__        receiveResult.expectedBodiesReceivedInAnyOrder(body1, body2)___        exchange1.getIn().setBody(body1)__        exchange2.getIn().setBody(body2)___        producer.send(exchange1)__        producer.send(exchange2)___        receiveResult.assertIsSatisfied(3000)___        _        List<Exchange> results = sendResult.getExchanges()__        assertEquals("Received exchanges", 1, results.size())___        List exchangeGrouped = (List) results_                .get(0)_                .getProperty(Exchange.GROUPED_EXCHANGE)__        assertEquals("Received messages within the exchange", 2, exchangeGrouped.size())__    };tests,that,a,grouped,exhcange,is,successfully,received,throws,exception;test,public,void,send,grouped,throws,exception,exchange,exchange1,new,default,exchange,context,exchange,exchange2,new,default,exchange,context,string,body1,group,1,1,exchange1,get,exchange,id,string,body2,group,1,2,exchange2,get,exchange,id,receive,result,expected,message,count,2,receive,result,expected,bodies,received,in,any,order,body1,body2,exchange1,get,in,set,body,body1,exchange2,get,in,set,body,body2,producer,send,exchange1,producer,send,exchange2,receive,result,assert,is,satisfied,3000,list,exchange,results,send,result,get,exchanges,assert,equals,received,exchanges,1,results,size,list,exchange,grouped,list,results,get,0,get,property,exchange,assert,equals,received,messages,within,the,exchange,2,exchange,grouped,size
GroupedExchangeRoundtripTest -> @Test     public void sendGrouped() throws Exception;1547803188;Tests that a grouped exhcange is successfully received__@throws Exception;@Test_    public void sendGrouped() throws Exception {__        Exchange exchange1 = new DefaultExchange(context)__        Exchange exchange2 = new DefaultExchange(context)___        String body1 = "Group 1.1 : " + exchange1.getExchangeId()__        String body2 = "Group 1.2 : " + exchange2.getExchangeId()___        receiveResult.expectedMessageCount(2)__        receiveResult.expectedBodiesReceivedInAnyOrder(body1, body2)___        exchange1.getIn().setBody(body1)__        exchange2.getIn().setBody(body2)___        producer.send(exchange1)__        producer.send(exchange2)___        receiveResult.assertIsSatisfied(3000)___        _        List<Exchange> results = sendResult.getExchanges()__        assertEquals("Received exchanges", 1, results.size())___        List exchangeGrouped = (List) results_                .get(0)_                .getProperty(Exchange.GROUPED_EXCHANGE)__        assertEquals("Received messages within the exchange", 2, exchangeGrouped.size())__    };tests,that,a,grouped,exhcange,is,successfully,received,throws,exception;test,public,void,send,grouped,throws,exception,exchange,exchange1,new,default,exchange,context,exchange,exchange2,new,default,exchange,context,string,body1,group,1,1,exchange1,get,exchange,id,string,body2,group,1,2,exchange2,get,exchange,id,receive,result,expected,message,count,2,receive,result,expected,bodies,received,in,any,order,body1,body2,exchange1,get,in,set,body,body1,exchange2,get,in,set,body,body2,producer,send,exchange1,producer,send,exchange2,receive,result,assert,is,satisfied,3000,list,exchange,results,send,result,get,exchanges,assert,equals,received,exchanges,1,results,size,list,exchange,grouped,list,results,get,0,get,property,exchange,assert,equals,received,messages,within,the,exchange,2,exchange,grouped,size
