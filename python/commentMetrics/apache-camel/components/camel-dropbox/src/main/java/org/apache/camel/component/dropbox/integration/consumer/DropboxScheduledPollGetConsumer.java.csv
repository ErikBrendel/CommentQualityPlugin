# id;timestamp;commentText;codeText;commentWords;codeWords
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1397206776;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxResult result = DropboxAPIFacade.getInstance(configuration.getClient())_                .get(configuration.getRemotePath())__        result.populateExchange(exchange)__        LOG.info("consumer --> downloaded: " + result.toString())___        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,result,result,dropbox,apifacade,get,instance,configuration,get,client,get,configuration,get,remote,path,result,populate,exchange,exchange,log,info,consumer,downloaded,result,to,string,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1480063807;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxFileDownloadResult result = DropboxAPIFacade.getInstance(configuration.getClient(), exchange)_                .get(configuration.getRemotePath())___        Map<String, OutputStream> map = result.getEntries()__        if (map.size() == 1) {_            for (Map.Entry<String, OutputStream> entry : map.entrySet()) {_                exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILE.name(), entry.getKey())__                exchange.getIn().setBody(entry.getValue())__            }_        } else {_            StringBuilder pathsExtracted = new StringBuilder()__            for (Map.Entry<String, OutputStream> entry : map.entrySet()) {_                pathsExtracted.append(entry.getKey()).append("\n")__            }_            exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString())__            exchange.getIn().setBody(map)__        }___        LOG.info("consumer --> downloaded: " + result.toString())___        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,file,download,result,result,dropbox,apifacade,get,instance,configuration,get,client,exchange,get,configuration,get,remote,path,map,string,output,stream,map,result,get,entries,if,map,size,1,for,map,entry,string,output,stream,entry,map,entry,set,exchange,get,in,set,header,dropbox,result,header,name,entry,get,key,exchange,get,in,set,body,entry,get,value,else,string,builder,paths,extracted,new,string,builder,for,map,entry,string,output,stream,entry,map,entry,set,paths,extracted,append,entry,get,key,append,n,exchange,get,in,set,header,dropbox,result,header,name,paths,extracted,to,string,exchange,get,in,set,body,map,log,info,consumer,downloaded,result,to,string,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1480063807;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxFileDownloadResult result = DropboxAPIFacade.getInstance(configuration.getClient(), exchange)_                .get(configuration.getRemotePath())___        Map<String, OutputStream> map = result.getEntries()__        if (map.size() == 1) {_            for (Map.Entry<String, OutputStream> entry : map.entrySet()) {_                exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILE.name(), entry.getKey())__                exchange.getIn().setBody(entry.getValue())__            }_        } else {_            StringBuilder pathsExtracted = new StringBuilder()__            for (Map.Entry<String, OutputStream> entry : map.entrySet()) {_                pathsExtracted.append(entry.getKey()).append("\n")__            }_            exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString())__            exchange.getIn().setBody(map)__        }___        LOG.info("consumer --> downloaded: " + result.toString())___        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,file,download,result,result,dropbox,apifacade,get,instance,configuration,get,client,exchange,get,configuration,get,remote,path,map,string,output,stream,map,result,get,entries,if,map,size,1,for,map,entry,string,output,stream,entry,map,entry,set,exchange,get,in,set,header,dropbox,result,header,name,entry,get,key,exchange,get,in,set,body,entry,get,value,else,string,builder,paths,extracted,new,string,builder,for,map,entry,string,output,stream,entry,map,entry,set,paths,extracted,append,entry,get,key,append,n,exchange,get,in,set,header,dropbox,result,header,name,paths,extracted,to,string,exchange,get,in,set,body,map,log,info,consumer,downloaded,result,to,string,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1480063807;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxFileDownloadResult result = new DropboxAPIFacade(configuration.getClient(), exchange)_                .get(configuration.getRemotePath())___        Map<String, Object> map = result.getEntries()__        if (map.size() == 1) {_            for (Map.Entry<String, Object> entry : map.entrySet()) {_                exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILE.name(), entry.getKey())__                exchange.getIn().setBody(entry.getValue())__            }_        } else {_            StringBuilder pathsExtracted = new StringBuilder()__            for (Map.Entry<String, Object> entry : map.entrySet()) {_                pathsExtracted.append(entry.getKey()).append("\n")__            }_            exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString())__            exchange.getIn().setBody(map)__        }___        LOG.info("consumer --> downloaded: " + result.toString())___        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,file,download,result,result,new,dropbox,apifacade,configuration,get,client,exchange,get,configuration,get,remote,path,map,string,object,map,result,get,entries,if,map,size,1,for,map,entry,string,object,entry,map,entry,set,exchange,get,in,set,header,dropbox,result,header,name,entry,get,key,exchange,get,in,set,body,entry,get,value,else,string,builder,paths,extracted,new,string,builder,for,map,entry,string,object,entry,map,entry,set,paths,extracted,append,entry,get,key,append,n,exchange,get,in,set,header,dropbox,result,header,name,paths,extracted,to,string,exchange,get,in,set,body,map,log,info,consumer,downloaded,result,to,string,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1480063807;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxFileDownloadResult result = new DropboxAPIFacade(configuration.getClient(), exchange)_                .get(configuration.getRemotePath())___        Map<String, Object> map = result.getEntries()__        if (map.size() == 1) {_            for (Map.Entry<String, Object> entry : map.entrySet()) {_                exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILE.name(), entry.getKey())__                exchange.getIn().setBody(entry.getValue())__            }_        } else {_            StringBuilder pathsExtracted = new StringBuilder()__            for (Map.Entry<String, Object> entry : map.entrySet()) {_                pathsExtracted.append(entry.getKey()).append("\n")__            }_            exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString())__            exchange.getIn().setBody(map)__        }___        LOG.info("consumer --> downloaded: " + result.toString())___        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,file,download,result,result,new,dropbox,apifacade,configuration,get,client,exchange,get,configuration,get,remote,path,map,string,object,map,result,get,entries,if,map,size,1,for,map,entry,string,object,entry,map,entry,set,exchange,get,in,set,header,dropbox,result,header,name,entry,get,key,exchange,get,in,set,body,entry,get,value,else,string,builder,paths,extracted,new,string,builder,for,map,entry,string,object,entry,map,entry,set,paths,extracted,append,entry,get,key,append,n,exchange,get,in,set,header,dropbox,result,header,name,paths,extracted,to,string,exchange,get,in,set,body,map,log,info,consumer,downloaded,result,to,string,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1480064361;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxFileDownloadResult result = new DropboxAPIFacade(configuration.getClient(), exchange)_                .get(configuration.getRemotePath())___        Map<String, Object> map = result.getEntries()__        if (map.size() == 1) {_            for (Map.Entry<String, Object> entry : map.entrySet()) {_                exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILE.name(), entry.getKey())__                exchange.getIn().setBody(entry.getValue())__            }_        } else {_            StringBuilder pathsExtracted = new StringBuilder()__            for (Map.Entry<String, Object> entry : map.entrySet()) {_                pathsExtracted.append(entry.getKey()).append("\n")__            }_            exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString())__            exchange.getIn().setBody(map)__        }__        if (LOG.isDebugEnabled()) {_            LOG.debug("Downloaded: {}", result.toString())__        }__        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,file,download,result,result,new,dropbox,apifacade,configuration,get,client,exchange,get,configuration,get,remote,path,map,string,object,map,result,get,entries,if,map,size,1,for,map,entry,string,object,entry,map,entry,set,exchange,get,in,set,header,dropbox,result,header,name,entry,get,key,exchange,get,in,set,body,entry,get,value,else,string,builder,paths,extracted,new,string,builder,for,map,entry,string,object,entry,map,entry,set,paths,extracted,append,entry,get,key,append,n,exchange,get,in,set,header,dropbox,result,header,name,paths,extracted,to,string,exchange,get,in,set,body,map,if,log,is,debug,enabled,log,debug,downloaded,result,to,string,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1518772634;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxFileDownloadResult result = new DropboxAPIFacade(configuration.getClient(), exchange)_                .get(configuration.getRemotePath())___        Map<String, Object> map = result.getEntries()__        if (map.size() == 1) {_            for (Map.Entry<String, Object> entry : map.entrySet()) {_                exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILE.name(), entry.getKey())__                exchange.getIn().setBody(entry.getValue())__            }_        } else {_            StringBuilder pathsExtracted = new StringBuilder()__            for (Map.Entry<String, Object> entry : map.entrySet()) {_                pathsExtracted.append(entry.getKey()).append("\n")__            }_            exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString())__            exchange.getIn().setBody(map)__        }__        if (LOG.isDebugEnabled()) {_            LOG.debug("Downloaded: {}", result.toString())__        }__        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,file,download,result,result,new,dropbox,apifacade,configuration,get,client,exchange,get,configuration,get,remote,path,map,string,object,map,result,get,entries,if,map,size,1,for,map,entry,string,object,entry,map,entry,set,exchange,get,in,set,header,dropbox,result,header,name,entry,get,key,exchange,get,in,set,body,entry,get,value,else,string,builder,paths,extracted,new,string,builder,for,map,entry,string,object,entry,map,entry,set,paths,extracted,append,entry,get,key,append,n,exchange,get,in,set,header,dropbox,result,header,name,paths,extracted,to,string,exchange,get,in,set,body,map,if,log,is,debug,enabled,log,debug,downloaded,result,to,string,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
DropboxScheduledPollGetConsumer -> @Override     protected int poll() throws Exception;1536605520;Poll from a dropbox remote path and put the result in the message exchange_@return number of messages polled_@throws Exception;@Override_    protected int poll() throws Exception {_        Exchange exchange = endpoint.createExchange()__        DropboxFileDownloadResult result = new DropboxAPIFacade(configuration.getClient(), exchange)_                .get(configuration.getRemotePath())___        Map<String, Object> map = result.getEntries()__        if (map.size() == 1) {_            for (Map.Entry<String, Object> entry : map.entrySet()) {_                exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILE.name(), entry.getKey())__                exchange.getIn().setBody(entry.getValue())__            }_        } else {_            StringBuilder pathsExtracted = new StringBuilder()__            for (Map.Entry<String, Object> entry : map.entrySet()) {_                pathsExtracted.append(entry.getKey()).append("\n")__            }_            exchange.getIn().setHeader(DropboxResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString())__            exchange.getIn().setBody(map)__        }__        if (LOG.isDebugEnabled()) {_            LOG.debug("Downloaded: {}", result)__        }__        try {_            _            getProcessor().process(exchange)__            return 1_ _        } finally {_            _            if (exchange.getException() != null) {_                getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__            }_        }_    };poll,from,a,dropbox,remote,path,and,put,the,result,in,the,message,exchange,return,number,of,messages,polled,throws,exception;override,protected,int,poll,throws,exception,exchange,exchange,endpoint,create,exchange,dropbox,file,download,result,result,new,dropbox,apifacade,configuration,get,client,exchange,get,configuration,get,remote,path,map,string,object,map,result,get,entries,if,map,size,1,for,map,entry,string,object,entry,map,entry,set,exchange,get,in,set,header,dropbox,result,header,name,entry,get,key,exchange,get,in,set,body,entry,get,value,else,string,builder,paths,extracted,new,string,builder,for,map,entry,string,object,entry,map,entry,set,paths,extracted,append,entry,get,key,append,n,exchange,get,in,set,header,dropbox,result,header,name,paths,extracted,to,string,exchange,get,in,set,body,map,if,log,is,debug,enabled,log,debug,downloaded,result,try,get,processor,process,exchange,return,1,finally,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
