commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * To use an existing DbxClient instance as DropBox client.  */ ;/**  * To use an existing DbxClient instance as DropBox client.  */ public void setClient(DbxClientV2 client) {     this.client = client. }
false;public;0;3;;public DbxClientV2 getClient() {     return client. }
true;public;0;4;/**  * Obtain a new instance of DbxClient and store it in configuration.  */ ;/**  * Obtain a new instance of DbxClient and store it in configuration.  */ public void createClient() {     DbxRequestConfig config = new DbxRequestConfig(clientIdentifier, Locale.getDefault().toString()).     this.client = new DbxClientV2(config, accessToken). }
false;public;0;3;;public String getAccessToken() {     return accessToken. }
true;public;1;3;/**  * The access token to make API requests for a specific Dropbox user  */ ;/**  * The access token to make API requests for a specific Dropbox user  */ public void setAccessToken(String accessToken) {     this.accessToken = accessToken. }
false;public;0;3;;public String getLocalPath() {     return localPath. }
true;public;1;3;/**  * Optional folder or file to upload on Dropbox from the local filesystem.  * If this option has not been configured then the message body is used as the content to upload.  */ ;/**  * Optional folder or file to upload on Dropbox from the local filesystem.  * If this option has not been configured then the message body is used as the content to upload.  */ public void setLocalPath(String localPath) {     this.localPath = localPath. }
false;public;0;3;;public String getRemotePath() {     return remotePath. }
true;public;1;3;/**  * Original file or folder to move  */ ;/**  * Original file or folder to move  */ public void setRemotePath(String remotePath) {     this.remotePath = remotePath. }
false;public;0;3;;public String getNewRemotePath() {     return newRemotePath. }
true;public;1;3;/**  * Destination file or folder  */ ;/**  * Destination file or folder  */ public void setNewRemotePath(String newRemotePath) {     this.newRemotePath = newRemotePath. }
false;public;0;3;;public String getQuery() {     return query. }
true;public;1;3;/**  * A space-separated list of sub-strings to search for. A file matches only if it contains all the sub-strings. If this option is not set, all files will be matched.  */ ;/**  * A space-separated list of sub-strings to search for. A file matches only if it contains all the sub-strings. If this option is not set, all files will be matched.  */ public void setQuery(String query) {     this.query = query. }
false;public;0;3;;public String getClientIdentifier() {     return clientIdentifier. }
true;public;1;3;/**  * Name of the app registered to make API requests  */ ;/**  * Name of the app registered to make API requests  */ public void setClientIdentifier(String clientIdentifier) {     this.clientIdentifier = clientIdentifier. }
false;public;0;3;;public DropboxOperation getOperation() {     return operation. }
true;public;1;3;/**  * The specific action (typically is a CRUD action) to perform on Dropbox remote folder.  */ ;/**  * The specific action (typically is a CRUD action) to perform on Dropbox remote folder.  */ public void setOperation(DropboxOperation operation) {     this.operation = operation. }
false;public;0;3;;public DropboxUploadMode getUploadMode() {     return uploadMode. }
true;public;1;3;/**  * Which mode to upload.  * in case of "add" the new file will be renamed if a file with the same name already exists on dropbox.  * in case of "force" if a file with the same name already exists on dropbox, this will be overwritten.  */ ;/**  * Which mode to upload.  * in case of "add" the new file will be renamed if a file with the same name already exists on dropbox.  * in case of "force" if a file with the same name already exists on dropbox, this will be overwritten.  */ public void setUploadMode(DropboxUploadMode uploadMode) {     this.uploadMode = uploadMode. }
