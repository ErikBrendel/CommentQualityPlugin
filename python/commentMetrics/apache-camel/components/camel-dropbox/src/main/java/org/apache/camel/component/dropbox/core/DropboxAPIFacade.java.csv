# id;timestamp;commentText;codeText;commentWords;codeWords
DropboxAPIFacade -> public DropboxResult get(String remotePath) throws DropboxException;1397206776;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a DropboxResult object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxResult get(String remotePath) throws DropboxException {_        DropboxResult result = new DropboxFileDownloadResult()__        _        Map<String, ByteArrayOutputStream> resultEntries = new HashMap<String, ByteArrayOutputStream>()__        _        downloadFilesInFolder(remotePath, resultEntries)__        _        result.setResultEntries(resultEntries)__        return result__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,dropbox,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,result,get,string,remote,path,throws,dropbox,exception,dropbox,result,result,new,dropbox,file,download,result,map,string,byte,array,output,stream,result,entries,new,hash,map,string,byte,array,output,stream,download,files,in,folder,remote,path,result,entries,result,set,result,entries,result,entries,return,result
DropboxAPIFacade -> public DropboxResult get(String remotePath) throws DropboxException;1405374721;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a DropboxResult object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxResult get(String remotePath) throws DropboxException {_        DropboxResult result = new DropboxFileDownloadResult()__        _        Map<String, ByteArrayOutputStream> resultEntries = new HashMap<String, ByteArrayOutputStream>()__        _        downloadFilesInFolder(remotePath, resultEntries)__        _        result.setResultEntries(resultEntries)__        return result__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,dropbox,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,result,get,string,remote,path,throws,dropbox,exception,dropbox,result,result,new,dropbox,file,download,result,map,string,byte,array,output,stream,result,entries,new,hash,map,string,byte,array,output,stream,download,files,in,folder,remote,path,result,entries,result,set,result,entries,result,entries,return,result
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1480063807;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a DropboxResult object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry = null__        try {_            entry = DropboxAPIFacade.client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }__            DropboxFileUploadResult result__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__                } else {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK)__                }_            } catch (Exception ex) {_                result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }__            HashMap<String, DropboxResultCode> resultMap = new HashMap<String, DropboxResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultMap.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultMap.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultMap.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            return new DropboxFileUploadResult(resultMap)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,dropbox,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,null,try,entry,dropbox,apifacade,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,dropbox,file,upload,result,result,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,else,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,return,result,else,log,info,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,hash,map,string,dropbox,result,code,result,map,new,hash,map,string,dropbox,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,info,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,map,put,dropbox,path,dropbox,result,code,ko,else,result,map,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,map,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,return,new,dropbox,file,upload,result,result,map
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1480063807;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a DropboxResult object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }__            DropboxFileUploadResult result__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__                } else {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK)__                }_            } catch (Exception ex) {_                result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }__            HashMap<String, DropboxResultCode> resultMap = new HashMap<String, DropboxResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultMap.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultMap.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultMap.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            return new DropboxFileUploadResult(resultMap)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,dropbox,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,dropbox,file,upload,result,result,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,else,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,return,result,else,log,info,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,hash,map,string,dropbox,result,code,result,map,new,hash,map,string,dropbox,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,info,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,map,put,dropbox,path,dropbox,result,code,ko,else,result,map,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,map,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,return,new,dropbox,file,upload,result,result,map
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1480063807;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a DropboxResult object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry = null__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }__            DropboxFileUploadResult result__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__                } else {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK)__                }_            } catch (Exception ex) {_                result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }__            HashMap<String, DropboxResultCode> resultMap = new HashMap<String, DropboxResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultMap.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultMap.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultMap.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            return new DropboxFileUploadResult(resultMap)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,dropbox,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,null,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,dropbox,file,upload,result,result,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,else,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,return,result,else,log,info,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,hash,map,string,dropbox,result,code,result,map,new,hash,map,string,dropbox,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,info,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,map,put,dropbox,path,dropbox,result,code,ko,else,result,map,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,map,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,return,new,dropbox,file,upload,result,result,map
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1480063807;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a DropboxResult object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry = null__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }__            DropboxFileUploadResult result__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__                } else {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK)__                }_            } catch (Exception ex) {_                result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }__            HashMap<String, DropboxResultCode> resultMap = new HashMap<String, DropboxResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultMap.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultMap.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultMap.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            return new DropboxFileUploadResult(resultMap)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,dropbox,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,null,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,dropbox,file,upload,result,result,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,else,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,return,result,else,log,info,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,hash,map,string,dropbox,result,code,result,map,new,hash,map,string,dropbox,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,info,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,map,put,dropbox,path,dropbox,result,code,ko,else,result,map,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,map,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,return,new,dropbox,file,upload,result,result,map
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1480063807;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a result object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }__            DropboxFileUploadResult result__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__                } else {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK)__                }_            } catch (Exception ex) {_                result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }__            HashMap<String, DropboxResultCode> resultMap = new HashMap<>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultMap.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultMap.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultMap.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            return new DropboxFileUploadResult(resultMap)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,dropbox,file,upload,result,result,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,else,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,return,result,else,log,info,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,hash,map,string,dropbox,result,code,result,map,new,hash,map,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,info,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,map,put,dropbox,path,dropbox,result,code,ko,else,result,map,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,map,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,return,new,dropbox,file,upload,result,result,map
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1480064361;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a result object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }__            DropboxFileUploadResult result__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__                } else {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK)__                }_            } catch (Exception ex) {_                result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__            }_            return result__        } else {       _            LOG.debug("Uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }__            HashMap<String, DropboxResultCode> resultMap = new HashMap<>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.debug("Uploading: {},{}", fileLocalPath, dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultMap.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultMap.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultMap.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            return new DropboxFileUploadResult(resultMap)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,dropbox,file,upload,result,result,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,else,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,return,result,else,log,debug,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,hash,map,string,dropbox,result,code,result,map,new,hash,map,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,debug,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,map,put,dropbox,path,dropbox,result,code,ko,else,result,map,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,map,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,return,new,dropbox,file,upload,result,result,map
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1495982518;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a result object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }__            DropboxFileUploadResult result__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__                } else {_                    result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.OK)__                }_            } catch (Exception ex) {_                result = new DropboxFileUploadResult(dropboxPath, DropboxResultCode.KO)__            }_            return result__        } else {       _            LOG.debug("Uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DropboxConstants.DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }__            HashMap<String, DropboxResultCode> resultMap = new HashMap<>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.debug("Uploading: {},{}", fileLocalPath, dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultMap.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultMap.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultMap.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            return new DropboxFileUploadResult(resultMap)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,constants,dropbox,path,dropbox,path,file,local,path,get,name,dropbox,file,upload,result,result,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,else,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,new,dropbox,file,upload,result,dropbox,path,dropbox,result,code,ko,return,result,else,log,debug,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,constants,dropbox,path,dropbox,path,dropbox,constants,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,hash,map,string,dropbox,result,code,result,map,new,hash,map,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,debug,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,map,put,dropbox,path,dropbox,result,code,ko,else,result,map,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,map,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,return,new,dropbox,file,upload,result,result,map
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1504631428;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a result object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }__        if (localPath != null) {_            return putFile(localPath, mode, dropboxPath, entry)__        } else {_            return putBody(exchange, mode, dropboxPath, entry)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,if,local,path,null,return,put,file,local,path,mode,dropbox,path,entry,else,return,put,body,exchange,mode,dropbox,path,entry
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1504854205;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a result object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        DbxEntry entry__        try {_            entry = client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }__        if (localPath != null) {_            return putFile(localPath, mode, dropboxPath, entry)__        } else {_            return putBody(exchange, mode, dropboxPath, entry)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,try,entry,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,if,local,path,null,return,put,file,local,path,mode,dropbox,path,entry,else,return,put,body,exchange,mode,dropbox,path,entry
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1507288671;Put or upload a new file or an entire directory to dropbox__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox_ in case of "add" the_new file will be renamed in case a file with the same name_already exists on dropbox. in case of "force" the file already_existing with the same name will be overridden._@return a result object reporting for each remote path the result of the_operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        UploadUploader entry__        try {_            entry = client.files().upload(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }__        if (localPath != null) {_            return putFile(localPath, mode, dropboxPath, entry)__        } else {_            return putBody(exchange, mode, dropboxPath, entry)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,upload,uploader,entry,try,entry,client,files,upload,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,if,local,path,null,return,put,file,local,path,mode,dropbox,path,entry,else,return,put,body,exchange,mode,dropbox,path,entry
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1517565008;Put or upload a new file or an entire directory to dropbox__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox_ in case of "add" the_new file will be renamed in case a file with the same name_already exists on dropbox. in case of "force" the file already_existing with the same name will be overridden._@return a result object reporting for each remote path the result of the_operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        UploadUploader entry__        try {_            entry = client.files().upload(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or cannot obtain metadata", e)__        }__        if (localPath != null) {_            return putFile(localPath, mode, dropboxPath, entry)__        } else {_            return putBody(exchange, mode, dropboxPath, entry)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,upload,uploader,entry,try,entry,client,files,upload,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,cannot,obtain,metadata,e,if,local,path,null,return,put,file,local,path,mode,dropbox,path,entry,else,return,put,body,exchange,mode,dropbox,path,entry
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1518772634;Put or upload a new file or an entire directory to dropbox__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox_ in case of "add" the_new file will be renamed in case a file with the same name_already exists on dropbox. in case of "force" the file already_existing with the same name will be overridden._@return a result object reporting for each remote path the result of the_operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        UploadUploader entry__        try {_            entry = client.files().upload(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or cannot obtain metadata", e)__        }__        if (localPath != null) {_            return putFile(localPath, mode, dropboxPath, entry)__        } else {_            return putBody(exchange, mode, dropboxPath, entry)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,upload,uploader,entry,try,entry,client,files,upload,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,cannot,obtain,metadata,e,if,local,path,null,return,put,file,local,path,mode,dropbox,path,entry,else,return,put,body,exchange,mode,dropbox,path,entry
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1522050615;Put or upload a new file or an entire directory to dropbox__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox_ in case of "add" the_new file will be renamed in case a file with the same name_already exists on dropbox. in case of "force" the file already_existing with the same name will be overridden._@return a result object reporting for each remote path the result of the_operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        UploadUploader entry__        try {_            entry = client.files().upload(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or cannot obtain metadata", e)__        }__        if (localPath != null) {_            return putFile(localPath, mode, dropboxPath, entry)__        } else {_            return putBody(exchange, mode, dropboxPath, entry)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,upload,uploader,entry,try,entry,client,files,upload,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,cannot,obtain,metadata,e,if,local,path,null,return,put,file,local,path,mode,dropbox,path,entry,else,return,put,body,exchange,mode,dropbox,path,entry
DropboxAPIFacade -> public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1543911790;Put or upload a new file or an entire directory to dropbox__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox_ in case of "add" the_new file will be renamed in case a file with the same name_already exists on dropbox. in case of "force" the file already_existing with the same name will be overridden._@return a result object reporting for each remote path the result of the_operation._@throws DropboxException;public DropboxFileUploadResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        _        String dropboxPath = remotePath == null ? localPath : remotePath___        boolean isPresent = true__        try {_            client.files().getMetadata(dropboxPath)__        } catch (DbxException e) {_            isPresent = false__        }__        if (localPath != null) {_            return putFile(localPath, mode, dropboxPath, isPresent)__        } else {_            return putBody(exchange, mode, dropboxPath, isPresent)__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,file,upload,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,string,dropbox,path,remote,path,null,local,path,remote,path,boolean,is,present,true,try,client,files,get,metadata,dropbox,path,catch,dbx,exception,e,is,present,false,if,local,path,null,return,put,file,local,path,mode,dropbox,path,is,present,else,return,put,body,exchange,mode,dropbox,path,is,present
DropboxAPIFacade -> public DropboxResult search(String remotePath, String query) throws DropboxException;1397206776;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a DropboxResult object containing all the files found._@throws DropboxException;public DropboxResult search(String remotePath, String query) throws DropboxException {_        DropboxResult result = new DropboxSearchResult()__        DbxEntry.WithChildren listing = null__        if (query == null) {_            LOG.info("search no query")__            try {_                listing = instance.client.getMetadataWithChildren(remotePath)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_            result.setResultEntries(listing.children)__        } else {_            LOG.info("search by query:" + query)__            List<DbxEntry> entries = null__            try {_                entries = instance.client.searchFileAndFolderNames(remotePath, query)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_            result.setResultEntries(entries)__        }_        return result__    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,dropbox,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,result,search,string,remote,path,string,query,throws,dropbox,exception,dropbox,result,result,new,dropbox,search,result,dbx,entry,with,children,listing,null,if,query,null,log,info,search,no,query,try,listing,instance,client,get,metadata,with,children,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,set,result,entries,listing,children,else,log,info,search,by,query,query,list,dbx,entry,entries,null,try,entries,instance,client,search,file,and,folder,names,remote,path,query,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,set,result,entries,entries,return,result
DropboxAPIFacade -> public DropboxResult search(String remotePath, String query) throws DropboxException;1405374721;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a DropboxResult object containing all the files found._@throws DropboxException;public DropboxResult search(String remotePath, String query) throws DropboxException {_        DropboxResult result = new DropboxSearchResult()__        DbxEntry.WithChildren listing = null__        if (query == null) {_            LOG.info("search no query")__            try {_                listing = DropboxAPIFacade.client.getMetadataWithChildren(remotePath)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_            result.setResultEntries(listing.children)__        } else {_            LOG.info("search by query:" + query)__            List<DbxEntry> entries = null__            try {_                entries = DropboxAPIFacade.client.searchFileAndFolderNames(remotePath, query)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_            result.setResultEntries(entries)__        }_        return result__    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,dropbox,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,result,search,string,remote,path,string,query,throws,dropbox,exception,dropbox,result,result,new,dropbox,search,result,dbx,entry,with,children,listing,null,if,query,null,log,info,search,no,query,try,listing,dropbox,apifacade,client,get,metadata,with,children,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,set,result,entries,listing,children,else,log,info,search,by,query,query,list,dbx,entry,entries,null,try,entries,dropbox,apifacade,client,search,file,and,folder,names,remote,path,query,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,set,result,entries,entries,return,result
DropboxAPIFacade -> public DropboxAPIFacade(DbxClient client, Exchange exchange);1480063807;@param client the DbxClient performing dropbox low level operations_@return the singleton instance of this class;public DropboxAPIFacade(DbxClient client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,return,the,singleton,instance,of,this,class;public,dropbox,apifacade,dbx,client,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClient client, Exchange exchange);1480063807;@param client the DbxClient performing dropbox low level operations_@return the singleton instance of this class;public DropboxAPIFacade(DbxClient client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,return,the,singleton,instance,of,this,class;public,dropbox,apifacade,dbx,client,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClient client, Exchange exchange);1480063807;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClient client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClient client, Exchange exchange);1480064361;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClient client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClient client, Exchange exchange);1495982518;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClient client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClient client, Exchange exchange);1504631428;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClient client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClient client, Exchange exchange);1504854205;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClient client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxResult move(String remotePath, String newRemotePath) throws DropboxException;1397206776;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a DropboxResult object with the result of the move operation._@throws DropboxException;public DropboxResult move(String remotePath, String newRemotePath) throws DropboxException {_        DropboxResult result = null__        try {_            instance.client.move(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        result = new DropboxMoveResult()__        result.setResultEntries(remotePath + "-" + newRemotePath)__        return result__    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,dropbox,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,dropbox,result,result,null,try,instance,client,move,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,new,dropbox,move,result,result,set,result,entries,remote,path,new,remote,path,return,result
DropboxAPIFacade -> public DropboxResult move(String remotePath, String newRemotePath) throws DropboxException;1405374721;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a DropboxResult object with the result of the move operation._@throws DropboxException;public DropboxResult move(String remotePath, String newRemotePath) throws DropboxException {_        DropboxResult result = null__        try {_            DropboxAPIFacade.client.move(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        result = new DropboxMoveResult()__        result.setResultEntries(remotePath + "-" + newRemotePath)__        return result__    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,dropbox,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,dropbox,result,result,null,try,dropbox,apifacade,client,move,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,new,dropbox,move,result,result,set,result,entries,remote,path,new,remote,path,return,result
DropboxAPIFacade -> @Deprecated     public boolean isDirectory(String path) throws DropboxException;1504631428;@deprecated not in use;@Deprecated_    public boolean isDirectory(String path) throws DropboxException {_        try {_            DbxEntry.WithChildren listing = client.getMetadataWithChildren(path)__            return listing.children != null__        } catch (DbxException e) {_            throw new DropboxException(path + " does not exist or can't obtain metadata")__        }_    };deprecated,not,in,use;deprecated,public,boolean,is,directory,string,path,throws,dropbox,exception,try,dbx,entry,with,children,listing,client,get,metadata,with,children,path,return,listing,children,null,catch,dbx,exception,e,throw,new,dropbox,exception,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> @Deprecated     public boolean isDirectory(String path) throws DropboxException;1504854205;@deprecated not in use;@Deprecated_    public boolean isDirectory(String path) throws DropboxException {_        try {_            DbxEntry.WithChildren listing = client.getMetadataWithChildren(path)__            return listing.children != null__        } catch (DbxException e) {_            throw new DropboxException(path + " does not exist or can't obtain metadata")__        }_    };deprecated,not,in,use;deprecated,public,boolean,is,directory,string,path,throws,dropbox,exception,try,dbx,entry,with,children,listing,client,get,metadata,with,children,path,return,listing,children,null,catch,dbx,exception,e,throw,new,dropbox,exception,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1480063807;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a DropboxResult object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            DropboxAPIFacade.client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,dropbox,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,dropbox,apifacade,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1480063807;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a DropboxResult object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,dropbox,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1480063807;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a DropboxResult object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,dropbox,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1480063807;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a DropboxResult object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,dropbox,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1480063807;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1480064361;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1495982518;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1504631428;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1504854205;Rename a remote path with the new path location._@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.move(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,move,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1507288671;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.files().moveV2(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,files,move,v2,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1517565008;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.files().moveV2(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,files,move,v2,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1518772634;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.files().moveV2(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,files,move,v2,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1522050615;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.files().moveV2(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,files,move,v2,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException;1543911790;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a result object with the result of the move operation._@throws DropboxException;public DropboxMoveResult move(String remotePath, String newRemotePath) throws DropboxException {_        try {_            client.files().moveV2(remotePath, newRemotePath)__            return new DropboxMoveResult(remotePath, newRemotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,result,object,with,the,result,of,the,move,operation,throws,dropbox,exception;public,dropbox,move,result,move,string,remote,path,string,new,remote,path,throws,dropbox,exception,try,client,files,move,v2,remote,path,new,remote,path,return,new,dropbox,move,result,remote,path,new,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1397206776;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a DropboxResult object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        DropboxResult result = new DropboxFileUploadResult()__        _        Map<String, DropboxResultCode> resultEntries = null__        _        String dropboxPath = remotePath == null ? localPath : remotePath__        DbxEntry entry = null__        try {_            entry = instance.client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }_            resultEntries = new HashMap<String, DropboxResultCode>(1)__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    resultEntries.put(dropboxPath, DropboxResultCode.KO)__                } else {_                    resultEntries.put(dropboxPath, DropboxResultCode.OK)__                }__            } catch (Exception ex) {_                resultEntries.put(dropboxPath, DropboxResultCode.KO)__            } finally {_                result.setResultEntries(resultEntries)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles == null || listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }_            resultEntries = new HashMap<String, DropboxResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultEntries.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultEntries.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultEntries.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            result.setResultEntries(resultEntries)__            return result__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,dropbox,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,dropbox,result,result,new,dropbox,file,upload,result,map,string,dropbox,result,code,result,entries,null,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,null,try,entry,instance,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,result,entries,new,hash,map,string,dropbox,result,code,1,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,entries,put,dropbox,path,dropbox,result,code,ko,else,result,entries,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,entries,put,dropbox,path,dropbox,result,code,ko,finally,result,set,result,entries,result,entries,return,result,else,log,info,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,null,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,result,entries,new,hash,map,string,dropbox,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,info,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,entries,put,dropbox,path,dropbox,result,code,ko,else,result,entries,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,entries,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,result,set,result,entries,result,entries,return,result
DropboxAPIFacade -> public DropboxResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException;1405374721;Put or upload a new file or an entire directory to dropbox_@param localPath  the file path or the dir path on the local filesystem_@param remotePath the remote path destination on dropbox_@param mode how a file should be saved on dropbox__in case of "add" the new file will be renamed in case_a file with the same name already exists on dropbox._in case of "force" the file already existing with the same name will be overridden._@return a DropboxResult object reporting for each remote path the result of the operation._@throws DropboxException;public DropboxResult put(String localPath, String remotePath, DropboxUploadMode mode) throws DropboxException {_        DropboxResult result = new DropboxFileUploadResult()__        _        Map<String, DropboxResultCode> resultEntries = null__        _        String dropboxPath = remotePath == null ? localPath : remotePath__        DbxEntry entry = null__        try {_            entry = DropboxAPIFacade.client.getMetadata(dropboxPath)__        } catch (DbxException e) {_            throw new DropboxException(dropboxPath + " does not exist or can't obtain metadata")__        }_        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (entry != null && !entry.isFile()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a file!")__            }_            _            if (entry == null) {_                if (dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                    dropboxPath = dropboxPath + fileLocalPath.getName()__                }_            }_            resultEntries = new HashMap<String, DropboxResultCode>(1)__            try {_                DbxEntry.File uploadedFile = putSingleFile(fileLocalPath, dropboxPath, mode)__                if (uploadedFile == null) {_                    resultEntries.put(dropboxPath, DropboxResultCode.KO)__                } else {_                    resultEntries.put(dropboxPath, DropboxResultCode.OK)__                }__            } catch (Exception ex) {_                resultEntries.put(dropboxPath, DropboxResultCode.KO)__            } finally {_                result.setResultEntries(resultEntries)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (entry != null && !entry.isFolder()) {_                throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!")__            }_            if (!dropboxPath.endsWith(DROPBOX_FILE_SEPARATOR)) {_                dropboxPath = dropboxPath + DROPBOX_FILE_SEPARATOR__            }_            _            String oldDropboxPath = dropboxPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles == null || listFiles.isEmpty()) {_                throw new DropboxException(localPath + " doesn't contain any files")__            }_            resultEntries = new HashMap<String, DropboxResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                dropboxPath = dropboxPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + dropboxPath)__                    DbxEntry.File uploadedFile = putSingleFile(file, dropboxPath, mode)__                    if (uploadedFile == null) {_                        resultEntries.put(dropboxPath, DropboxResultCode.KO)__                    } else {_                        resultEntries.put(dropboxPath, DropboxResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultEntries.put(dropboxPath, DropboxResultCode.KO)__                }_                dropboxPath = oldDropboxPath__            }_            result.setResultEntries(resultEntries)__            return result__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,dropbox,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,dropbox,param,mode,how,a,file,should,be,saved,on,dropbox,in,case,of,add,the,new,file,will,be,renamed,in,case,a,file,with,the,same,name,already,exists,on,dropbox,in,case,of,force,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,dropbox,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,dropbox,exception;public,dropbox,result,put,string,local,path,string,remote,path,dropbox,upload,mode,mode,throws,dropbox,exception,dropbox,result,result,new,dropbox,file,upload,result,map,string,dropbox,result,code,result,entries,null,string,dropbox,path,remote,path,null,local,path,remote,path,dbx,entry,entry,null,try,entry,dropbox,apifacade,client,get,metadata,dropbox,path,catch,dbx,exception,e,throw,new,dropbox,exception,dropbox,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,entry,null,entry,is,file,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,file,if,entry,null,if,dropbox,path,ends,with,dropbox,path,dropbox,path,file,local,path,get,name,result,entries,new,hash,map,string,dropbox,result,code,1,try,dbx,entry,file,uploaded,file,put,single,file,file,local,path,dropbox,path,mode,if,uploaded,file,null,result,entries,put,dropbox,path,dropbox,result,code,ko,else,result,entries,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,entries,put,dropbox,path,dropbox,result,code,ko,finally,result,set,result,entries,result,entries,return,result,else,log,info,uploading,a,dir,if,entry,null,entry,is,folder,throw,new,dropbox,exception,dropbox,path,exists,on,dropbox,and,is,not,a,folder,if,dropbox,path,ends,with,dropbox,path,dropbox,path,string,old,dropbox,path,dropbox,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,null,list,files,is,empty,throw,new,dropbox,exception,local,path,doesn,t,contain,any,files,result,entries,new,hash,map,string,dropbox,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,dropbox,path,dropbox,path,remaining,path,try,log,info,uploading,file,local,path,dropbox,path,dbx,entry,file,uploaded,file,put,single,file,file,dropbox,path,mode,if,uploaded,file,null,result,entries,put,dropbox,path,dropbox,result,code,ko,else,result,entries,put,dropbox,path,dropbox,result,code,ok,catch,exception,ex,result,entries,put,dropbox,path,dropbox,result,code,ko,dropbox,path,old,dropbox,path,result,set,result,entries,result,entries,return,result
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1480063807;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a DropboxResult object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.info("search no query")__            try {_                listing = DropboxAPIFacade.client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.info("search by query:" + query)__            try {_                List<DbxEntry> entries = DropboxAPIFacade.client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,dropbox,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,info,search,no,query,try,listing,dropbox,apifacade,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,info,search,by,query,query,try,list,dbx,entry,entries,dropbox,apifacade,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1480063807;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of sub-strings to search for. A file matches only if it contains all the sub-strings_@return a DropboxResult object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        if (query == null) {_            LOG.info("search no query")__            try {_                DbxEntry.WithChildren listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.info("search by query:" + query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,sub,strings,to,search,for,a,file,matches,only,if,it,contains,all,the,sub,strings,return,a,dropbox,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,if,query,null,log,info,search,no,query,try,dbx,entry,with,children,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,info,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1480063807;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a DropboxResult object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.info("search no query")__            try {_                listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.info("search by query:" + query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,dropbox,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,info,search,no,query,try,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,info,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1480063807;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a DropboxResult object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.info("search no query")__            try {_                listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.info("search by query:" + query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,dropbox,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,info,search,no,query,try,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,info,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1480063807;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.info("search no query")__            try {_                listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.info("search by query:" + query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,info,search,no,query,try,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,info,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1480064361;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,debug,search,no,query,try,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,debug,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1495982518;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,debug,search,no,query,try,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,debug,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1504631428;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,debug,search,no,query,try,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,debug,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1504854205;Search inside a remote path including its sub directories._The query param can be null._@param remotePath  the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        DbxEntry.WithChildren listing__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.getMetadataWithChildren(remotePath)__                return new DropboxSearchResult(listing.children)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                List<DbxEntry> entries = client.searchFileAndFolderNames(remotePath, query)__                return new DropboxSearchResult(entries)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,dbx,entry,with,children,listing,if,query,null,log,debug,search,no,query,try,listing,client,get,metadata,with,children,remote,path,return,new,dropbox,search,result,listing,children,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,debug,search,by,query,query,try,list,dbx,entry,entries,client,search,file,and,folder,names,remote,path,query,return,new,dropbox,search,result,entries,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1507288671;Search inside a remote path including its sub directories. The query_param can be null.__@param remotePath the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file_matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        SearchResult listing__        List<SearchMatch> searchMatches__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.files().search(remotePath, null)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                listing = client.files().search(remotePath, query)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,search,result,listing,list,search,match,search,matches,if,query,null,log,debug,search,no,query,try,listing,client,files,search,remote,path,null,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,else,log,debug,search,by,query,query,try,listing,client,files,search,remote,path,query,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1517565008;Search inside a remote path including its sub directories. The query_param can be null.__@param remotePath the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file_matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        SearchResult listing__        List<SearchMatch> searchMatches__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.files().search(remotePath, null)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                listing = client.files().search(remotePath, query)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,search,result,listing,list,search,match,search,matches,if,query,null,log,debug,search,no,query,try,listing,client,files,search,remote,path,null,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,else,log,debug,search,by,query,query,try,listing,client,files,search,remote,path,query,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1518772634;Search inside a remote path including its sub directories. The query_param can be null.__@param remotePath the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file_matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        SearchResult listing__        List<SearchMatch> searchMatches__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.files().search(remotePath, null)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                listing = client.files().search(remotePath, query)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,search,result,listing,list,search,match,search,matches,if,query,null,log,debug,search,no,query,try,listing,client,files,search,remote,path,null,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,else,log,debug,search,by,query,query,try,listing,client,files,search,remote,path,query,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1522050615;Search inside a remote path including its sub directories. The query_param can be null.__@param remotePath the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file_matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        SearchResult listing__        List<SearchMatch> searchMatches__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.files().search(remotePath, null)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                listing = client.files().search(remotePath, query)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,search,result,listing,list,search,match,search,matches,if,query,null,log,debug,search,no,query,try,listing,client,files,search,remote,path,null,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,else,log,debug,search,by,query,query,try,listing,client,files,search,remote,path,query,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxSearchResult search(String remotePath, String query) throws DropboxException;1543911790;Search inside a remote path including its sub directories. The query_param can be null.__@param remotePath the remote path where starting the search from_@param query a space-separated list of substrings to search for. A file_matches only if it contains all the substrings_@return a result object containing all the files found._@throws DropboxException;public DropboxSearchResult search(String remotePath, String query) throws DropboxException {_        SearchResult listing__        List<SearchMatch> searchMatches__        if (query == null) {_            LOG.debug("Search no query")__            try {_                listing = client.files().search(remotePath, null)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        } else {_            LOG.debug("Search by query: {}", query)__            try {_                listing = client.files().search(remotePath, query)__                searchMatches = listing.getMatches()__                return new DropboxSearchResult(searchMatches)__            } catch (DbxException e) {_                throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__            }_        }_    };search,inside,a,remote,path,including,its,sub,directories,the,query,param,can,be,null,param,remote,path,the,remote,path,where,starting,the,search,from,param,query,a,space,separated,list,of,substrings,to,search,for,a,file,matches,only,if,it,contains,all,the,substrings,return,a,result,object,containing,all,the,files,found,throws,dropbox,exception;public,dropbox,search,result,search,string,remote,path,string,query,throws,dropbox,exception,search,result,listing,list,search,match,search,matches,if,query,null,log,debug,search,no,query,try,listing,client,files,search,remote,path,null,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,else,log,debug,search,by,query,query,try,listing,client,files,search,remote,path,query,search,matches,listing,get,matches,return,new,dropbox,search,result,search,matches,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1480063807;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a DropboxResult object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            DropboxAPIFacade.client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,dropbox,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,dropbox,apifacade,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1480063807;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a DropboxResult object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__            return new DropboxDelResult(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,dropbox,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,return,new,dropbox,del,result,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1480063807;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a DropboxResult object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,dropbox,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1480063807;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a DropboxResult object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,dropbox,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1480063807;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1480064361;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1495982518;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1504631428;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1504854205;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1507288671;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.files().deleteV2(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,files,delete,v2,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1517565008;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.files().deleteV2(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,files,delete,v2,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1518772634;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.files().deleteV2(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,files,delete,v2,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1522050615;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.files().deleteV2(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,files,delete,v2,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public DropboxDelResult del(String remotePath) throws DropboxException;1543911790;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a result object with the result of the delete operation._@throws DropboxException;public DropboxDelResult del(String remotePath) throws DropboxException {_        try {_            client.files().deleteV2(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or cannot obtain metadata", e)__        }_        return new DropboxDelResult(remotePath)__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,del,result,del,string,remote,path,throws,dropbox,exception,try,client,files,delete,v2,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,cannot,obtain,metadata,e,return,new,dropbox,del,result,remote,path
DropboxAPIFacade -> public static DropboxAPIFacade getInstance(DbxClient client, Exchange exchange);1480063807;Return a singleton instance of this class_@param client the DbxClient performing dropbox low level operations_@return the singleton instance of this class;public static DropboxAPIFacade getInstance(DbxClient client, Exchange exchange) {_        return new DropboxAPIFacade(exchange)__    };return,a,singleton,instance,of,this,class,param,client,the,dbx,client,performing,dropbox,low,level,operations,return,the,singleton,instance,of,this,class;public,static,dropbox,apifacade,get,instance,dbx,client,client,exchange,exchange,return,new,dropbox,apifacade,exchange
DropboxAPIFacade -> public static DropboxAPIFacade getInstance(DbxClient client, Exchange exchange);1480063807;Return a singleton instance of this class_@param client the DbxClient performing dropbox low level operations_@return the singleton instance of this class;public static DropboxAPIFacade getInstance(DbxClient client, Exchange exchange) {_        return new DropboxAPIFacade(exchange)__    };return,a,singleton,instance,of,this,class,param,client,the,dbx,client,performing,dropbox,low,level,operations,return,the,singleton,instance,of,this,class;public,static,dropbox,apifacade,get,instance,dbx,client,client,exchange,exchange,return,new,dropbox,apifacade,exchange
DropboxAPIFacade -> public static DropboxAPIFacade getInstance(DbxClient client);1397206776;Return a singleton instance of this class_@param client the DbxClient performing dropbox low level operations_@return the singleton instance of this class;public static DropboxAPIFacade getInstance(DbxClient client) {_        if (instance == null) {_            instance = new DropboxAPIFacade()__            instance.client = client__        }_        return instance__    };return,a,singleton,instance,of,this,class,param,client,the,dbx,client,performing,dropbox,low,level,operations,return,the,singleton,instance,of,this,class;public,static,dropbox,apifacade,get,instance,dbx,client,client,if,instance,null,instance,new,dropbox,apifacade,instance,client,client,return,instance
DropboxAPIFacade -> public static DropboxAPIFacade getInstance(DbxClient client);1405374721;Return a singleton instance of this class_@param client the DbxClient performing dropbox low level operations_@return the singleton instance of this class;public static DropboxAPIFacade getInstance(DbxClient client) {_        if (instance == null) {_            instance = new DropboxAPIFacade()__            DropboxAPIFacade.client = client__        }_        return instance__    };return,a,singleton,instance,of,this,class,param,client,the,dbx,client,performing,dropbox,low,level,operations,return,the,singleton,instance,of,this,class;public,static,dropbox,apifacade,get,instance,dbx,client,client,if,instance,null,instance,new,dropbox,apifacade,dropbox,apifacade,client,client,return,instance
DropboxAPIFacade -> public DropboxResult del(String remotePath) throws DropboxException;1397206776;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a DropboxResult object with the result of the delete operation._@throws DropboxException;public DropboxResult del(String remotePath) throws DropboxException {_        DropboxResult result = null__        try {_            instance.client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        result = new DropboxDelResult()__        result.setResultEntries(remotePath)__        return result__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,dropbox,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,result,del,string,remote,path,throws,dropbox,exception,dropbox,result,result,null,try,instance,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,new,dropbox,del,result,result,set,result,entries,remote,path,return,result
DropboxAPIFacade -> public DropboxResult del(String remotePath) throws DropboxException;1405374721;Delete every files and subdirectories inside the remote directory._In case the remotePath is a file, delete the file._@param remotePath  the remote location to delete_@return a DropboxResult object with the result of the delete operation._@throws DropboxException;public DropboxResult del(String remotePath) throws DropboxException {_        DropboxResult result = null__        try {_            DropboxAPIFacade.client.delete(remotePath)__        } catch (DbxException e) {_            throw new DropboxException(remotePath + " does not exist or can't obtain metadata")__        }_        result = new DropboxDelResult()__        result.setResultEntries(remotePath)__        return result__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,dropbox,result,object,with,the,result,of,the,delete,operation,throws,dropbox,exception;public,dropbox,result,del,string,remote,path,throws,dropbox,exception,dropbox,result,result,null,try,dropbox,apifacade,client,delete,remote,path,catch,dbx,exception,e,throw,new,dropbox,exception,remote,path,does,not,exist,or,can,t,obtain,metadata,result,new,dropbox,del,result,result,set,result,entries,remote,path,return,result
DropboxAPIFacade -> public DropboxAPIFacade(DbxClientV2 client, Exchange exchange);1507288671;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClientV2 client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,v2,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClientV2 client, Exchange exchange);1517565008;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClientV2 client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,v2,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClientV2 client, Exchange exchange);1518772634;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClientV2 client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,v2,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClientV2 client, Exchange exchange);1522050615;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClientV2 client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,v2,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxAPIFacade(DbxClientV2 client, Exchange exchange);1543911790;@param client the DbxClient performing dropbox low level operations_@param exchange the current Exchange;public DropboxAPIFacade(DbxClientV2 client, Exchange exchange) {_        this.client = client__        this.exchange = exchange__    };param,client,the,dbx,client,performing,dropbox,low,level,operations,param,exchange,the,current,exchange;public,dropbox,apifacade,dbx,client,v2,client,exchange,exchange,this,client,client,this,exchange,exchange
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1480063807;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a DropboxResult object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,dropbox,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1480063807;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a DropboxResult object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,dropbox,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1480063807;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a DropboxResult object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,dropbox,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1480063807;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a DropboxResult object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,dropbox,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1480063807;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1480064361;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1495982518;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1504631428;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1504854205;Get the content of every file inside the remote path._@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1507288671;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every_files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1517565008;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every_files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1518772634;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every_files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1522050615;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every_files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
DropboxAPIFacade -> public DropboxFileDownloadResult get(String remotePath) throws DropboxException;1543911790;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a result object with the content (ByteArrayOutputStream) of every_files inside the remote path._@throws DropboxException;public DropboxFileDownloadResult get(String remotePath) throws DropboxException {_        return new DropboxFileDownloadResult(downloadFilesInFolder(remotePath))__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,dropbox,exception;public,dropbox,file,download,result,get,string,remote,path,throws,dropbox,exception,return,new,dropbox,file,download,result,download,files,in,folder,remote,path
