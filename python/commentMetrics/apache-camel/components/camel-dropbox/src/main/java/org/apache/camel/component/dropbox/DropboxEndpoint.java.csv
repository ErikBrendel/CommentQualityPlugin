commented;modifiers;parameterAmount;loc;comment;code
true;public;0;17;/**  * Create one of the camel producer available based on the configuration  * @return the camel producer  * @throws Exception  */ ;/**  * Create one of the camel producer available based on the configuration  * @return the camel producer  * @throws Exception  */ public Producer createProducer() throws Exception {     LOG.trace("Resolve producer dropbox endpoint {{}}", configuration.getOperation()).     LOG.trace("Resolve producer dropbox attached client: {}", configuration.getClient()).     if (configuration.getOperation() == DropboxOperation.put) {         return new DropboxPutProducer(this, configuration).     } else if (this.configuration.getOperation() == DropboxOperation.search) {         return new DropboxSearchProducer(this, configuration).     } else if (this.configuration.getOperation() == DropboxOperation.del) {         return new DropboxDelProducer(this, configuration).     } else if (this.configuration.getOperation() == DropboxOperation.get) {         return new DropboxGetProducer(this, configuration).     } else if (this.configuration.getOperation() == DropboxOperation.move) {         return new DropboxMoveProducer(this, configuration).     } else {         throw new DropboxException("Operation specified is not valid for producer!").     } }
true;public;1;16;/**  * Create one of the camel consumer available based on the configuration  * @param processor  the given processor  * @return the camel consumer  * @throws Exception  */ ;/**  * Create one of the camel consumer available based on the configuration  * @param processor  the given processor  * @return the camel consumer  * @throws Exception  */ public Consumer createConsumer(Processor processor) throws Exception {     LOG.trace("Resolve consumer dropbox endpoint {{}}", configuration.getOperation()).     LOG.trace("Resolve consumer dropbox attached client: {}", configuration.getClient()).     DropboxScheduledPollConsumer consumer.     if (this.configuration.getOperation() == DropboxOperation.search) {         consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration).         consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY).         return consumer.     } else if (this.configuration.getOperation() == DropboxOperation.get) {         consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration).         consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY).         return consumer.     } else {         throw new DropboxException("Operation specified is not valid for consumer!").     } }
false;public;0;3;;public boolean isSingleton() {     return true. }
