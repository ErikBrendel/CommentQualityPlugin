commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;8;//  ;// ********************************* // Parameters validation //  @Override protected Result verifyParameters(Map<String, Object> parameters) {     ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.PARAMETERS).error(ResultErrorHelper.requiresOption("accessToken", parameters)).error(ResultErrorHelper.requiresOption("clientIdentifier", parameters)).     return builder.build(). }
true;protected;1;5;// ********************************* ;// ********************************* // Connectivity validation // ********************************* @Override protected Result verifyConnectivity(Map<String, Object> parameters) {     return ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.CONNECTIVITY).error(parameters, this::verifyCredentials).build(). }
false;private;2;19;;private void verifyCredentials(ResultBuilder builder, Map<String, Object> parameters) {     String token = (String) parameters.get("accessToken").     String clientId = (String) parameters.get("clientIdentifier").     try {         // Create Dropbox client         DbxRequestConfig config = new DbxRequestConfig(clientId, Locale.getDefault().toString()).         DbxClientV2 client = new DbxClientV2(config, token).         client.users().getCurrentAccount().         client = null.     } catch (Exception e) {         builder.error(ResultErrorBuilder.withCodeAndDescription(VerificationError.StandardCode.AUTHENTICATION, "Invalid client identifier and/or access token").parameterKey("accessToken").parameterKey("clientIdentifier").build()).     } }
