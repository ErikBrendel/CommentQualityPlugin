commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void removeDir() throws DbxException, IOException {     createDir(COPY_WORKDIR).     createFile(FILE, "content"). }
false;public;0;4;;@Test public void testCamelDropbox() throws Exception {     test("direct:start"). }
false;public;0;4;;@Test public void testCamelDropboxWithOptionInHeader() throws Exception {     test("direct:start2"). }
false;private;1;8;;private void test(String endpoint) throws InterruptedException {     template.sendBody(endpoint, null).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(DropboxResultHeader.MOVED_PATH.name(), workdir + "/" + FILE).     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() {     from("direct:start").to(String.format("dropbox://move?accessToken={{accessToken}}&remotePath=%s&newRemotePath=%s", workdir + "/" + FILE, COPY_WORKDIR + "/" + FILE)).to("mock:result").     from("direct:start2").setHeader(DropboxConstants.HEADER_REMOTE_PATH, constant(workdir + "/" + FILE)).setHeader(DropboxConstants.HEADER_NEW_REMOTE_PATH, constant(COPY_WORKDIR + "/" + FILE)).to("dropbox://move?accessToken={{accessToken}}").to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to(String.format("dropbox://move?accessToken={{accessToken}}&remotePath=%s&newRemotePath=%s", workdir + "/" + FILE, COPY_WORKDIR + "/" + FILE)).to("mock:result").             from("direct:start2").setHeader(DropboxConstants.HEADER_REMOTE_PATH, constant(workdir + "/" + FILE)).setHeader(DropboxConstants.HEADER_NEW_REMOTE_PATH, constant(COPY_WORKDIR + "/" + FILE)).to("dropbox://move?accessToken={{accessToken}}").to("mock:result").         }     }. }
