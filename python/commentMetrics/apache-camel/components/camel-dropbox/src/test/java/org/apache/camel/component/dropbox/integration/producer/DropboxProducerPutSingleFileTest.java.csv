commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testCamelDropboxWithOptionInHeader() throws Exception {     final Path file = Files.createTempFile("camel", ".txt").     final Map<String, Object> headers = new HashMap<>().     headers.put(DropboxConstants.HEADER_LOCAL_PATH, file.toAbsolutePath().toString()).     headers.put(DropboxConstants.HEADER_UPLOAD_MODE, DropboxUploadMode.add).     template.sendBodyAndHeaders("direct:start", null, headers).     assertFileUploaded(). }
false;public;0;6;;@Test public void uploadBodyTest() throws Exception {     template.sendBodyAndHeader("direct:start", "Helo Camels", DropboxConstants.HEADER_UPLOAD_MODE, DropboxUploadMode.add).     assertFileUploaded(). }
false;public;0;10;;@Test public void uploadIfExistsAddTest() throws Exception {     thrown.expectCause(IsInstanceOf.instanceOf(DropboxException.class)).     createFile(FILENAME, "content").     final Path file = Files.createTempFile("camel", ".txt").     final Map<String, Object> headers = new HashMap<>().     headers.put(DropboxConstants.HEADER_LOCAL_PATH, file.toAbsolutePath().toString()).     headers.put(DropboxConstants.HEADER_UPLOAD_MODE, DropboxUploadMode.add).     template.sendBodyAndHeaders("direct:start", null, headers). }
false;public;0;18;;@Test public void uploadIfExistsForceTest() throws Exception {     final String newContent = UUID.randomUUID().toString().     createFile(FILENAME, "Hi camels").     final Path file = Files.createTempFile("camel", ".txt").     try (BufferedWriter bw = new BufferedWriter(new FileWriter(file.toFile()))) {         bw.write(newContent).         bw.flush().     }     final Map<String, Object> headers = new HashMap<>().     headers.put(DropboxConstants.HEADER_LOCAL_PATH, file.toAbsolutePath().toString()).     headers.put(DropboxConstants.HEADER_UPLOAD_MODE, DropboxUploadMode.force).     template.sendBodyAndHeaders("direct:start", null, headers).     assertFileUploaded().     Assert.assertEquals(newContent, getFileContent(workdir + "/" + FILENAME)). }
false;private;0;6;;private void assertFileUploaded() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(DropboxResultHeader.UPLOADED_FILE.name(), workdir + "/" + FILENAME).     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() {     from("direct:start").to("dropbox://put?accessToken={{accessToken}}&remotePath=" + workdir + "/" + FILENAME).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("dropbox://put?accessToken={{accessToken}}&remotePath=" + workdir + "/" + FILENAME).to("mock:result").         }     }. }
