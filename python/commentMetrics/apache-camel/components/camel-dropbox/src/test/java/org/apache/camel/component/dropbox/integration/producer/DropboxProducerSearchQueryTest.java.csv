commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void createFile() throws IOException {     final String content = "Hi camels".     createFile(FILE_NAME, content). }
false;public;0;4;;@Test public void testCamelDropbox() throws Exception {     test("direct:start"). }
false;public;0;4;;@Test public void testCamelDropboxWithOptionInHeader() throws Exception {     test("direct:start2"). }
false;private;1;8;;private void test(String endpoint) throws InterruptedException {     template.sendBody(endpoint, null).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.message(0).header(DropboxResultHeader.FOUND_FILES.name()).contains(String.format("%s/%s", workdir, FILE_NAME)).     mock.assertIsSatisfied(). }
false;public;0;11;;public void configure() {     from("direct:start").to(String.format("dropbox://search?accessToken={{accessToken}}&remotePath=%s&query=%s", workdir, FILE_NAME)).to("mock:result").     from("direct:start2").setHeader(DropboxConstants.HEADER_REMOTE_PATH, constant(workdir)).setHeader(DropboxConstants.HEADER_QUERY, constant(FILE_NAME)).to("dropbox://search?accessToken={{accessToken}}").to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").to(String.format("dropbox://search?accessToken={{accessToken}}&remotePath=%s&query=%s", workdir, FILE_NAME)).to("mock:result").             from("direct:start2").setHeader(DropboxConstants.HEADER_REMOTE_PATH, constant(workdir)).setHeader(DropboxConstants.HEADER_QUERY, constant(FILE_NAME)).to("dropbox://search?accessToken={{accessToken}}").to("mock:result").         }     }. }
