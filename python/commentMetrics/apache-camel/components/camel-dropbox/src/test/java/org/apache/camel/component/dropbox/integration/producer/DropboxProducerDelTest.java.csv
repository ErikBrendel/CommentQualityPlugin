commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void createFile() throws IOException {     createFile(FILE_NAME, "content"). }
false;public;0;4;;@Test public void testCamelDropbox() throws Exception {     test("direct:start"). }
false;public;0;4;;@Test public void testCamelDropboxWithOptionInHeader() throws Exception {     test("direct:start2"). }
false;private;1;7;;private void test(String endpointURI) throws InterruptedException {     template.sendBody(endpointURI, null).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(DropboxResultHeader.DELETED_PATH.name(), workdir + "/" + FILE_NAME).     assertMockEndpointsSatisfied(). }
false;public;0;10;;public void configure() {     from("direct:start").to("dropbox://del?accessToken={{accessToken}}&remotePath=" + workdir + "/" + FILE_NAME).to("mock:result").     from("direct:start2").setHeader(DropboxConstants.HEADER_REMOTE_PATH, constant(workdir + "/" + FILE_NAME)).to("dropbox://del?accessToken={{accessToken}}").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("dropbox://del?accessToken={{accessToken}}&remotePath=" + workdir + "/" + FILE_NAME).to("mock:result").             from("direct:start2").setHeader(DropboxConstants.HEADER_REMOTE_PATH, constant(workdir + "/" + FILE_NAME)).to("dropbox://del?accessToken={{accessToken}}").to("mock:result").         }     }. }
