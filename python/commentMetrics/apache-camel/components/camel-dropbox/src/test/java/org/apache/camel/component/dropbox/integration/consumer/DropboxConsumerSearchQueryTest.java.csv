commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testCamelDropbox() throws Exception {     final String content = "Hi camels".     createFile(FILE_NAME, content).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.message(0).header(DropboxResultHeader.FOUND_FILES.name()).contains(String.format("%s/%s", workdir, FILE_NAME)).     mock.assertIsSatisfied(). }
false;public;0;4;;public void configure() {     from(String.format("dropbox://search?accessToken={{accessToken}}&remotePath=%s&query=%s", workdir, FILE_NAME)).id("consumer").autoStartup(false).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from(String.format("dropbox://search?accessToken={{accessToken}}&remotePath=%s&query=%s", workdir, FILE_NAME)).id("consumer").autoStartup(false).to("mock:result").         }     }. }
