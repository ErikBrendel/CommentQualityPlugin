commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("dropbox://get?accessToken=accessToken&remotePath=/path").to("mock:test1").     from("dropbox://get?accessToken=accessToken&remotePath=/path with spaces/file").to("mock:test2"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("dropbox://get?accessToken=accessToken&remotePath=/path").to("mock:test1").             from("dropbox://get?accessToken=accessToken&remotePath=/path with spaces/file").to("mock:test2").         }     }. }
false;public;0;20;;@Test public void shouldCreateGetConsumer() throws Exception {     // Given     Endpoint dropboxEndpoint1 = context.getEndpoint("dropbox://get?accessToken=accessToken&remotePath=/path").     // When     Consumer consumer1 = dropboxEndpoint1.createConsumer(null).     // Then     Assert.assertTrue(consumer1 instanceof DropboxScheduledPollGetConsumer).     // Given     Endpoint dropboxEndpoint2 = context.getEndpoint("dropbox://get?accessToken=accessToken&remotePath=/path with spaces/file").     // When     Consumer consumer2 = dropboxEndpoint2.createConsumer(null).     // Then     Assert.assertTrue(consumer2 instanceof DropboxScheduledPollGetConsumer). }
