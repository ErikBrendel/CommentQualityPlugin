commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "groovy: " + text. }
false;protected;1;3;;protected String assertionFailureMessage(Exchange exchange) {     return "groovy: " + text. }
false;public;2;7;;public <T> T evaluate(Exchange exchange, Class<T> type) {     Script script = instantiateScript(exchange).     script.setBinding(createBinding(exchange)).     Object value = script.run().     return exchange.getContext().getTypeConverter().convertTo(type, value). }
false;private;1;29;;@SuppressWarnings("unchecked") private Script instantiateScript(Exchange exchange) {     // Get the script from the cache, or create a new instance     GroovyLanguage language = (GroovyLanguage) exchange.getContext().resolveLanguage("groovy").     Class<Script> scriptClass = language.getScriptFromCache(text).     if (scriptClass == null) {         GroovyShell shell.         Set<GroovyShellFactory> shellFactories = exchange.getContext().getRegistry().findByType(GroovyShellFactory.class).         if (shellFactories.size() > 1) {             throw new IllegalStateException("Too many GroovyShellFactory instances found: " + shellFactories.size()).         } else if (shellFactories.size() == 1) {             shell = shellFactories.iterator().next().createGroovyShell(exchange).         } else {             ClassLoader cl = exchange.getContext().getApplicationContextClassLoader().             shell = cl != null ? new GroovyShell(cl) : new GroovyShell().         }         scriptClass = shell.getClassLoader().parseClass(text).         language.addScriptToCache(text, scriptClass).     }     // New instance of the script     try {         return scriptClass.newInstance().     } catch (InstantiationException e) {         throw new RuntimeCamelException(e).     } catch (IllegalAccessException e) {         throw new RuntimeCamelException(e).     } }
false;private;1;5;;private Binding createBinding(Exchange exchange) {     Map<String, Object> variables = new HashMap<>().     ExchangeHelper.populateVariableMap(exchange, variables).     return new Binding(variables). }
