commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testInvokeMethod() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("name", "Tony the Tiger").     mock.expectedHeaderReceived("dangerous", true).     Animal animal = new Animal("Tony the Tiger", 12).     template.sendBody("direct:start", animal).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").setHeader("name").groovy("request.body.name").setHeader("dangerous").groovy("request.body.isDangerous()").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("name").groovy("request.body.name").setHeader("dangerous").groovy("request.body.isDangerous()").to("mock:result").         }     }. }
