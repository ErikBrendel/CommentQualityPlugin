commented;modifiers;parameterAmount;loc;comment;code
false;public;1;35;;@Override public void filter(ClientRequestContext requestContext) throws IOException {     if (requestContext.getCookies().get("JSESSIONID") == null) {         String username = bonitaApiConfig.getUsername().         String password = bonitaApiConfig.getPassword().         String bonitaApiToken = null.         if (ObjectHelper.isEmpty(username)) {             throw new IllegalArgumentException("Username provided is null or empty.").         }         if (ObjectHelper.isEmpty(password)) {             throw new IllegalArgumentException("Password provided is null or empty.").         }         ClientBuilder clientBuilder = ClientBuilder.newBuilder().         Client client = clientBuilder.build().         WebTarget webTarget = client.target(bonitaApiConfig.getBaseBonitaURI()).path("loginservice").         MultivaluedMap<String, String> form = new MultivaluedHashMap<>().         form.add("username", username).         form.add("password", password).         form.add("redirect", "false").         Response response = webTarget.request().accept(MediaType.APPLICATION_FORM_URLENCODED).post(Entity.form(form)).         Map<String, NewCookie> cr = response.getCookies().         ArrayList<Object> cookies = new ArrayList<>().         for (NewCookie cookie : cr.values()) {             if ("X-Bonita-API-Token".equals(cookie.getName())) {                 bonitaApiToken = cookie.getValue().                 requestContext.getHeaders().add("X-Bonita-API-Token", bonitaApiToken).             }             cookies.add(cookie.toString()).         }         requestContext.getHeaders().put("Cookie", cookies).     } }
false;public;0;3;;public BonitaAPIConfig getBonitaApiConfig() {     return bonitaApiConfig. }
false;public;1;3;;public void setBonitaApiConfig(BonitaAPIConfig bonitaApiConfig) {     this.bonitaApiConfig = bonitaApiConfig. }
