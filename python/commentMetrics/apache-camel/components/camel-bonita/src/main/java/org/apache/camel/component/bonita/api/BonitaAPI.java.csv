commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private WebTarget getBaseResource() {     return webTarget. }
false;public;1;16;;public ProcessDefinitionResponse getProcessDefinition(String processName) {     if (ObjectHelper.isEmpty(processName)) {         throw new IllegalArgumentException("processName is empty.").     }     WebTarget resource = getBaseResource().path("process").queryParam("s", processName).     List<ProcessDefinitionResponse> listProcess = resource.request().accept(MediaType.APPLICATION_JSON).get(new GenericType<List<ProcessDefinitionResponse>>() {     }).     if (listProcess.size() > 0) {         return listProcess.get(0).     } else {         throw new RuntimeException("The process with name " + processName + " has not been retrieved").     } }
false;public;2;15;;public CaseCreationResponse startCase(ProcessDefinitionResponse processDefinition, Map<String, Serializable> rawInputs) throws Exception {     if (processDefinition == null) {         throw new IllegalArgumentException("ProcessDefinition is null").     }     if (rawInputs == null) {         throw new IllegalArgumentException("The contract input is null").     }     Map<String, Serializable> inputs = BonitaAPIUtil.getInstance(bonitaApiConfig).prepareInputs(processDefinition, rawInputs).     WebTarget resource = getBaseResource().path("process/{processId}/instantiation").resolveTemplate("processId", processDefinition.getId()).     return resource.request().accept(MediaType.APPLICATION_JSON).post(entity(inputs, MediaType.APPLICATION_JSON), CaseCreationResponse.class). }
false;public;0;3;;public BonitaAPIConfig getBonitaApiConfig() {     return bonitaApiConfig. }
false;public;1;3;;public void setBonitaApiConfig(BonitaAPIConfig bonitaApiConfig) {     this.bonitaApiConfig = bonitaApiConfig. }
