commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;12;;public static BonitaAPIUtil getInstance(BonitaAPIConfig bonitaAPIConfig) {     if (instance == null) {         instance = new BonitaAPIUtil().         ClientBuilder clientBuilder = ClientBuilder.newBuilder().         Client client = clientBuilder.build().         client.register(JacksonJsonProvider.class).         client.register(new JsonClientFilter()).         client.register(new BonitaAuthFilter(bonitaAPIConfig)).         instance.setWebTarget(client.target(bonitaAPIConfig.getBaseBonitaURI())).     }     return instance. }
false;public;2;21;;public UploadFileResponse uploadFile(ProcessDefinitionResponse processDefinition, FileInput file) throws Exception {     WebTarget resource = webTarget.path("portal/resource/process/{processName}/{processVersion}/API/formFileUpload").resolveTemplate("processName", processDefinition.getName()).resolveTemplate("processVersion", processDefinition.getVersion()).     File tempFile = File.createTempFile("tempFile", ".tmp").     FileOutputStream fos = new FileOutputStream(tempFile).     fos.write(file.getContent()).     fos.close().     String dispositionValue = String.format("form-data.filename=%s.name=file", tempFile.getName()).     Attachment attachment = new AttachmentBuilder().object(new ByteArrayInputStream(file.getContent())).contentDisposition(new ContentDisposition(dispositionValue)).build().     return resource.request().accept(MediaType.APPLICATION_JSON).post(entity(attachment, MediaType.MULTIPART_FORM_DATA), UploadFileResponse.class). }
false;public;2;14;;public Map<String, Serializable> prepareInputs(ProcessDefinitionResponse processDefinition, Map<String, Serializable> inputs) throws Exception {     for (Entry<String, Serializable> entry : inputs.entrySet()) {         if (entry.getValue() instanceof FileInput) {             FileInput file = (FileInput) entry.getValue().             String tmpFile = uploadFile(processDefinition, file).getTempPath().             HashMap<String, Serializable> fileInput = new HashMap<>().             fileInput.put("filename", file.getFilename()).             fileInput.put("tempPath", tmpFile).             entry.setValue(fileInput).         }     }     return inputs. }
false;public;0;3;;public WebTarget getWebTarget() {     return webTarget. }
false;public;1;3;;public void setWebTarget(WebTarget webTarget) {     this.webTarget = webTarget. }
