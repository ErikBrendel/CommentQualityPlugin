commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testIrcPrivateMessages() throws Exception {     resultEndpoint.expectedBodiesReceived(expectedBody1, expectedBody2).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     for (Exchange exchange : list) {         log.info("Received exchange: " + exchange + " headers: " + exchange.getIn().getHeaders()).     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     sendMessages(). }
false;public;0;15;;public void configure() throws Exception {     from(fromUri()).choice().when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("PRIVMSG")).to("direct:mock").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to("seda:consumerJoined").     from("seda:consumerJoined").process(new Processor() {          public void process(Exchange exchange) throws Exception {             sendMessages().         }     }).     from("direct:mock").filter(e -> !e.getIn().getBody(String.class).contains("VERSION")).to(resultEndpoint). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fromUri()).choice().when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("PRIVMSG")).to("direct:mock").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to("seda:consumerJoined").             from("seda:consumerJoined").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     sendMessages().                 }             }).             from("direct:mock").filter(e -> !e.getIn().getBody(String.class).contains("VERSION")).to(resultEndpoint).         }     }. }
false;protected;0;4;;@Override protected String sendUri() {     return "ircs://{{camelTo}}@{{server}}?channels={{channel1}}&username={{username}}&password={{password}}". }
true;protected;0;8;/**  * Lets send messages once the consumer has joined  */ ;/**  * Lets send messages once the consumer has joined  */ protected void sendMessages() throws InterruptedException {     if (!sentMessages) {         sentMessages = true.         template.sendBodyAndHeader(sendUri(), body1, "irc.target", properties.get("camelFrom")).         template.sendBodyAndHeader(sendUri(), body2, "irc.target", properties.get("camelFrom")).     } }
