commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testIrcMessages() throws Exception {     resetMock(joined).     joined.expectedMessageCount(2).     joined.expectedHeaderValuesReceivedInAnyOrder(IrcConstants.IRC_TARGET, properties.get("channel1"), properties.get("channel2")).     joined.assertIsSatisfied().     sendMessages().     // consumer is going to receive two copies of body3     resultEndpoint.expectedBodiesReceivedInAnyOrder(body1, body2, body3, body3).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     for (Exchange exchange : list) {         log.info("Received exchange: " + exchange + " headers: " + exchange.getIn().getHeaders()).     } }
false;public;0;8;;public void configure() throws Exception {     from(fromUri()).choice().when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("PRIVMSG")).to("direct:mock").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to(joined).     from("direct:mock").filter(e -> !e.getIn().getBody(String.class).contains("VERSION")).to(resultEndpoint). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fromUri()).choice().when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("PRIVMSG")).to("direct:mock").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to(joined).             from("direct:mock").filter(e -> !e.getIn().getBody(String.class).contains("VERSION")).to(resultEndpoint).         }     }. }
true;protected;0;5;/**  * Lets send messages once the consumer has joined  */ ;/**  * Lets send messages once the consumer has joined  */ protected void sendMessages() {     template.sendBodyAndHeader(sendUri(), body1, "irc.target", properties.get("channel1")).     template.sendBodyAndHeader(sendUri(), body2, "irc.target", properties.get("channel2")).     template.sendBody(sendUri(), body3). }
false;protected;0;4;;@Override protected String sendUri() {     return "ircs://camel-prd@{{server}}?nickname=camel-prd&channels={{channel1}},{{channel2}}". }
false;protected;0;4;;@Override protected String fromUri() {     return "ircs://camel-con@{{server}}??nickname=camel-con&channels={{channel1}},{{channel2}}". }
