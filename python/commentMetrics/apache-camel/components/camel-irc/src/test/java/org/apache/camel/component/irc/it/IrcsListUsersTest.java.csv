commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public void configure() throws Exception {     LOGGER.debug("Creating new test route").     from(PRODUCER_URI + "?namesOnJoin=true&onReply=true").choice().when(header("irc.messageType").isEqualToIgnoreCase("REPLY")).filter(header("irc.num").isEqualTo(IRC_RPL_NAMREPLY)).to("mock:result").stop(). }
false;protected;0;17;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             LOGGER.debug("Creating new test route").             from(PRODUCER_URI + "?namesOnJoin=true&onReply=true").choice().when(header("irc.messageType").isEqualToIgnoreCase("REPLY")).filter(header("irc.num").isEqualTo(IRC_RPL_NAMREPLY)).to("mock:result").stop().         }     }. }
false;public;0;9;;@Test public void test() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.assertIsSatisfied().     String body = resultEndpoint.getExchanges().get(0).getIn().getBody(String.class).     LOGGER.debug("Received usernames: [{}]", body).     String username = properties.getProperty("camelFrom").     assertTrue("userlist does not contain test user", body.contains(username)). }
