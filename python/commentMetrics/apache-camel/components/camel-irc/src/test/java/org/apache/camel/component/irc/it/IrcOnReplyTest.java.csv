commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testIrcMessages() throws Exception {     resultEndpoint.expectedBodiesReceived(resultEnd).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     for (Exchange exchange : list) {         log.info("Received exchange: " + exchange + " headers: " + exchange.getIn().getHeaders()).     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     sendMessages(). }
false;public;0;12;;public void configure() throws Exception {     from(fromUri()).choice().when(header(IrcConstants.IRC_NUM).isEqualTo(315)).to("mock:result").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to("seda:consumerJoined").     from("seda:consumerJoined").process(new Processor() {          public void process(Exchange exchange) throws Exception {             sendMessages().         }     }). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fromUri()).choice().when(header(IrcConstants.IRC_NUM).isEqualTo(315)).to("mock:result").when(header(IrcConstants.IRC_MESSAGE_TYPE).isEqualTo("JOIN")).to("seda:consumerJoined").             from("seda:consumerJoined").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     sendMessages().                 }             }).         }     }. }
false;protected;0;4;;protected String fromUri() {     StringBuilder sb = new StringBuilder(super.fromUri()).     return sb.append("&onReply=true").toString(). }
true;protected;0;8;/**  * Lets send messages once the consumer has joined  */ ;/**  * Lets send messages once the consumer has joined  */ protected void sendMessages() {     if (!sentMessages) {         sentMessages = true.         // now the consumer has joined, lets send some messages         template.sendBody(fromUri(), command).     } }
