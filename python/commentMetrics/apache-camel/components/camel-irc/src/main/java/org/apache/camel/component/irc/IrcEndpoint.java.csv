commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;1;5;;public Exchange createExchange(ExchangePattern pattern) {     Exchange exchange = super.createExchange(pattern).     exchange.setProperty(Exchange.BINDING, getBinding()).     return exchange. }
false;public;3;6;;public Exchange createOnPrivmsgExchange(String target, IRCUser user, String msg) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "PRIVMSG", target, user, msg).     exchange.setIn(im).     return exchange. }
false;public;2;6;;public Exchange createOnNickExchange(IRCUser user, String newNick) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "NICK", user, newNick).     exchange.setIn(im).     return exchange. }
false;public;2;6;;public Exchange createOnQuitExchange(IRCUser user, String msg) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "QUIT", user, msg).     exchange.setIn(im).     return exchange. }
false;public;2;6;;public Exchange createOnJoinExchange(String channel, IRCUser user) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "JOIN", channel, user).     exchange.setIn(im).     return exchange. }
false;public;4;6;;public Exchange createOnKickExchange(String channel, IRCUser user, String whoWasKickedNick, String msg) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "KICK", channel, user, whoWasKickedNick, msg).     exchange.setIn(im).     return exchange. }
false;public;3;6;;public Exchange createOnModeExchange(String channel, IRCUser user, IRCModeParser modeParser) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "MODE", channel, user, modeParser.getLine()).     exchange.setIn(im).     return exchange. }
false;public;3;6;;public Exchange createOnPartExchange(String channel, IRCUser user, String msg) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "PART", channel, user, msg).     exchange.setIn(im).     return exchange. }
false;public;3;6;;public Exchange createOnReplyExchange(int num, String value, String msg) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "REPLY", num, value, msg).     exchange.setIn(im).     return exchange. }
false;public;3;6;;public Exchange createOnTopicExchange(String channel, IRCUser user, String topic) {     Exchange exchange = createExchange().     IrcMessage im = new IrcMessage(getCamelContext(), "TOPIC", channel, user, topic).     exchange.setIn(im).     return exchange. }
false;public;0;3;;public IrcProducer createProducer() throws Exception {     return new IrcProducer(this, component.getIRCConnection(configuration)). }
false;public;1;5;;public IrcConsumer createConsumer(Processor processor) throws Exception {     IrcConsumer answer = new IrcConsumer(this, processor, component.getIRCConnection(configuration)).     configureConsumer(answer).     return answer. }
false;public;0;3;;public IrcComponent getComponent() {     return component. }
false;public;1;3;;public void setComponent(IrcComponent component) {     this.component = component. }
false;public;0;6;;public IrcBinding getBinding() {     if (binding == null) {         binding = new IrcBinding().     }     return binding. }
false;public;1;3;;public void setBinding(IrcBinding binding) {     this.binding = binding. }
false;public;0;3;;public IrcConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(IrcConfiguration configuration) {     this.configuration = configuration. }
false;public;2;5;;public void handleIrcError(int num, String msg) {     if (IRCConstants.ERR_NICKNAMEINUSE == num) {         handleNickInUse().     } }
false;private;0;15;;private void handleNickInUse() {     IRCConnection connection = component.getIRCConnection(configuration).     String nick = connection.getNick() + "-".     // hackish but working approach to prevent an endless loop. Abort after 4 nick attempts.     if (nick.endsWith("----")) {         log.error("Unable to set nick: {} disconnecting", nick).     } else {         log.warn("Unable to set nick: " + nick + " Retrying with " + nick + "-").         connection.doNick(nick).         // if the nick failure was doing startup channels weren't joined. So join         // the channels now. It's a no-op if the channels are already joined.         joinChannels().     } }
false;public;0;5;;public void joinChannels() {     for (IrcChannel channel : configuration.getChannels()) {         joinChannel(channel).     } }
false;public;1;3;;public void joinChannel(String name) {     joinChannel(configuration.findChannel(name)). }
false;public;1;25;;public void joinChannel(IrcChannel channel) {     if (channel == null) {         return.     }     IRCConnection connection = component.getIRCConnection(configuration).     String chn = channel.getName().     String key = channel.getKey().     if (ObjectHelper.isNotEmpty(key)) {         if (log.isDebugEnabled()) {             log.debug("Joining: {} using {} with secret key", channel, connection.getClass().getName()).         }         connection.doJoin(chn, key).     } else {         if (log.isDebugEnabled()) {             log.debug("Joining: {} using {}", channel, connection.getClass().getName()).         }         connection.doJoin(chn).     }     if (configuration.isNamesOnJoin()) {         connection.doNames(chn).     } }
