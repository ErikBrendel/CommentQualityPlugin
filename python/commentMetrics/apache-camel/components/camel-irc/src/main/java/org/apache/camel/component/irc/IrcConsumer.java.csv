commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected void doStop() throws Exception {     if (connection != null) {         for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {             log.debug("Parting: {}", channel).             connection.doPart(channel.getName()).         }         connection.removeIRCEventListener(listener).     }     super.doStop(). }
false;protected;0;22;;@Override protected void doStart() throws Exception {     super.doStart().     listener = getListener().     connection.addIRCEventListener(listener).     log.debug("Sleeping for {} seconds before sending commands.", configuration.getCommandTimeout() / 1000).     // sleep for a few seconds as the server sometimes takes a moment to fully connect, print banners, etc after connection established     try {         Thread.sleep(configuration.getCommandTimeout()).     } catch (InterruptedException ex) {     // ignore     }     if (ObjectHelper.isNotEmpty(configuration.getNickPassword())) {         log.debug("Identifying and enforcing nick with NickServ.").         // Identify nick and enforce, https://meta.wikimedia.org/wiki/IRC/Instructions#Register_your_nickname.2C_identify.2C_and_enforce         connection.doPrivmsg("nickserv", "identify " + configuration.getNickPassword()).         connection.doPrivmsg("nickserv", "set enforce on").     }     endpoint.joinChannels(). }
false;public;0;3;;public IRCConnection getConnection() {     return connection. }
false;public;0;6;;public IRCEventAdapter getListener() {     if (listener == null) {         listener = new FilteredIRCEventAdapter().     }     return listener. }
false;public;1;3;;public void setListener(IRCEventAdapter listener) {     this.listener = listener. }
false;public;2;11;;@Override public void onNick(IRCUser user, String newNick) {     if (configuration.isOnNick()) {         Exchange exchange = endpoint.createOnNickExchange(user, newNick).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;2;11;;@Override public void onQuit(IRCUser user, String msg) {     if (configuration.isOnQuit()) {         Exchange exchange = endpoint.createOnQuitExchange(user, msg).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;2;11;;@Override public void onJoin(String channel, IRCUser user) {     if (configuration.isOnJoin()) {         Exchange exchange = endpoint.createOnJoinExchange(channel, user).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;4;17;;@Override public void onKick(String channel, IRCUser user, String passiveNick, String msg) {     // check to see if I got kick and if so rejoin if autoRejoin is on     if (passiveNick.equals(connection.getNick()) && configuration.isAutoRejoin()) {         endpoint.joinChannel(channel).     }     if (configuration.isOnKick()) {         Exchange exchange = endpoint.createOnKickExchange(channel, user, passiveNick, msg).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;3;11;;@Override public void onMode(String channel, IRCUser user, IRCModeParser modeParser) {     if (configuration.isOnMode()) {         Exchange exchange = endpoint.createOnModeExchange(channel, user, modeParser).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;3;11;;@Override public void onPart(String channel, IRCUser user, String msg) {     if (configuration.isOnPart()) {         Exchange exchange = endpoint.createOnPartExchange(channel, user, msg).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;3;11;;@Override public void onReply(int num, String value, String msg) {     if (configuration.isOnReply()) {         Exchange exchange = endpoint.createOnReplyExchange(num, value, msg).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;3;11;;@Override public void onTopic(String channel, IRCUser user, String topic) {     if (configuration.isOnTopic()) {         Exchange exchange = endpoint.createOnTopicExchange(channel, user, topic).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;3;11;;@Override public void onPrivmsg(String target, IRCUser user, String msg) {     if (configuration.isOnPrivmsg()) {         Exchange exchange = endpoint.createOnPrivmsgExchange(target, user, msg).         try {             getProcessor().process(exchange).         } catch (Exception e) {             handleException(e).         }     } }
false;public;2;3;;@Override public void onError(int num, String msg) { }
