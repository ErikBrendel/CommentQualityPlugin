commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;public void process(Exchange exchange) throws Exception {     final String msg = exchange.getIn().getBody(String.class).     final String targetChannel = exchange.getIn().getHeader(IrcConstants.IRC_TARGET, String.class).     if (!connection.isConnected()) {         throw new RuntimeCamelException("Lost connection to " + connection.getHost()).     }     if (msg != null) {         if (isMessageACommand(msg)) {             log.debug("Sending command: {}", msg).             connection.send(msg).         } else if (targetChannel != null) {             log.debug("Sending to: {} message: {}", targetChannel, msg).             connection.doPrivmsg(targetChannel, msg).         } else {             for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {                 log.debug("Sending to: {} message: {}", channel, msg).                 connection.doPrivmsg(channel.getName(), msg).             }         }     } }
false;protected;0;14;;@Override protected void doStart() throws Exception {     super.doStart().     listener = getListener().     connection.addIRCEventListener(listener).     log.debug("Sleeping for {} seconds before sending commands.", configuration.getCommandTimeout() / 1000).     // sleep for a few seconds as the server sometimes takes a moment to fully connect, print banners, etc after connection established     try {         Thread.sleep(configuration.getCommandTimeout()).     } catch (InterruptedException ex) {     // ignore     }     endpoint.joinChannels(). }
false;protected;0;11;;@Override protected void doStop() throws Exception {     if (connection != null) {         for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {             log.debug("Parting: {}", channel).             connection.doPart(channel.getName()).         }         connection.removeIRCEventListener(listener).     }     super.doStop(). }
false;protected;1;8;;protected boolean isMessageACommand(String msg) {     for (String command : COMMANDS) {         if (msg.startsWith(command)) {             return true.         }     }     return false. }
false;public;0;6;;public IRCEventAdapter getListener() {     if (listener == null) {         listener = new FilteredIRCEventAdapter().     }     return listener. }
false;public;1;3;;public void setListener(IRCEventAdapter listener) {     this.listener = listener. }
false;public;4;8;;@Override public void onKick(String channel, IRCUser user, String passiveNick, String msg) {     // check to see if I got kick and if so rejoin if autoRejoin is on     if (passiveNick.equals(connection.getNick()) && endpoint.getConfiguration().isAutoRejoin()) {         endpoint.joinChannel(channel).     } }
false;public;2;4;;@Override public void onError(int num, String msg) {     IrcProducer.this.endpoint.handleIrcError(num, msg). }
