commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;public IrcEndpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // every endpoint gets it's own configuration     IrcConfiguration config = new IrcConfiguration().     config.configure(uri).     IrcEndpoint endpoint = new IrcEndpoint(uri, this, config).     setProperties(endpoint.getConfiguration(), parameters).     return endpoint. }
false;public,synchronized;1;13;;public synchronized IRCConnection getIRCConnection(IrcConfiguration configuration) {     final IRCConnection connection.     if (connectionCache.containsKey(configuration.getCacheKey())) {         if (log.isDebugEnabled()) {             log.debug("Returning Cached Connection to {}:{}", configuration.getHostname(), configuration.getNickname()).         }         connection = connectionCache.get(configuration.getCacheKey()).     } else {         connection = createConnection(configuration).         connectionCache.put(configuration.getCacheKey(), connection).     }     return connection. }
false;protected;1;53;;protected IRCConnection createConnection(IrcConfiguration configuration) {     IRCConnection conn = null.     IRCEventListener ircLogger.     if (configuration.getUsingSSL()) {         if (log.isDebugEnabled()) {             log.debug("Creating SSL Connection to {} destination(s): {} nick: {} user: {}", new Object[] { configuration.getHostname(), configuration.getListOfChannels(), configuration.getNickname(), configuration.getUsername() }).         }         SSLContextParameters sslParams = configuration.getSslContextParameters().         if (sslParams == null) {             sslParams = retrieveGlobalSslContextParameters().         }         if (sslParams != null) {             conn = new CamelSSLIRCConnection(configuration.getHostname(), configuration.getPorts(), configuration.getPassword(), configuration.getNickname(), configuration.getUsername(), configuration.getRealname(), sslParams, getCamelContext()).         } else {             SSLIRCConnection sconn = new SSLIRCConnection(configuration.getHostname(), configuration.getPorts(), configuration.getPassword(), configuration.getNickname(), configuration.getUsername(), configuration.getRealname()).             sconn.addTrustManager(configuration.getTrustManager()).             conn = sconn.         }     } else {         if (log.isDebugEnabled()) {             log.debug("Creating Connection to {} destination(s): {} nick: {} user: {}", new Object[] { configuration.getHostname(), configuration.getListOfChannels(), configuration.getNickname(), configuration.getUsername() }).         }         conn = new IRCConnection(configuration.getHostname(), configuration.getPorts(), configuration.getPassword(), configuration.getNickname(), configuration.getUsername(), configuration.getRealname()).     }     conn.setEncoding("UTF-8").     conn.setColors(configuration.isColors()).     conn.setPong(true).     if (log.isDebugEnabled()) {         log.debug("Adding IRC event logging listener").         ircLogger = createIrcLogger(configuration.getHostname()).         conn.addIRCEventListener(ircLogger).     }     try {         conn.connect().     } catch (Exception e) {         throw new RuntimeCamelException(e).     }     return conn. }
false;public;2;8;;public void closeConnection(String key, IRCConnection connection) {     try {         connection.doQuit().         connection.close().     } catch (Exception e) {         log.warn("Error during closing connection.", e).     } }
false;protected;0;10;;@Override protected void doStop() throws Exception {     // lets use a copy so we can clear the connections eagerly in case of exceptions     Map<String, IRCConnection> map = new HashMap<>(connectionCache).     connectionCache.clear().     for (Map.Entry<String, IRCConnection> entry : map.entrySet()) {         closeConnection(entry.getKey(), entry.getValue()).     }     super.doStop(). }
false;protected;1;3;;protected IRCEventListener createIrcLogger(String hostname) {     return new IrcLogger(log, hostname). }
false;protected;1;4;;@Deprecated protected String preProcessUri(String uri) {     return IrcConfiguration.sanitize(uri). }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
