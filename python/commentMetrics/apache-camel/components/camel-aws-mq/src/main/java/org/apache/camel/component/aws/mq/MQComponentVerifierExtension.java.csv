commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;12;;// ********************************* // Parameters validation // ********************************* @Override protected Result verifyParameters(Map<String, Object> parameters) {     ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.PARAMETERS).error(ResultErrorHelper.requiresOption("accessKey", parameters)).error(ResultErrorHelper.requiresOption("secretKey", parameters)).error(ResultErrorHelper.requiresOption("region", parameters)).     // Validate using the catalog     super.verifyParametersAgainstCatalog(builder, parameters).     return builder.build(). }
false;protected;1;21;;// ********************************* // Connectivity validation // ********************************* @Override protected Result verifyConnectivity(Map<String, Object> parameters) {     ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.CONNECTIVITY).     try {         MQConfiguration configuration = setProperties(new MQConfiguration(), parameters).         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         AmazonMQ client = AmazonMQClientBuilder.standard().withCredentials(credentialsProvider).withRegion(Regions.valueOf(configuration.getRegion())).build().         client.listBrokers(new ListBrokersRequest()).     } catch (SdkClientException e) {         ResultErrorBuilder errorBuilder = ResultErrorBuilder.withCodeAndDescription(VerificationError.StandardCode.AUTHENTICATION, e.getMessage()).detail("aws_mq_exception_message", e.getMessage()).detail(VerificationError.ExceptionAttribute.EXCEPTION_CLASS, e.getClass().getName()).detail(VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE, e).         builder.error(errorBuilder.build()).     } catch (Exception e) {         builder.error(ResultErrorBuilder.withException(e).build()).     }     return builder.build(). }
