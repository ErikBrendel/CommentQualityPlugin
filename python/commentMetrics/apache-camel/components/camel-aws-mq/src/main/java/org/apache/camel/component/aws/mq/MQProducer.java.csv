commented;modifiers;parameterAmount;loc;comment;code
false;public;1;24;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case listBrokers:             listBrokers(getEndpoint().getAmazonMqClient(), exchange).             break.         case createBroker:             createBroker(getEndpoint().getAmazonMqClient(), exchange).             break.         case deleteBroker:             deleteBroker(getEndpoint().getAmazonMqClient(), exchange).             break.         case rebootBroker:             rebootBroker(getEndpoint().getAmazonMqClient(), exchange).             break.         case updateBroker:             updateBroker(getEndpoint().getAmazonMqClient(), exchange).             break.         case describeBroker:             describeBroker(getEndpoint().getAmazonMqClient(), exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;7;;private MQOperations determineOperation(Exchange exchange) {     MQOperations operation = exchange.getIn().getHeader(MQConstants.OPERATION, MQOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected MQConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (mqProducerToString == null) {         mqProducerToString = "MQProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return mqProducerToString. }
false;public;0;4;;@Override public MQEndpoint getEndpoint() {     return (MQEndpoint) super.getEndpoint(). }
false;private;2;16;;private void listBrokers(AmazonMQ mqClient, Exchange exchange) {     ListBrokersRequest request = new ListBrokersRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.MAX_RESULTS))) {         int maxResults = exchange.getIn().getHeader(MQConstants.MAX_RESULTS, Integer.class).         request.withMaxResults(maxResults).     }     ListBrokersResult result.     try {         result = mqClient.listBrokers(request).     } catch (AmazonServiceException ase) {         log.trace("List Brokers command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;61;;private void createBroker(AmazonMQ mqClient, Exchange exchange) {     String brokerName.     String brokerEngine.     String brokerEngineVersion.     String deploymentMode.     String instanceType.     Boolean publiclyAccessible.     List<User> users.     CreateBrokerRequest request = new CreateBrokerRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_NAME))) {         brokerName = exchange.getIn().getHeader(MQConstants.BROKER_NAME, String.class).         request.withBrokerName(brokerName).     } else {         throw new IllegalArgumentException("Broker Name must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_ENGINE))) {         brokerEngine = exchange.getIn().getHeader(MQConstants.BROKER_ENGINE, String.class).         request.withEngineType(EngineType.fromValue(brokerEngine)).     } else {         request.withEngineType(EngineType.ACTIVEMQ.name()).     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_ENGINE_VERSION))) {         brokerEngineVersion = exchange.getIn().getHeader(MQConstants.BROKER_ENGINE_VERSION, String.class).         request.withEngineVersion(brokerEngineVersion).     } else {         throw new IllegalArgumentException("Broker Engine Version must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_DEPLOYMENT_MODE))) {         deploymentMode = exchange.getIn().getHeader(MQConstants.BROKER_DEPLOYMENT_MODE, String.class).         request.withDeploymentMode(DeploymentMode.fromValue(deploymentMode)).     } else {         throw new IllegalArgumentException("Deployment Mode must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_INSTANCE_TYPE))) {         instanceType = exchange.getIn().getHeader(MQConstants.BROKER_INSTANCE_TYPE, String.class).         request.withHostInstanceType(instanceType).     } else {         throw new IllegalArgumentException("Instance Type must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_USERS))) {         users = exchange.getIn().getHeader(MQConstants.BROKER_USERS, List.class).         request.withUsers(users).     } else {         throw new IllegalArgumentException("A Users list must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_PUBLICLY_ACCESSIBLE))) {         publiclyAccessible = exchange.getIn().getHeader(MQConstants.BROKER_PUBLICLY_ACCESSIBLE, Boolean.class).         request.withPubliclyAccessible(publiclyAccessible).     } else {         request.withPubliclyAccessible(false).     }     CreateBrokerResult result.     try {         result = mqClient.createBroker(request).     } catch (AmazonServiceException ase) {         log.trace("Create Broker command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;19;;private void deleteBroker(AmazonMQ mqClient, Exchange exchange) {     String brokerId.     DeleteBrokerRequest request = new DeleteBrokerRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_ID))) {         brokerId = exchange.getIn().getHeader(MQConstants.BROKER_ID, String.class).         request.withBrokerId(brokerId).     } else {         throw new IllegalArgumentException("Broker Name must be specified").     }     DeleteBrokerResult result.     try {         result = mqClient.deleteBroker(request).     } catch (AmazonServiceException ase) {         log.trace("Delete Broker command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;19;;private void rebootBroker(AmazonMQ mqClient, Exchange exchange) {     String brokerId.     RebootBrokerRequest request = new RebootBrokerRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_ID))) {         brokerId = exchange.getIn().getHeader(MQConstants.BROKER_ID, String.class).         request.withBrokerId(brokerId).     } else {         throw new IllegalArgumentException("Broker Name must be specified").     }     RebootBrokerResult result.     try {         result = mqClient.rebootBroker(request).     } catch (AmazonServiceException ase) {         log.trace("Reboot Broker command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;26;;private void updateBroker(AmazonMQ mqClient, Exchange exchange) {     String brokerId.     ConfigurationId configurationId.     UpdateBrokerRequest request = new UpdateBrokerRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_ID))) {         brokerId = exchange.getIn().getHeader(MQConstants.BROKER_ID, String.class).         request.withBrokerId(brokerId).     } else {         throw new IllegalArgumentException("Broker Name must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.CONFIGURATION_ID))) {         configurationId = exchange.getIn().getHeader(MQConstants.CONFIGURATION_ID, ConfigurationId.class).         request.withConfiguration(configurationId).     } else {         throw new IllegalArgumentException("Broker Name must be specified").     }     UpdateBrokerResult result.     try {         result = mqClient.updateBroker(request).     } catch (AmazonServiceException ase) {         log.trace("Update Broker command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;19;;private void describeBroker(AmazonMQ mqClient, Exchange exchange) {     String brokerId.     DescribeBrokerRequest request = new DescribeBrokerRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(MQConstants.BROKER_ID))) {         brokerId = exchange.getIn().getHeader(MQConstants.BROKER_ID, String.class).         request.withBrokerId(brokerId).     } else {         throw new IllegalArgumentException("Broker Name must be specified").     }     DescribeBrokerResult result.     try {         result = mqClient.describeBroker(request).     } catch (AmazonServiceException ase) {         log.trace("Reboot Broker command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
