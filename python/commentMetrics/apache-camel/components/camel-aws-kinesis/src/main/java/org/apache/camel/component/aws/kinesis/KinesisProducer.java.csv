commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public KinesisEndpoint getEndpoint() {     return (KinesisEndpoint) super.getEndpoint(). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     PutRecordRequest request = createRequest(exchange).     PutRecordResult putRecordResult = getEndpoint().getClient().putRecord(request).     Message message = getMessageForResponse(exchange).     message.setHeader(KinesisConstants.SEQUENCE_NUMBER, putRecordResult.getSequenceNumber()).     message.setHeader(KinesisConstants.SHARD_ID, putRecordResult.getShardId()). }
false;private;1;14;;private PutRecordRequest createRequest(Exchange exchange) {     ByteBuffer body = exchange.getIn().getBody(ByteBuffer.class).     Object partitionKey = exchange.getIn().getHeader(KinesisConstants.PARTITION_KEY).     Object sequenceNumber = exchange.getIn().getHeader(KinesisConstants.SEQUENCE_NUMBER).     PutRecordRequest putRecordRequest = new PutRecordRequest().     putRecordRequest.setData(body).     putRecordRequest.setStreamName(getEndpoint().getConfiguration().getStreamName()).     putRecordRequest.setPartitionKey(partitionKey.toString()).     if (sequenceNumber != null) {         putRecordRequest.setSequenceNumberForOrdering(sequenceNumber.toString()).     }     return putRecordRequest. }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
