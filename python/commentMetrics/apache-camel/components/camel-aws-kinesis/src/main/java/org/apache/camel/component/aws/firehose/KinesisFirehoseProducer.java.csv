commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public KinesisFirehoseEndpoint getEndpoint() {     return (KinesisFirehoseEndpoint) super.getEndpoint(). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     PutRecordRequest request = createRequest(exchange).     log.trace("Sending request [{}] from exchange [{}]...", request, exchange).     PutRecordResult putRecordResult = getEndpoint().getClient().putRecord(request).     log.trace("Received result [{}]", putRecordResult).     Message message = getMessageForResponse(exchange).     message.setHeader(KinesisFirehoseConstants.RECORD_ID, putRecordResult.getRecordId()). }
false;private;1;10;;private PutRecordRequest createRequest(Exchange exchange) {     ByteBuffer body = exchange.getIn().getBody(ByteBuffer.class).     Record record = new Record().     record.setData(body).     PutRecordRequest putRecordRequest = new PutRecordRequest().     putRecordRequest.setDeliveryStreamName(getEndpoint().getConfiguration().getStreamName()).     putRecordRequest.setRecord(record).     return putRecordRequest. }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
