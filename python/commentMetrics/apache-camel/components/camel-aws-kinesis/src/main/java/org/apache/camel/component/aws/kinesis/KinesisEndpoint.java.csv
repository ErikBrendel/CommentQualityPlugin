commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected void doStart() throws Exception {     super.doStart().     kinesisClient = configuration.getAmazonKinesisClient() != null ? configuration.getAmazonKinesisClient() : createKinesisClient().     if ((configuration.getIteratorType().equals(ShardIteratorType.AFTER_SEQUENCE_NUMBER) || configuration.getIteratorType().equals(ShardIteratorType.AT_SEQUENCE_NUMBER)) && configuration.getSequenceNumber().isEmpty()) {         throw new IllegalArgumentException("Sequence Number must be specified with iterator Types AFTER_SEQUENCE_NUMBER or AT_SEQUENCE_NUMBER").     } }
false;public;0;9;;@Override public void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getAmazonKinesisClient())) {         if (kinesisClient != null) {             kinesisClient.shutdown().         }     }     super.doStop(). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new KinesisProducer(this). }
false;public;1;7;;@Override public Consumer createConsumer(Processor processor) throws Exception {     final KinesisConsumer consumer = new KinesisConsumer(this, processor).     consumer.setSchedulerProperties(getSchedulerProperties()).     configureConsumer(consumer).     return consumer. }
false;public;1;8;;public Exchange createExchange(Record record) {     Exchange exchange = super.createExchange().     exchange.getIn().setBody(record).     exchange.getIn().setHeader(KinesisConstants.APPROX_ARRIVAL_TIME, record.getApproximateArrivalTimestamp()).     exchange.getIn().setHeader(KinesisConstants.PARTITION_KEY, record.getPartitionKey()).     exchange.getIn().setHeader(KinesisConstants.SEQUENCE_NUMBER, record.getSequenceNumber()).     return exchange. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public AmazonKinesis getClient() {     return kinesisClient. }
false;public;0;3;;public KinesisConfiguration getConfiguration() {     return configuration. }
false;;0;32;;AmazonKinesis createKinesisClient() {     AmazonKinesis client = null.     ClientConfiguration clientConfiguration = null.     AmazonKinesisClientBuilder clientBuilder = null.     boolean isClientConfigFound = false.     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         isClientConfigFound = true.     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (isClientConfigFound) {             clientBuilder = AmazonKinesisClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else {             clientBuilder = AmazonKinesisClientBuilder.standard().withCredentials(credentialsProvider).         }     } else {         if (isClientConfigFound) {             clientBuilder = AmazonKinesisClientBuilder.standard().         } else {             clientBuilder = AmazonKinesisClientBuilder.standard().withClientConfiguration(clientConfiguration).         }     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         clientBuilder = clientBuilder.withRegion(configuration.getRegion()).     }     client = clientBuilder.build().     return client. }
