commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void setup() throws Exception {     when(kinesisFirehoseEndpoint.getClient()).thenReturn(kinesisFirehoseClient).     when(kinesisFirehoseEndpoint.getConfiguration()).thenReturn(kinesisFirehoseConfiguration).     when(kinesisFirehoseEndpoint.getConfiguration().getStreamName()).thenReturn(STREAM_NAME).     when(exchange.getOut()).thenReturn(outMessage).     when(exchange.getIn()).thenReturn(inMessage).     when(exchange.getPattern()).thenReturn(ExchangePattern.InOut).     when(inMessage.getBody(ByteBuffer.class)).thenReturn(SAMPLE_BUFFER).     when(putRecordResult.getRecordId()).thenReturn(RECORD_ID).     when(kinesisFirehoseClient.putRecord(any(PutRecordRequest.class))).thenReturn(putRecordResult).     kinesisFirehoseProducer = new KinesisFirehoseProducer(kinesisFirehoseEndpoint). }
false;public;0;5;;@Test public void shouldPutRecordIntoStreamWhenProcessingExchange() throws Exception {     kinesisFirehoseProducer.process(exchange).     verify(outMessage).setHeader(KinesisFirehoseConstants.RECORD_ID, RECORD_ID). }
