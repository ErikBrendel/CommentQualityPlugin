commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Before public void setup() throws Exception {     KinesisConfiguration configuration = new KinesisConfiguration().     configuration.setAmazonKinesisClient(kinesisClient).     configuration.setIteratorType(ShardIteratorType.LATEST).     configuration.setShardClosed(KinesisShardClosedStrategyEnum.fail).     configuration.setStreamName("streamName").     KinesisEndpoint endpoint = new KinesisEndpoint(null, configuration, component).     endpoint.start().     undertest = new KinesisConsumer(endpoint, processor).     SequenceNumberRange range = new SequenceNumberRange().withEndingSequenceNumber("20").     Shard shard = new Shard().withShardId("shardId").withSequenceNumberRange(range).     ArrayList<Shard> shardList = new ArrayList<>().     shardList.add(shard).     when(kinesisClient.getRecords(any(GetRecordsRequest.class))).thenReturn(new GetRecordsResult().withNextShardIterator("nextShardIterator")).     when(kinesisClient.describeStream(any(DescribeStreamRequest.class))).thenReturn(new DescribeStreamResult().withStreamDescription(new StreamDescription().withShards(shardList))).     when(kinesisClient.getShardIterator(any(GetShardIteratorRequest.class))).thenReturn(new GetShardIteratorResult().withShardIterator("shardIterator")). }
false;public;0;15;;@Test(expected = ReachedClosedStatusException.class) public void itObtainsAShardIteratorOnFirstPoll() throws Exception {     undertest.poll().     final ArgumentCaptor<DescribeStreamRequest> describeStreamReqCap = ArgumentCaptor.forClass(DescribeStreamRequest.class).     final ArgumentCaptor<GetShardIteratorRequest> getShardIteratorReqCap = ArgumentCaptor.forClass(GetShardIteratorRequest.class).     verify(kinesisClient).describeStream(describeStreamReqCap.capture()).     assertThat(describeStreamReqCap.getValue().getStreamName(), is("streamName")).     verify(kinesisClient).getShardIterator(getShardIteratorReqCap.capture()).     assertThat(getShardIteratorReqCap.getValue().getStreamName(), is("streamName")).     assertThat(getShardIteratorReqCap.getValue().getShardId(), is("shardId")).     assertThat(getShardIteratorReqCap.getValue().getShardIteratorType(), is("LATEST")). }
