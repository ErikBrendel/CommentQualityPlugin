commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CordaEndpoint getEndpoint() {     return (CordaEndpoint) super.getEndpoint(). }
false;;1;4;;@InvokeOnHeader(CordaConstants.CURRENT_NODE_TIME) void currentNodeTime(Message message) throws Exception {     message.setBody(cordaRPCOps.currentNodeTime()). }
false;;1;4;;@InvokeOnHeader(CordaConstants.GET_PROTOCOL_VERSION) void getProtocolVersion(Message message) throws Exception {     message.setBody(cordaRPCOps.getProtocolVersion()). }
false;;1;4;;@InvokeOnHeader(CordaConstants.NETWORK_MAP_SNAPSHOT) void networkMapSnapshot(Message message) throws Exception {     message.setBody(cordaRPCOps.networkMapSnapshot()). }
false;;1;4;;@InvokeOnHeader(CordaConstants.STATE_MACHINE_SNAPSHOT) void stateMachinesSnapshot(Message message) throws Exception {     message.setBody(cordaRPCOps.stateMachinesSnapshot()). }
false;;1;4;;@InvokeOnHeader(CordaConstants.STATE_MACHINE_RECORDED_TRANSACTION_MAPPING_SNAPSHOT) void stateMachineRecordedTransactionMappingSnapshot(Message message) throws Exception {     message.setBody(cordaRPCOps.stateMachineRecordedTransactionMappingSnapshot()). }
false;;1;4;;@InvokeOnHeader(CordaConstants.REGISTERED_FLOWS) void registeredFlows(Message message) throws Exception {     message.setBody(cordaRPCOps.registeredFlows()). }
false;;1;4;;@InvokeOnHeader(CordaConstants.CLEAR_NETWORK_MAP_CACHE) void clearNetworkMapCache(Message message) throws Exception {     cordaRPCOps.clearNetworkMapCache(). }
false;;1;4;;@InvokeOnHeader(CordaConstants.IS_FLOWS_DRAINING_MODE_ENABLED) void isFlowsDrainingModeEnabled(Message message) throws Exception {     message.setBody(cordaRPCOps.isFlowsDrainingModeEnabled()). }
false;;1;5;;@InvokeOnHeader(CordaConstants.SET_FLOWS_DRAINING_MODE_ENABLED) void setFlowsDrainingModeEnabled(Message message) throws Exception {     Boolean mode = message.getHeader(DRAINING_MODE, Boolean.class).     cordaRPCOps.setFlowsDrainingModeEnabled(mode). }
false;;1;4;;@InvokeOnHeader(CordaConstants.NOTARY_IDENTITIES) void notaryIdentities(Message message) throws Exception {     message.setBody(cordaRPCOps.notaryIdentities()). }
false;;1;4;;@InvokeOnHeader(CordaConstants.NODE_INFO) void nodeInfo(Message message) throws Exception {     message.setBody(cordaRPCOps.nodeInfo()). }
false;;1;6;;@InvokeOnHeader(CordaConstants.ADD_VAULT_TRANSACTION_NOTE) void addVaultTransactionNote(Message message) throws Exception {     SecureHash secureHash = message.getHeader(SECURE_HASH, SecureHash.class).     String note = message.getBody(String.class).     cordaRPCOps.addVaultTransactionNote(secureHash, note). }
false;;1;5;;@InvokeOnHeader(CordaConstants.GET_VAULT_TRANSACTION_NOTES) void getVaultTransactionNotes(Message message) throws Exception {     SecureHash secureHash = message.getHeader(SECURE_HASH, SecureHash.class).     message.setBody(cordaRPCOps.getVaultTransactionNotes(secureHash)). }
false;;1;6;;@InvokeOnHeader(CordaConstants.UPLOAD_ATTACHMENT) void uploadAttachment(Message message) throws Exception {     InputStream inputStream = message.getBody(InputStream.class).     SecureHash secureHash = cordaRPCOps.uploadAttachment(inputStream).     message.setHeader(SECURE_HASH, secureHash). }
false;;1;5;;@InvokeOnHeader(CordaConstants.ATTACHMENT_EXISTS) void attachmentExists(Message message) throws Exception {     SecureHash secureHash = message.getHeader(SECURE_HASH, SecureHash.class).     message.setBody(cordaRPCOps.attachmentExists(secureHash)). }
false;;1;5;;@InvokeOnHeader(CordaConstants.OPEN_ATTACHMENT) void openAttachment(Message message) throws Exception {     SecureHash secureHash = message.getHeader(SECURE_HASH, SecureHash.class).     message.setBody(cordaRPCOps.openAttachment(secureHash)). }
false;;1;6;;@InvokeOnHeader(CordaConstants.QUERY_ATTACHMENTS) void queryAttachments(Message message) throws Exception {     AttachmentQueryCriteria queryCriteria = message.getHeader(ATTACHMENT_QUERY_CRITERIA, AttachmentQueryCriteria.class).     AttachmentSort attachmentSort = message.getHeader(SORT, AttachmentSort.class).     message.setBody(cordaRPCOps.queryAttachments(queryCriteria, attachmentSort)). }
false;;1;5;;@InvokeOnHeader(CordaConstants.NODE_INFO_FROM_PARTY) void nodeInfoFromParty(Message message) throws Exception {     AbstractParty party = message.getBody(AbstractParty.class).     message.setBody(cordaRPCOps.nodeInfoFromParty(party)). }
false;;1;5;;@InvokeOnHeader(CordaConstants.NOTARY_PARTY_FROM_X500_NAME) void notaryPartyFromX500Name(Message message) throws Exception {     CordaX500Name x500Name = message.getBody(CordaX500Name.class).     message.setBody(cordaRPCOps.notaryPartyFromX500Name(x500Name)). }
false;;1;6;;@InvokeOnHeader(CordaConstants.PARTIES_FROM_NAME) void partiesFromName(Message message) throws Exception {     String query = message.getBody(String.class).     Boolean exactMatch = message.getHeader(EXACT_MATCH, Boolean.class).     message.setBody(cordaRPCOps.partiesFromName(query, exactMatch)). }
false;;1;5;;@InvokeOnHeader(CordaConstants.PARTIES_FROM_KEY) void partyFromKey(Message message) throws Exception {     PublicKey key = message.getBody(PublicKey.class).     message.setBody(cordaRPCOps.partyFromKey(key)). }
false;;1;5;;@InvokeOnHeader(CordaConstants.WELL_KNOWN_PARTY_FROM_X500_NAME) void wellKnownPartyFromX500Name(Message message) throws Exception {     CordaX500Name x500Name = message.getBody(CordaX500Name.class).     message.setBody(cordaRPCOps.wellKnownPartyFromX500Name(x500Name)). }
false;;1;5;;@InvokeOnHeader(CordaConstants.WELL_KNOWN_PARTY_FROM_ANONYMOUS) void wellKnownPartyFromAnonymous(Message message) throws Exception {     AbstractParty party = message.getBody(AbstractParty.class).     message.setBody(cordaRPCOps.wellKnownPartyFromAnonymous(party)). }
false;;1;6;;@InvokeOnHeader(CordaConstants.START_FLOW_DYNAMIC) void startFlowDynamic(Message message) throws Exception {     Object[] args = message.getHeader(ARGUMENTS, Object[].class).     Class<FlowLogic<?>> aClass = message.getBody(Class.class).     message.setBody(cordaRPCOps.startFlowDynamic(aClass, args).getReturnValue().get()). }
false;;1;5;;@InvokeOnHeader(CordaConstants.VAULT_QUERY) void vaultQuery(Message message) throws Exception {     Class<ContractState> contractStateClass = (Class<ContractState>) message.getBody(Class.class).     message.setBody(cordaRPCOps.vaultQuery(contractStateClass)). }
false;;1;8;;@InvokeOnHeader(CordaConstants.VAULT_QUERY_BY) void vaultQueryBy(Message message) throws Exception {     Class<ContractState> contractStateClass = (Class<ContractState>) message.getBody(Class.class).     QueryCriteria criteria = message.getHeader(QUERY_CRITERIA, QueryCriteria.class).     PageSpecification pageSpec = message.getHeader(PAGE_SPECIFICATION, PageSpecification.class).     Sort sorting = message.getHeader(SORT, Sort.class).     message.setBody(cordaRPCOps.vaultQueryBy(criteria, pageSpec, sorting, contractStateClass)). }
false;;1;6;;@InvokeOnHeader(CordaConstants.VAULT_QUERY_BY_CRITERIA) void vaultQueryByCriteria(Message message) throws Exception {     Class<ContractState> contractStateClass = (Class<ContractState>) message.getBody(Class.class).     QueryCriteria criteria = message.getHeader(QUERY_CRITERIA, QueryCriteria.class).     message.setBody(cordaRPCOps.vaultQueryByCriteria(criteria, contractStateClass)). }
false;;1;7;;@InvokeOnHeader(CordaConstants.VAULT_QUERY_BY_WITH_PAGING_SPEC) void vaultQueryByWithPagingSpec(Message message) throws Exception {     Class<ContractState> contractStateClass = (Class<ContractState>) message.getBody(Class.class).     QueryCriteria criteria = message.getHeader(QUERY_CRITERIA, QueryCriteria.class).     PageSpecification pageSpec = message.getHeader(PAGE_SPECIFICATION, PageSpecification.class).     message.setBody(cordaRPCOps.vaultQueryByWithPagingSpec(contractStateClass, criteria, pageSpec)). }
false;;1;7;;@InvokeOnHeader(CordaConstants.VAULT_QUERY_BY_WITH_SORTING) void vaultQueryByWithSorting(Message message) throws Exception {     Class<ContractState> contractStateClass = (Class<ContractState>) message.getBody(Class.class).     QueryCriteria criteria = message.getHeader(QUERY_CRITERIA, QueryCriteria.class).     Sort sorting = message.getHeader(SORT, Sort.class).     message.setBody(cordaRPCOps.vaultQueryByWithSorting(contractStateClass, criteria, sorting)). }
