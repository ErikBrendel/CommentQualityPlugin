commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CordaEndpoint getEndpoint() {     return (CordaEndpoint) super.getEndpoint(). }
false;protected;0;122;;@Override protected void doStart() throws Exception {     super.doStart().     Exchange exchange = this.getEndpoint().createExchange().     Class<ContractState> contractStateClass = configuration.getContractStateClass().     QueryCriteria criteria = configuration.getQueryCriteria().     PageSpecification pageSpec = configuration.getPageSpecification().     Sort sorting = configuration.getSort().     DataFeed<Vault.Page<ContractState>, Vault.Update<ContractState>> pageUpdateDataFeed = null.     switch(configuration.getOperation()) {         case VAULT_TRACK:             LOG.debug("subscribing for operation: " + VAULT_TRACK).             pageUpdateDataFeed = cordaRPCOps.vaultTrack(contractStateClass).             processSnapshot(exchange, pageUpdateDataFeed.getSnapshot()).             subscription = pageUpdateDataFeed.getUpdates().subscribe(x -> processContractStateUpdate(x), t -> processError(t, CordaConstants.VAULT_TRACK), () -> processDone(CordaConstants.VAULT_TRACK)).             break.         case VAULT_TRACK_BY:             LOG.debug("subscribing for operation: " + VAULT_TRACK_BY).             pageUpdateDataFeed = cordaRPCOps.vaultTrackBy(criteria, pageSpec, sorting, contractStateClass).             processSnapshot(exchange, pageUpdateDataFeed.getSnapshot()).             subscription = pageUpdateDataFeed.getUpdates().subscribe(x -> processContractStateUpdate(x), t -> processError(t, CordaConstants.VAULT_TRACK_BY), () -> processDone(CordaConstants.VAULT_TRACK_BY)).             break.         case VAULT_TRACK_BY_CRITERIA:             LOG.debug("subscribing for operation: " + VAULT_TRACK_BY_CRITERIA).             pageUpdateDataFeed = cordaRPCOps.vaultTrackByCriteria(contractStateClass, criteria).             processSnapshot(exchange, pageUpdateDataFeed.getSnapshot()).             subscription = pageUpdateDataFeed.getUpdates().subscribe(x -> processContractStateUpdate(x), t -> processError(t, CordaConstants.VAULT_TRACK_BY_CRITERIA), () -> processDone(CordaConstants.VAULT_TRACK_BY_CRITERIA)).             break.         case VAULT_TRACK_BY_WITH_PAGING_SPEC:             LOG.debug("subscribing for operation: " + VAULT_TRACK_BY_WITH_PAGING_SPEC).             pageUpdateDataFeed = cordaRPCOps.vaultTrackByWithPagingSpec(contractStateClass, criteria, pageSpec).             processSnapshot(exchange, pageUpdateDataFeed.getSnapshot()).             subscription = pageUpdateDataFeed.getUpdates().subscribe(x -> processContractStateUpdate(x), t -> processError(t, CordaConstants.VAULT_TRACK_BY_WITH_PAGING_SPEC), () -> processDone(CordaConstants.VAULT_TRACK_BY_WITH_PAGING_SPEC)).             break.         case VAULT_TRACK_BY_WITH_SORTING:             LOG.debug("subscribing for operation: " + VAULT_TRACK_BY_WITH_SORTING).             pageUpdateDataFeed = cordaRPCOps.vaultTrackByWithSorting(contractStateClass, criteria, sorting).             processSnapshot(exchange, pageUpdateDataFeed.getSnapshot()).             subscription = pageUpdateDataFeed.getUpdates().subscribe(x -> processContractStateUpdate(x), t -> processError(t, CordaConstants.VAULT_TRACK_BY_WITH_SORTING), () -> processDone(CordaConstants.VAULT_TRACK_BY_WITH_SORTING)).             break.         case STATE_MACHINE_FEED:             LOG.debug("subscribing for operation: " + STATE_MACHINE_FEED).             DataFeed<List<StateMachineInfo>, StateMachineUpdate> stateFeed = cordaRPCOps.stateMachinesFeed().             processSnapshot(exchange, stateFeed.getSnapshot()).             subscription = stateFeed.getUpdates().subscribe(x -> processStateMachineUpdate(x), t -> processError(t, CordaConstants.STATE_MACHINE_FEED), () -> processDone(CordaConstants.STATE_MACHINE_FEED)).             break.         case NETWORK_MAP_FEED:             LOG.debug("subscribing for operation: " + NETWORK_MAP_FEED).             DataFeed<List<NodeInfo>, NetworkMapCache.MapChange> networkMapFeed = cordaRPCOps.networkMapFeed().             processSnapshot(exchange, networkMapFeed.getSnapshot()).             subscription = networkMapFeed.getUpdates().subscribe(x -> proceedNetworkMapFeed(x), t -> processError(t, CordaConstants.NETWORK_MAP_FEED), () -> processDone(CordaConstants.NETWORK_MAP_FEED)).             break.         case STATE_MACHINE_RECORDED_TRANSACTION_MAPPING_FEED:             LOG.debug("subscribing for operation: " + STATE_MACHINE_RECORDED_TRANSACTION_MAPPING_FEED).             DataFeed<List<StateMachineTransactionMapping>, StateMachineTransactionMapping> transactionFeed = cordaRPCOps.stateMachineRecordedTransactionMappingFeed().             processSnapshot(exchange, transactionFeed.getSnapshot()).             subscription = transactionFeed.getUpdates().subscribe(x -> processTransactionMappingFeed(x), t -> processError(t, CordaConstants.STATE_MACHINE_RECORDED_TRANSACTION_MAPPING_FEED), () -> processDone(CordaConstants.STATE_MACHINE_RECORDED_TRANSACTION_MAPPING_FEED)).             break.         case START_TRACKED_FLOW_DYNAMIC:             LOG.debug("subscribing for operation: " + START_TRACKED_FLOW_DYNAMIC).             FlowProgressHandle<Object> objectFlowProgressHandle = cordaRPCOps.startTrackedFlowDynamic(configuration.getFlowLociClass(), configuration.getArguments()).             Object result = objectFlowProgressHandle.getReturnValue().get().             Observable<String> progress = objectFlowProgressHandle.getProgress().             processSnapshot(exchange, result).             subscription = progress.subscribe(x -> processFlowProcess(x), t -> processError(t, CordaConstants.START_TRACKED_FLOW_DYNAMIC), () -> processDone(CordaConstants.START_TRACKED_FLOW_DYNAMIC)).             break.         default:             throw new IllegalArgumentException("Unsupported operation " + configuration.getOperation()).     }     LOG.info("Subscribed: {}", this.configuration). }
false;private;2;10;;private void processSnapshot(Exchange exchange, Object page) {     if (configuration.isProcessSnapshot()) {         try {             exchange.getIn().setBody(page).             getProcessor().process(exchange).         } catch (Exception e) {             LOG.error("Error processing snapshot", e).         }     } }
false;private;1;6;;private void processFlowProcess(String x) {     LOG.debug("processFlowProcess {}", x).     Exchange exchange = this.getEndpoint().createExchange().     exchange.getIn().setBody(x).     processEvent(exchange). }
false;private;1;6;;private void processTransactionMappingFeed(StateMachineTransactionMapping x) {     LOG.debug("processTransactionMappingFeed {}", x).     Exchange exchange = this.getEndpoint().createExchange().     exchange.getIn().setBody(x).     processEvent(exchange). }
false;private;1;6;;private void proceedNetworkMapFeed(NetworkMapCache.MapChange x) {     LOG.debug("proceedNetworkMapFeed {}", x).     Exchange exchange = this.getEndpoint().createExchange().     exchange.getIn().setBody(x).     processEvent(exchange). }
false;private;1;6;;private void processStateMachineUpdate(StateMachineUpdate x) {     LOG.debug("processStateMachineUpdate {}", x).     Exchange exchange = this.getEndpoint().createExchange().     exchange.getIn().setBody(x).     processEvent(exchange). }
false;private;1;6;;private void processContractStateUpdate(Vault.Update<ContractState> x) {     LOG.debug("processContractStateUpdate {}", x).     Exchange exchange = this.getEndpoint().createExchange().     exchange.getIn().setBody(x).     processEvent(exchange). }
false;private;2;6;;private void processError(Throwable throwable, String operation) {     LOG.debug("processError for operation: " + operation + " " + throwable).     Exchange exchange = this.getEndpoint().createExchange().     exchange.setException(throwable).     processEvent(exchange). }
false;public;1;8;;public void processEvent(Exchange exchange) {     LOG.debug("processEvent {}", exchange).     try {         getProcessor().process(exchange).     } catch (Exception e) {         LOG.error("Error processing event ", e).     } }
false;private;1;3;;private void processDone(String operation) {     LOG.debug("processDone for operation: {}", operation). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (subscription != null) {         subscription.unsubscribe().     }     super.doStop(). }
