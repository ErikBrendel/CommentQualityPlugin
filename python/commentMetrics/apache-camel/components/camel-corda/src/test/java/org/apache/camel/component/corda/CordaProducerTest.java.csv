commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseAdviceWith() {     return false. }
false;public;0;9;;@Test public void currentNodeTimeTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, CURRENT_NODE_TIME).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void getProtocolVersionTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, GET_PROTOCOL_VERSION).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void networkMapSnapshotTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, NETWORK_MAP_SNAPSHOT).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void stateMachinesSnapshotTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, STATE_MACHINE_SNAPSHOT).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void stateMachineRecordedTransactionMappingSnapshotTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, STATE_MACHINE_RECORDED_TRANSACTION_MAPPING_SNAPSHOT).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void registeredFlowsTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, REGISTERED_FLOWS).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void clearNetworkMapCacheTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, CLEAR_NETWORK_MAP_CACHE).     template.send(exchange).     Object body = exchange.getException().     assertNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void isFlowsDrainingModeEnabledTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, IS_FLOWS_DRAINING_MODE_ENABLED).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;8;;@Test public void setFlowsDrainingModeEnabledTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, SET_FLOWS_DRAINING_MODE_ENABLED).     exchange.getIn().setHeader(DRAINING_MODE, false).     template.send(exchange).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void notaryIdentitiesTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, NOTARY_IDENTITIES).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void nodeInfoTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, NODE_INFO).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;9;;@Test public void addVaultTransactionNoteTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader("Some note", OPERATION, ADD_VAULT_TRANSACTION_NOTE).     exchange.getIn().setHeader(SECURE_HASH, TEST_SHA_256).     template.send(exchange).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;11;;@Test public void getVaultTransactionNotesTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, GET_VAULT_TRANSACTION_NOTES).     exchange.getIn().setHeader(SECURE_HASH, TEST_SHA_256).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;11;;@Test public void uploadAttachmentTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, UPLOAD_ATTACHMENT).     exchange.getIn().setBody(zipIt("HELLO" + System.nanoTime(), "test1.txt")).     template.send(exchange).     Object body = exchange.getIn().getHeader(SECURE_HASH).     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;12;;@Test public void attachmentExistsTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, ATTACHMENT_EXISTS).     exchange.getIn().setHeader(SECURE_HASH, TEST_SHA_256).     template.send(exchange).     Boolean body = exchange.getIn().getBody(Boolean.class).     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;18;;@Test public void openAttachmentTest() throws Exception {     // Setup node with attachment     Exchange uploadExchange = createExchangeWithBodyAndHeader(null, OPERATION, UPLOAD_ATTACHMENT).     uploadExchange.getIn().setBody(zipIt("HELLO" + System.nanoTime(), "test2.txt")).     template.send(uploadExchange).     Object hash = uploadExchange.getIn().getHeader(SECURE_HASH).     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, OPEN_ATTACHMENT).     exchange.getIn().setHeader(SECURE_HASH, hash).     template.send(exchange).     InputStream body = exchange.getIn().getBody(InputStream.class).     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;17;;@Test public void queryAttachmentsTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, QUERY_ATTACHMENTS).     AttachmentQueryCriteria.AttachmentsQueryCriteria queryCriteria = new AttachmentQueryCriteria.AttachmentsQueryCriteria(new ColumnPredicate.EqualityComparison(EqualityComparisonOperator.EQUAL, "Daredevil")).     AttachmentSort attachmentSort = null.     exchange.getIn().setHeader(ATTACHMENT_QUERY_CRITERIA, queryCriteria).     exchange.getIn().setHeader(SORT, attachmentSort).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;13;;@Test public void nodeInfoFromPartyTest() throws Exception {     // Expects IntegrationWhiteList is deployed on the node     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, NODE_INFO_FROM_PARTY).     PublicKey pub = generatePublicKey().     CordaX500Name cordaX500Name1 = new CordaX500Name("PartyA", "London", "GB").     Party party = new Party(cordaX500Name1, pub).     exchange.getIn().setBody(party).     template.send(exchange).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;12;;@Test public void notaryPartyFromX500NameTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, NOTARY_PARTY_FROM_X500_NAME).     CordaX500Name cordaX500Name = new CordaX500Name("Notary", "London", "GB").     exchange.getIn().setBody(cordaX500Name).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;11;;@Test public void partiesFromNameTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader("A", OPERATION, PARTIES_FROM_NAME).     exchange.getIn().setHeader(EXACT_MATCH, false).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;11;;@Test public void partyFromKeyTest() throws Exception {     // Expects IntegrationWhiteList is deployed on the node     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, PARTIES_FROM_KEY).     PublicKey pub = generatePublicKey().     exchange.getIn().setBody(pub).     template.send(exchange).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;12;;@Test public void wellKnownPartyFromX500NameTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, WELL_KNOWN_PARTY_FROM_X500_NAME).     CordaX500Name cordaX500Name1 = new CordaX500Name("PartyA", "London", "GB").     exchange.getIn().setBody(cordaX500Name1).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;13;;@Test public void wellKnownPartyFromAnonymousTest() throws Exception {     // Expects IntegrationWhiteList is deployed on the node     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, WELL_KNOWN_PARTY_FROM_ANONYMOUS).     PublicKey pub = generatePublicKey().     AbstractParty party = new AnonymousParty(pub).     exchange.getIn().setBody(party).     template.send(exchange).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;16;;@Test public void startFlowDynamicTest() throws Exception {     // Expects CamelFlow is deployed on the node     Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, START_FLOW_DYNAMIC).     String[] args = new String[] { "Hello" }.     Class<FlowLogic<String>> aClass = (Class<FlowLogic<String>>) Class.forName("org.apache.camel.component.corda.CamelFlow").     exchange.getIn().setBody(aClass).     exchange.getIn().setHeader(ARGUMENTS, args).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     assertEquals("Hello world!", body.toString()).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;10;;@Test public void vaultQueryTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(OwnableState.class, OPERATION, VAULT_QUERY).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;17;;@Test public void vaultQueryByTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(OwnableState.class, OPERATION, VAULT_QUERY_BY).     QueryCriteria.VaultQueryCriteria criteria = new QueryCriteria.VaultQueryCriteria(Vault.StateStatus.CONSUMED).     PageSpecification pageSpec = new PageSpecification(DEFAULT_PAGE_NUM, MAX_PAGE_SIZE).     Sort.SortColumn sortByUid = new Sort.SortColumn(new SortAttribute.Standard(Sort.LinearStateAttribute.UUID), Sort.Direction.DESC).     Sort sorting = new Sort(ImmutableSet.of(sortByUid)).     exchange.getIn().setHeader(QUERY_CRITERIA, criteria).     exchange.getIn().setHeader(PAGE_SPECIFICATION, pageSpec).     exchange.getIn().setHeader(SORT, sorting).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;12;;@Test public void vaultQueryByCriteriaTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(OwnableState.class, OPERATION, VAULT_QUERY_BY_CRITERIA).     QueryCriteria.VaultQueryCriteria criteria = new QueryCriteria.VaultQueryCriteria(Vault.StateStatus.CONSUMED).     exchange.getIn().setHeader(QUERY_CRITERIA, criteria).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;14;;@Test public void vaultQueryByWithPagingSpecTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(OwnableState.class, OPERATION, VAULT_QUERY_BY_WITH_PAGING_SPEC).     QueryCriteria.VaultQueryCriteria criteria = new QueryCriteria.VaultQueryCriteria(Vault.StateStatus.CONSUMED).     PageSpecification pageSpec = new PageSpecification(DEFAULT_PAGE_NUM, MAX_PAGE_SIZE).     exchange.getIn().setHeader(QUERY_CRITERIA, criteria).     exchange.getIn().setHeader(PAGE_SPECIFICATION, pageSpec).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;public;0;15;;@Test public void vaultQueryByWithSortingTest() throws Exception {     Exchange exchange = createExchangeWithBodyAndHeader(OwnableState.class, OPERATION, VAULT_QUERY_BY_WITH_SORTING).     QueryCriteria.VaultQueryCriteria criteria = new QueryCriteria.VaultQueryCriteria(Vault.StateStatus.CONSUMED).     Sort.SortColumn sortByUid = new Sort.SortColumn(new SortAttribute.Standard(Sort.LinearStateAttribute.UUID), Sort.Direction.DESC).     Sort sorting = new Sort(ImmutableSet.of(sortByUid)).     exchange.getIn().setHeader(QUERY_CRITERIA, criteria).     exchange.getIn().setHeader(SORT, sorting).     template.send(exchange).     Object body = exchange.getIn().getBody().     assertNotNull(body).     Object exception = exchange.getException().     assertNull(exception). }
false;private;2;14;;private ByteArrayInputStream zipIt(String in, String name) {     ByteArrayOutputStream baos = new ByteArrayOutputStream().     try {         ZipOutputStream zos = new ZipOutputStream(baos).         ZipEntry entry = new ZipEntry(name).         zos.putNextEntry(entry).         zos.write(in.getBytes()).         zos.closeEntry().     } catch (IOException ioe) {         ioe.printStackTrace().     }     return new ByteArrayInputStream(baos.toByteArray()). }
false;private;0;6;;private PublicKey generatePublicKey() throws NoSuchAlgorithmException {     KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA").     kpg.initialize(2048).     KeyPair kp = kpg.generateKeyPair().     return kp.getPublic(). }
false;public;0;4;;public void configure() {     from("direct:start").to(getUrl()). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to(getUrl()).         }     }. }
