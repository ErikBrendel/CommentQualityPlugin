commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     defaultTimeZone = java.util.TimeZone.getDefault().     java.util.TimeZone.setDefault(java.util.TimeZone.getTimeZone("America/New_York")).     super.setUp(). }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     java.util.TimeZone.setDefault(defaultTimeZone).     super.tearDown(). }
false;public;0;11;;@Test public void testUnmarshal() throws Exception {     InputStream stream = IOConverter.toInputStream(new File("src/test/resources/data.ics")).     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.expectedBodiesReceived(createTestCalendar()).     template.sendBody("direct:unmarshal", stream).     endpoint.assertIsSatisfied(). }
false;public;0;11;;@Test public void testMarshal() throws Exception {     Calendar testCalendar = createTestCalendar().     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.expectedBodiesReceived(testCalendar.toString()).     template.sendBody("direct:marshal", testCalendar).     endpoint.assertIsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:unmarshal").unmarshal("ical").to("mock:result").     from("direct:marshal").marshal("ical").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:unmarshal").unmarshal("ical").to("mock:result").             from("direct:marshal").marshal("ical").to("mock:result").         }     }. }
true;protected;0;61;/**  * Creates test calendar instance.  *  * @return ICal calendar object.  */ ;/**  * Creates test calendar instance.  *  * @return ICal calendar object.  */ protected Calendar createTestCalendar() throws ParseException {     // Create a TimeZone     TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry().     TimeZone timezone = registry.getTimeZone("America/New_York").     VTimeZone tz = timezone.getVTimeZone().     // Start Date is on: April 1, 2013, 9:00 am     java.util.Calendar startDate = new GregorianCalendar().     startDate.setTimeZone(timezone).     startDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL).     startDate.set(java.util.Calendar.DAY_OF_MONTH, 1).     startDate.set(java.util.Calendar.YEAR, 2013).     startDate.set(java.util.Calendar.HOUR_OF_DAY, 17).     startDate.set(java.util.Calendar.MINUTE, 0).     startDate.set(java.util.Calendar.SECOND, 0).     // End Date is on: April 1, 2013, 13:00     java.util.Calendar endDate = new GregorianCalendar().     endDate.setTimeZone(timezone).     endDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL).     endDate.set(java.util.Calendar.DAY_OF_MONTH, 1).     endDate.set(java.util.Calendar.YEAR, 2013).     endDate.set(java.util.Calendar.HOUR_OF_DAY, 21).     endDate.set(java.util.Calendar.MINUTE, 0).     endDate.set(java.util.Calendar.SECOND, 0).     // Create the event     PropertyList propertyList = new PropertyList().     propertyList.add(new DtStamp("20130324T180000Z")).     propertyList.add(new DtStart(new DateTime(startDate.getTime()))).     propertyList.add(new DtEnd(new DateTime(endDate.getTime()))).     propertyList.add(new Summary("Progress Meeting")).     VEvent meeting = new VEvent(propertyList).     // add timezone info..     meeting.getProperties().add(tz.getTimeZoneId()).     // generate unique identifier..     meeting.getProperties().add(new Uid("00000000")).     // add attendees..     Attendee dev1 = new Attendee(URI.create("mailto:dev1@mycompany.com")).     dev1.getParameters().add(Role.REQ_PARTICIPANT).     dev1.getParameters().add(new Cn("Developer 1")).     meeting.getProperties().add(dev1).     Attendee dev2 = new Attendee(URI.create("mailto:dev2@mycompany.com")).     dev2.getParameters().add(Role.OPT_PARTICIPANT).     dev2.getParameters().add(new Cn("Developer 2")).     meeting.getProperties().add(dev2).     // Create a calendar     net.fortuna.ical4j.model.Calendar icsCalendar = new net.fortuna.ical4j.model.Calendar().     icsCalendar.getProperties().add(Version.VERSION_2_0).     icsCalendar.getProperties().add(new ProdId("-//Events Calendar//iCal4j 1.0//EN")).     icsCalendar.getProperties().add(CalScale.GREGORIAN).     // Add the event and print     icsCalendar.getComponents().add(meeting).     return icsCalendar. }
