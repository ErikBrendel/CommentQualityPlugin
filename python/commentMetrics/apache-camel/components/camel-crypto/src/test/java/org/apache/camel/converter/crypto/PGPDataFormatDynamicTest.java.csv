commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;// setup a wrong userid ;// setup a wrong userid @Override protected String getKeyUserId() {     return "wrong". }
true;protected;0;7;// setup a wrong userids ;// setup a wrong userids @Override protected List<String> getKeyUserIds() {     List<String> userids = new ArrayList<>(2).     userids.add("wrong1").     userids.add(getKeyUserId()).     return userids. }
true;protected;0;7;// setup a wrong signature userids ;// setup a wrong signature userids @Override protected List<String> getSignatureKeyUserIds() {     List<String> userids = new ArrayList<>(2).     userids.add("wrong1").     userids.add(getKeyUserId()).     return userids. }
true;protected;0;4;// setup a wrong password ;// setup a wrong password @Override protected String getKeyPassword() {     return "wrong". }
true;protected;0;4;// setup wrong algorithm ;// setup wrong algorithm @Override protected int getAlgorithm() {     return -5. }
true;protected;0;4;// setup wrong hash algorithm ;// setup wrong hash algorithm @Override protected int getHashAlgorithm() {     return -5. }
true;protected;0;4;// setup wrong compression algorithm ;// setup wrong compression algorithm @Override protected int getCompressionAlgorithm() {     return -5. }
true;protected;0;13;// override wrong userid and password with correct userid and password in the headers ;// override wrong userid and password with correct userid and password in the headers protected Map<String, Object> getHeaders() {     Map<String, Object> headers = new HashMap<>().     headers.put(PGPKeyAccessDataFormat.KEY_USERID, "sdude@nowhere.net").     headers.put(PGPKeyAccessDataFormat.KEY_USERIDS, Collections.singletonList("second")).     headers.put(PGPKeyAccessDataFormat.SIGNATURE_KEY_USERID, "sdude@nowhere.net").     headers.put(PGPDataFormat.KEY_PASSWORD, "sdude").     headers.put(PGPDataFormat.SIGNATURE_KEY_PASSWORD, "sdude").     headers.put(PGPKeyAccessDataFormat.ENCRYPTION_ALGORITHM, SymmetricKeyAlgorithmTags.AES_128).     headers.put(PGPKeyAccessDataFormat.SIGNATURE_HASH_ALGORITHM, HashAlgorithmTags.SHA512).     headers.put(PGPKeyAccessDataFormat.COMPRESSION_ALGORITHM, CompressionAlgorithmTags.ZLIB).     headers.put(PGPKeyAccessDataFormat.SIGNATURE_KEY_USERIDS, Collections.singletonList("second")).     return headers. }
