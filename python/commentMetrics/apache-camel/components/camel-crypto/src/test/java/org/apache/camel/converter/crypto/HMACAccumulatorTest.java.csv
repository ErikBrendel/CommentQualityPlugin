commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setupKeyAndExpectedMac() throws Exception {     KeyGenerator generator = KeyGenerator.getInstance("DES").     key = generator.generateKey().     createExpectedMac(). }
false;private;0;5;;private void createExpectedMac() throws NoSuchAlgorithmException, InvalidKeyException {     Mac mac = Mac.getInstance("HmacSHA1").     mac.init(key).     expected = mac.doFinal(payload). }
false;public;0;10;;@Test public void testEncryptionPhaseCalculation() throws Exception {     int buffersize = 256.     byte[] buffer = new byte[buffersize].     System.arraycopy(payload, 0, buffer, 0, payload.length).     HMACAccumulator builder = new HMACAccumulator(key, "HmacSHA1", null, buffersize).     builder.encryptUpdate(buffer, 20).     assertMacs(expected, builder.getCalculatedMac()). }
false;public;0;9;;@Test public void testDecryptionWhereBufferSizeIsGreaterThanDataSize() throws Exception {     int buffersize = 256.     byte[] buffer = initializeBuffer(buffersize).     HMACAccumulator builder = new HMACAccumulator(key, "HmacSHA1", null, buffersize).     builder.decryptUpdate(buffer, 40).     validate(builder). }
false;public;0;14;;@Test public void testDecryptionWhereMacOverlaps() throws Exception {     int buffersize = 32.     byte[] buffer = new byte[buffersize].     int overlap = buffersize - payload.length.     System.arraycopy(payload, 0, buffer, 0, payload.length).     System.arraycopy(expected, 0, buffer, payload.length, overlap).     HMACAccumulator builder = new HMACAccumulator(key, "HmacSHA1", null, buffersize).     builder.decryptUpdate(buffer, buffersize).     System.arraycopy(expected, overlap, buffer, 0, 20 - overlap).     builder.decryptUpdate(buffer, 20 - overlap).     validate(builder). }
false;public;0;12;;@Test public void testDecryptionWhereDataIsMultipleOfBufferLength() throws Exception {     int buffersize = 20.     byte[] buffer = new byte[buffersize].     System.arraycopy(payload, 0, buffer, 0, payload.length).     HMACAccumulator builder = new HMACAccumulator(key, "HmacSHA1", null, buffersize).     builder.decryptUpdate(buffer, buffersize).     System.arraycopy(expected, 0, buffer, 0, expected.length).     builder.decryptUpdate(buffer, 20).     validate(builder). }
false;public;0;12;;@Test public void testDecryptionWhereThereIsNoPayloadData() throws Exception {     int buffersize = 20.     byte[] buffer = new byte[buffersize].     payload = new byte[0].     createExpectedMac().     HMACAccumulator builder = new HMACAccumulator(key, "HmacSHA1", null, buffersize).     System.arraycopy(expected, 0, buffer, 0, expected.length).     builder.decryptUpdate(buffer, 20).     validate(builder). }
false;public;0;15;;@Test public void testDecryptionMultipleReadsSmallerThanBufferSize() throws Exception {     int buffersize = 256.     byte[] buffer = new byte[buffersize].     HMACAccumulator builder = new HMACAccumulator(key, "HmacSHA1", null, buffersize).     int read = payload.length / 2.     System.arraycopy(payload, 0, buffer, 0, read).     builder.decryptUpdate(buffer, read).     System.arraycopy(payload, read, buffer, 0, read).     builder.decryptUpdate(buffer, read).     System.arraycopy(expected, 0, buffer, 0, expected.length).     builder.decryptUpdate(buffer, 20).     validate(builder). }
false;private;1;7;;private void validate(HMACAccumulator builder) {     assertMacs(builder.getCalculatedMac(), builder.getCalculatedMac()).     assertMacs(builder.getAppendedMac(), builder.getAppendedMac()).     assertMacs(expected, builder.getCalculatedMac()).     assertMacs(expected, builder.getAppendedMac()).     builder.validate(). }
false;private;2;3;;private void assertMacs(byte[] expected, byte[] actual) {     assertEquals(HexUtils.byteArrayToHexString(expected), HexUtils.byteArrayToHexString(actual)). }
false;public;0;10;;@Test public void testBufferAdd() throws Exception {     CircularBuffer buffer = new CircularBuffer(payload.length * 2).     buffer.write(payload, 0, payload.length).     assertEquals(payload.length, buffer.availableForWrite()).     buffer.write(payload, 0, payload.length).     assertEquals(0, buffer.availableForWrite()).     buffer.write(payload, 0, payload.length).     assertEquals(0, buffer.availableForWrite()). }
false;public;0;10;;@Test public void testBufferDrain() throws Exception {     CircularBuffer buffer = new CircularBuffer(payload.length * 2).     buffer.write(payload, 0, payload.length).     byte[] data = new byte[payload.length >> 1].     assertEquals(data.length, buffer.read(data, 0, data.length)).     assertEquals(data.length, buffer.read(data, 0, data.length)).     assertEquals(0, buffer.read(data, 0, data.length)). }
false;public;0;7;;@Test public void testBufferCompare() throws Exception {     CircularBuffer buffer = new CircularBuffer(payload.length * 2).     buffer.write(new byte[payload.length >> 1], 0, payload.length >> 1).     buffer.write(payload, 0, payload.length).     buffer.compareTo(payload, 0, payload.length). }
false;private;1;6;;private byte[] initializeBuffer(int buffersize) {     byte[] buffer = new byte[buffersize].     System.arraycopy(payload, 0, buffer, 0, payload.length).     System.arraycopy(expected, 0, buffer, payload.length, expected.length).     return buffer. }
