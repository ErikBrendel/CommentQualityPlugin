commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void configure() throws Exception {     // START SNIPPET: ecdsa-sha1     // we can set the keys explicitly on the endpoint instances.     context.getEndpoint("crypto:sign:ecdsa-sha1?algorithm=SHA1withECDSA", DigitalSignatureEndpoint.class).setPrivateKey(privateKey).     context.getEndpoint("crypto:verify:ecdsa-sha1?algorithm=SHA1withECDSA", DigitalSignatureEndpoint.class).setPublicKey(x509.getPublicKey()).     from("direct:ecdsa-sha1").to("crypto:sign:ecdsa-sha1?algorithm=SHA1withECDSA").to("crypto:verify:ecdsa-sha1?algorithm=SHA1withECDSA").to("mock:result"). // END SNIPPET: ecdsa-sha1 }
false;protected;0;24;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     if (ibmJDK || !canRun) {         return new RouteBuilder[] {}.     }     return new RouteBuilder[] { new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ecdsa-sha1             // we can set the keys explicitly on the endpoint instances.             context.getEndpoint("crypto:sign:ecdsa-sha1?algorithm=SHA1withECDSA", DigitalSignatureEndpoint.class).setPrivateKey(privateKey).             context.getEndpoint("crypto:verify:ecdsa-sha1?algorithm=SHA1withECDSA", DigitalSignatureEndpoint.class).setPublicKey(x509.getPublicKey()).             from("direct:ecdsa-sha1").to("crypto:sign:ecdsa-sha1?algorithm=SHA1withECDSA").to("crypto:verify:ecdsa-sha1?algorithm=SHA1withECDSA").to("mock:result").         // END SNIPPET: ecdsa-sha1         }     } }. }
false;public;0;10;;@Test public void testECDSASHA1() throws Exception {     if (ibmJDK || !canRun) {         return.     }     setupMock().     sendBody("direct:ecdsa-sha1", payload).     assertMockEndpointsSatisfied(). }
false;private;0;5;;private MockEndpoint setupMock() {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived(payload).     return mock. }
false;public;1;3;;public Exchange doTestSignatureRoute(RouteBuilder builder) throws Exception {     return doSignatureRouteTest(builder, null, Collections.<String, Object>emptyMap()). }
false;public;3;21;;public Exchange doSignatureRouteTest(RouteBuilder builder, Exchange e, Map<String, Object> headers) throws Exception {     CamelContext context = new DefaultCamelContext().     try {         context.addRoutes(builder).         context.start().         MockEndpoint mock = context.getEndpoint("mock:result", MockEndpoint.class).         mock.setExpectedMessageCount(1).         ProducerTemplate template = context.createProducerTemplate().         if (e != null) {             template.send("direct:in", e).         } else {             template.sendBodyAndHeaders("direct:in", payload, headers).         }         assertMockEndpointsSatisfied().         return mock.getReceivedExchanges().get(0).     } finally {         context.stop().     } }
false;public;0;5;;@Before public void setUp() throws Exception {     disableJMX().     super.setUp(). }
