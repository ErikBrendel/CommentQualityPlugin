# id;timestamp;commentText;codeText;commentWords;codeWords
PGPDataFormatTest -> @Test     public void testDecryptVerifyWithSubkey() throws Exception;1395076208;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption._<p>_Tests also the decryption and verifying part with the subkeys.__@throws Exception;@Test_    public void testDecryptVerifyWithSubkey() throws Exception {_        _        String payload = "Test Message"__        MockEndpoint mockSubkey = getMockEndpoint("mock:unencrypted")__        mockSubkey.expectedBodiesReceived(payload)__        template.sendBody("direct:subkey", payload)__        assertMockEndpointsSatisfied()__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,p,tests,also,the,decryption,and,verifying,part,with,the,subkeys,throws,exception;test,public,void,test,decrypt,verify,with,subkey,throws,exception,string,payload,test,message,mock,endpoint,mock,subkey,get,mock,endpoint,mock,unencrypted,mock,subkey,expected,bodies,received,payload,template,send,body,direct,subkey,payload,assert,mock,endpoints,satisfied
PGPDataFormatTest -> @Test     public void testDecryptVerifyWithSubkey() throws Exception;1395578431;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption._<p>_Tests also the decryption and verifying part with the subkeys.__@throws Exception;@Test_    public void testDecryptVerifyWithSubkey() throws Exception {_        _        String payload = "Test Message"__        MockEndpoint mockSubkey = getMockEndpoint("mock:unencrypted")__        mockSubkey.expectedBodiesReceived(payload)__        template.sendBody("direct:subkey", payload)__        assertMockEndpointsSatisfied()__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,p,tests,also,the,decryption,and,verifying,part,with,the,subkeys,throws,exception;test,public,void,test,decrypt,verify,with,subkey,throws,exception,string,payload,test,message,mock,endpoint,mock,subkey,get,mock,endpoint,mock,unencrypted,mock,subkey,expected,bodies,received,payload,template,send,body,direct,subkey,payload,assert,mock,endpoints,satisfied
PGPDataFormatTest -> @Test     public void testDecryptVerifyWithSubkey() throws Exception;1405374721;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption._<p>_Tests also the decryption and verifying part with the subkeys.__@throws Exception;@Test_    public void testDecryptVerifyWithSubkey() throws Exception {_        _        String payload = "Test Message"__        MockEndpoint mockSubkey = getMockEndpoint("mock:unencrypted")__        mockSubkey.expectedBodiesReceived(payload)__        template.sendBody("direct:subkey", payload)__        assertMockEndpointsSatisfied()__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,p,tests,also,the,decryption,and,verifying,part,with,the,subkeys,throws,exception;test,public,void,test,decrypt,verify,with,subkey,throws,exception,string,payload,test,message,mock,endpoint,mock,subkey,get,mock,endpoint,mock,unencrypted,mock,subkey,expected,bodies,received,payload,template,send,body,direct,subkey,payload,assert,mock,endpoints,satisfied
PGPDataFormatTest -> @Test     public void testDecryptVerifyWithSubkey() throws Exception;1417163900;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption._<p>_Tests also the decryption and verifying part with the subkeys.__@throws Exception;@Test_    public void testDecryptVerifyWithSubkey() throws Exception {_        _        String payload = "Test Message"__        MockEndpoint mockSubkey = getMockEndpoint("mock:unencrypted")__        mockSubkey.expectedBodiesReceived(payload)__        template.sendBody("direct:subkey", payload)__        assertMockEndpointsSatisfied()__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,p,tests,also,the,decryption,and,verifying,part,with,the,subkeys,throws,exception;test,public,void,test,decrypt,verify,with,subkey,throws,exception,string,payload,test,message,mock,endpoint,mock,subkey,get,mock,endpoint,mock,unencrypted,mock,subkey,expected,bodies,received,payload,template,send,body,direct,subkey,payload,assert,mock,endpoints,satisfied
PGPDataFormatTest -> @Test     public void testDecryptVerifyWithSubkey() throws Exception;1425998174;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption._<p>_Tests also the decryption and verifying part with the subkeys.__@throws Exception;@Test_    public void testDecryptVerifyWithSubkey() throws Exception {_        _        String payload = "Test Message"__        MockEndpoint mockSubkey = getMockEndpoint("mock:unencrypted")__        mockSubkey.expectedBodiesReceived(payload)__        template.sendBody("direct:subkey", payload)__        assertMockEndpointsSatisfied()__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,p,tests,also,the,decryption,and,verifying,part,with,the,subkeys,throws,exception;test,public,void,test,decrypt,verify,with,subkey,throws,exception,string,payload,test,message,mock,endpoint,mock,subkey,get,mock,endpoint,mock,unencrypted,mock,subkey,expected,bodies,received,payload,template,send,body,direct,subkey,payload,assert,mock,endpoints,satisfied
PGPDataFormatTest -> @Test     public void testDecryptVerifyWithSubkey() throws Exception;1443105032;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption._<p>_Tests also the decryption and verifying part with the subkeys.__@throws Exception;@Test_    public void testDecryptVerifyWithSubkey() throws Exception {_        _        String payload = "Test Message"__        MockEndpoint mockSubkey = getMockEndpoint("mock:unencrypted")__        mockSubkey.expectedBodiesReceived(payload)__        template.sendBody("direct:subkey", payload)__        assertMockEndpointsSatisfied()__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,p,tests,also,the,decryption,and,verifying,part,with,the,subkeys,throws,exception;test,public,void,test,decrypt,verify,with,subkey,throws,exception,string,payload,test,message,mock,endpoint,mock,subkey,get,mock,endpoint,mock,unencrypted,mock,subkey,expected,bodies,received,payload,template,send,body,direct,subkey,payload,assert,mock,endpoints,satisfied
PGPDataFormatTest -> @Test     public void testDecryptVerifyWithSubkey() throws Exception;1523968798;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption._<p>_Tests also the decryption and verifying part with the subkeys.__@throws Exception;@Test_    public void testDecryptVerifyWithSubkey() throws Exception {_        _        String payload = "Test Message"__        MockEndpoint mockSubkey = getMockEndpoint("mock:unencrypted")__        mockSubkey.expectedBodiesReceived(payload)__        template.sendBody("direct:subkey", payload)__        assertMockEndpointsSatisfied()__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,p,tests,also,the,decryption,and,verifying,part,with,the,subkeys,throws,exception;test,public,void,test,decrypt,verify,with,subkey,throws,exception,string,payload,test,message,mock,endpoint,mock,subkey,get,mock,endpoint,mock,unencrypted,mock,subkey,expected,bodies,received,payload,template,send,body,direct,subkey,payload,assert,mock,endpoints,satisfied
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1392400400;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpdata,format,assert,equals,1,in,mess,get,header,pgpdata,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1392751344;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpdata,format,assert,equals,1,in,mess,get,header,pgpdata,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1392936452;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpdata,format,assert,equals,1,in,mess,get,header,pgpdata,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1395076208;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpdata,format,assert,equals,1,in,mess,get,header,pgpdata,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1395578431;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpdata,format,assert,equals,1,in,mess,get,header,pgpdata,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1405374721;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpkey,access,data,format,assert,equals,1,in,mess,get,header,pgpkey,access,data,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1417163900;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpkey,access,data,format,assert,equals,1,in,mess,get,header,pgpkey,access,data,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1425998174;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpkey,access,data,format,assert,equals,1,in,mess,get,header,pgpkey,access,data,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1443105032;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpkey,access,data,format,assert,equals,1,in,mess,get,header,pgpkey,access,data,format
PGPDataFormatTest -> @Test     public void testKeyFlagSelectsCorrectKey() throws Exception;1523968798;You get three keys with the UserId "keyflag", a primary key and its two_sub-keys. The sub-key with KeyFlag {@link KeyFlags#SIGN_DATA} should be_used for signing and the sub-key with KeyFlag_{@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or_{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.__@throws Exception;@Test_    public void testKeyFlagSelectsCorrectKey() throws Exception {_        MockEndpoint mockKeyFlag = getMockEndpoint("mock:encrypted_keyflag")__        mockKeyFlag.setExpectedMessageCount(1)__        template.sendBody("direct:keyflag", "Test Message")__        assertMockEndpointsSatisfied()___        List<Exchange> exchanges = mockKeyFlag.getExchanges()__        assertEquals(1, exchanges.size())__        Exchange exchange = exchanges.get(0)__        Message inMess = exchange.getIn()__        assertNotNull(inMess)__        _        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_ENCRYPTION_KEYS))__        assertEquals(1, inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_SIGNING_KEYS))__    };you,get,three,keys,with,the,user,id,keyflag,a,primary,key,and,its,two,sub,keys,the,sub,key,with,key,flag,link,key,flags,should,be,used,for,signing,and,the,sub,key,with,key,flag,link,key,flags,or,link,key,flags,or,link,key,flags,should,be,used,for,decryption,throws,exception;test,public,void,test,key,flag,selects,correct,key,throws,exception,mock,endpoint,mock,key,flag,get,mock,endpoint,mock,mock,key,flag,set,expected,message,count,1,template,send,body,direct,keyflag,test,message,assert,mock,endpoints,satisfied,list,exchange,exchanges,mock,key,flag,get,exchanges,assert,equals,1,exchanges,size,exchange,exchange,exchanges,get,0,message,in,mess,exchange,get,in,assert,not,null,in,mess,assert,equals,1,in,mess,get,header,pgpkey,access,data,format,assert,equals,1,in,mess,get,header,pgpkey,access,data,format
