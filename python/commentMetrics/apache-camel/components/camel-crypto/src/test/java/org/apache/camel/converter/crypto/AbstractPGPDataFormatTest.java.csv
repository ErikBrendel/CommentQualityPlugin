commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;12;;protected void doRoundTripEncryptionTests(String endpoint) throws Exception {     MockEndpoint encrypted = setupExpectations(context, 3, "mock:encrypted").     MockEndpoint unencrypted = setupExpectations(context, 3, "mock:unencrypted").     String payload = "Hi Alice, Be careful Eve is listening, signed Bob".     Map<String, Object> headers = getHeaders().     template.sendBodyAndHeaders(endpoint, payload, headers).     template.sendBodyAndHeaders(endpoint, payload.getBytes(), headers).     template.sendBodyAndHeaders(endpoint, new ByteArrayInputStream(payload.getBytes()), headers).     assertMocksSatisfied(encrypted, unencrypted, payload). }
false;protected;0;3;;protected Map<String, Object> getHeaders() {     return new HashMap<>(). }
false;protected;3;11;;protected void assertMocksSatisfied(MockEndpoint encrypted, MockEndpoint unencrypted, String payload) throws Exception {     awaitAndAssert(unencrypted).     awaitAndAssert(encrypted).     for (Exchange e : unencrypted.getReceivedExchanges()) {         assertEquals(payload, e.getIn().getMandatoryBody(String.class)).     }     for (Exchange e : encrypted.getReceivedExchanges()) {         byte[] ciphertext = e.getIn().getMandatoryBody(byte[].class).         assertNotSame(payload, new String(ciphertext)).     } }
false;protected;1;3;;protected void awaitAndAssert(MockEndpoint mock) throws InterruptedException {     mock.assertIsSatisfied(). }
false;public;3;5;;public MockEndpoint setupExpectations(CamelContext context, int expected, String mock) {     MockEndpoint mockEp = context.getEndpoint(mock, MockEndpoint.class).     mockEp.expectedMessageCount(expected).     return mockEp. }
