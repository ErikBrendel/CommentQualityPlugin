commented;modifiers;parameterAmount;loc;comment;code
false;public;1;22;;public void process(Exchange exchange) throws Exception {     Signature signer = createSignatureService().     Certificate cert = getCertificate(exchange).     if (cert == null) {         PublicKey pk = getPublicKeyOrCertificateFromHeader(exchange, PublicKey.class, config.getPublicKey()).         if (pk == null) {             throw new IllegalStateException(String.format("Cannot verify signature as no Public Key or Certificate has been supplied." + " Either supply one in the route definition or via the message header '%s'", DigitalSignatureConstants.SIGNATURE_PUBLIC_KEY_OR_CERT)).         }         signer.initVerify(pk).     } else {         signer.initVerify(cert).     }     calculateSignature(exchange, signer).     byte[] signature = getSignatureFromExchange(exchange).     if (!signer.verify(signature)) {         throw new SignatureException("Cannot verify signature of exchange").     }     clearMessageHeaders(exchange.getIn()). }
false;private;1;7;;private byte[] getSignatureFromExchange(Exchange exchange) throws Exception {     String encodedSignature = ExchangeHelper.getMandatoryHeader(exchange, config.getSignatureHeaderName(), String.class).     if (encodedSignature == null) {         throw new IllegalStateException("Cannot verify exchange as no " + config.getSignatureHeaderName() + " header is present.").     }     return new Base64().decode(encodedSignature). }
false;private;1;4;;private Certificate getCertificate(Exchange exchange) throws Exception {     Certificate cert = config.getCertificate(getAlias(exchange)).     return getPublicKeyOrCertificateFromHeader(exchange, Certificate.class, cert). }
false;private;3;7;;private <T> T getPublicKeyOrCertificateFromHeader(Exchange exchange, Class<? extends T> verificationType, T defaultsTo) {     T pkOrCert = exchange.getIn().getHeader(DigitalSignatureConstants.SIGNATURE_PUBLIC_KEY_OR_CERT, verificationType).     if (pkOrCert == null) {         pkOrCert = defaultsTo.     }     return pkOrCert. }
