# id;timestamp;commentText;codeText;commentWords;codeWords
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1395076208;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1425998174;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1443105032;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1448695126;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1523968798;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1536517284;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1540108159;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1540108163;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1540473486;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> @SuppressWarnings("unchecked")     public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)         throws PGPException;1547624696;Determines a public key from the keyring collection which has a certain_key ID and which has a User ID which contains at least one of the User ID_parts.__@param keyId_key ID_@param userIdParts_user ID parts, can be empty, than no filter on the User ID is_executed_@param publicKeyringCollection_keyring collection_@return public key or <code>null</code> if no fitting key is found_@throws PGPException;@SuppressWarnings("unchecked")_    public static PGPPublicKey getPublicKeyWithKeyIdAndUserID(long keyId, List<String> userIdParts, PGPPublicKeyRingCollection publicKeyringCollection)_        throws PGPException {_        PGPPublicKeyRing publicKeyring = publicKeyringCollection.getPublicKeyRing(keyId)__        if (publicKeyring == null) {_            LOG.debug("No public key found for key ID {}.", Long.toString(keyId))__            return null__        }_        _        if (isAllowedKey(userIdParts, publicKeyring.getPublicKey().getUserIDs())) {_            return publicKeyring.getPublicKey(keyId)__        } else {_            return null__        }_    };determines,a,public,key,from,the,keyring,collection,which,has,a,certain,key,id,and,which,has,a,user,id,which,contains,at,least,one,of,the,user,id,parts,param,key,id,key,id,param,user,id,parts,user,id,parts,can,be,empty,than,no,filter,on,the,user,id,is,executed,param,public,keyring,collection,keyring,collection,return,public,key,or,code,null,code,if,no,fitting,key,is,found,throws,pgpexception;suppress,warnings,unchecked,public,static,pgppublic,key,get,public,key,with,key,id,and,user,id,long,key,id,list,string,user,id,parts,pgppublic,key,ring,collection,public,keyring,collection,throws,pgpexception,pgppublic,key,ring,public,keyring,public,keyring,collection,get,public,key,ring,key,id,if,public,keyring,null,log,debug,no,public,key,found,for,key,id,long,to,string,key,id,return,null,if,is,allowed,key,user,id,parts,public,keyring,get,public,key,get,user,ids,return,public,keyring,get,public,key,key,id,else,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1392400400;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1392751344;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1395076208;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1425998174;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1443105032;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1448695126;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1523968798;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1536517284;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1540108159;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1540108163;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1540473486;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
PGPDataFormatUtil -> private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags);1547624696;Checks whether one of the signatures of the key has one of the expected_key flags__@param key_@return {@link Boolean#TRUE} if key has one of the expected flag,_<code>null</code> if the key does not have any key flags,_{@link Boolean#FALSE} if the key has none of the expected flags;private static Boolean hasOneOfExpectedKeyFlags(PGPPublicKey key, int[] expectedKeyFlags) {_        boolean containsKeyFlags = false__        for (@SuppressWarnings("unchecked")_        Iterator<PGPSignature> itsig = key.getSignatures()_ itsig.hasNext()_) {_            PGPSignature sig = itsig.next()__            PGPSignatureSubpacketVector subPacks = sig.getHashedSubPackets()__            if (subPacks != null) {_                int keyFlag = subPacks.getKeyFlags()__                if (keyFlag > 0 && !containsKeyFlags) {_                    containsKeyFlags = true__                }_                for (int expectdKeyFlag : expectedKeyFlags) {_                    int result = keyFlag & expectdKeyFlag__                    if (result == expectdKeyFlag) {_                        return Boolean.TRUE__                    }_                }_            }_        }_        if (containsKeyFlags) {_            return Boolean.FALSE__        }_        return null_ _    };checks,whether,one,of,the,signatures,of,the,key,has,one,of,the,expected,key,flags,param,key,return,link,boolean,true,if,key,has,one,of,the,expected,flag,code,null,code,if,the,key,does,not,have,any,key,flags,link,boolean,false,if,the,key,has,none,of,the,expected,flags;private,static,boolean,has,one,of,expected,key,flags,pgppublic,key,key,int,expected,key,flags,boolean,contains,key,flags,false,for,suppress,warnings,unchecked,iterator,pgpsignature,itsig,key,get,signatures,itsig,has,next,pgpsignature,sig,itsig,next,pgpsignature,subpacket,vector,sub,packs,sig,get,hashed,sub,packets,if,sub,packs,null,int,key,flag,sub,packs,get,key,flags,if,key,flag,0,contains,key,flags,contains,key,flags,true,for,int,expectd,key,flag,expected,key,flags,int,result,key,flag,expectd,key,flag,if,result,expectd,key,flag,return,boolean,true,if,contains,key,flags,return,boolean,false,return,null
