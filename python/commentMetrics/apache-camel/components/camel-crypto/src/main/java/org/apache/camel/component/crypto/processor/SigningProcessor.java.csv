commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;public void process(Exchange exchange) throws Exception {     Signature service = initSignatureService(exchange).     calculateSignature(exchange, service).     byte[] signature = service.sign().     Message in = exchange.getIn().     clearMessageHeaders(in).     Message out = exchange.getOut().     out.copyFrom(in).     out.setHeader(config.getSignatureHeaderName(), new Base64().encode(signature)). }
false;protected;1;11;;protected Signature initSignatureService(Exchange exchange) throws Exception {     PrivateKey pk = getPrivateKeyFromKeystoreOrExchange(exchange).     SecureRandom random = config.getSecureRandom().     Signature service = createSignatureService().     if (random != null) {         service.initSign(pk, random).     } else {         service.initSign(pk).     }     return service. }
false;private;1;13;;private PrivateKey getPrivateKeyFromKeystoreOrExchange(Exchange exchange) throws Exception {     PrivateKey pk = config.getPrivateKey(getAlias(exchange), getKeyPassword(exchange)).     if (pk == null) {         pk = exchange.getIn().getHeader(DigitalSignatureConstants.SIGNATURE_PRIVATE_KEY, PrivateKey.class).         if (pk == null) {             throw new IllegalStateException(format("Cannot sign message as no Private Key has been supplied. " + "Either supply one in the route definition sign(keystore, alias) or sign(privateKey) " + "or via the message header '%s'", DigitalSignatureConstants.SIGNATURE_PRIVATE_KEY)).         }     }     return pk. }
false;protected;1;11;;protected char[] getKeyPassword(Exchange exchange) throws Exception {     KeyStore keystore = config.getKeystore().     char[] password = null.     if (keystore != null) {         password = exchange.getIn().getHeader(DigitalSignatureConstants.KEYSTORE_PASSWORD, char[].class).         if (password == null) {             password = config.getPassword().         }     }     return password. }
