# id;timestamp;commentText;codeText;commentWords;codeWords
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1392751344;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1392936452;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1395076208;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1395578431;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1396436281;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1405374721;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1417163900;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1420644455;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1425998174;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1443105032;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1443168793;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1443172643;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1446727006;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1479916286;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1490361254;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1523968798;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1540108161;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1540108163;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1547241305;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1547624696;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1547802864;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setKeyUserid(String keyUserid);1548175645;User ID, or more precisely user ID part, of the key used for encryption._See also {@link #setKeyUserids(List<String>)}.;public void setKeyUserid(String keyUserid) {_        this.keyUserid = keyUserid__    };user,id,or,more,precisely,user,id,part,of,the,key,used,for,encryption,see,also,link,set,key,userids,list,string;public,void,set,key,userid,string,key,userid,this,key,userid,key,userid
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1392751344;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1392936452;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1395076208;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1395578431;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1396436281;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1405374721;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1417163900;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1420644455;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1425998174;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1443105032;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1443168793;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1443172643;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1446727006;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1479916286;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1490361254;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1523968798;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1540108161;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1540108163;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1547241305;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1547624696;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1547802864;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setArmored(boolean armored);1548175645;Sets if the encrypted file should be written in ascii visible text (for_marshaling).;public void setArmored(boolean armored) {_        this.armored = armored__    };sets,if,the,encrypted,file,should,be,written,in,ascii,visible,text,for,marshaling;public,void,set,armored,boolean,armored,this,armored,armored
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1392751344;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1392936452;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1395076208;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1395578431;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1396436281;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1405374721;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1417163900;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1420644455;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1425998174;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1443105032;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1443168793;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1443172643;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1446727006;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1479916286;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1490361254;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1523968798;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1540108161;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1540108163;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1547241305;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1547624696;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1547802864;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setSignatureKeyUserid(String signatureKeyUserid);1548175645;Userid, or more precisely user ID part, of the signature key used for_signing (marshal) and verifying (unmarshal). See also_{@link #setSignatureKeyUserids(List)}.;public void setSignatureKeyUserid(String signatureKeyUserid) {_        this.signatureKeyUserid = signatureKeyUserid__    };userid,or,more,precisely,user,id,part,of,the,signature,key,used,for,signing,marshal,and,verifying,unmarshal,see,also,link,set,signature,key,userids,list;public,void,set,signature,key,userid,string,signature,key,userid,this,signature,key,userid,signature,key,userid
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1392751344;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1392936452;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1395076208;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1395578431;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1396436281;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1405374721;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1417163900;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1420644455;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1425998174;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1443105032;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1443168793;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1443172643;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1446727006;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1479916286;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1490361254;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1523968798;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1540108161;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1540108163;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1547241305;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1547624696;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1547802864;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setCompressionAlgorithm(int compressionAlgorithm);1548175645;Compression algorithm used during marshaling. Possible values are defined_in {@link CompressionAlgorithmTags}. Default value is ZIP.;public void setCompressionAlgorithm(int compressionAlgorithm) {_        this.compressionAlgorithm = compressionAlgorithm__    };compression,algorithm,used,during,marshaling,possible,values,are,defined,in,link,compression,algorithm,tags,default,value,is,zip;public,void,set,compression,algorithm,int,compression,algorithm,this,compression,algorithm,compression,algorithm
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1392751344;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1392936452;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1395076208;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1395578431;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1396436281;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1405374721;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1417163900;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1420644455;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1425998174;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1443105032;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1443168793;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1443172643;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1446727006;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1479916286;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1490361254;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1523968798;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1540108161;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1540108163;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1547241305;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1547624696;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1547802864;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setIntegrity(boolean integrity);1548175645;Whether or not to add an integrity check/sign to the encrypted file for_marshaling.;public void setIntegrity(boolean integrity) {_        this.integrity = integrity__    };whether,or,not,to,add,an,integrity,check,sign,to,the,encrypted,file,for,marshaling;public,void,set,integrity,boolean,integrity,this,integrity,integrity
PGPKeyAccessDataFormat -> public void setProvider(String provider);1392751344;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1392936452;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1395076208;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1395578431;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1396436281;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1405374721;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1417163900;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1420644455;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1425998174;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1443105032;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1443168793;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1443172643;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1446727006;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1479916286;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1490361254;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1523968798;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1540108161;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1540108163;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1547241305;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1547624696;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1547802864;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setProvider(String provider);1548175645;Java Cryptography Extension (JCE) provider, default is Bouncy Castle_("BC"). Alternatively you can use, for example, the IAIK JCE provider_ in_this case the provider must be registered beforehand and the Bouncy_Castle provider must not be registered beforehand. The Sun JCE provider_does not work.;public void setProvider(String provider) {_        this.provider = provider__    };java,cryptography,extension,jce,provider,default,is,bouncy,castle,bc,alternatively,you,can,use,for,example,the,iaik,jce,provider,in,this,case,the,provider,must,be,registered,beforehand,and,the,bouncy,castle,provider,must,not,be,registered,beforehand,the,sun,jce,provider,does,not,work;public,void,set,provider,string,provider,this,provider,provider
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1392751344;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1392936452;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1395076208;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1395578431;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1396436281;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1405374721;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1417163900;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1420644455;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1425998174;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1443105032;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1443168793;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1443172643;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1446727006;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1479916286;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1490361254;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1523968798;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1540108161;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1540108163;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1547241305;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1547624696;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1547802864;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setHashAlgorithm(int hashAlgorithm);1548175645;Digest algorithm for signing (marshaling). Possible values are defined in_{@link HashAlgorithmTags}. Default value is SHA1.;public void setHashAlgorithm(int hashAlgorithm) {_        this.hashAlgorithm = hashAlgorithm__    };digest,algorithm,for,signing,marshaling,possible,values,are,defined,in,link,hash,algorithm,tags,default,value,is,sha1;public,void,set,hash,algorithm,int,hash,algorithm,this,hash,algorithm,hash,algorithm
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1392751344;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1392936452;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1395076208;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1395578431;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1396436281;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1405374721;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1417163900;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1420644455;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1425998174;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1443105032;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1443168793;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1443172643;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1446727006;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1479916286;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1490361254;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1523968798;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1540108161;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1540108163;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1547241305;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1547624696;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1547802864;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public void setKeyUserids(List<String> keyUserids);1548175645;Keys User IDs, or more precisely user ID parts, used for determining the_public keys for encryption. If you just have one User ID, then you can_also use the method {@link #setKeyUserid(String)}. The User ID specified_in {@link #setKeyUserid(String)} and in this method will be merged_together and the public keys which have a User ID which contain a value_of the specified User IDs the will be used for the encryption. Be aware_that you may get several public keys even if you specify only one User_Id, because there can be several public keys which have a User ID which_contains the specified User ID.;public void setKeyUserids(List<String> keyUserids) {_        this.keyUserids = keyUserids__    };keys,user,ids,or,more,precisely,user,id,parts,used,for,determining,the,public,keys,for,encryption,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,key,userid,string,the,user,id,specified,in,link,set,key,userid,string,and,in,this,method,will,be,merged,together,and,the,public,keys,which,have,a,user,id,which,contain,a,value,of,the,specified,user,ids,the,will,be,used,for,the,encryption,be,aware,that,you,may,get,several,public,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,public,keys,which,have,a,user,id,which,contains,the,specified,user,id;public,void,set,key,userids,list,string,key,userids,this,key,userids,key,userids
PGPKeyAccessDataFormat -> public String getFileName();1417163900;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1420644455;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1425998174;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1443105032;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1443168793;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1443172643;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1446727006;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1479916286;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1490361254;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1523968798;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1540108161;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1540108163;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1547241305;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1547624696;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1547802864;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public String getFileName();1548175645;Returns the file name for the literal packet. Cannot be <code>null</code>;public String getFileName() {_        return fileName__    };returns,the,file,name,for,the,literal,packet,cannot,be,code,null,code;public,string,get,file,name,return,file,name
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1443105032;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1443168793;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1443172643;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1446727006;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1479916286;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1490361254;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1523968798;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1540108161;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1540108163;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1547241305;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1547624696;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1547802864;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setWithCompressedDataPacket(boolean withCompressedDataPacket);1548175645;Indicator that Compressed Data packet shall be added during encryption._The default value is true._If <tt>false</tt> then the compression algorithm (see {@link #setCompressionAlgorithm(int)} is ignored.;public void setWithCompressedDataPacket(boolean withCompressedDataPacket) {_        this.withCompressedDataPacket = withCompressedDataPacket__    };indicator,that,compressed,data,packet,shall,be,added,during,encryption,the,default,value,is,true,if,tt,false,tt,then,the,compression,algorithm,see,link,set,compression,algorithm,int,is,ignored;public,void,set,with,compressed,data,packet,boolean,with,compressed,data,packet,this,with,compressed,data,packet,with,compressed,data,packet
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1392751344;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1392936452;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1395076208;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1395578431;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1396436281;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1405374721;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1417163900;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1420644455;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1425998174;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1443105032;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1443168793;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1443172643;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1446727006;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1479916286;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1490361254;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1523968798;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1540108161;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1540108163;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1547241305;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1547624696;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1547802864;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureKeyUserids(List<String> signatureKeyUserids);1548175645;User IDs, or more precisely user ID parts, used for signing and_verification._<p>_In the signing case, the User IDs specify the private keys which are used_for signing. If the result are several private keys then several_signatures will be created. If you just have one signature User ID, then_you can also use the method {@link #setSignatureKeyUserid(String)} or_this method. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the private keys which have a User Id which contain one_value out of the specified UserIds will be used for the signature_creation. Be aware that you may get several private keys even if you_specify only one User Id, because there can be several private keys which_have a User ID which contains the specified User ID._<p>_In the verification case the User IDs restrict the set of public keys_which can be used for verification. The public keys used for verification_must contain a User ID which contain one value of the User ID list. If_you neither specify in this method and nor specify in the method_{@link #setSignatureKeyUserid(String)} any value then any public key in_the public key ring will be taken into consideration for the_verification._<p>_If you just have one User ID, then you can also use the method_{@link #setSignatureKeyUserid(String)}. The User ID specified in_{@link #setSignatureKeyUserid(String)} and in this method will be merged_together and the corresponding public keys represent the potential keys_for the verification of the message.;public void setSignatureKeyUserids(List<String> signatureKeyUserids) {_        this.signatureKeyUserids = signatureKeyUserids__    };user,ids,or,more,precisely,user,id,parts,used,for,signing,and,verification,p,in,the,signing,case,the,user,ids,specify,the,private,keys,which,are,used,for,signing,if,the,result,are,several,private,keys,then,several,signatures,will,be,created,if,you,just,have,one,signature,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,or,this,method,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,private,keys,which,have,a,user,id,which,contain,one,value,out,of,the,specified,user,ids,will,be,used,for,the,signature,creation,be,aware,that,you,may,get,several,private,keys,even,if,you,specify,only,one,user,id,because,there,can,be,several,private,keys,which,have,a,user,id,which,contains,the,specified,user,id,p,in,the,verification,case,the,user,ids,restrict,the,set,of,public,keys,which,can,be,used,for,verification,the,public,keys,used,for,verification,must,contain,a,user,id,which,contain,one,value,of,the,user,id,list,if,you,neither,specify,in,this,method,and,nor,specify,in,the,method,link,set,signature,key,userid,string,any,value,then,any,public,key,in,the,public,key,ring,will,be,taken,into,consideration,for,the,verification,p,if,you,just,have,one,user,id,then,you,can,also,use,the,method,link,set,signature,key,userid,string,the,user,id,specified,in,link,set,signature,key,userid,string,and,in,this,method,will,be,merged,together,and,the,corresponding,public,keys,represent,the,potential,keys,for,the,verification,of,the,message;public,void,set,signature,key,userids,list,string,signature,key,userids,this,signature,key,userids,signature,key,userids
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1395076208;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1395578431;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1396436281;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1405374721;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1417163900;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1420644455;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1425998174;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1443105032;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1443168793;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1443172643;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgument_exception if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1446727006;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1479916286;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1490361254;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1523968798;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1540108161;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1540108163;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1547241305;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1547624696;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1547802864;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setSignatureVerificationOption(String signatureVerificationOption);1548175645;Signature verification option. Controls the behavior for the signature_verification during unmarshaling. Possible values are_{@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL},_{@link #SIGNATURE_VERIFICATION_OPTION_REQUIRED},_{@link #SIGNATURE_VERIFICATION_OPTION_NO_SIGNATURE_ALLOWED}, and_{@link #SIGNATURE_VERIFICATION_OPTION_IGNORE}. The default_value is {@link #SIGNATURE_VERIFICATION_OPTION_OPTIONAL}__@param signatureVerificationOption_signature verification option_@throws IllegalArgumentException_if an invalid value is entered;public void setSignatureVerificationOption(String signatureVerificationOption) {_        if (SIGNATURE_VERIFICATION_OPTIONS.contains(signatureVerificationOption)) {_            this.signatureVerificationOption = signatureVerificationOption__        } else {_            throw new IllegalArgumentException(signatureVerificationOption + " is not a valid signature verification option")__        }_    };signature,verification,option,controls,the,behavior,for,the,signature,verification,during,unmarshaling,possible,values,are,link,link,link,and,link,the,default,value,is,link,param,signature,verification,option,signature,verification,option,throws,illegal,argument,exception,if,an,invalid,value,is,entered;public,void,set,signature,verification,option,string,signature,verification,option,if,contains,signature,verification,option,this,signature,verification,option,signature,verification,option,else,throw,new,illegal,argument,exception,signature,verification,option,is,not,a,valid,signature,verification,option
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1392751344;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1392936452;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1395076208;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1395578431;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1396436281;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1405374721;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1417163900;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1420644455;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1425998174;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1443105032;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1443168793;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1443172643;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1446727006;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1479916286;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1490361254;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1523968798;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1540108161;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1540108163;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1547241305;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1547624696;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1547802864;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setAlgorithm(int algorithm);1548175645;Symmetric key algorithm for encryption (marshaling). Possible values are_defined in {@link SymmetricKeyAlgorithmTags}. Default value is CAST5.;public void setAlgorithm(int algorithm) {_        this.algorithm = algorithm__    };symmetric,key,algorithm,for,encryption,marshaling,possible,values,are,defined,in,link,symmetric,key,algorithm,tags,default,value,is,cast5;public,void,set,algorithm,int,algorithm,this,algorithm,algorithm
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1417163900;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1420644455;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1425998174;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1443105032;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1443168793;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1443172643;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1446727006;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1479916286;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1490361254;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1523968798;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1540108161;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1540108163;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1547241305;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1547624696;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1547802864;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
PGPKeyAccessDataFormat -> public void setFileName(String fileName);1548175645;Sets the file name for the literal data packet. Can be overwritten by the_header {@link Exchange#FILE_NAME}. The default value is "_CONSOLE"._"_CONSOLE" indicates that the message is considered to be_"for your eyes only". This advises that the message data is unusually_sensitive, and the receiving program should process it more carefully,_perhaps avoiding storing the received data to disk, for example._<p>_Only used for marshaling.__@param fileName_@throws IllegalArgumentException_if <tt>fileName</tt> is <code>null</code>;public void setFileName(String fileName) {_        if (fileName == null) {_            throw new IllegalArgumentException("Parameter 'fileName' is null")__        }_        this.fileName = fileName__    };sets,the,file,name,for,the,literal,data,packet,can,be,overwritten,by,the,header,link,exchange,the,default,value,is,indicates,that,the,message,is,considered,to,be,for,your,eyes,only,this,advises,that,the,message,data,is,unusually,sensitive,and,the,receiving,program,should,process,it,more,carefully,perhaps,avoiding,storing,the,received,data,to,disk,for,example,p,only,used,for,marshaling,param,file,name,throws,illegal,argument,exception,if,tt,file,name,tt,is,code,null,code;public,void,set,file,name,string,file,name,if,file,name,null,throw,new,illegal,argument,exception,parameter,file,name,is,null,this,file,name,file,name
