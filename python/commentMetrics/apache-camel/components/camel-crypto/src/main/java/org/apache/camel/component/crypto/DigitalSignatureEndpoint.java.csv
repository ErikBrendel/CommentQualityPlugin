commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public Producer createProducer() throws Exception {     if (CryptoOperation.sign == configuration.getCryptoOperation()) {         return new DigitalSignatureProducer(this, new SigningProcessor(configuration)).     } else {         return new DigitalSignatureProducer(this, new VerifyingProcessor(configuration)).     } }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Digital Signatures endpoints are not meant to be consumed from. They are meant be used as an intermediate endpoints"). }
false;public;0;3;;public boolean isSingleton() {     return true. }
true;public;1;3;/**  * Sets the configuration to use  */ ;/**  * Sets the configuration to use  */ public void setConfiguration(DigitalSignatureConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public DigitalSignatureConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public PublicKey getPublicKey() throws Exception {     return getConfiguration().getPublicKey(). }
false;public;1;3;;public void setPublicKey(PublicKey publicKey) {     getConfiguration().setPublicKey(publicKey). }
false;public;1;3;;public void setPublicKey(String publicKeyName) {     getConfiguration().setPublicKeyName(publicKeyName). }
false;public;0;3;;public Certificate getCertificate() throws Exception {     return getConfiguration().getCertificate(). }
false;public;0;3;;public PrivateKey getPrivateKey() throws Exception {     return getConfiguration().getPrivateKey(). }
false;public;1;3;;public void setPrivateKey(PrivateKey privateKey) {     getConfiguration().setPrivateKey(privateKey). }
false;public;0;3;;public KeyStore getKeystore() {     return getConfiguration().getKeystore(). }
false;public;1;3;;public void setKeystore(KeyStore keystore) {     getConfiguration().setKeystore(keystore). }
false;public;0;3;;public char[] getPassword() {     return getConfiguration().getPassword(). }
false;public;1;3;;public void setKeyPassword(char[] keyPassword) {     getConfiguration().setPassword(keyPassword). }
false;public;0;3;;public SecureRandom getSecureRandom() {     return getConfiguration().getSecureRandom(). }
false;public;1;3;;public void setSecureRandom(SecureRandom secureRandom) {     getConfiguration().setSecureRandom(secureRandom). }
false;public;0;3;;public String getAlgorithm() {     return getConfiguration().getAlgorithm(). }
false;public;1;3;;public void setAlgorithm(String algorithm) {     getConfiguration().setAlgorithm(algorithm). }
false;public;0;3;;public Integer getBuffersize() {     return getConfiguration().getBufferSize(). }
false;public;1;3;;public void setBuffersize(Integer buffersize) {     getConfiguration().setBufferSize(buffersize). }
false;public;0;3;;public String getProvider() {     return getConfiguration().getProvider(). }
false;public;1;3;;public void setProvider(String provider) {     getConfiguration().setProvider(provider). }
false;public;0;3;;public String getSignatureHeader() {     return getConfiguration().getSignatureHeaderName(). }
false;public;1;3;;public void setSignatureHeader(String signatureHeaderName) {     getConfiguration().setSignatureHeaderName(signatureHeaderName). }
false;public;0;3;;public String getAlias() {     return getConfiguration().getAlias(). }
false;public;1;3;;public void setAlias(String alias) {     getConfiguration().setAlias(alias). }
false;public;0;3;;public boolean isClearHeaders() {     return getConfiguration().isClearHeaders(). }
false;public;1;3;;public void setClearHeaders(boolean clearHeaders) {     getConfiguration().setClearHeaders(clearHeaders). }
