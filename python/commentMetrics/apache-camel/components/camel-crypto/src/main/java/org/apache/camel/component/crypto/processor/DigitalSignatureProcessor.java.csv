commented;modifiers;parameterAmount;loc;comment;code
false;public;2;15;;public void calculateSignature(Exchange exchange, Signature signer) throws Exception {     Object payload = exchange.getIn().getBody().     if (payload != null) {         InputStream payloadStream = ExchangeHelper.convertToMandatoryType(exchange, InputStream.class, payload).         try {             byte[] buffer = new byte[config.getBufferSize()].             int read.             while ((read = payloadStream.read(buffer)) > 0) {                 signer.update(buffer, 0, read).             }         } finally {             IOHelper.close(payloadStream).         }     } }
false;protected;1;16;;protected String getAlias(Exchange exchange) throws Exception {     KeyStore keystore = config.getKeystore().     if (keystore != null) {         String alias = exchange.getIn().getHeader(DigitalSignatureConstants.KEYSTORE_ALIAS, String.class).         if (alias == null) {             alias = config.getAlias().         }         // if there is only one entry then use it. Document this well         if (alias == null && keystore.size() == 1) {             alias = keystore.aliases().nextElement().         }         return alias.     }     return null. }
false;public;1;3;;public void setConfig(DigitalSignatureConfiguration config) {     this.config = config. }
false;protected;0;6;;protected Signature createSignatureService() throws NoSuchAlgorithmException, NoSuchProviderException {     String algorithm = config.getAlgorithm().     String provider = config.getProvider().     Signature signer = provider == null ? Signature.getInstance(algorithm) : Signature.getInstance(algorithm, provider).     return signer. }
false;protected;1;8;;protected void clearMessageHeaders(Message in) {     if (config.isClearHeaders()) {         Map<String, Object> headers = in.getHeaders().         for (Field f : DigitalSignatureConstants.class.getFields()) {             headers.remove(ObjectHelper.lookupConstantFieldValue(DigitalSignatureConstants.class, f.getName())).         }     } }
