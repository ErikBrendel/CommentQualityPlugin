# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultPGPSecretKeyAccessor -> public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException;1392936452;@param secretKeyRing_secret key ring as byte array_@param password_password for the private keys, assuming that all private keys_have the same password_@param provider_@throws PGPException_@throws IOException;public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException {_        ObjectHelper.notNull(secretKeyRing, "secretKeyRing")__        ObjectHelper.notEmpty(password, "password")__        ObjectHelper.notEmpty(provider, "provider")__        pgpSecretKeyring = new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(new ByteArrayInputStream(secretKeyRing)))__        this.password = password__        this.provider = provider__    };param,secret,key,ring,secret,key,ring,as,byte,array,param,password,password,for,the,private,keys,assuming,that,all,private,keys,have,the,same,password,param,provider,throws,pgpexception,throws,ioexception;public,default,pgpsecret,key,accessor,byte,secret,key,ring,string,password,string,provider,throws,pgpexception,ioexception,object,helper,not,null,secret,key,ring,secret,key,ring,object,helper,not,empty,password,password,object,helper,not,empty,provider,provider,pgp,secret,keyring,new,pgpsecret,key,ring,collection,pgputil,get,decoder,stream,new,byte,array,input,stream,secret,key,ring,this,password,password,this,provider,provider
DefaultPGPSecretKeyAccessor -> public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException;1425998174;@param secretKeyRing_secret key ring as byte array_@param password_password for the private keys, assuming that all private keys_have the same password_@param provider_@throws PGPException_@throws IOException;public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException {_        ObjectHelper.notNull(secretKeyRing, "secretKeyRing")__        ObjectHelper.notEmpty(password, "password")__        ObjectHelper.notEmpty(provider, "provider")__        pgpSecretKeyring = _            new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(new ByteArrayInputStream(secretKeyRing)),_                                           new BcKeyFingerprintCalculator())__        this.password = password__        this.provider = provider__    };param,secret,key,ring,secret,key,ring,as,byte,array,param,password,password,for,the,private,keys,assuming,that,all,private,keys,have,the,same,password,param,provider,throws,pgpexception,throws,ioexception;public,default,pgpsecret,key,accessor,byte,secret,key,ring,string,password,string,provider,throws,pgpexception,ioexception,object,helper,not,null,secret,key,ring,secret,key,ring,object,helper,not,empty,password,password,object,helper,not,empty,provider,provider,pgp,secret,keyring,new,pgpsecret,key,ring,collection,pgputil,get,decoder,stream,new,byte,array,input,stream,secret,key,ring,new,bc,key,fingerprint,calculator,this,password,password,this,provider,provider
DefaultPGPSecretKeyAccessor -> public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException;1523968798;@param secretKeyRing_secret key ring as byte array_@param password_password for the private keys, assuming that all private keys_have the same password_@param provider_@throws PGPException_@throws IOException;public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException {_        ObjectHelper.notNull(secretKeyRing, "secretKeyRing")__        ObjectHelper.notEmpty(password, "password")__        ObjectHelper.notEmpty(provider, "provider")__        pgpSecretKeyring = _            new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(new ByteArrayInputStream(secretKeyRing)),_                                           new BcKeyFingerprintCalculator())__        this.password = password__        this.provider = provider__    };param,secret,key,ring,secret,key,ring,as,byte,array,param,password,password,for,the,private,keys,assuming,that,all,private,keys,have,the,same,password,param,provider,throws,pgpexception,throws,ioexception;public,default,pgpsecret,key,accessor,byte,secret,key,ring,string,password,string,provider,throws,pgpexception,ioexception,object,helper,not,null,secret,key,ring,secret,key,ring,object,helper,not,empty,password,password,object,helper,not,empty,provider,provider,pgp,secret,keyring,new,pgpsecret,key,ring,collection,pgputil,get,decoder,stream,new,byte,array,input,stream,secret,key,ring,new,bc,key,fingerprint,calculator,this,password,password,this,provider,provider
DefaultPGPSecretKeyAccessor -> public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException;1535969486;@param secretKeyRing_secret key ring as byte array_@param password_password for the private keys, assuming that all private keys_have the same password_@param provider_@throws PGPException_@throws IOException;public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException {_        ObjectHelper.notNull(secretKeyRing, "secretKeyRing")__        StringHelper.notEmpty(password, "password")__        StringHelper.notEmpty(provider, "provider")__        pgpSecretKeyring = _            new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(new ByteArrayInputStream(secretKeyRing)),_                                           new BcKeyFingerprintCalculator())__        this.password = password__        this.provider = provider__    };param,secret,key,ring,secret,key,ring,as,byte,array,param,password,password,for,the,private,keys,assuming,that,all,private,keys,have,the,same,password,param,provider,throws,pgpexception,throws,ioexception;public,default,pgpsecret,key,accessor,byte,secret,key,ring,string,password,string,provider,throws,pgpexception,ioexception,object,helper,not,null,secret,key,ring,secret,key,ring,string,helper,not,empty,password,password,string,helper,not,empty,provider,provider,pgp,secret,keyring,new,pgpsecret,key,ring,collection,pgputil,get,decoder,stream,new,byte,array,input,stream,secret,key,ring,new,bc,key,fingerprint,calculator,this,password,password,this,provider,provider
DefaultPGPSecretKeyAccessor -> public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException;1540108161;@param secretKeyRing_secret key ring as byte array_@param password_password for the private keys, assuming that all private keys_have the same password_@param provider_@throws PGPException_@throws IOException;public DefaultPGPSecretKeyAccessor(byte[] secretKeyRing, String password, String provider) throws PGPException, IOException {_        ObjectHelper.notNull(secretKeyRing, "secretKeyRing")__        StringHelper.notEmpty(password, "password")__        StringHelper.notEmpty(provider, "provider")__        pgpSecretKeyring = _            new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(new ByteArrayInputStream(secretKeyRing)),_                                           new BcKeyFingerprintCalculator())__        this.password = password__        this.provider = provider__    };param,secret,key,ring,secret,key,ring,as,byte,array,param,password,password,for,the,private,keys,assuming,that,all,private,keys,have,the,same,password,param,provider,throws,pgpexception,throws,ioexception;public,default,pgpsecret,key,accessor,byte,secret,key,ring,string,password,string,provider,throws,pgpexception,ioexception,object,helper,not,null,secret,key,ring,secret,key,ring,string,helper,not,empty,password,password,string,helper,not,empty,provider,provider,pgp,secret,keyring,new,pgpsecret,key,ring,collection,pgputil,get,decoder,stream,new,byte,array,input,stream,secret,key,ring,new,bc,key,fingerprint,calculator,this,password,password,this,provider,provider
