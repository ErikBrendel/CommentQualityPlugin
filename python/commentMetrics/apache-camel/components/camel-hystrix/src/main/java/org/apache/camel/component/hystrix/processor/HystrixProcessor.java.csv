commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@ManagedAttribute public String getHystrixCommandKey() {     return commandKey.name(). }
false;public;0;8;;@ManagedAttribute public String getHystrixFallbackCommandKey() {     if (fallbackCommandKey != null) {         return fallbackCommandKey.name().     } else {         return null.     } }
false;public;0;4;;@ManagedAttribute public String getHystrixGroupKey() {     return groupKey.name(). }
false;public;0;4;;@ManagedAttribute public boolean isFallbackViaNetwork() {     return isFallbackViaNetwork(). }
false;public;0;8;;@ManagedAttribute public int getHystrixTotalTimeMean() {     HystrixCommandMetrics metrics = HystrixCommandMetrics.getInstance(commandKey).     if (metrics != null) {         return metrics.getTotalTimeMean().     }     return 0. }
false;public;0;8;;@ManagedAttribute public int getHystrixExecutionTimeMean() {     HystrixCommandMetrics metrics = HystrixCommandMetrics.getInstance(commandKey).     if (metrics != null) {         return metrics.getExecutionTimeMean().     }     return 0. }
false;public;0;8;;@ManagedAttribute public int getHystrixCurrentConcurrentExecutionCount() {     HystrixCommandMetrics metrics = HystrixCommandMetrics.getInstance(commandKey).     if (metrics != null) {         return metrics.getCurrentConcurrentExecutionCount().     }     return 0. }
false;public;0;8;;@ManagedAttribute public long getHystrixTotalRequests() {     HystrixCommandMetrics metrics = HystrixCommandMetrics.getInstance(commandKey).     if (metrics != null) {         return metrics.getHealthCounts().getTotalRequests().     }     return 0. }
false;public;0;8;;@ManagedAttribute public long getHystrixErrorCount() {     HystrixCommandMetrics metrics = HystrixCommandMetrics.getInstance(commandKey).     if (metrics != null) {         return metrics.getHealthCounts().getErrorCount().     }     return 0. }
false;public;0;8;;@ManagedAttribute public int getHystrixErrorPercentage() {     HystrixCommandMetrics metrics = HystrixCommandMetrics.getInstance(commandKey).     if (metrics != null) {         return metrics.getHealthCounts().getErrorPercentage().     }     return 0. }
false;public;0;8;;@ManagedAttribute public boolean isCircuitBreakerOpen() {     HystrixCircuitBreaker cb = HystrixCircuitBreaker.Factory.getInstance(commandKey).     if (cb != null) {         return cb.isOpen().     }     return false. }
false;public;0;4;;@Override public String getId() {     return id. }
false;public;1;4;;@Override public void setId(String id) {     this.id = id. }
false;public;0;4;;@Override public String getTraceLabel() {     return "hystrix". }
false;public;0;12;;@Override public List<Processor> next() {     if (!hasNext()) {         return null.     }     List<Processor> answer = new ArrayList<>().     answer.add(processor).     if (fallback != null) {         answer.add(fallback).     }     return answer. }
false;public;0;4;;@Override public boolean hasNext() {     return true. }
false;public;2;24;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     // run this as if we run inside try .. catch so there is no regular Camel error handler     exchange.setProperty(Exchange.TRY_ROUTE_BLOCK, true).     try {         HystrixProcessorCommandFallbackViaNetwork fallbackCommand = null.         if (fallbackViaNetwork) {             fallbackCommand = new HystrixProcessorCommandFallbackViaNetwork(fallbackSetter, exchange, fallback).         }         HystrixProcessorCommand command = new HystrixProcessorCommand(setter, exchange, processor, fallback, fallbackCommand).         command.execute().         // enrich exchange with details from hystrix about the command execution         commandResponse(exchange, command).     } catch (Throwable e) {         exchange.setException(e).     }     exchange.removeProperty(Exchange.TRY_ROUTE_BLOCK).     callback.done(true).     return true. }
false;private;2;7;;private void commandResponse(Exchange exchange, HystrixCommand command) {     exchange.setProperty(HystrixConstants.HYSTRIX_RESPONSE_SUCCESSFUL_EXECUTION, command.isSuccessfulExecution()).     exchange.setProperty(HystrixConstants.HYSTRIX_RESPONSE_FROM_FALLBACK, command.isResponseFromFallback()).     exchange.setProperty(HystrixConstants.HYSTRIX_RESPONSE_SHORT_CIRCUITED, command.isResponseShortCircuited()).     exchange.setProperty(HystrixConstants.HYSTRIX_RESPONSE_TIMED_OUT, command.isResponseTimedOut()).     exchange.setProperty(HystrixConstants.HYSTRIX_RESPONSE_REJECTED, command.isResponseRejected()). }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
