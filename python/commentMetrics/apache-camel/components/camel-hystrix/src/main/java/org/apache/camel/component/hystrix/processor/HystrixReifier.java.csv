commented;modifiers;parameterAmount;loc;comment;code
false;public;1;68;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     // create the regular and fallback processors     Processor processor = createChildProcessor(routeContext, true).     Processor fallback = null.     if (definition.getOnFallback() != null) {         fallback = ProcessorReifier.reifier(definition.getOnFallback()).createProcessor(routeContext).     }     final HystrixConfigurationDefinition config = buildHystrixConfiguration(routeContext.getCamelContext()).     final String id = definition.idOrCreate(routeContext.getCamelContext().getNodeIdFactory()).     // group and thread pool keys to use they can be configured on configRef and config, so look there first, and if none then use default     String groupKey = config.getGroupKey().     String threadPoolKey = config.getThreadPoolKey().     if (groupKey == null) {         groupKey = HystrixConfigurationDefinition.DEFAULT_GROUP_KEY.     }     if (threadPoolKey == null) {         // by default use the thread pool from the group         threadPoolKey = groupKey.     }     // use the node id as the command key     HystrixCommandKey hcCommandKey = HystrixCommandKey.Factory.asKey(id).     HystrixCommandKey hcFallbackCommandKey = HystrixCommandKey.Factory.asKey(id + "-fallback").     // use the configured group key     HystrixCommandGroupKey hcGroupKey = HystrixCommandGroupKey.Factory.asKey(groupKey).     HystrixThreadPoolKey tpKey = HystrixThreadPoolKey.Factory.asKey(threadPoolKey).     // create setter using the default options     HystrixCommand.Setter setter = HystrixCommand.Setter.withGroupKey(hcGroupKey).andCommandKey(hcCommandKey).andThreadPoolKey(tpKey).     HystrixCommandProperties.Setter commandSetter = HystrixCommandProperties.Setter().     setter.andCommandPropertiesDefaults(commandSetter).     HystrixThreadPoolProperties.Setter threadPoolSetter = HystrixThreadPoolProperties.Setter().     setter.andThreadPoolPropertiesDefaults(threadPoolSetter).     configureHystrix(commandSetter, threadPoolSetter, config).     // create setter for fallback via network     HystrixCommand.Setter fallbackSetter = null.     boolean fallbackViaNetwork = definition.getOnFallback() != null && definition.getOnFallback().isFallbackViaNetwork().     if (fallbackViaNetwork) {         // use a different thread pool that is for fallback (should never use the same thread pool as the regular command)         HystrixThreadPoolKey tpFallbackKey = HystrixThreadPoolKey.Factory.asKey(threadPoolKey + "-fallback").         fallbackSetter = HystrixCommand.Setter.withGroupKey(hcGroupKey).andCommandKey(hcFallbackCommandKey).andThreadPoolKey(tpFallbackKey).         HystrixCommandProperties.Setter commandFallbackSetter = HystrixCommandProperties.Setter().         fallbackSetter.andCommandPropertiesDefaults(commandFallbackSetter).         HystrixThreadPoolProperties.Setter fallbackThreadPoolSetter = HystrixThreadPoolProperties.Setter().         fallbackSetter.andThreadPoolPropertiesDefaults(fallbackThreadPoolSetter).         // at first configure any shared options         configureHystrix(commandFallbackSetter, fallbackThreadPoolSetter, config).     }     return new HystrixProcessor(hcGroupKey, hcCommandKey, hcFallbackCommandKey, setter, fallbackSetter, processor, fallback, fallbackViaNetwork). }
false;private;3;90;;private void configureHystrix(HystrixCommandProperties.Setter command, HystrixThreadPoolProperties.Setter threadPool, HystrixConfigurationDefinition config) {     // command     if (config.getCircuitBreakerEnabled() != null) {         command.withCircuitBreakerEnabled(config.getCircuitBreakerEnabled()).     }     if (config.getCircuitBreakerErrorThresholdPercentage() != null) {         command.withCircuitBreakerErrorThresholdPercentage(config.getCircuitBreakerErrorThresholdPercentage()).     }     if (config.getCircuitBreakerForceClosed() != null) {         command.withCircuitBreakerForceClosed(config.getCircuitBreakerForceClosed()).     }     if (config.getCircuitBreakerForceOpen() != null) {         command.withCircuitBreakerForceOpen(config.getCircuitBreakerForceOpen()).     }     if (config.getCircuitBreakerRequestVolumeThreshold() != null) {         command.withCircuitBreakerRequestVolumeThreshold(config.getCircuitBreakerRequestVolumeThreshold()).     }     if (config.getCircuitBreakerSleepWindowInMilliseconds() != null) {         command.withCircuitBreakerSleepWindowInMilliseconds(config.getCircuitBreakerSleepWindowInMilliseconds()).     }     if (config.getExecutionIsolationSemaphoreMaxConcurrentRequests() != null) {         command.withExecutionIsolationSemaphoreMaxConcurrentRequests(config.getExecutionIsolationSemaphoreMaxConcurrentRequests()).     }     if (config.getExecutionIsolationStrategy() != null) {         command.withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.valueOf(config.getExecutionIsolationStrategy())).     }     if (config.getExecutionIsolationThreadInterruptOnTimeout() != null) {         command.withExecutionIsolationThreadInterruptOnTimeout(config.getExecutionIsolationThreadInterruptOnTimeout()).     }     if (config.getExecutionTimeoutInMilliseconds() != null) {         command.withExecutionTimeoutInMilliseconds(config.getExecutionTimeoutInMilliseconds()).     }     if (config.getExecutionTimeoutEnabled() != null) {         command.withExecutionTimeoutEnabled(config.getExecutionTimeoutEnabled()).     }     if (config.getFallbackIsolationSemaphoreMaxConcurrentRequests() != null) {         command.withFallbackIsolationSemaphoreMaxConcurrentRequests(config.getFallbackIsolationSemaphoreMaxConcurrentRequests()).     }     if (config.getFallbackEnabled() != null) {         command.withFallbackEnabled(config.getFallbackEnabled()).     }     if (config.getMetricsHealthSnapshotIntervalInMilliseconds() != null) {         command.withMetricsHealthSnapshotIntervalInMilliseconds(config.getMetricsHealthSnapshotIntervalInMilliseconds()).     }     if (config.getMetricsRollingPercentileBucketSize() != null) {         command.withMetricsRollingPercentileBucketSize(config.getMetricsRollingPercentileBucketSize()).     }     if (config.getMetricsRollingPercentileEnabled() != null) {         command.withMetricsRollingPercentileEnabled(config.getMetricsRollingPercentileEnabled()).     }     if (config.getMetricsRollingPercentileWindowInMilliseconds() != null) {         command.withMetricsRollingPercentileWindowInMilliseconds(config.getMetricsRollingPercentileWindowInMilliseconds()).     }     if (config.getMetricsRollingPercentileWindowBuckets() != null) {         command.withMetricsRollingPercentileWindowBuckets(config.getMetricsRollingPercentileWindowBuckets()).     }     if (config.getMetricsRollingStatisticalWindowInMilliseconds() != null) {         command.withMetricsRollingStatisticalWindowInMilliseconds(config.getMetricsRollingStatisticalWindowInMilliseconds()).     }     if (config.getMetricsRollingStatisticalWindowBuckets() != null) {         command.withMetricsRollingStatisticalWindowBuckets(config.getMetricsRollingStatisticalWindowBuckets()).     }     if (config.getRequestLogEnabled() != null) {         command.withRequestLogEnabled(config.getRequestLogEnabled()).     }     if (config.getCorePoolSize() != null) {         threadPool.withCoreSize(config.getCorePoolSize()).     }     if (config.getMaximumSize() != null) {         threadPool.withMaximumSize(config.getMaximumSize()).     }     if (config.getKeepAliveTime() != null) {         threadPool.withKeepAliveTimeMinutes(config.getKeepAliveTime()).     }     if (config.getMaxQueueSize() != null) {         threadPool.withMaxQueueSize(config.getMaxQueueSize()).     }     if (config.getQueueSizeRejectionThreshold() != null) {         threadPool.withQueueSizeRejectionThreshold(config.getQueueSizeRejectionThreshold()).     }     if (config.getThreadPoolRollingNumberStatisticalWindowInMilliseconds() != null) {         threadPool.withMetricsRollingStatisticalWindowInMilliseconds(config.getThreadPoolRollingNumberStatisticalWindowInMilliseconds()).     }     if (config.getThreadPoolRollingNumberStatisticalWindowBuckets() != null) {         threadPool.withMetricsRollingStatisticalWindowBuckets(config.getThreadPoolRollingNumberStatisticalWindowBuckets()).     }     if (config.getAllowMaximumSizeToDivergeFromCoreSize() != null) {         threadPool.withAllowMaximumSizeToDivergeFromCoreSize(config.getAllowMaximumSizeToDivergeFromCoreSize()).     } }
false;;1;34;;// ******************************* // Helpers // ******************************* HystrixConfigurationDefinition buildHystrixConfiguration(CamelContext camelContext) throws Exception {     Map<String, Object> properties = new HashMap<>().     // Extract properties from default configuration, the one configured on     // camel context takes the precedence over those in the registry     loadProperties(properties, Suppliers.firstNotNull(() -> camelContext.adapt(ModelCamelContext.class).getHystrixConfiguration(null), () -> lookup(camelContext, HystrixConstants.DEFAULT_HYSTRIX_CONFIGURATION_ID, HystrixConfigurationDefinition.class))).     // on camel context takes the precedence over those in the registry     if (definition.getHystrixConfigurationRef() != null) {         final String ref = definition.getHystrixConfigurationRef().         loadProperties(properties, Suppliers.firstNotNull(() -> camelContext.adapt(ModelCamelContext.class).getHystrixConfiguration(ref), () -> mandatoryLookup(camelContext, ref, HystrixConfigurationDefinition.class))).     }     // Extract properties from local configuration     loadProperties(properties, Optional.ofNullable(definition.getHystrixConfiguration())).     // Extract properties from definition     IntrospectionSupport.getProperties(definition, properties, null, false).     HystrixConfigurationDefinition config = new HystrixConfigurationDefinition().     // Apply properties to a new configuration     IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), config, properties).     return config. }
false;private;2;3;;private void loadProperties(Map<String, Object> properties, Optional<?> optional) {     optional.ifPresent(bean -> IntrospectionSupport.getProperties(bean, properties, null, false)). }
