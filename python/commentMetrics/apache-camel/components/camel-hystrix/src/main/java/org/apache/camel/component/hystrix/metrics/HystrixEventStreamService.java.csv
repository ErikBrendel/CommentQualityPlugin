commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getDelay() {     return delay. }
true;public;1;3;/**  * Sets the delay in millis how often the poller runs  */ ;/**  * Sets the delay in millis how often the poller runs  */ public void setDelay(int delay) {     this.delay = delay. }
false;public;0;3;;public int getQueueSize() {     return queueSize. }
true;public;1;3;/**  * Sets the queue size for how many metrics collected are stored in-memory in a backlog  */ ;/**  * Sets the queue size for how many metrics collected are stored in-memory in a backlog  */ public void setQueueSize(int queueSize) {     this.queueSize = queueSize. }
true;public;0;7;/**  * Return a stream of the JSon metrics.  */ ;/**  * Return a stream of the JSon metrics.  */ public Stream<String> streamMetrics() {     if (queue != null) {         return queue.stream().     } else {         return null.     } }
false;public;0;8;;@ManagedOperation(description = "Returns the oldest metrics as JSon format") public String oldestMetricsAsJSon() {     if (queue != null) {         return queue.peek().     } else {         return null.     } }
false;public;0;4;;@ManagedOperation(description = "Starts the metrics poller") public void startPoller() {     poller.start(). }
false;public;0;4;;@ManagedOperation(description = "Pauses the metrics poller") public void pausePoller() {     poller.pause(). }
false;public;0;4;;@ManagedAttribute(description = "Is the metrics poller running") public boolean isPollerRunning() {     return poller.isRunning(). }
false;public;0;4;;@ManagedAttribute(description = "The delay in millis the poller is running") public int getPollerDelay() {     return delay. }
false;protected;0;7;;@Override protected void doStart() throws Exception {     log.info("Starting HystrixMetricsPoller with delay: {} and queue size: {}", delay, queueSize).     queue = new LinkedBlockingQueue<>(queueSize).     poller = new HystrixMetricsPoller(this, delay).     poller.start(). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (poller != null) {         log.info("Shutting down HystrixMetricsPoller").         poller.shutdown().     } }
false;public;1;15;;@Override public void handleJsonMetric(String json) {     log.debug("handleJsonMetric: {}", json).     // ensure there is space on the queue by polling until at least single slot is free     int drain = queue.size() - queueSize + 1.     if (drain > 0) {         log.debug("Draining queue to make room: {}", drain).         for (int i = 0. i < drain. i++) {             queue.poll().         }     }     queue.add(json). }
