commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;52;;@Test public void testHystrix() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // look inside jmx     // get the stats for the route     MBeanServer mbeanServer = getMBeanServer().     // context name     String name = context.getManagementName().     // get the object name for the delayer     ObjectName on = ObjectName.getInstance("org.apache.camel:context=" + name + ",type=processors,name=\"myHystrix\"").     // should be on start     String routeId = (String) mbeanServer.getAttribute(on, "RouteId").     assertEquals("start", routeId).     // should be id of the node     String commandKey = (String) mbeanServer.getAttribute(on, "HystrixCommandKey").     assertEquals("myHystrix", commandKey).     String groupKey = (String) mbeanServer.getAttribute(on, "HystrixGroupKey").     assertEquals("CamelHystrix", groupKey).     // these metrics need a little time before updating     Thread.sleep(1000).     Long totalRequests = (Long) mbeanServer.getAttribute(on, "HystrixTotalRequests").     assertEquals(1, totalRequests.longValue()).     Long errorCount = (Long) mbeanServer.getAttribute(on, "HystrixErrorCount").     assertEquals(0, errorCount.longValue()).     Boolean open = (Boolean) mbeanServer.getAttribute(on, "CircuitBreakerOpen").     assertEquals(false, open.booleanValue()).     // let it gather for a while     Thread.sleep(1000).     String latest = stream.oldestMetricsAsJSon().     log.info("Oldest json stream: {}", latest).     Stream<String> jsons = stream.streamMetrics().     jsons.forEach(s -> {         log.info("JSon: {}", s).     }). }
false;public;0;18;;@Override public void configure() throws Exception {     // add the stream     stream.setQueueSize(10).     stream.setDelay(100).     context.addService(stream).     from("direct:start").routeId("start").hystrix().id("myHystrix").to("direct:foo").onFallback().transform().constant("Fallback message").end().to("mock:result").     from("direct:foo").transform().constant("Bye World"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // add the stream             stream.setQueueSize(10).             stream.setDelay(100).             context.addService(stream).             from("direct:start").routeId("start").hystrix().id("myHystrix").to("direct:foo").onFallback().transform().constant("Fallback message").end().to("mock:result").             from("direct:foo").transform().constant("Bye World").         }     }. }
