commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testHystrix() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedPropertyReceived(HystrixConstants.HYSTRIX_RESPONSE_SUCCESSFUL_EXECUTION, true).     getMockEndpoint("mock:result").expectedPropertyReceived(HystrixConstants.HYSTRIX_RESPONSE_FROM_FALLBACK, false).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").hystrix().to("direct:foo").to("log:foo").onFallback().transform().constant("Fallback message").end().to("log:result").to("mock:result").     from("direct:foo").transform().constant("Bye World"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").hystrix().to("direct:foo").to("log:foo").onFallback().transform().constant("Fallback message").end().to("log:result").to("mock:result").             from("direct:foo").transform().constant("Bye World").         }     }. }
