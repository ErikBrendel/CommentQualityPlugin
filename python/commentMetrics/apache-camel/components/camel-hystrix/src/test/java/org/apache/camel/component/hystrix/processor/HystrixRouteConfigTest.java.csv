commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testHystrix() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:foo").hystrix().hystrixConfiguration().groupKey("test1").metricsHealthSnapshotIntervalInMilliseconds(99999).end().groupKey("test2").to("log:hello").end(). }
false;public;0;27;;@Test public void testGroupKeyAndThreadPoolKeyConfigFlagsDoNotScrapHystrixConfiguration() throws Exception {     // dummy route     RouteBuilder rb = new RouteBuilder(context) {          @Override         public void configure() throws Exception {             from("direct:foo").hystrix().hystrixConfiguration().groupKey("test1").metricsHealthSnapshotIntervalInMilliseconds(99999).end().groupKey("test2").to("log:hello").end().         }     }.     rb.configure().     RouteDefinition route = rb.getRouteCollection().getRoutes().get(0).     assertEquals(HystrixDefinition.class, route.getOutputs().get(0).getClass()).     HystrixConfigurationDefinition config = ((HystrixDefinition) route.getOutputs().get(0)).getHystrixConfiguration().     assertEquals("test2", config.getGroupKey()).     assertEquals(99999, config.getMetricsHealthSnapshotIntervalInMilliseconds().intValue()). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").hystrix().hystrixConfiguration().groupKey("myCamelApp").requestLogEnabled(false).corePoolSize(5).end().to("direct:foo").onFallback().transform().constant("Fallback message").end().to("mock:result").     from("direct:foo").transform().constant("Bye World"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").hystrix().hystrixConfiguration().groupKey("myCamelApp").requestLogEnabled(false).corePoolSize(5).end().to("direct:foo").onFallback().transform().constant("Fallback message").end().to("mock:result").             from("direct:foo").transform().constant("Bye World").         }     }. }
