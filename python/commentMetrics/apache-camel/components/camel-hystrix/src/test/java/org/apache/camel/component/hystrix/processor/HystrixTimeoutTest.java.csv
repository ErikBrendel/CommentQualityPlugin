commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testFast() throws Exception {     // this calls the fast route and therefore we get a response     Object out = template.requestBody("direct:start", "fast").     assertEquals("Fast response", out). }
false;public;0;11;;@Test public void testSlow() throws Exception {     // this calls the slow route and therefore causes a timeout which triggers an exception     try {         template.requestBody("direct:start", "slow").         fail("Should fail due timeout").     } catch (Exception e) {         // expected a timeout         assertIsInstanceOf(TimeoutException.class, e.getCause().getCause()).     } }
false;public;0;14;;@Test public void testSlowLoop() throws Exception {     // this calls the slow route and therefore causes a timeout which triggers an exception     for (int i = 0. i < 10. i++) {         try {             log.info(">>> test run " + i + " <<<").             template.requestBody("direct:start", "slow").             fail("Should fail due timeout").         } catch (Exception e) {             // expected a timeout             assertIsInstanceOf(TimeoutException.class, e.getCause().getCause()).         }     } }
false;public;0;26;;@Override public void configure() throws Exception {     from("direct:start").hystrix().hystrixConfiguration().executionTimeoutInMilliseconds(2000).end().log("Hystrix processing start: ${threadName}").toD("direct:${body}").log("Hystrix processing end: ${threadName}").end().log("After Hystrix ${body}").     from("direct:fast").log("Fast processing start: ${threadName}").delay(1000).transform().constant("Fast response").log("Fast processing end: ${threadName}").     from("direct:slow").log("Slow processing start: ${threadName}").delay(3000).transform().constant("Slow response").log("Slow processing end: ${threadName}"). }
false;protected;0;31;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").hystrix().hystrixConfiguration().executionTimeoutInMilliseconds(2000).end().log("Hystrix processing start: ${threadName}").toD("direct:${body}").log("Hystrix processing end: ${threadName}").end().log("After Hystrix ${body}").             from("direct:fast").log("Fast processing start: ${threadName}").delay(1000).transform().constant("Fast response").log("Fast processing end: ${threadName}").             from("direct:slow").log("Slow processing start: ${threadName}").delay(3000).transform().constant("Slow response").log("Slow processing end: ${threadName}").         }     }. }
