commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected void waitForMessages() throws InterruptedException {     waitForMessages(mMockEndpoint). }
false;protected;1;4;;protected void waitForMessages(MockEndpoint aMockEndpoint) throws InterruptedException {     mMockEndpoint.await(10, TimeUnit.SECONDS).     assertEquals("Expected number of messages didn't arrive before timeout", aMockEndpoint.getExpectedCount(), aMockEndpoint.getReceivedCounter()). }
false;protected;0;3;;protected MockEndpoint getMockEndpoint() {     return mMockEndpoint. }
false;protected;1;3;;protected void setMockEndpoint(MockEndpoint aMockEndpoint) {     mMockEndpoint = aMockEndpoint. }
true;protected;1;4;/**  * Assert that we've received the message and resets the mock endpoint  */ ;/**  * Assert that we've received the message and resets the mock endpoint  */ protected void assertMessageReceived(File aExpectedFile) throws Exception {     Source expectedDoc = XmlFixture.toSource(aExpectedFile).     assertMessageReceived(expectedDoc). }
false;protected;1;4;;protected void assertMessageReceived(Source aExpectedDoc) throws Exception {     Source actual = XmlFixture.toSource(getBody(0, String.class)).     assertMessageReceived(aExpectedDoc, actual). }
false;protected;2;15;;protected void assertMessageReceived(Source aExpectedDoc, Source aActual) throws Exception {     Source noTime = XmlFixture.stripTimestamp(aActual).     Source noUUID = XmlFixture.stripUUID(noTime).     XmlFixture.assertXMLIgnorePrefix("failed to match", aExpectedDoc, noUUID).     // assert that we have a timestamp and datetime     // can't rely on the datetime being the same due to timezone differences     // instead, we'll assert that the values exist.     JAXPXPathEngine xp = new JAXPXPathEngine().     xp.setNamespaceContext(Collections.singletonMap("jmx", "urn:org.apache.camel.component:jmx")).     assertEquals("1", xp.evaluate("count(//jmx:timestamp)", aActual)).     assertEquals("1", xp.evaluate("count(//jmx:dateTime)", aActual)).     resetMockEndpoint(). }
true;protected;0;3;/**  * Resets the mock endpoint so we can run another test. This will clear out any  * previously received messages.  */ ;/**  * Resets the mock endpoint so we can run another test. This will clear out any  * previously received messages.  */ protected void resetMockEndpoint() {     getMockEndpoint().reset(). }
true;protected;2;6;/**  * Gets the body of the received message at the specified index  */ ;/**  * Gets the body of the received message at the specified index  */ protected <T> T getBody(int aIndex, Class<T> aType) {     Message in = getMessage(aIndex).     T body = in.getBody(aType).     assertNotNull(body).     return body. }
true;protected;1;5;/**  * Gets the received message at the specified index  */ ;/**  * Gets the received message at the specified index  */ protected Message getMessage(int aIndex) {     Exchange exchange = getExchange(aIndex).     Message in = exchange.getIn().     return in. }
true;protected;1;5;/**  * Gets the received exchange at the specified index  */ ;/**  * Gets the received exchange at the specified index  */ protected Exchange getExchange(int aIndex) {     List<Exchange> exchanges = mMockEndpoint.getReceivedExchanges().     Exchange exchange = exchanges.get(aIndex).     return exchange. }
