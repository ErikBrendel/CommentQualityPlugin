commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getStringValue() {     return mStringValue. }
false;public;1;8;;public void setStringValue(String aStringValue) {     String oldValue = getStringValue().     mStringValue = aStringValue.     AttributeChangeNotification acn = new AttributeChangeNotification(this, mSequence++, mTimestamp, "attribute changed", "stringValue", "string", oldValue, mStringValue).     sendNotification(acn). }
false;public;0;3;;public Integer getMonitorNumber() {     return mMonitorNumber. }
false;public;1;3;;public void setMonitorNumber(Integer aNumber) {     mMonitorNumber = aNumber. }
false;public;0;3;;public Long getLongNumber() {     return mLongNumber. }
false;public;1;3;;public void setLongNumber(Long aNumber) {     mLongNumber = aNumber. }
false;public;0;3;;public int getSequence() {     return mSequence. }
false;public;1;3;;public void setSequence(int aSequence) {     mSequence = aSequence. }
false;public;0;3;;public long getTimestamp() {     return mTimestamp. }
false;public;1;3;;public void setTimestamp(long aTimestamp) {     mTimestamp = aTimestamp. }
false;public;1;5;;public void userData(String aUserData) {     Notification n = new Notification("userData", this, mSequence++, mTimestamp, "Here's my user data").     n.setUserData(aUserData).     sendNotification(n). }
false;public;0;4;;public void touch() {     Notification n = new Notification("touched", this, mSequence++, mTimestamp, "I was touched").     sendNotification(n). }
false;public;0;6;;public void triggerConnectionNotification() {     JMXConnectionNotification n = new JMXConnectionNotification("connection", this, "conn-123", mSequence++, "connection notification", null).     n.setTimeStamp(mTimestamp).     sendNotification(n). }
false;public;0;5;;public void triggerMBeanServerNotification() throws Exception {     MBeanServerNotification n = new MBeanServerNotification("mbeanserver", this, mSequence++, new ObjectName("TestDomain", "name", "foo")).     n.setTimeStamp(mTimestamp).     sendNotification(n). }
false;public;0;14;;public void triggerRelationNotification() throws Exception {     List<ObjectName> list = new ArrayList<>().     for (int i = 1. i <= 3. i++) {         list.add(new ObjectName("TestDomain", "name", "mbean-" + i)).     }     RelationNotification n = new RelationNotification(RelationNotification.RELATION_BASIC_CREATION, new ObjectName("TestDomain", "name", "source"), mSequence++, mTimestamp, "relation message", "relation-id", "relation.type", new ObjectName("TestDomain", "name", "foo"), list).     sendNotification(n). }
false;public;0;4;;public void triggerTimerNotification() {     TimerNotification n = new TimerNotification("timer.notification", this, mSequence++, mTimestamp, "timer-notification", 100).     sendNotification(n). }
