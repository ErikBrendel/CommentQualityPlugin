commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     initServer().     initBean().     initRegistry().     initContext().     startContext(). }
false;protected;0;3;;protected void startContext() throws Exception {     mContext.start(). }
false;public;0;7;;@After public void tearDown() throws Exception {     if (!mContext.isStopped()) {         mContext.stop().     }     unregisterBean(makeObjectName("simpleBean")). }
false;protected;0;3;;protected void initServer() throws Exception {     server = ManagementFactory.getPlatformMBeanServer(). }
true;protected;2;3;/**  * Registers the bean on the platform mbean server  */ ;/**  * Registers the bean on the platform mbean server  */ protected void registerBean(Object aBean, ObjectName aObjectName) throws Exception {     server.registerMBean(aBean, aObjectName). }
true;protected;1;3;/**  * Unregisters the bean  */ ;/**  * Unregisters the bean  */ protected void unregisterBean(ObjectName aObjectName) throws MBeanRegistrationException, InstanceNotFoundException {     server.unregisterMBean(aObjectName). }
true;protected;1;10;/**  * Gets the mxbean for our remote object using the specified name  */ ;/**  * Gets the mxbean for our remote object using the specified name  */ protected ISimpleMXBean getMXBean(ObjectName aObjectName) {     return MBeanServerInvocationHandler.newProxyInstance(server, aObjectName, ISimpleMXBean.class, false). // revert the above change to the below when we move to JDK 1.6 // ISimpleMXBean simpleBean = JMX.newMXBeanProxy(server, aObjectName, ISimpleMXBean.class). // return simpleBean. }
true;protected;0;3;/**  * Gets the mxbean for our remote object using the default name "simpleBean"  */ ;/**  * Gets the mxbean for our remote object using the default name "simpleBean"  */ protected ISimpleMXBean getSimpleMXBean() throws MalformedObjectNameException {     return getMXBean(makeObjectName("simpleBean")). }
true;protected;1;4;/**  * Makes an ObjectName for the given domain using our domain and the name attribute.  */ ;/**  * Makes an ObjectName for the given domain using our domain and the name attribute.  */ protected ObjectName makeObjectName(String aName) throws MalformedObjectNameException {     ObjectName objectName = new ObjectName(DOMAIN, NAME, aName).     return objectName. }
true;protected;0;3;/**  * Creates the bean and registers it within the mbean server.  * Note that we're using a fixed timestamp here to simplify the assertions in the tests  */ ;/**  * Creates the bean and registers it within the mbean server.  * Note that we're using a fixed timestamp here to simplify the assertions in the tests  */ protected void initBean() throws Exception {     registerBean(createSimpleBean(), makeObjectName("simpleBean")). }
false;protected;0;8;;protected SimpleBean createSimpleBean() throws ParseException {     SimpleBean simpleBean = new SimpleBean().     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-dd-MM'T'HH:mm:ss").     Date date = sdf.parse("2010-07-01T10:30:15").     simpleBean.setTimestamp(date.getTime()).     return simpleBean. }
false;public;0;4;;@Override public void configure() throws Exception {     from(buildFromURI().toString()).to(mock). }
true;protected;0;12;/**  * Initializes the camel context by creating a simple route from our mbean  * to the mock endpoint.  */ ;/**  * Initializes the camel context by creating a simple route from our mbean  * to the mock endpoint.  */ protected void initContext() throws Exception {     final MockEndpoint mock = mContext.getEndpoint("mock:sink", MockEndpoint.class).     mock.setExpectedMessageCount(1).     mMockEndpoint = new MockEndpointFixture(mock).     mContext.setRegistry(getRegistry()).     mContext.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(buildFromURI().toString()).to(mock).         }     }). }
true;protected;0;5;/**  * Override this to control the properties that make up the endpoint  */ ;/**  * Override this to control the properties that make up the endpoint  */ protected JMXUriBuilder buildFromURI() {     JMXUriBuilder uri = new JMXUriBuilder().withObjectDomain(DOMAIN).withObjectName("simpleBean").     return uri. }
true;protected;0;2;/**  * Override this to put stuff into the registry so it's available to be  * referenced. (i.e. NotificationFilter or Hashtable<String,String> for ObjectProperties  */ ;/**  * Override this to put stuff into the registry so it's available to be  * referenced. (i.e. NotificationFilter or Hashtable<String,String> for ObjectProperties  */ protected void initRegistry() { }
false;protected;0;3;;protected DefaultCamelContext getContext() {     return mContext. }
false;protected;1;3;;protected void setContext(DefaultCamelContext aContext) {     mContext = aContext. }
false;protected;0;3;;protected SimpleRegistry getRegistry() {     return mRegistry. }
false;protected;1;3;;protected void setRegistry(SimpleRegistry aRegistry) {     mRegistry = aRegistry. }
false;protected;0;3;;protected MockEndpointFixture getMockFixture() {     return mMockEndpoint. }
