commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;11;;@Test public void testJmxConsumer() throws Exception {     getMockEndpoint("mock:result").expectedMinimumMessageCount(1).     getMockEndpoint("mock:result").message(0).body().contains("<newValue>true</newValue>").     // change the attribute so JMX triggers     ManagedRouteMBean mr = context.getExtension(ManagedCamelContext.class).getManagedRoute("foo").     mr.setTracing(true).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     String id = getContext().getName().     fromF("jmx:platform?objectDomain=org.apache.camel&key.context=%s&key.type=routes&key.name=\"foo\"", id).routeId("jmxRoute").to("log:jmx").to("mock:result").     from("direct:foo").routeId("foo").to("log:foo", "mock:foo"). }
false;protected;0;15;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String id = getContext().getName().             fromF("jmx:platform?objectDomain=org.apache.camel&key.context=%s&key.type=routes&key.name=\"foo\"", id).routeId("jmxRoute").to("log:jmx").to("mock:result").             from("direct:foo").routeId("foo").to("log:foo", "mock:foo").         }     }. }
