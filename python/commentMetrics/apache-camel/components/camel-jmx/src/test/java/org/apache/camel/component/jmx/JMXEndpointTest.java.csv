commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     context = new DefaultCamelContext(). }
false;public;0;12;;@Test public void setObjectNameThrowsWhenObjectPropertiesIsSet() throws Exception {     JMXEndpoint ep = new JMXEndpoint("urn:ignored", new JMXComponent()).     ep.setObjectProperties(new Hashtable<String, String>()).     try {         // should fault since objectName is mutex with objectProperties         ep.setObjectName("foo").         fail("expected exception").     } catch (IllegalArgumentException e) {     // expected     } }
false;public;0;5;;@Test public void defaultsToXml() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName", JMXEndpoint.class).     assertTrue(ep.isXML()). }
false;public;0;6;;@Test public void formatRaw() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&format=raw", JMXEndpoint.class).     assertFalse(ep.isXML()).     assertEquals("raw", ep.getFormat()). }
false;public;0;7;;@Test public void getJMXObjectName() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName", JMXEndpoint.class).     ObjectName on = ep.getJMXObjectName().     assertNotNull(on).     assertEquals("FooDomain:name=theObjectName", on.toString()). }
false;public;0;7;;@Test public void getJMXObjectNameWithProps() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&key.name=theObjectName", JMXEndpoint.class).     ObjectName on = ep.getJMXObjectName().     assertNotNull(on).     assertEquals("FooDomain:name=theObjectName", on.toString()). }
false;public;0;7;;@Test public void getJMXObjectNameCached() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&key.name=theObjectName", JMXEndpoint.class).     ObjectName on = ep.getJMXObjectName().     assertNotNull(on).     assertSame(on, ep.getJMXObjectName()). }
false;public;0;6;;@Test public void platformServer() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&key.name=theObjectName", JMXEndpoint.class).     assertTrue(ep.isPlatformServer()).     assertEquals("platform", ep.getServerURL()). }
false;public;0;10;;@Test public void remoteServer() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?objectDomain=FooDomain&key.name=theObjectName", JMXEndpoint.class).     assertFalse(ep.isPlatformServer()).     assertEquals("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi", ep.getServerURL()).     ep = context.getEndpoint("jmx://service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?objectDomain=FooDomain&key.name=theObjectName", JMXEndpoint.class).     assertFalse(ep.isPlatformServer()).     assertEquals("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi", ep.getServerURL()). }
false;public;0;9;;@Test public void noProducer() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&key.name=theObjectName", JMXEndpoint.class).     try {         ep.createProducer().         fail("producer pattern is not supported").     } catch (UnsupportedOperationException e) {     } }
false;public;0;6;;@Test public void credentials() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&key.name=theObjectName&user=user1&password=1234", JMXEndpoint.class).     assertEquals("user1", ep.getUser()).     assertEquals("1234", ep.getPassword()). }
false;public;0;10;;@Test public void noObservedAttribute() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&monitorType=string", JMXEndpoint.class).     try {         ep.createConsumer(null).         fail("expected exception").     } catch (IllegalArgumentException e) {         assertEquals(JMXEndpoint.ERR_OBSERVED_ATTRIBUTE, e.getMessage()).     } }
false;public;0;10;;@Test public void noStringToCompare() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&monitorType=string&observedAttribute=foo", JMXEndpoint.class).     try {         ep.createConsumer(null).         fail("expected exception").     } catch (IllegalArgumentException e) {         assertEquals(JMXEndpoint.ERR_STRING_TO_COMPARE, e.getMessage()).     } }
false;public;0;10;;@Test public void noNotifyDifferOrNotifyMatch() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&monitorType=string&observedAttribute=foo&stringToCompare=foo", JMXEndpoint.class).     try {         ep.createConsumer(null).         fail("expected exception").     } catch (IllegalArgumentException e) {         assertEquals(JMXEndpoint.ERR_STRING_NOTIFY, e.getMessage()).     } }
false;public;0;10;;@Test public void noNotifyHighOrNotifyLow() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&monitorType=gauge&observedAttribute=foo", JMXEndpoint.class).     try {         ep.createConsumer(null).         fail("expected exception").     } catch (IllegalArgumentException e) {         assertEquals(JMXEndpoint.ERR_GAUGE_NOTIFY, e.getMessage()).     } }
false;public;0;11;;@Test public void noThresholdHigh() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&monitorType=gauge&observedAttribute=foo&thresholdLow=100&notifyHigh=true", JMXEndpoint.class).     try {         ep.createConsumer(null).         fail("expected exception").     } catch (IllegalArgumentException e) {         assertEquals(JMXEndpoint.ERR_THRESHOLD_HIGH, e.getMessage()).     } }
false;public;0;11;;@Test public void noThresholdLow() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:platform?objectDomain=FooDomain&objectName=theObjectName&monitorType=gauge&observedAttribute=foo&thresholdHigh=100&notifyHigh=true", JMXEndpoint.class).     try {         ep.createConsumer(null).         fail("expected exception").     } catch (IllegalArgumentException e) {         assertEquals(JMXEndpoint.ERR_THRESHOLD_LOW, e.getMessage()).     } }
false;public;0;10;;@Test public void remoteServerWithMonitor() throws Exception {     JMXEndpoint ep = context.getEndpoint("jmx:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?objectDomain=FooDomain&key.name=theObjectName&monitorType=gauge", JMXEndpoint.class).     try {         ep.createConsumer(null).         fail("expected exception").     } catch (IllegalArgumentException e) {         assertEquals(JMXEndpoint.ERR_PLATFORM_SERVER, e.getMessage()).     } }
