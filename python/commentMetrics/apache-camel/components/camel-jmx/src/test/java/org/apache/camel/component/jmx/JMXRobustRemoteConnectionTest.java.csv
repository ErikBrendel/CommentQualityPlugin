commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before @Override public void setUp() throws Exception {     port = AvailablePortFinder.getNextAvailable(39000).     url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:" + port + "/" + DOMAIN).     initContext().     startContext(). }
false;public;0;5;;@After public void tearDown() throws Exception {     super.tearDown().     connector.stop(). }
false;protected;0;11;;@Override protected void initServer() throws Exception {     if (registry == null) {         registry = LocateRegistry.createRegistry(port).     }     // create MBean server     server = MBeanServerFactory.createMBeanServer(DOMAIN).     // create JMXConnectorServer MBean     connector = JMXConnectorServerFactory.newJMXConnectorServer(url, Collections.<String, Object>emptyMap(), server).     connector.start(). }
false;protected;0;5;;@Override protected JMXUriBuilder buildFromURI() {     String uri = url.toString().     return super.buildFromURI().withServerName(uri).withTestConnectionOnStartup(false).withReconnectDelay(1).withReconnectOnConnectionFailure(true). }
false;public;0;36;;@Test public void testRobustConnection() throws Exception {     // the JMX service should not be started     try {         getSimpleMXBean().touch().         fail("The mxbean should not be available.").     } catch (Exception e) {         assertTrue(e instanceof java.lang.IllegalArgumentException).         assertTrue(e.getMessage().equals("Null connection")).     }     // start the server.  the JMX consumer should connect and start.  the mock should receive a notification     initServer().     initBean().     Thread.sleep(2000).     getSimpleMXBean().touch().     getMockFixture().waitForMessages().     getMockFixture().assertMessageReceived(new File("src/test/resources/consumer-test/touched.xml")).     // stop the server. the JMX consumer should lose connectivity and the mock will not receive notifications     connector.stop().     Thread.sleep(2000).     getMockFixture().resetMockEndpoint().     getMockFixture().getMockEndpoint().setExpectedMessageCount(1).     getSimpleMXBean().touch().     getMockFixture().getMockEndpoint().assertIsNotSatisfied().     // restart the server.  the JMX consumer should re-connect and the mock should receive a notification     initServer().     initBean().     Thread.sleep(2000).     getSimpleMXBean().touch().     getMockFixture().waitForMessages().     getMockFixture().assertMessageReceived(new File("src/test/resources/consumer-test/touched.xml")). }
