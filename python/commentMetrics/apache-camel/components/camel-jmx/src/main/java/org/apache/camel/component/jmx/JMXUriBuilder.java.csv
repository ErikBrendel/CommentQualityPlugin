commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public JMXUriBuilder withFormat(String aFormat) {     addProperty("format", aFormat).     return this. }
false;public;1;4;;public JMXUriBuilder withUser(String aFormat) {     addProperty("user", aFormat).     return this. }
false;public;1;4;;public JMXUriBuilder withPassword(String aFormat) {     addProperty("password", aFormat).     return this. }
false;public;1;4;;public JMXUriBuilder withObjectDomain(String aFormat) {     addProperty("objectDomain", aFormat).     return this. }
false;public;1;4;;public JMXUriBuilder withObjectName(String aFormat) {     addProperty("objectName", aFormat).     return this. }
false;public;1;4;;public JMXUriBuilder withNotificationFilter(String aFilter) {     addProperty("notificationFilter", aFilter).     return this. }
false;public;1;4;;public JMXUriBuilder withHandback(String aHandback) {     addProperty("handback", aHandback).     return this. }
false;public;1;4;;public JMXUriBuilder withMonitorType(String aMonitorType) {     addProperty("monitorType", aMonitorType).     return this. }
false;public;1;4;;public JMXUriBuilder withInitThreshold(int aInitThreshold) {     addProperty("initThreshold", String.valueOf(aInitThreshold)).     return this. }
false;public;1;4;;public JMXUriBuilder withOffset(int aOffset) {     addProperty("offset", String.valueOf(aOffset)).     return this. }
false;public;1;4;;public JMXUriBuilder withModulus(int aModulus) {     addProperty("modulus", String.valueOf(aModulus)).     return this. }
false;public;1;4;;public JMXUriBuilder withDifferenceMode(boolean aDifferenceMode) {     addProperty("differenceMode", String.valueOf(aDifferenceMode)).     return this. }
false;public;1;4;;public JMXUriBuilder withGranularityPeriod(long aPeriod) {     addProperty("granularityPeriod", String.valueOf(aPeriod)).     return this. }
false;public;1;4;;public JMXUriBuilder withObservedAttribute(String aObservedAttribute) {     addProperty("observedAttribute", aObservedAttribute).     return this. }
false;public;1;4;;public JMXUriBuilder withNotifyHigh(boolean aNotifyHigh) {     addProperty("notifyHigh", String.valueOf(aNotifyHigh)).     return this. }
false;public;1;4;;public JMXUriBuilder withNotifyLow(boolean aNotifyLow) {     addProperty("notifyLow", String.valueOf(aNotifyLow)).     return this. }
false;public;1;4;;public JMXUriBuilder withThresholdHigh(Number aThresholdHigh) {     addProperty("thresholdHigh", String.valueOf(aThresholdHigh)).     return this. }
false;public;1;4;;public JMXUriBuilder withThresholdLow(Number aThresholdLow) {     addProperty("thresholdLow", String.valueOf(aThresholdLow)).     return this. }
false;public;1;4;;public JMXUriBuilder withNotifyDiffer(boolean aNotifyDiffer) {     addProperty("notifyDiffer", String.valueOf(aNotifyDiffer)).     return this. }
false;public;1;4;;public JMXUriBuilder withNotifyMatch(boolean aNotifyMatch) {     addProperty("notifyMatch", String.valueOf(aNotifyMatch)).     return this. }
false;public;1;4;;public JMXUriBuilder withStringToCompare(String aStringToCompare) {     addProperty("stringToCompare", aStringToCompare).     return this. }
false;public;1;4;;public JMXUriBuilder withTestConnectionOnStartup(boolean aTestConnectionOnStartup) {     addProperty("testConnectionOnStartup", String.valueOf(aTestConnectionOnStartup)).     return this. }
false;public;1;4;;public JMXUriBuilder withReconnectOnConnectionFailure(boolean aReconnectOnConnectionFailure) {     addProperty("reconnectOnConnectionFailure", String.valueOf(aReconnectOnConnectionFailure)).     return this. }
false;public;1;4;;public JMXUriBuilder withReconnectDelay(int aReconnectDelay) {     addProperty("reconnectDelay", String.valueOf(aReconnectDelay)).     return this. }
true;public;1;6;/**  * Converts all of the values to params with the "key." prefix so the  * component will pick up on them and set them on the endpoint. Alternatively,  * you can pass in a reference to a Hashtable using the version of this  * method that takes a single string.  */ ;/**  * Converts all of the values to params with the "key." prefix so the  * component will pick up on them and set them on the endpoint. Alternatively,  * you can pass in a reference to a Hashtable using the version of this  * method that takes a single string.  */ public JMXUriBuilder withObjectProperties(Map<String, String> aPropertiesSansKeyPrefix) {     for (Entry<String, String> entry : aPropertiesSansKeyPrefix.entrySet()) {         addProperty("key." + entry.getKey(), entry.getValue()).     }     return this. }
true;public;1;8;/**  * Your value should start with a hash mark since it's a reference to a value.  * This method will add the hash mark if it's not present.  */ ;/**  * Your value should start with a hash mark since it's a reference to a value.  * This method will add the hash mark if it's not present.  */ public JMXUriBuilder withObjectPropertiesReference(String aReferenceToHashtable) {     if (aReferenceToHashtable.startsWith("#")) {         addProperty("objectProperties", aReferenceToHashtable).     } else {         addProperty("objectProperties", "#" + aReferenceToHashtable).     }     return this. }
false;protected;2;3;;protected void addProperty(String aName, String aValue) {     mQueryProps.put(aName, aValue). }
false;public;0;3;;public String getServerName() {     return mServerName. }
false;public;1;3;;public void setServerName(String aServerName) {     mServerName = aServerName. }
false;public;1;4;;public JMXUriBuilder withServerName(String aServerName) {     setServerName(aServerName).     return this. }
false;public;0;14;;public String toString() {     StringBuilder sb = new StringBuilder("jmx:").append(getServerName()).     if (!mQueryProps.isEmpty()) {         sb.append('?').         String delim = "".         for (Entry<String, String> entry : mQueryProps.entrySet()) {             sb.append(delim).             sb.append(entry.getKey()).append('=').append(entry.getValue()).             delim = "&".         }     }     return sb.toString(). }
