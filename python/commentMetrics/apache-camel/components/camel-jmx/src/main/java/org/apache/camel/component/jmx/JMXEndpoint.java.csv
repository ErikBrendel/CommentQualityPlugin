commented;modifiers;parameterAmount;loc;comment;code
false;public;1;39;;public Consumer createConsumer(Processor aProcessor) throws Exception {     // validate that all of the endpoint is configured properly     if (getMonitorType() != null) {         if (!isPlatformServer()) {             throw new IllegalArgumentException(ERR_PLATFORM_SERVER).         }         if (ObjectHelper.isEmpty(getObservedAttribute())) {             throw new IllegalArgumentException(ERR_OBSERVED_ATTRIBUTE).         }         if (getMonitorType().equals("string")) {             if (ObjectHelper.isEmpty(getStringToCompare())) {                 throw new IllegalArgumentException(ERR_STRING_TO_COMPARE).             }             if (!isNotifyDiffer() && !isNotifyMatch()) {                 throw new IllegalArgumentException(ERR_STRING_NOTIFY).             }         } else if (getMonitorType().equals("gauge")) {             if (!isNotifyHigh() && !isNotifyLow()) {                 throw new IllegalArgumentException(ERR_GAUGE_NOTIFY).             }             if (getThresholdHigh() == null) {                 throw new IllegalArgumentException(ERR_THRESHOLD_HIGH).             }             if (getThresholdLow() == null) {                 throw new IllegalArgumentException(ERR_THRESHOLD_LOW).             }         }         JMXMonitorConsumer answer = new JMXMonitorConsumer(this, aProcessor).         configureConsumer(answer).         return answer.     } else {         // shouldn't need any other validation.         JMXConsumer answer = new JMXConsumer(this, aProcessor).         configureConsumer(answer).         return answer.     } }
false;public;0;3;;public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("producing JMX notifications is not supported"). }
false;public;0;3;;public boolean isSingleton() {     return false. }
false;public;0;3;;public String getFormat() {     return format. }
false;public;1;3;;public void setFormat(String aFormat) {     format = aFormat. }
false;public;0;3;;public boolean isXML() {     return "xml".equals(getFormat()). }
false;public;0;3;;public boolean isPlatformServer() {     return "platform".equals(getServerURL()). }
false;public;0;3;;public String getUser() {     return user. }
false;public;1;3;;public void setUser(String aUser) {     user = aUser. }
false;public;0;3;;public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String aPassword) {     password = aPassword. }
false;public;0;3;;public String getObjectDomain() {     return objectDomain. }
false;public;1;3;;public void setObjectDomain(String aObjectDomain) {     objectDomain = aObjectDomain. }
false;public;0;3;;public String getObjectName() {     return objectName. }
false;public;1;6;;public void setObjectName(String aObjectName) {     if (getObjectProperties() != null) {         throw new IllegalArgumentException("Cannot set both objectName and objectProperties").     }     objectName = aObjectName. }
false;protected;0;3;;protected String getServerURL() {     return serverURL. }
false;protected;1;3;;protected void setServerURL(String aServerURL) {     serverURL = aServerURL. }
false;public;0;3;;public NotificationFilter getNotificationFilter() {     return notificationFilter. }
false;public;1;3;;public void setNotificationFilter(NotificationFilter aFilterRef) {     notificationFilter = aFilterRef. }
false;public;0;3;;public Object getHandback() {     return handback. }
false;public;1;3;;public void setHandback(Object aHandback) {     handback = aHandback. }
false;public;0;3;;public Map<String, String> getObjectProperties() {     return objectProperties. }
true;public;1;6;/**  * Setter for the ObjectProperties is either called by reflection when  * processing the URI or manually by the component.  * <p/>  * If the URI contained a value with a reference like "objectProperties=#myHashtable"  * then the Hashtable will be set in place.  * <p/>  * If there are extra properties that begin with "key." then the component will  * create a Hashtable with these values after removing the "key." prefix.  */ ;/**  * Setter for the ObjectProperties is either called by reflection when  * processing the URI or manually by the component.  * <p/>  * If the URI contained a value with a reference like "objectProperties=#myHashtable"  * then the Hashtable will be set in place.  * <p/>  * If there are extra properties that begin with "key." then the component will  * create a Hashtable with these values after removing the "key." prefix.  */ public void setObjectProperties(Map<String, String> objectProperties) {     if (getObjectName() != null) {         throw new IllegalArgumentException("Cannot set both objectName and objectProperties").     }     this.objectProperties = objectProperties. }
false;protected;0;7;;protected ObjectName getJMXObjectName() throws MalformedObjectNameException {     if (jmxObjectName == null) {         ObjectName on = buildObjectName().         setJMXObjectName(on).     }     return jmxObjectName. }
false;protected;1;3;;protected void setJMXObjectName(ObjectName aCachedObjectName) {     jmxObjectName = aCachedObjectName. }
false;public;0;3;;public String getObservedAttribute() {     return observedAttribute. }
false;public;1;3;;public void setObservedAttribute(String aObservedAttribute) {     observedAttribute = aObservedAttribute. }
false;public;0;3;;public long getGranularityPeriod() {     return granularityPeriod. }
false;public;1;3;;public void setGranularityPeriod(long aGranularityPeriod) {     granularityPeriod = aGranularityPeriod. }
false;public;0;3;;public String getMonitorType() {     return monitorType. }
false;public;1;3;;public void setMonitorType(String aMonitorType) {     monitorType = aMonitorType. }
false;public;0;3;;public int getInitThreshold() {     return initThreshold. }
false;public;1;3;;public void setInitThreshold(int aInitThreshold) {     initThreshold = aInitThreshold. }
false;public;0;3;;public int getOffset() {     return offset. }
false;public;1;3;;public void setOffset(int aOffset) {     offset = aOffset. }
false;public;0;3;;public int getModulus() {     return modulus. }
false;public;1;3;;public void setModulus(int aModulus) {     modulus = aModulus. }
false;public;0;3;;public boolean isDifferenceMode() {     return differenceMode. }
false;public;1;3;;public void setDifferenceMode(boolean aDifferenceMode) {     differenceMode = aDifferenceMode. }
false;public;0;3;;public boolean isNotifyHigh() {     return notifyHigh. }
false;public;1;3;;public void setNotifyHigh(boolean aNotifyHigh) {     notifyHigh = aNotifyHigh. }
false;public;0;3;;public boolean isNotifyLow() {     return notifyLow. }
false;public;1;3;;public void setNotifyLow(boolean aNotifyLow) {     notifyLow = aNotifyLow. }
false;public;0;3;;public Double getThresholdHigh() {     return thresholdHigh. }
false;public;1;3;;public void setThresholdHigh(Double aThresholdHigh) {     thresholdHigh = aThresholdHigh. }
false;public;0;3;;public Double getThresholdLow() {     return thresholdLow. }
false;public;1;3;;public void setThresholdLow(Double aThresholdLow) {     thresholdLow = aThresholdLow. }
false;public;0;3;;public boolean isNotifyDiffer() {     return notifyDiffer. }
false;public;1;3;;public void setNotifyDiffer(boolean aNotifyDiffer) {     notifyDiffer = aNotifyDiffer. }
false;public;0;3;;public boolean isNotifyMatch() {     return notifyMatch. }
false;public;1;3;;public void setNotifyMatch(boolean aNotifyMatch) {     notifyMatch = aNotifyMatch. }
false;public;0;3;;public String getStringToCompare() {     return stringToCompare. }
false;public;1;3;;public void setStringToCompare(String aStringToCompare) {     stringToCompare = aStringToCompare. }
false;public;0;3;;public boolean getTestConnectionOnStartup() {     return this.testConnectionOnStartup. }
false;public;1;3;;public void setTestConnectionOnStartup(boolean testConnectionOnStartup) {     this.testConnectionOnStartup = testConnectionOnStartup. }
false;public;0;3;;public boolean getReconnectOnConnectionFailure() {     return this.reconnectOnConnectionFailure. }
false;public;1;3;;public void setReconnectOnConnectionFailure(boolean reconnectOnConnectionFailure) {     this.reconnectOnConnectionFailure = reconnectOnConnectionFailure. }
false;public;0;3;;public int getReconnectDelay() {     return this.reconnectDelay. }
false;public;1;3;;public void setReconnectDelay(int reconnectDelay) {     this.reconnectDelay = reconnectDelay. }
false;public;0;3;;public ExecutorService getExecutorService() {     return executorService. }
false;public;1;3;;public void setExecutorService(ExecutorService executorService) {     this.executorService = executorService. }
false;private;0;12;;private ObjectName buildObjectName() throws MalformedObjectNameException {     ObjectName objectName.     if (getObjectProperties() == null) {         StringBuilder sb = new StringBuilder(getObjectDomain()).append(':').append("name=").append(getObjectName()).         objectName = new ObjectName(sb.toString()).     } else {         Hashtable<String, String> ht = new Hashtable<>().         ht.putAll(getObjectProperties()).         objectName = new ObjectName(getObjectDomain(), ht).     }     return objectName. }
