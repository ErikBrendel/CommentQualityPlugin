# id;timestamp;commentText;codeText;commentWords;codeWords
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1347621219;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1358333181;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1376549254;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1508485839;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1531293869;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1531381050;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1531381050;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1531381050;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1540108160;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1540108163;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> protected ConnectionNotificationListener getConnectionNotificationListener();1548175645;Returns the connection notification listener_ creates the default listener if one does not_already exist;protected ConnectionNotificationListener getConnectionNotificationListener() {_        if (mConnectionNotificationListener == null) {_            mConnectionNotificationListener = new ConnectionNotificationListener()__        }  _        return mConnectionNotificationListener__    };returns,the,connection,notification,listener,creates,the,default,listener,if,one,does,not,already,exist;protected,connection,notification,listener,get,connection,notification,listener,if,m,connection,notification,listener,null,m,connection,notification,listener,new,connection,notification,listener,return,m,connection,notification,listener
JMXConsumer -> @Override     protected void doStop() throws Exception;1288942801;Removes the notification listener;@Override_    protected void doStop() throws Exception {_        super.doStop()__        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        getServerConnection().removeNotificationListener(ep.getJMXObjectName(), this)__    };removes,the,notification,listener;override,protected,void,do,stop,throws,exception,super,do,stop,jmxendpoint,ep,jmxendpoint,get,endpoint,get,server,connection,remove,notification,listener,ep,get,jmxobject,name,this
JMXConsumer -> @Override     protected void doStop() throws Exception;1289066889;Removes the notification listener;@Override_    protected void doStop() throws Exception {_        super.doStop()__        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        getServerConnection().removeNotificationListener(ep.getJMXObjectName(), this)__    };removes,the,notification,listener;override,protected,void,do,stop,throws,exception,super,do,stop,jmxendpoint,ep,jmxendpoint,get,endpoint,get,server,connection,remove,notification,listener,ep,get,jmxobject,name,this
JMXConsumer -> @Override     protected void doStop() throws Exception;1305835015;Removes the notification listener;@Override_    protected void doStop() throws Exception {_        super.doStop()__        removeNotificationListener()__    };removes,the,notification,listener;override,protected,void,do,stop,throws,exception,super,do,stop,remove,notification,listener
JMXConsumer -> @Override     protected void doStop() throws Exception;1347621219;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()__    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners
JMXConsumer -> @Override     protected void doStop() throws Exception;1358333181;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        ServiceHelper.stopService(mFormatter)__    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,service,helper,stop,service,m,formatter
JMXConsumer -> @Override     protected void doStop() throws Exception;1376549254;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        ServiceHelper.stopService(mFormatter)__    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,service,helper,stop,service,m,formatter
JMXConsumer -> @Override     protected void doStop() throws Exception;1508485839;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)__    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter
JMXConsumer -> @Override     protected void doStop() throws Exception;1531293869;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)___        if (shutdownExecutorService && executorService != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executorService)__            executorService = null__        }_    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter,if,shutdown,executor,service,executor,service,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,executor,service,executor,service,null
JMXConsumer -> @Override     protected void doStop() throws Exception;1531381050;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)___        if (shutdownExecutorService && executorService != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executorService)__            executorService = null__        }_    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter,if,shutdown,executor,service,executor,service,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,executor,service,executor,service,null
JMXConsumer -> @Override     protected void doStop() throws Exception;1531381050;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)___        if (shutdownExecutorService && executorService != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executorService)__            executorService = null__        }_    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter,if,shutdown,executor,service,executor,service,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,executor,service,executor,service,null
JMXConsumer -> @Override     protected void doStop() throws Exception;1531381050;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)___        if (shutdownExecutorService && executorService != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executorService)__            executorService = null__        }_    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter,if,shutdown,executor,service,executor,service,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,executor,service,executor,service,null
JMXConsumer -> @Override     protected void doStop() throws Exception;1540108160;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)___        if (shutdownExecutorService && executorService != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executorService)__            executorService = null__        }_    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter,if,shutdown,executor,service,executor,service,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,executor,service,executor,service,null
JMXConsumer -> @Override     protected void doStop() throws Exception;1540108163;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)___        if (shutdownExecutorService && executorService != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executorService)__            executorService = null__        }_    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter,if,shutdown,executor,service,executor,service,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,executor,service,executor,service,null
JMXConsumer -> @Override     protected void doStop() throws Exception;1548175645;Removes the notification listeners and terminates the background connection polling process if it exists;@Override_    protected void doStop() throws Exception {_        super.doStop()__        _        if (mScheduledExecutor != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(mScheduledExecutor)__            mScheduledExecutor = null__        }__        removeNotificationListeners()___        if (mConnector != null) {_            mConnector.close()__        }__        ServiceHelper.stopService(mFormatter)___        if (shutdownExecutorService && executorService != null) {_            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executorService)__            executorService = null__        }_    };removes,the,notification,listeners,and,terminates,the,background,connection,polling,process,if,it,exists;override,protected,void,do,stop,throws,exception,super,do,stop,if,m,scheduled,executor,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,m,scheduled,executor,m,scheduled,executor,null,remove,notification,listeners,if,m,connector,null,m,connector,close,service,helper,stop,service,m,formatter,if,shutdown,executor,service,executor,service,null,get,endpoint,get,camel,context,get,executor,service,manager,shutdown,now,executor,service,executor,service,null
JMXConsumer -> protected void scheduleReconnect();1347621219;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1358333181;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1376549254;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1508485839;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1531293869;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1531381050;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1531381050;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1531381050;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    LOG.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        LOG.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1540108160;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    log.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        log.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1540108163;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    log.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        log.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleReconnect();1548175645;Schedules an attempt to re-initialize a lost connection after the reconnect delay;protected void scheduleReconnect() {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    initNetworkConnection()__                    addNotificationListener()__                } catch (Exception e) {_                    log.warn("Failed to reconnect to JMX server. >> {}", e.getMessage())__                    scheduleReconnect()__                }_            }_        }__        log.info("Delaying JMX consumer reconnection for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,an,attempt,to,re,initialize,a,lost,connection,after,the,reconnect,delay;protected,void,schedule,reconnect,runnable,start,runnable,new,runnable,override,public,void,run,try,init,network,connection,add,notification,listener,catch,exception,e,log,warn,failed,to,reconnect,to,jmx,server,e,get,message,schedule,reconnect,log,info,delaying,jmx,consumer,reconnection,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1347621219;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1358333181;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1376549254;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1508485839;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1531293869;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1531381050;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1531381050;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1531381050;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1540108160;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1540108163;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void removeNotificationListeners() throws Exception;1548175645;Removes the configured notification listener and the connection notification listener from the_connection;protected void removeNotificationListeners() throws Exception {   _        getServerConnection().removeNotificationListener(mJmxEndpoint.getJMXObjectName(), this)__        if (mConnectionNotificationListener != null) {_            mConnector.removeConnectionNotificationListener(mConnectionNotificationListener)__            mConnectionNotificationListener = null__        }    _    };removes,the,configured,notification,listener,and,the,connection,notification,listener,from,the,connection;protected,void,remove,notification,listeners,throws,exception,get,server,connection,remove,notification,listener,m,jmx,endpoint,get,jmxobject,name,this,if,m,connection,notification,listener,null,m,connector,remove,connection,notification,listener,m,connection,notification,listener,m,connection,notification,listener,null
JMXConsumer -> protected void addNotificationListener() throws Exception;1305835015;Adds a notification listener to the target bean._@throws Exception;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean,throws,exception;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,jmxendpoint,get,endpoint,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1347621219;Adds a notification listener to the target bean._@throws Exception;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean,throws,exception;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,jmxendpoint,get,endpoint,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1358333181;Adds a notification listener to the target bean._@throws Exception;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean,throws,exception;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,jmxendpoint,get,endpoint,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1376549254;Adds a notification listener to the target bean._@throws Exception;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean,throws,exception;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,jmxendpoint,get,endpoint,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1508485839;Adds a notification listener to the target bean._@throws Exception;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean,throws,exception;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,jmxendpoint,get,endpoint,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1531293869;Adds a notification listener to the target bean.;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,get,endpoint,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1531381050;Adds a notification listener to the target bean.;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        _        if (nf == null && ep.getObservedAttribute() != null) {_            AttributeChangeNotificationFilter acnf = new AttributeChangeNotificationFilter()__            acnf.enableAttribute(ep.getObservedAttribute())__            nf = acnf__        }__        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,get,endpoint,notification,filter,nf,ep,get,notification,filter,if,nf,null,ep,get,observed,attribute,null,attribute,change,notification,filter,acnf,new,attribute,change,notification,filter,acnf,enable,attribute,ep,get,observed,attribute,nf,acnf,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1531381050;Adds a notification listener to the target bean.;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        _        if (nf == null && ep.getObservedAttribute() != null) {_            AttributeChangeNotificationFilter acnf = new AttributeChangeNotificationFilter()__            acnf.enableAttribute(ep.getObservedAttribute())__            nf = acnf__        }__        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,get,endpoint,notification,filter,nf,ep,get,notification,filter,if,nf,null,ep,get,observed,attribute,null,attribute,change,notification,filter,acnf,new,attribute,change,notification,filter,acnf,enable,attribute,ep,get,observed,attribute,nf,acnf,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1531381050;Adds a notification listener to the target bean.;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        _        if (nf == null && ep.getObservedAttribute() != null) {_            LOG.debug("Observing attribute: {}", ep.getObservedAttribute())__            boolean match = !ep.isNotifyDiffer()__            nf = new JMXConsumerNotificationFilter(ep.getObservedAttribute(), ep.getStringToCompare(), match)__        }__        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,get,endpoint,notification,filter,nf,ep,get,notification,filter,if,nf,null,ep,get,observed,attribute,null,log,debug,observing,attribute,ep,get,observed,attribute,boolean,match,ep,is,notify,differ,nf,new,jmxconsumer,notification,filter,ep,get,observed,attribute,ep,get,string,to,compare,match,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1540108160;Adds a notification listener to the target bean.;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        _        if (nf == null && ep.getObservedAttribute() != null) {_            log.debug("Observing attribute: {}", ep.getObservedAttribute())__            boolean match = !ep.isNotifyDiffer()__            nf = new JMXConsumerNotificationFilter(ep.getObservedAttribute(), ep.getStringToCompare(), match)__        }__        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,get,endpoint,notification,filter,nf,ep,get,notification,filter,if,nf,null,ep,get,observed,attribute,null,log,debug,observing,attribute,ep,get,observed,attribute,boolean,match,ep,is,notify,differ,nf,new,jmxconsumer,notification,filter,ep,get,observed,attribute,ep,get,string,to,compare,match,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1540108163;Adds a notification listener to the target bean.;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        _        if (nf == null && ep.getObservedAttribute() != null) {_            log.debug("Observing attribute: {}", ep.getObservedAttribute())__            boolean match = !ep.isNotifyDiffer()__            nf = new JMXConsumerNotificationFilter(ep.getObservedAttribute(), ep.getStringToCompare(), match)__        }__        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,get,endpoint,notification,filter,nf,ep,get,notification,filter,if,nf,null,ep,get,observed,attribute,null,log,debug,observing,attribute,ep,get,observed,attribute,boolean,match,ep,is,notify,differ,nf,new,jmxconsumer,notification,filter,ep,get,observed,attribute,ep,get,string,to,compare,match,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> protected void addNotificationListener() throws Exception;1548175645;Adds a notification listener to the target bean.;protected void addNotificationListener() throws Exception {_        JMXEndpoint ep = getEndpoint()__        NotificationFilter nf = ep.getNotificationFilter()___        _        if (nf == null && ep.getObservedAttribute() != null) {_            log.debug("Observing attribute: {}", ep.getObservedAttribute())__            boolean match = !ep.isNotifyDiffer()__            nf = new JMXConsumerNotificationFilter(ep.getObservedAttribute(), ep.getStringToCompare(), match)__        }__        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };adds,a,notification,listener,to,the,target,bean;protected,void,add,notification,listener,throws,exception,jmxendpoint,ep,get,endpoint,notification,filter,nf,ep,get,notification,filter,if,nf,null,ep,get,observed,attribute,null,log,debug,observing,attribute,ep,get,observed,attribute,boolean,match,ep,is,notify,differ,nf,new,jmxconsumer,notification,filter,ep,get,observed,attribute,ep,get,string,to,compare,match,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1288942801;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly)__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(mFormatter.format(aNotification))__            } else {_                message.setBody(aNotification)__            }_            getProcessor().process(exchange)__        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        } catch (Exception e) {_            getExceptionHandler().handleException("Failed to process notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,jmxendpoint,get,endpoint,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,only,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,m,formatter,format,a,notification,else,message,set,body,a,notification,get,processor,process,exchange,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1289066889;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly)__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(mFormatter.format(aNotification))__            } else {_                message.setBody(aNotification)__            }_            getProcessor().process(exchange)__        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        } catch (Exception e) {_            getExceptionHandler().handleException("Failed to process notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,jmxendpoint,get,endpoint,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,only,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,m,formatter,format,a,notification,else,message,set,body,a,notification,get,processor,process,exchange,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1305835015;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly)__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }_            getProcessor().process(exchange)__        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        } catch (Exception e) {_            getExceptionHandler().handleException("Failed to process notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,jmxendpoint,get,endpoint,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,only,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,get,processor,process,exchange,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1347621219;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly)__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }_            getProcessor().process(exchange)__        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        } catch (Exception e) {_            getExceptionHandler().handleException("Failed to process notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,jmxendpoint,get,endpoint,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,only,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,get,processor,process,exchange,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1358333181;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly)__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }_            getProcessor().process(exchange)__        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        } catch (Exception e) {_            getExceptionHandler().handleException("Failed to process notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,jmxendpoint,get,endpoint,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,only,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,get,processor,process,exchange,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1376549254;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly)__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }_            getProcessor().process(exchange)__        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        } catch (Exception e) {_            getExceptionHandler().handleException("Failed to process notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,jmxendpoint,get,endpoint,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,only,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,get,processor,process,exchange,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1508485839;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = (JMXEndpoint) getEndpoint()__        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly)__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }_            getProcessor().process(exchange)__        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        } catch (Exception e) {_            getExceptionHandler().handleException("Failed to process notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,jmxendpoint,get,endpoint,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,only,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,get,processor,process,exchange,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1531293869;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = getEndpoint()__        Exchange exchange = getEndpoint().createExchange()__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }__            _            executorService.submit(() -> {_                try {_                    getProcessor().process(exchange)__                } catch (Exception e) {_                    getExceptionHandler().handleException("Failed to process notification", e)__                }_            })___        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,get,endpoint,exchange,exchange,get,endpoint,create,exchange,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,executor,service,submit,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1531381050;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = getEndpoint()__        Exchange exchange = getEndpoint().createExchange()__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }__            _            executorService.submit(() -> {_                try {_                    getProcessor().process(exchange)__                } catch (Exception e) {_                    getExceptionHandler().handleException("Failed to process notification", e)__                }_            })___        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,get,endpoint,exchange,exchange,get,endpoint,create,exchange,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,executor,service,submit,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1531381050;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = getEndpoint()__        Exchange exchange = getEndpoint().createExchange()__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }__            _            executorService.submit(() -> {_                try {_                    getProcessor().process(exchange)__                } catch (Exception e) {_                    getExceptionHandler().handleException("Failed to process notification", e)__                }_            })___        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,get,endpoint,exchange,exchange,get,endpoint,create,exchange,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,executor,service,submit,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1531381050;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = getEndpoint()__        Exchange exchange = getEndpoint().createExchange()__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }__            _            executorService.submit(() -> {_                try {_                    getProcessor().process(exchange)__                } catch (Exception e) {_                    getExceptionHandler().handleException("Failed to process notification", e)__                }_            })___        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,get,endpoint,exchange,exchange,get,endpoint,create,exchange,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,executor,service,submit,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1540108160;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = getEndpoint()__        Exchange exchange = getEndpoint().createExchange()__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }__            _            executorService.submit(() -> {_                try {_                    getProcessor().process(exchange)__                } catch (Exception e) {_                    getExceptionHandler().handleException("Failed to process notification", e)__                }_            })___        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,get,endpoint,exchange,exchange,get,endpoint,create,exchange,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,executor,service,submit,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1540108163;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = getEndpoint()__        Exchange exchange = getEndpoint().createExchange()__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }__            _            executorService.submit(() -> {_                try {_                    getProcessor().process(exchange)__                } catch (Exception e) {_                    getExceptionHandler().handleException("Failed to process notification", e)__                }_            })___        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,get,endpoint,exchange,exchange,get,endpoint,create,exchange,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,executor,service,submit,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e
JMXConsumer -> public void handleNotification(Notification aNotification, Object aHandback);1548175645;Processes the Notification received. The handback will be set as_the header "jmx.handback" while the Notification will be set as_the body._<p/>_If the format is set to "xml" then the Notification will be converted_to XML first using {@link NotificationXmlFormatter}__@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object);public void handleNotification(Notification aNotification, Object aHandback) {_        JMXEndpoint ep = getEndpoint()__        Exchange exchange = getEndpoint().createExchange()__        Message message = exchange.getIn()__        message.setHeader("jmx.handback", aHandback)__        try {_            if (ep.isXML()) {_                message.setBody(getFormatter().format(aNotification))__            } else {_                message.setBody(aNotification)__            }__            _            executorService.submit(() -> {_                try {_                    getProcessor().process(exchange)__                } catch (Exception e) {_                    getExceptionHandler().handleException("Failed to process notification", e)__                }_            })___        } catch (NotificationFormatException e) {_            getExceptionHandler().handleException("Failed to marshal notification", e)__        }_    };processes,the,notification,received,the,handback,will,be,set,as,the,header,jmx,handback,while,the,notification,will,be,set,as,the,body,p,if,the,format,is,set,to,xml,then,the,notification,will,be,converted,to,xml,first,using,link,notification,xml,formatter,see,javax,management,notification,listener,handle,notification,javax,management,notification,java,lang,object;public,void,handle,notification,notification,a,notification,object,a,handback,jmxendpoint,ep,get,endpoint,exchange,exchange,get,endpoint,create,exchange,message,message,exchange,get,in,message,set,header,jmx,handback,a,handback,try,if,ep,is,xml,message,set,body,get,formatter,format,a,notification,else,message,set,body,a,notification,executor,service,submit,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,failed,to,process,notification,e,catch,notification,format,exception,e,get,exception,handler,handle,exception,failed,to,marshal,notification,e
JMXConsumer -> private ScheduledExecutorService getExecutor();1347621219;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "connectionExcutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,connection,excutor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1358333181;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "connectionExcutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,connection,excutor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1376549254;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "connectionExcutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,connection,excutor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1508485839;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "connectionExcutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,connection,excutor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1531293869;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "connectionExcutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,connection,excutor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1531381050;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "connectionExcutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,connection,excutor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1531381050;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "JMXConnectionExecutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,jmxconnection,executor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1531381050;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "JMXConnectionExecutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,jmxconnection,executor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1540108160;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "JMXConnectionExecutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,jmxconnection,executor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1540108163;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "JMXConnectionExecutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,jmxconnection,executor,return,m,scheduled,executor
JMXConsumer -> private ScheduledExecutorService getExecutor();1548175645;Returns the thread executor used for scheduling delayed connection events.  Creates the executor_if it does not already exist;private ScheduledExecutorService getExecutor() {_        if (this.mScheduledExecutor == null) {_            mScheduledExecutor = mJmxEndpoint.getCamelContext().getExecutorServiceManager()_                .newSingleThreadScheduledExecutor(this, "JMXConnectionExecutor")__        }_        return mScheduledExecutor__    };returns,the,thread,executor,used,for,scheduling,delayed,connection,events,creates,the,executor,if,it,does,not,already,exist;private,scheduled,executor,service,get,executor,if,this,m,scheduled,executor,null,m,scheduled,executor,m,jmx,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,scheduled,executor,this,jmxconnection,executor,return,m,scheduled,executor
JMXConsumer -> private void initNetworkConnection() throws IOException;1347621219;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1358333181;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1376549254;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1508485839;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1531293869;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1531381050;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1531381050;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1531381050;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1540108160;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1540108163;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> private void initNetworkConnection() throws IOException;1548175645;Initializes a network connection to the configured JMX server and registers a connection_notification listener to to receive notifications of connection loss;private void initNetworkConnection() throws IOException {_        if (mConnector != null) {_            try {_                mConnector.close()__            } catch (Exception e) {_                _            }_        }_        JMXServiceURL url = new JMXServiceURL(mJmxEndpoint.getServerURL())__        String[] creds = {mJmxEndpoint.getUser(), mJmxEndpoint.getPassword()}__        Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__        mConnector = JMXConnectorFactory.connect(url, map)__        mConnector.addConnectionNotificationListener(getConnectionNotificationListener(), null, null)__        mConnectionId = mConnector.getConnectionId()__        setServerConnection(mConnector.getMBeanServerConnection())__    };initializes,a,network,connection,to,the,configured,jmx,server,and,registers,a,connection,notification,listener,to,to,receive,notifications,of,connection,loss;private,void,init,network,connection,throws,ioexception,if,m,connector,null,try,m,connector,close,catch,exception,e,jmxservice,url,url,new,jmxservice,url,m,jmx,endpoint,get,server,url,string,creds,m,jmx,endpoint,get,user,m,jmx,endpoint,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,m,connector,jmxconnector,factory,connect,url,map,m,connector,add,connection,notification,listener,get,connection,notification,listener,null,null,m,connection,id,m,connector,get,connection,id,set,server,connection,m,connector,get,mbean,server,connection
JMXConsumer -> @Override     protected void doStart() throws Exception;1288942801;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        super.doStart()___        JMXEndpoint ep = (JMXEndpoint) getEndpoint()___        _        if (ep.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            JMXServiceURL url = new JMXServiceURL(ep.getServerURL())__            String[] creds = {ep.getUser(), ep.getPassword()}__            Map map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__            JMXConnector connector = JMXConnectorFactory.connect(url, map)__            setServerConnection(connector.getMBeanServerConnection())__        }_        _        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,super,do,start,jmxendpoint,ep,jmxendpoint,get,endpoint,if,ep,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,jmxservice,url,url,new,jmxservice,url,ep,get,server,url,string,creds,ep,get,user,ep,get,password,map,map,collections,singleton,map,jmxconnector,credentials,creds,jmxconnector,connector,jmxconnector,factory,connect,url,map,set,server,connection,connector,get,mbean,server,connection,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> @Override     protected void doStart() throws Exception;1289066889;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        super.doStart()___        JMXEndpoint ep = (JMXEndpoint) getEndpoint()___        _        if (ep.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            JMXServiceURL url = new JMXServiceURL(ep.getServerURL())__            String[] creds = {ep.getUser(), ep.getPassword()}__            Map map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__            JMXConnector connector = JMXConnectorFactory.connect(url, map)__            setServerConnection(connector.getMBeanServerConnection())__        }_        _        NotificationFilter nf = ep.getNotificationFilter()___        ObjectName objectName = ep.getJMXObjectName()___        getServerConnection().addNotificationListener(objectName, this, nf, ep.getHandback())__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,super,do,start,jmxendpoint,ep,jmxendpoint,get,endpoint,if,ep,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,jmxservice,url,url,new,jmxservice,url,ep,get,server,url,string,creds,ep,get,user,ep,get,password,map,map,collections,singleton,map,jmxconnector,credentials,creds,jmxconnector,connector,jmxconnector,factory,connect,url,map,set,server,connection,connector,get,mbean,server,connection,notification,filter,nf,ep,get,notification,filter,object,name,object,name,ep,get,jmxobject,name,get,server,connection,add,notification,listener,object,name,this,nf,ep,get,handback
JMXConsumer -> @Override     protected void doStart() throws Exception;1305835015;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        super.doStart()___        JMXEndpoint ep = (JMXEndpoint) getEndpoint()___        _        if (ep.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            JMXServiceURL url = new JMXServiceURL(ep.getServerURL())__            String[] creds = {ep.getUser(), ep.getPassword()}__            Map<String, String[]> map = Collections.singletonMap(JMXConnector.CREDENTIALS, creds)__            JMXConnector connector = JMXConnectorFactory.connect(url, map)__            setServerConnection(connector.getMBeanServerConnection())__        }_        _        addNotificationListener()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,super,do,start,jmxendpoint,ep,jmxendpoint,get,endpoint,if,ep,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,jmxservice,url,url,new,jmxservice,url,ep,get,server,url,string,creds,ep,get,user,ep,get,password,map,string,string,map,collections,singleton,map,jmxconnector,credentials,creds,jmxconnector,connector,jmxconnector,factory,connect,url,map,set,server,connection,connector,get,mbean,server,connection,add,notification,listener
JMXConsumer -> @Override     protected void doStart() throws Exception;1347621219;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1358333181;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1376549254;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1508485839;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1531293869;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        if (executorService == null) {_            if (getEndpoint().getExecutorService() != null) {_                _                executorService = getEndpoint().getExecutorService()__            } else {_                _                String name = "JMXConsumer[" + getEndpoint().getJMXObjectName().getCanonicalName() + "]"__                executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, name)__                shutdownExecutorService = true__            }_        }__        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,executor,service,null,if,get,endpoint,get,executor,service,null,executor,service,get,endpoint,get,executor,service,else,string,name,jmxconsumer,get,endpoint,get,jmxobject,name,get,canonical,name,executor,service,get,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,executor,this,name,shutdown,executor,service,true,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1531381050;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        if (executorService == null) {_            if (getEndpoint().getExecutorService() != null) {_                _                executorService = getEndpoint().getExecutorService()__            } else {_                _                String name = "JMXConsumer[" + getEndpoint().getJMXObjectName().getCanonicalName() + "]"__                executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, name)__                shutdownExecutorService = true__            }_        }__        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,executor,service,null,if,get,endpoint,get,executor,service,null,executor,service,get,endpoint,get,executor,service,else,string,name,jmxconsumer,get,endpoint,get,jmxobject,name,get,canonical,name,executor,service,get,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,executor,this,name,shutdown,executor,service,true,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1531381050;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        if (executorService == null) {_            if (getEndpoint().getExecutorService() != null) {_                _                executorService = getEndpoint().getExecutorService()__            } else {_                _                String name = "JMXConsumer[" + getEndpoint().getJMXObjectName().getCanonicalName() + "]"__                executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, name)__                shutdownExecutorService = true__            }_        }__        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,executor,service,null,if,get,endpoint,get,executor,service,null,executor,service,get,endpoint,get,executor,service,else,string,name,jmxconsumer,get,endpoint,get,jmxobject,name,get,canonical,name,executor,service,get,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,executor,this,name,shutdown,executor,service,true,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1531381050;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        if (executorService == null) {_            if (getEndpoint().getExecutorService() != null) {_                _                executorService = getEndpoint().getExecutorService()__            } else {_                _                String name = "JMXConsumer[" + getEndpoint().getJMXObjectName().getCanonicalName() + "]"__                executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, name)__                shutdownExecutorService = true__            }_        }__        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    LOG.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,executor,service,null,if,get,endpoint,get,executor,service,null,executor,service,get,endpoint,get,executor,service,else,string,name,jmxconsumer,get,endpoint,get,jmxobject,name,get,canonical,name,executor,service,get,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,executor,this,name,shutdown,executor,service,true,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1540108160;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        if (executorService == null) {_            if (getEndpoint().getExecutorService() != null) {_                _                executorService = getEndpoint().getExecutorService()__            } else {_                _                String name = "JMXConsumer[" + getEndpoint().getJMXObjectName().getCanonicalName() + "]"__                executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, name)__                shutdownExecutorService = true__            }_        }__        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    log.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,executor,service,null,if,get,endpoint,get,executor,service,null,executor,service,get,endpoint,get,executor,service,else,string,name,jmxconsumer,get,endpoint,get,jmxobject,name,get,canonical,name,executor,service,get,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,executor,this,name,shutdown,executor,service,true,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1540108163;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        if (executorService == null) {_            if (getEndpoint().getExecutorService() != null) {_                _                executorService = getEndpoint().getExecutorService()__            } else {_                _                String name = "JMXConsumer[" + getEndpoint().getJMXObjectName().getCanonicalName() + "]"__                executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, name)__                shutdownExecutorService = true__            }_        }__        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    log.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,executor,service,null,if,get,endpoint,get,executor,service,null,executor,service,get,endpoint,get,executor,service,else,string,name,jmxconsumer,get,endpoint,get,jmxobject,name,get,canonical,name,executor,service,get,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,executor,this,name,shutdown,executor,service,true,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> @Override     protected void doStart() throws Exception;1548175645;Initializes the mbean server connection and starts listening for_Notification events from the object.;@Override_    protected void doStart() throws Exception {_        ServiceHelper.startService(mFormatter)___        if (executorService == null) {_            if (getEndpoint().getExecutorService() != null) {_                _                executorService = getEndpoint().getExecutorService()__            } else {_                _                String name = "JMXConsumer[" + getEndpoint().getJMXObjectName().getCanonicalName() + "]"__                executorService = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, name)__                shutdownExecutorService = true__            }_        }__        _        if (mJmxEndpoint.isPlatformServer()) {_            setServerConnection(ManagementFactory.getPlatformMBeanServer())__        } else {_            try {_                initNetworkConnection()__            } catch (IOException e) {_                if (!mJmxEndpoint.getTestConnectionOnStartup()) {_                    log.warn("Failed to connect to JMX server. >> {}", e.getMessage())__                    scheduleDelayedStart()__                    return__                } else {_                    throw e__                } _            }_        }_        _        addNotificationListener()__        super.doStart()__    };initializes,the,mbean,server,connection,and,starts,listening,for,notification,events,from,the,object;override,protected,void,do,start,throws,exception,service,helper,start,service,m,formatter,if,executor,service,null,if,get,endpoint,get,executor,service,null,executor,service,get,endpoint,get,executor,service,else,string,name,jmxconsumer,get,endpoint,get,jmxobject,name,get,canonical,name,executor,service,get,endpoint,get,camel,context,get,executor,service,manager,new,single,thread,executor,this,name,shutdown,executor,service,true,if,m,jmx,endpoint,is,platform,server,set,server,connection,management,factory,get,platform,mbean,server,else,try,init,network,connection,catch,ioexception,e,if,m,jmx,endpoint,get,test,connection,on,startup,log,warn,failed,to,connect,to,jmx,server,e,get,message,schedule,delayed,start,return,else,throw,e,add,notification,listener,super,do,start
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1347621219;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1358333181;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1376549254;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1508485839;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1531293869;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1531381050;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1531381050;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1531381050;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    LOG.error("An unrecoverable exception has occurred while starting the JMX consumer" _                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        LOG.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1540108160;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    log.error("An unrecoverable exception has occurred while starting the JMX consumer"_                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        log.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1540108163;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    log.error("An unrecoverable exception has occurred while starting the JMX consumer"_                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        log.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
JMXConsumer -> protected void scheduleDelayedStart() throws Exception;1548175645;Schedules execution of the doStart() operation to occur again after the reconnect delay;protected void scheduleDelayedStart() throws Exception {_        Runnable startRunnable = new Runnable() {_            @Override_            public void run() {_                try {_                    doStart()__                } catch (Exception e) {_                    log.error("An unrecoverable exception has occurred while starting the JMX consumer"_                                + "for endpoint {}", URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), e)__                }_            }_        }__        log.info("Delaying JMX consumer startup for endpoint {}. Trying again in {} seconds.",_                URISupport.sanitizeUri(mJmxEndpoint.getEndpointUri()), mJmxEndpoint.getReconnectDelay())__        getExecutor().schedule(startRunnable, mJmxEndpoint.getReconnectDelay(), TimeUnit.SECONDS)__    };schedules,execution,of,the,do,start,operation,to,occur,again,after,the,reconnect,delay;protected,void,schedule,delayed,start,throws,exception,runnable,start,runnable,new,runnable,override,public,void,run,try,do,start,catch,exception,e,log,error,an,unrecoverable,exception,has,occurred,while,starting,the,jmx,consumer,for,endpoint,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,e,log,info,delaying,jmx,consumer,startup,for,endpoint,trying,again,in,seconds,urisupport,sanitize,uri,m,jmx,endpoint,get,endpoint,uri,m,jmx,endpoint,get,reconnect,delay,get,executor,schedule,start,runnable,m,jmx,endpoint,get,reconnect,delay,time,unit,seconds
