commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;49;;@Override protected void addNotificationListener() throws Exception {     JMXEndpoint ep = getEndpoint().     // create the monitor bean     Monitor bean = null.     if (ep.getMonitorType().equals("counter")) {         CounterMonitor counter = new CounterMonitor().         Number initThreshold = convertNumberToAttributeType(ep.getInitThreshold(), ep.getJMXObjectName(), ep.getObservedAttribute()).         Number offset = convertNumberToAttributeType(ep.getOffset(), ep.getJMXObjectName(), ep.getObservedAttribute()).         Number modulus = convertNumberToAttributeType(ep.getModulus(), ep.getJMXObjectName(), ep.getObservedAttribute()).         counter.setInitThreshold(initThreshold).         counter.setOffset(offset).         counter.setModulus(modulus).         counter.setDifferenceMode(ep.isDifferenceMode()).         counter.setNotify(true).         bean = counter.     } else if (ep.getMonitorType().equals("gauge")) {         GaugeMonitor gm = new GaugeMonitor().         gm.setNotifyHigh(ep.isNotifyHigh()).         gm.setNotifyLow(ep.isNotifyLow()).         gm.setDifferenceMode(ep.isDifferenceMode()).         Number highValue = convertNumberToAttributeType(ep.getThresholdHigh(), ep.getJMXObjectName(), ep.getObservedAttribute()).         Number lowValue = convertNumberToAttributeType(ep.getThresholdLow(), ep.getJMXObjectName(), ep.getObservedAttribute()).         gm.setThresholds(highValue, lowValue).         bean = gm.     } else if (ep.getMonitorType().equals("string")) {         StringMonitor sm = new StringMonitor().         sm.setNotifyDiffer(ep.isNotifyDiffer()).         sm.setNotifyMatch(ep.isNotifyMatch()).         sm.setStringToCompare(ep.getStringToCompare()).         bean = sm.     } else {         throw new IllegalArgumentException("Unsupported monitortype: " + ep.getMonitorType()).     }     bean.addObservedObject(ep.getJMXObjectName()).     bean.setObservedAttribute(ep.getObservedAttribute()).     bean.setGranularityPeriod(ep.getGranularityPeriod()).     // register the bean     mMonitorObjectName = new ObjectName(ep.getObjectDomain(), "name", "camel-jmx-monitor-" + UUID.randomUUID()).     ManagementFactory.getPlatformMBeanServer().registerMBean(bean, mMonitorObjectName).     // add ourselves as a listener to it     NotificationFilter nf = ep.getNotificationFilter().     getServerConnection().addNotificationListener(mMonitorObjectName, this, nf, bean).     bean.start(). }
false;protected;0;7;;@Override protected void removeNotificationListeners() throws Exception {     // remove ourselves as a listener     ManagementFactory.getPlatformMBeanServer().removeNotificationListener(mMonitorObjectName, this).     // unregister the monitor bean     ManagementFactory.getPlatformMBeanServer().unregisterMBean(mMonitorObjectName). }
false;private;3;17;;private Number convertNumberToAttributeType(Number toConvert, ObjectName jmxObjectName, String observedAttribute) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException, MBeanException {     Object attr = ManagementFactory.getPlatformMBeanServer().getAttribute(jmxObjectName, observedAttribute).     if (attr instanceof Byte) {         return toConvert != null ? toConvert.byteValue() : null.     } else if (attr instanceof Integer) {         return toConvert != null ? toConvert.intValue() : null.     } else if (attr instanceof Short) {         return toConvert != null ? toConvert.shortValue() : null.     } else if (attr instanceof Long) {         return toConvert != null ? toConvert.longValue() : null.     } else if (attr instanceof Float) {         return toConvert != null ? toConvert.floatValue() : null.     } else {         return toConvert.     } }
