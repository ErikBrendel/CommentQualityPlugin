commented;modifiers;parameterAmount;loc;comment;code
true;public;0;13;/**  * Tests that we can unmarshal TSV with the default configuration.  */ ;/**  * Tests that we can unmarshal TSV with the default configuration.  */ @Test public void shouldUnmarshalWithDefaultConfiguration() throws Exception {     template.sendBody("direct:default", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree")).     result.expectedMessageCount(1).     result.assertIsSatisfied().     List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody()).     assertEquals(3, body.size()).     assertEquals(Arrays.asList("A", "B", "C"), body.get(0)).     assertEquals(Arrays.asList("1", "2", "3"), body.get(1)).     assertEquals(Arrays.asList("one", "two", "three"), body.get(2)). }
true;public;0;12;/**  * Tests that we can unmarshal TSV and produce maps for each row  */ ;/**  * Tests that we can unmarshal TSV and produce maps for each row  */ @Test public void shouldUnmarshalAsMap() throws Exception {     template.sendBody("direct:map", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree")).     result.expectedMessageCount(1).     result.assertIsSatisfied().     List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody()).     assertEquals(2, body.size()).     assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0)).     assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1)). }
true;public;0;12;/**  * Tests that we can unmarshal TSV and produce maps for each row with the given header  */ ;/**  * Tests that we can unmarshal TSV and produce maps for each row with the given header  */ @Test public void shouldUnmarshalAsMapWithHeaders() throws Exception {     template.sendBody("direct:mapWithHeaders", join("1\t2\t3", "one\ttwo\tthree")).     result.expectedMessageCount(1).     result.assertIsSatisfied().     List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody()).     assertEquals(2, body.size()).     assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0)).     assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1)). }
true;public;0;36;/**  * Tests that we can unmarshal TSV and produce an Iterator that lazily reads the input  */ ;/**  * Tests that we can unmarshal TSV and produce an Iterator that lazily reads the input  */ @Test public void shouldUnmarshalUsingIterator() throws Exception {     template.sendBody("direct:lazy", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree")).     result.expectedMessageCount(1).     result.assertIsSatisfied().     Iterator<?> body = assertIsInstanceOf(Iterator.class, result.getExchanges().get(0).getIn().getBody()).     // Read first line     assertTrue(body.hasNext()).     assertEquals(Arrays.asList("A", "B", "C"), body.next()).     // Try to remove the element     try {         body.remove().         fail("Should have thrown a UnsupportedOperationException").     } catch (UnsupportedOperationException e) {     // Success     }     // Read all the lines     assertTrue(body.hasNext()).     assertEquals(Arrays.asList("1", "2", "3"), body.next()).     assertTrue(body.hasNext()).     assertEquals(Arrays.asList("one", "two", "three"), body.next()).     assertFalse(body.hasNext()).     // Try to read one more element     try {         body.next().         fail("Should have thrown a NoSuchElementException").     } catch (NoSuchElementException e) {     // Success     } }
true;public;0;12;/**  * Tests that we can unmarshal TSV that has lots of configuration options  */ ;/**  * Tests that we can unmarshal TSV that has lots of configuration options  */ @Test public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception {     template.sendBody("direct:advanced", join("!This is comment", "!This is comment too", "A\tB", "", "  \tD  ")).     result.expectedMessageCount(1).     result.assertIsSatisfied().     List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody()).     assertEquals(2, body.size()).     assertEquals(Arrays.asList("A", "B"), body.get(0)).     assertEquals(Arrays.asList("N/A", "D  "), body.get(1)). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalSpringTest.xml"). }
