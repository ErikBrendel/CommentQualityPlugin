# id;timestamp;commentText;codeText;commentWords;codeWords
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalSingleLine() throws Exception;1416561667;Tests that we can marshal a single line with TSV.;@Test_    public void shouldMarshalSingleLine() throws Exception {_        template.sendBody("direct:default", asMap("A", "1", "B", "2", "C", "3"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2\t3"), body)__    };tests,that,we,can,marshal,a,single,line,with,tsv;test,public,void,should,marshal,single,line,throws,exception,template,send,body,direct,default,as,map,a,1,b,2,c,3,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,t3,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalSingleLine() throws Exception;1425288489;Tests that we can marshal a single line with TSV.;@Test_    public void shouldMarshalSingleLine() throws Exception {_        template.sendBody("direct:default", asMap("A", "1", "B", "2", "C", "3"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2\t3"), body)__    };tests,that,we,can,marshal,a,single,line,with,tsv;test,public,void,should,marshal,single,line,throws,exception,template,send,body,direct,default,as,map,a,1,b,2,c,3,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,t3,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalSingleLine() throws Exception;1524063209;Tests that we can marshal a single line with TSV.;@Test_    public void shouldMarshalSingleLine() throws Exception {_        template.sendBody("direct:default", asMap("A", "1", "B", "2", "C", "3"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2\t3"), body)__    };tests,that,we,can,marshal,a,single,line,with,tsv;test,public,void,should,marshal,single,line,throws,exception,template,send,body,direct,default,as,map,a,1,b,2,c,3,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,t3,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalAndAddNewColumns() throws Exception;1416561667;Tests that the marshalling adds new columns on the fly and keep its order;@Test_    public void shouldMarshalAndAddNewColumns() throws Exception {_        template.sendBody("direct:default", Arrays.asList(_                asMap("A", "1", "B", "2"),_                asMap("C", "three", "A", "one", "B", "two")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2", "one\ttwo\tthree"), body)__    };tests,that,the,marshalling,adds,new,columns,on,the,fly,and,keep,its,order;test,public,void,should,marshal,and,add,new,columns,throws,exception,template,send,body,direct,default,arrays,as,list,as,map,a,1,b,2,as,map,c,three,a,one,b,two,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalAndAddNewColumns() throws Exception;1425288489;Tests that the marshalling adds new columns on the fly and keep its order;@Test_    public void shouldMarshalAndAddNewColumns() throws Exception {_        template.sendBody("direct:default", Arrays.asList(_                asMap("A", "1", "B", "2"),_                asMap("C", "three", "A", "one", "B", "two")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2", "one\ttwo\tthree"), body)__    };tests,that,the,marshalling,adds,new,columns,on,the,fly,and,keep,its,order;test,public,void,should,marshal,and,add,new,columns,throws,exception,template,send,body,direct,default,arrays,as,list,as,map,a,1,b,2,as,map,c,three,a,one,b,two,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalAndAddNewColumns() throws Exception;1524063209;Tests that the marshalling adds new columns on the fly and keep its order;@Test_    public void shouldMarshalAndAddNewColumns() throws Exception {_        template.sendBody("direct:default", Arrays.asList(_                asMap("A", "1", "B", "2"),_                asMap("C", "three", "A", "one", "B", "two")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2", "one\ttwo\tthree"), body)__    };tests,that,the,marshalling,adds,new,columns,on,the,fly,and,keep,its,order;test,public,void,should,marshal,and,add,new,columns,throws,exception,template,send,body,direct,default,arrays,as,list,as,map,a,1,b,2,as,map,c,three,a,one,b,two,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalWithSpecificHeaders() throws Exception;1416561667;Tests that we can marshal TSV with specific headers;@Test_    public void shouldMarshalWithSpecificHeaders() throws Exception {_        template.sendBody("direct:header", Arrays.asList(_                asMap("A", "1", "B", "2", "C", "3"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t3", "one\tthree"), body)__    };tests,that,we,can,marshal,tsv,with,specific,headers;test,public,void,should,marshal,with,specific,headers,throws,exception,template,send,body,direct,header,arrays,as,list,as,map,a,1,b,2,c,3,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t3,one,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalWithSpecificHeaders() throws Exception;1425288489;Tests that we can marshal TSV with specific headers;@Test_    public void shouldMarshalWithSpecificHeaders() throws Exception {_        template.sendBody("direct:header", Arrays.asList(_                asMap("A", "1", "B", "2", "C", "3"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t3", "one\tthree"), body)__    };tests,that,we,can,marshal,tsv,with,specific,headers;test,public,void,should,marshal,with,specific,headers,throws,exception,template,send,body,direct,header,arrays,as,list,as,map,a,1,b,2,c,3,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t3,one,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalWithSpecificHeaders() throws Exception;1524063209;Tests that we can marshal TSV with specific headers;@Test_    public void shouldMarshalWithSpecificHeaders() throws Exception {_        template.sendBody("direct:header", Arrays.asList(_                asMap("A", "1", "B", "2", "C", "3"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t3", "one\tthree"), body)__    };tests,that,we,can,marshal,tsv,with,specific,headers;test,public,void,should,marshal,with,specific,headers,throws,exception,template,send,body,direct,header,arrays,as,list,as,map,a,1,b,2,c,3,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t3,one,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalWithDefaultConfiguration() throws Exception;1416561667;Tests that we can marshal TSV with the default configuration.;@Test_    public void shouldMarshalWithDefaultConfiguration() throws Exception {_        template.sendBody("direct:default", Arrays.asList(_                asMap("A", "1", "B", "2", "C", "3"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2\t3", "one\ttwo\tthree"), body)__    };tests,that,we,can,marshal,tsv,with,the,default,configuration;test,public,void,should,marshal,with,default,configuration,throws,exception,template,send,body,direct,default,arrays,as,list,as,map,a,1,b,2,c,3,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,t3,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalWithDefaultConfiguration() throws Exception;1425288489;Tests that we can marshal TSV with the default configuration.;@Test_    public void shouldMarshalWithDefaultConfiguration() throws Exception {_        template.sendBody("direct:default", Arrays.asList(_                asMap("A", "1", "B", "2", "C", "3"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2\t3", "one\ttwo\tthree"), body)__    };tests,that,we,can,marshal,tsv,with,the,default,configuration;test,public,void,should,marshal,with,default,configuration,throws,exception,template,send,body,direct,default,arrays,as,list,as,map,a,1,b,2,c,3,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,t3,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalWithDefaultConfiguration() throws Exception;1524063209;Tests that we can marshal TSV with the default configuration.;@Test_    public void shouldMarshalWithDefaultConfiguration() throws Exception {_        template.sendBody("direct:default", Arrays.asList(_                asMap("A", "1", "B", "2", "C", "3"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("1\t2\t3", "one\ttwo\tthree"), body)__    };tests,that,we,can,marshal,tsv,with,the,default,configuration;test,public,void,should,marshal,with,default,configuration,throws,exception,template,send,body,direct,default,arrays,as,list,as,map,a,1,b,2,c,3,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,1,t2,t3,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalUsingAdvancedConfiguration() throws Exception;1416561667;Tests that we can marshal TSV using and advanced configuration;@Test_    public void shouldMarshalUsingAdvancedConfiguration() throws Exception {_        template.sendBody("direct:advanced", Arrays.asList(_                asMap("A", null, "B", "", "C", "_"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("N/A\tempty\t_", "one\ttwo\tthree"), body)__    };tests,that,we,can,marshal,tsv,using,and,advanced,configuration;test,public,void,should,marshal,using,advanced,configuration,throws,exception,template,send,body,direct,advanced,arrays,as,list,as,map,a,null,b,c,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,n,a,tempty,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalUsingAdvancedConfiguration() throws Exception;1425288489;Tests that we can marshal TSV using and advanced configuration;@Test_    public void shouldMarshalUsingAdvancedConfiguration() throws Exception {_        template.sendBody("direct:advanced", Arrays.asList(_                asMap("A", null, "B", "", "C", "_"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("N/A\tempty\t_", "one\ttwo\tthree"), body)__    };tests,that,we,can,marshal,tsv,using,and,advanced,configuration;test,public,void,should,marshal,using,advanced,configuration,throws,exception,template,send,body,direct,advanced,arrays,as,list,as,map,a,null,b,c,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,n,a,tempty,one,ttwo,tthree,body
UniVocityTsvDataFormatMarshalTest -> @Test     public void shouldMarshalUsingAdvancedConfiguration() throws Exception;1524063209;Tests that we can marshal TSV using and advanced configuration;@Test_    public void shouldMarshalUsingAdvancedConfiguration() throws Exception {_        template.sendBody("direct:advanced", Arrays.asList(_                asMap("A", null, "B", "", "C", "_"),_                asMap("A", "one", "B", "two", "C", "three")_        ))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(join("N/A\tempty\t_", "one\ttwo\tthree"), body)__    };tests,that,we,can,marshal,tsv,using,and,advanced,configuration;test,public,void,should,marshal,using,advanced,configuration,throws,exception,template,send,body,direct,advanced,arrays,as,list,as,map,a,null,b,c,as,map,a,one,b,two,c,three,result,expected,message,count,1,result,assert,is,satisfied,string,body,assert,is,instance,of,string,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,join,n,a,tempty,one,ttwo,tthree,body
