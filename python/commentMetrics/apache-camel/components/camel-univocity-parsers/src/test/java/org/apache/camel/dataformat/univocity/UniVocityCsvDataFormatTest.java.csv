commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void shouldConfigureNullValue() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setNullValue("N/A").     assertEquals("N/A", dataFormat.getNullValue()).     assertEquals("N/A", dataFormat.createAndConfigureWriterSettings().getNullValue()).     assertEquals("N/A", dataFormat.createAndConfigureParserSettings().getNullValue()). }
false;public;0;9;;@Test public void shouldConfigureSkipEmptyLines() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setSkipEmptyLines(true).     assertTrue(dataFormat.getSkipEmptyLines()).     assertTrue(dataFormat.createAndConfigureWriterSettings().getSkipEmptyLines()).     assertTrue(dataFormat.createAndConfigureParserSettings().getSkipEmptyLines()). }
false;public;0;9;;@Test public void shouldConfigureIgnoreTrailingWhitespaces() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setIgnoreTrailingWhitespaces(true).     assertTrue(dataFormat.getIgnoreTrailingWhitespaces()).     assertTrue(dataFormat.createAndConfigureWriterSettings().getIgnoreTrailingWhitespaces()).     assertTrue(dataFormat.createAndConfigureParserSettings().getIgnoreTrailingWhitespaces()). }
false;public;0;9;;@Test public void shouldConfigureIgnoreLeadingWhitespaces() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setIgnoreLeadingWhitespaces(true).     assertTrue(dataFormat.getIgnoreLeadingWhitespaces()).     assertTrue(dataFormat.createAndConfigureWriterSettings().getIgnoreLeadingWhitespaces()).     assertTrue(dataFormat.createAndConfigureParserSettings().getIgnoreLeadingWhitespaces()). }
false;public;0;9;;@Test public void shouldConfigureHeadersDisabled() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setHeadersDisabled(true).     assertTrue(dataFormat.isHeadersDisabled()).     assertNull(dataFormat.createAndConfigureWriterSettings().getHeaders()).     assertNull(dataFormat.createAndConfigureParserSettings().getHeaders()). }
false;public;0;9;;@Test public void shouldConfigureHeaders() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setHeaders(new String[] { "A", "B", "C" }).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.getHeaders()).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.createAndConfigureWriterSettings().getHeaders()).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.createAndConfigureParserSettings().getHeaders()). }
false;public;0;8;;@Test public void shouldConfigureHeaderExtractionEnabled() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setHeaderExtractionEnabled(true).     assertTrue(dataFormat.getHeaderExtractionEnabled()).     assertTrue(dataFormat.createAndConfigureParserSettings().isHeaderExtractionEnabled()). }
false;public;0;8;;@Test public void shouldConfigureNumberOfRecordsToRead() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setNumberOfRecordsToRead(42).     assertEquals(Integer.valueOf(42), dataFormat.getNumberOfRecordsToRead()).     assertEquals(42, dataFormat.createAndConfigureParserSettings().getNumberOfRecordsToRead()). }
false;public;0;9;;@Test public void shouldConfigureEmptyValue() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setEmptyValue("empty").     assertEquals("empty", dataFormat.getEmptyValue()).     assertEquals("empty", dataFormat.createAndConfigureWriterSettings().getEmptyValue()).     assertEquals("empty", dataFormat.createAndConfigureParserSettings().getEmptyValue()). }
false;public;0;9;;@Test public void shouldConfigureLineSeparator() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setLineSeparator("ls").     assertEquals("ls", dataFormat.getLineSeparator()).     assertEquals("ls", dataFormat.createAndConfigureWriterSettings().getFormat().getLineSeparatorString()).     assertEquals("ls", dataFormat.createAndConfigureParserSettings().getFormat().getLineSeparatorString()). }
false;public;0;9;;@Test public void shouldConfigureNormalizedLineSeparator() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setNormalizedLineSeparator('n').     assertEquals(Character.valueOf('n'), dataFormat.getNormalizedLineSeparator()).     assertEquals('n', dataFormat.createAndConfigureWriterSettings().getFormat().getNormalizedNewline()).     assertEquals('n', dataFormat.createAndConfigureParserSettings().getFormat().getNormalizedNewline()). }
false;public;0;9;;@Test public void shouldConfigureComment() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setComment('c').     assertEquals(Character.valueOf('c'), dataFormat.getComment()).     assertEquals('c', dataFormat.createAndConfigureWriterSettings().getFormat().getComment()).     assertEquals('c', dataFormat.createAndConfigureParserSettings().getFormat().getComment()). }
false;public;0;7;;@Test public void shouldConfigureLazyLoad() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setLazyLoad(true).     assertTrue(dataFormat.isLazyLoad()). }
false;public;0;7;;@Test public void shouldConfigureAsMap() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setAsMap(true).     assertTrue(dataFormat.isAsMap()). }
false;public;0;8;;@Test public void shouldConfigureQuoteAllFields() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setQuoteAllFields(true).     assertTrue(dataFormat.getQuoteAllFields()).     assertTrue(dataFormat.createAndConfigureWriterSettings().getQuoteAllFields()). }
false;public;0;9;;@Test public void shouldConfigureQuote() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setQuote('q').     assertEquals(Character.valueOf('q'), dataFormat.getQuote()).     assertEquals('q', dataFormat.createAndConfigureWriterSettings().getFormat().getQuote()).     assertEquals('q', dataFormat.createAndConfigureParserSettings().getFormat().getQuote()). }
false;public;0;9;;@Test public void shouldConfigureQuoteEscape() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setQuoteEscape('e').     assertEquals(Character.valueOf('e'), dataFormat.getQuoteEscape()).     assertEquals('e', dataFormat.createAndConfigureWriterSettings().getFormat().getQuoteEscape()).     assertEquals('e', dataFormat.createAndConfigureParserSettings().getFormat().getQuoteEscape()). }
false;public;0;9;;@Test public void shouldConfigureDelimiter() {     UniVocityCsvDataFormat dataFormat = new UniVocityCsvDataFormat().setDelimiter('d').     assertEquals(Character.valueOf('d'), dataFormat.getDelimiter()).     assertEquals('d', dataFormat.createAndConfigureWriterSettings().getFormat().getDelimiter()).     assertEquals('d', dataFormat.createAndConfigureParserSettings().getFormat().getDelimiter()). }
