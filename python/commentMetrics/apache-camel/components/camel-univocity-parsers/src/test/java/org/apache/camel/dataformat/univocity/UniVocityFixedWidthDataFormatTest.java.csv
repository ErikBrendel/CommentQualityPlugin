commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void shouldConfigureNullValue() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setNullValue("N/A").     assertEquals("N/A", dataFormat.getNullValue()).     assertEquals("N/A", dataFormat.createAndConfigureWriterSettings().getNullValue()).     assertEquals("N/A", dataFormat.createAndConfigureParserSettings().getNullValue()). }
false;public;0;10;;@Test public void shouldConfigureSkipEmptyLines() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setSkipEmptyLines(true).     assertTrue(dataFormat.getSkipEmptyLines()).     assertTrue(dataFormat.createAndConfigureWriterSettings().getSkipEmptyLines()).     assertTrue(dataFormat.createAndConfigureParserSettings().getSkipEmptyLines()). }
false;public;0;10;;@Test public void shouldConfigureIgnoreTrailingWhitespaces() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setIgnoreTrailingWhitespaces(true).     assertTrue(dataFormat.getIgnoreTrailingWhitespaces()).     assertTrue(dataFormat.createAndConfigureWriterSettings().getIgnoreTrailingWhitespaces()).     assertTrue(dataFormat.createAndConfigureParserSettings().getIgnoreTrailingWhitespaces()). }
false;public;0;10;;@Test public void shouldConfigureIgnoreLeadingWhitespaces() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setIgnoreLeadingWhitespaces(true).     assertTrue(dataFormat.getIgnoreLeadingWhitespaces()).     assertTrue(dataFormat.createAndConfigureWriterSettings().getIgnoreLeadingWhitespaces()).     assertTrue(dataFormat.createAndConfigureParserSettings().getIgnoreLeadingWhitespaces()). }
false;public;0;10;;@Test public void shouldConfigureHeadersDisabled() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setHeadersDisabled(true).     assertTrue(dataFormat.isHeadersDisabled()).     assertNull(dataFormat.createAndConfigureWriterSettings().getHeaders()).     assertNull(dataFormat.createAndConfigureParserSettings().getHeaders()). }
false;public;0;10;;@Test public void shouldConfigureHeaders() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setHeaders(new String[] { "A", "B", "C" }).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.getHeaders()).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.createAndConfigureWriterSettings().getHeaders()).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.createAndConfigureParserSettings().getHeaders()). }
false;public;0;9;;@Test public void shouldConfigureHeaderExtractionEnabled() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setHeaderExtractionEnabled(true).     assertTrue(dataFormat.getHeaderExtractionEnabled()).     assertTrue(dataFormat.createAndConfigureParserSettings().isHeaderExtractionEnabled()). }
false;public;0;9;;@Test public void shouldConfigureNumberOfRecordsToRead() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setNumberOfRecordsToRead(42).     assertEquals(Integer.valueOf(42), dataFormat.getNumberOfRecordsToRead()).     assertEquals(42, dataFormat.createAndConfigureParserSettings().getNumberOfRecordsToRead()). }
false;public;0;9;;@Test public void shouldConfigureEmptyValue() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setEmptyValue("empty").     assertEquals("empty", dataFormat.getEmptyValue()).     assertEquals("empty", dataFormat.createAndConfigureWriterSettings().getEmptyValue()). }
false;public;0;10;;@Test public void shouldConfigureLineSeparator() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setLineSeparator("ls").     assertEquals("ls", dataFormat.getLineSeparator()).     assertEquals("ls", dataFormat.createAndConfigureWriterSettings().getFormat().getLineSeparatorString()).     assertEquals("ls", dataFormat.createAndConfigureParserSettings().getFormat().getLineSeparatorString()). }
false;public;0;10;;@Test public void shouldConfigureNormalizedLineSeparator() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setNormalizedLineSeparator('n').     assertEquals(Character.valueOf('n'), dataFormat.getNormalizedLineSeparator()).     assertEquals('n', dataFormat.createAndConfigureWriterSettings().getFormat().getNormalizedNewline()).     assertEquals('n', dataFormat.createAndConfigureParserSettings().getFormat().getNormalizedNewline()). }
false;public;0;10;;@Test public void shouldConfigureComment() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setComment('c').     assertEquals(Character.valueOf('c'), dataFormat.getComment()).     assertEquals('c', dataFormat.createAndConfigureWriterSettings().getFormat().getComment()).     assertEquals('c', dataFormat.createAndConfigureParserSettings().getFormat().getComment()). }
false;public;0;8;;@Test public void shouldConfigureLazyLoad() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setLazyLoad(true).     assertTrue(dataFormat.isLazyLoad()). }
false;public;0;8;;@Test public void shouldConfigureAsMap() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setAsMap(true).     assertTrue(dataFormat.isAsMap()). }
false;public;0;10;;@Test public void shouldConfigurePadding() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setPadding('p').     assertEquals(Character.valueOf('p'), dataFormat.getPadding()).     assertEquals('p', dataFormat.createAndConfigureWriterSettings().getFormat().getPadding()).     assertEquals('p', dataFormat.createAndConfigureParserSettings().getFormat().getPadding()). }
false;public;0;9;;@Test public void shouldConfigureSkipTrailingCharsUntilNewline() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setSkipTrailingCharsUntilNewline(true).     assertTrue(dataFormat.getSkipTrailingCharsUntilNewline()).     assertTrue(dataFormat.createAndConfigureParserSettings().getSkipTrailingCharsUntilNewline()). }
false;public;0;9;;@Test public void shouldConfigureRecordEndsOnNewline() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setRecordEndsOnNewline(true).     assertTrue(dataFormat.getRecordEndsOnNewline()).     assertTrue(dataFormat.createAndConfigureParserSettings().getRecordEndsOnNewline()). }
false;public;0;9;;@Test public void shouldConfigureFieldLengthWithLengthsOnly() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).     assertArrayEquals(new int[] { 1, 2, 3 }, dataFormat.getFieldLengths()).     dataFormat.createAndConfigureWriterSettings(). }
false;public;0;11;;@Test public void shouldConfigureFieldLengthWithHeadersAndLengths() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setHeaders(new String[] { "A", "B", "C" }).     assertArrayEquals(new int[] { 1, 2, 3 }, dataFormat.getFieldLengths()).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.getHeaders()).     dataFormat.createAndConfigureWriterSettings(). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void shouldNotAllowNoFieldLengths() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().     dataFormat.createAndConfigureWriterSettings(). }
false;public;0;11;;@Test(expected = IllegalArgumentException.class) public void shouldNotAllowHeadersAndLengthsOfDifferentSize() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3, 4 }).setHeaders(new String[] { "A", "B", "C" }).     assertArrayEquals(new int[] { 1, 2, 3, 4 }, dataFormat.getFieldLengths()).     assertArrayEquals(new String[] { "A", "B", "C" }, dataFormat.getHeaders()).     dataFormat.createAndConfigureWriterSettings(). }
false;public;0;11;;@Test(expected = IllegalArgumentException.class) public void shouldNotAllowHeadersWithSameName() {     UniVocityFixedWidthDataFormat dataFormat = new UniVocityFixedWidthDataFormat().setFieldLengths(new int[] { 1, 2, 3 }).setHeaders(new String[] { "A", "B", "A" }).     assertArrayEquals(new int[] { 1, 2, 3 }, dataFormat.getFieldLengths()).     assertArrayEquals(new String[] { "A", "B", "A" }, dataFormat.getHeaders()).     dataFormat.createAndConfigureWriterSettings(). }
