# id;timestamp;commentText;codeText;commentWords;codeWords
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalAsMap() throws Exception;1416561667;Tests that we can unmarshal TSV and produce maps for each row;@Test_    public void shouldUnmarshalAsMap() throws Exception {_        template.sendBody("direct:map", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0))__        assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1))__    };tests,that,we,can,unmarshal,tsv,and,produce,maps,for,each,row;test,public,void,should,unmarshal,as,map,throws,exception,template,send,body,direct,map,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,as,map,a,1,b,2,c,3,body,get,0,assert,equals,as,map,a,one,b,two,c,three,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalAsMap() throws Exception;1425288489;Tests that we can unmarshal TSV and produce maps for each row;@Test_    public void shouldUnmarshalAsMap() throws Exception {_        template.sendBody("direct:map", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0))__        assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1))__    };tests,that,we,can,unmarshal,tsv,and,produce,maps,for,each,row;test,public,void,should,unmarshal,as,map,throws,exception,template,send,body,direct,map,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,as,map,a,1,b,2,c,3,body,get,0,assert,equals,as,map,a,one,b,two,c,three,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalAsMap() throws Exception;1524063209;Tests that we can unmarshal TSV and produce maps for each row;@Test_    public void shouldUnmarshalAsMap() throws Exception {_        template.sendBody("direct:map", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0))__        assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1))__    };tests,that,we,can,unmarshal,tsv,and,produce,maps,for,each,row;test,public,void,should,unmarshal,as,map,throws,exception,template,send,body,direct,map,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,as,map,a,1,b,2,c,3,body,get,0,assert,equals,as,map,a,one,b,two,c,three,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception;1416561667;Tests that we can unmarshal TSV that has lots of configuration options;@Test_    public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception {_        template.sendBody("direct:advanced", join("!This is comment", "!This is comment too", "A\tB", "", "  \tD  "))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(Arrays.asList("A", "B"), body.get(0))__        assertEquals(Arrays.asList("N/A", "D  "), body.get(1))__    };tests,that,we,can,unmarshal,tsv,that,has,lots,of,configuration,options;test,public,void,should,unmarshal,using,advanced,configuration,throws,exception,template,send,body,direct,advanced,join,this,is,comment,this,is,comment,too,a,t,b,t,d,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,arrays,as,list,a,b,body,get,0,assert,equals,arrays,as,list,n,a,d,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception;1425288489;Tests that we can unmarshal TSV that has lots of configuration options;@Test_    public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception {_        template.sendBody("direct:advanced", join("!This is comment", "!This is comment too", "A\tB", "", "  \tD  "))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(Arrays.asList("A", "B"), body.get(0))__        assertEquals(Arrays.asList("N/A", "D  "), body.get(1))__    };tests,that,we,can,unmarshal,tsv,that,has,lots,of,configuration,options;test,public,void,should,unmarshal,using,advanced,configuration,throws,exception,template,send,body,direct,advanced,join,this,is,comment,this,is,comment,too,a,t,b,t,d,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,arrays,as,list,a,b,body,get,0,assert,equals,arrays,as,list,n,a,d,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception;1524063209;Tests that we can unmarshal TSV that has lots of configuration options;@Test_    public void shouldUnmarshalUsingAdvancedConfiguration() throws Exception {_        template.sendBody("direct:advanced", join("!This is comment", "!This is comment too", "A\tB", "", "  \tD  "))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(Arrays.asList("A", "B"), body.get(0))__        assertEquals(Arrays.asList("N/A", "D  "), body.get(1))__    };tests,that,we,can,unmarshal,tsv,that,has,lots,of,configuration,options;test,public,void,should,unmarshal,using,advanced,configuration,throws,exception,template,send,body,direct,advanced,join,this,is,comment,this,is,comment,too,a,t,b,t,d,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,arrays,as,list,a,b,body,get,0,assert,equals,arrays,as,list,n,a,d,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalWithDefaultConfiguration() throws Exception;1416561667;Tests that we can unmarshal TSV with the default configuration.;@Test_    public void shouldUnmarshalWithDefaultConfiguration() throws Exception {_        template.sendBody("direct:default", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(3, body.size())__        assertEquals(Arrays.asList("A", "B", "C"), body.get(0))__        assertEquals(Arrays.asList("1", "2", "3"), body.get(1))__        assertEquals(Arrays.asList("one", "two", "three"), body.get(2))__    };tests,that,we,can,unmarshal,tsv,with,the,default,configuration;test,public,void,should,unmarshal,with,default,configuration,throws,exception,template,send,body,direct,default,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,3,body,size,assert,equals,arrays,as,list,a,b,c,body,get,0,assert,equals,arrays,as,list,1,2,3,body,get,1,assert,equals,arrays,as,list,one,two,three,body,get,2
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalWithDefaultConfiguration() throws Exception;1425288489;Tests that we can unmarshal TSV with the default configuration.;@Test_    public void shouldUnmarshalWithDefaultConfiguration() throws Exception {_        template.sendBody("direct:default", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(3, body.size())__        assertEquals(Arrays.asList("A", "B", "C"), body.get(0))__        assertEquals(Arrays.asList("1", "2", "3"), body.get(1))__        assertEquals(Arrays.asList("one", "two", "three"), body.get(2))__    };tests,that,we,can,unmarshal,tsv,with,the,default,configuration;test,public,void,should,unmarshal,with,default,configuration,throws,exception,template,send,body,direct,default,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,3,body,size,assert,equals,arrays,as,list,a,b,c,body,get,0,assert,equals,arrays,as,list,1,2,3,body,get,1,assert,equals,arrays,as,list,one,two,three,body,get,2
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalWithDefaultConfiguration() throws Exception;1524063209;Tests that we can unmarshal TSV with the default configuration.;@Test_    public void shouldUnmarshalWithDefaultConfiguration() throws Exception {_        template.sendBody("direct:default", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(3, body.size())__        assertEquals(Arrays.asList("A", "B", "C"), body.get(0))__        assertEquals(Arrays.asList("1", "2", "3"), body.get(1))__        assertEquals(Arrays.asList("one", "two", "three"), body.get(2))__    };tests,that,we,can,unmarshal,tsv,with,the,default,configuration;test,public,void,should,unmarshal,with,default,configuration,throws,exception,template,send,body,direct,default,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,3,body,size,assert,equals,arrays,as,list,a,b,c,body,get,0,assert,equals,arrays,as,list,1,2,3,body,get,1,assert,equals,arrays,as,list,one,two,three,body,get,2
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalUsingIterator() throws Exception;1416561667;Tests that we can unmarshal TSV and produce an Iterator that lazily reads the input;@Test_    public void shouldUnmarshalUsingIterator() throws Exception {_        template.sendBody("direct:lazy", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        Iterator<?> body = assertIsInstanceOf(Iterator.class, result.getExchanges().get(0).getIn().getBody())___        _        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("A", "B", "C"), body.next())___        _        try {_            body.remove()__            fail("Should have thrown a UnsupportedOperationException")__        } catch (UnsupportedOperationException e) {_            _        }__        _        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("1", "2", "3"), body.next())__        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("one", "two", "three"), body.next())__        assertFalse(body.hasNext())___        _        try {_            body.next()__            fail("Should have thrown a NoSuchElementException")__        } catch (NoSuchElementException e) {_            _        }_    };tests,that,we,can,unmarshal,tsv,and,produce,an,iterator,that,lazily,reads,the,input;test,public,void,should,unmarshal,using,iterator,throws,exception,template,send,body,direct,lazy,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,iterator,body,assert,is,instance,of,iterator,class,result,get,exchanges,get,0,get,in,get,body,assert,true,body,has,next,assert,equals,arrays,as,list,a,b,c,body,next,try,body,remove,fail,should,have,thrown,a,unsupported,operation,exception,catch,unsupported,operation,exception,e,assert,true,body,has,next,assert,equals,arrays,as,list,1,2,3,body,next,assert,true,body,has,next,assert,equals,arrays,as,list,one,two,three,body,next,assert,false,body,has,next,try,body,next,fail,should,have,thrown,a,no,such,element,exception,catch,no,such,element,exception,e
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalUsingIterator() throws Exception;1425288489;Tests that we can unmarshal TSV and produce an Iterator that lazily reads the input;@Test_    public void shouldUnmarshalUsingIterator() throws Exception {_        template.sendBody("direct:lazy", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        Iterator<?> body = assertIsInstanceOf(Iterator.class, result.getExchanges().get(0).getIn().getBody())___        _        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("A", "B", "C"), body.next())___        _        try {_            body.remove()__            fail("Should have thrown a UnsupportedOperationException")__        } catch (UnsupportedOperationException e) {_            _        }__        _        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("1", "2", "3"), body.next())__        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("one", "two", "three"), body.next())__        assertFalse(body.hasNext())___        _        try {_            body.next()__            fail("Should have thrown a NoSuchElementException")__        } catch (NoSuchElementException e) {_            _        }_    };tests,that,we,can,unmarshal,tsv,and,produce,an,iterator,that,lazily,reads,the,input;test,public,void,should,unmarshal,using,iterator,throws,exception,template,send,body,direct,lazy,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,iterator,body,assert,is,instance,of,iterator,class,result,get,exchanges,get,0,get,in,get,body,assert,true,body,has,next,assert,equals,arrays,as,list,a,b,c,body,next,try,body,remove,fail,should,have,thrown,a,unsupported,operation,exception,catch,unsupported,operation,exception,e,assert,true,body,has,next,assert,equals,arrays,as,list,1,2,3,body,next,assert,true,body,has,next,assert,equals,arrays,as,list,one,two,three,body,next,assert,false,body,has,next,try,body,next,fail,should,have,thrown,a,no,such,element,exception,catch,no,such,element,exception,e
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalUsingIterator() throws Exception;1524063209;Tests that we can unmarshal TSV and produce an Iterator that lazily reads the input;@Test_    public void shouldUnmarshalUsingIterator() throws Exception {_        template.sendBody("direct:lazy", join("A\tB\tC", "1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        Iterator<?> body = assertIsInstanceOf(Iterator.class, result.getExchanges().get(0).getIn().getBody())___        _        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("A", "B", "C"), body.next())___        _        try {_            body.remove()__            fail("Should have thrown a UnsupportedOperationException")__        } catch (UnsupportedOperationException e) {_            _        }__        _        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("1", "2", "3"), body.next())__        assertTrue(body.hasNext())__        assertEquals(Arrays.asList("one", "two", "three"), body.next())__        assertFalse(body.hasNext())___        _        try {_            body.next()__            fail("Should have thrown a NoSuchElementException")__        } catch (NoSuchElementException e) {_            _        }_    };tests,that,we,can,unmarshal,tsv,and,produce,an,iterator,that,lazily,reads,the,input;test,public,void,should,unmarshal,using,iterator,throws,exception,template,send,body,direct,lazy,join,a,t,b,t,c,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,iterator,body,assert,is,instance,of,iterator,class,result,get,exchanges,get,0,get,in,get,body,assert,true,body,has,next,assert,equals,arrays,as,list,a,b,c,body,next,try,body,remove,fail,should,have,thrown,a,unsupported,operation,exception,catch,unsupported,operation,exception,e,assert,true,body,has,next,assert,equals,arrays,as,list,1,2,3,body,next,assert,true,body,has,next,assert,equals,arrays,as,list,one,two,three,body,next,assert,false,body,has,next,try,body,next,fail,should,have,thrown,a,no,such,element,exception,catch,no,such,element,exception,e
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalAsMapWithHeaders() throws Exception;1416561667;Tests that we can unmarshal TSV and produce maps for each row with the given header;@Test_    public void shouldUnmarshalAsMapWithHeaders() throws Exception {_        template.sendBody("direct:mapWithHeaders", join("1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0))__        assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1))__    };tests,that,we,can,unmarshal,tsv,and,produce,maps,for,each,row,with,the,given,header;test,public,void,should,unmarshal,as,map,with,headers,throws,exception,template,send,body,direct,map,with,headers,join,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,as,map,a,1,b,2,c,3,body,get,0,assert,equals,as,map,a,one,b,two,c,three,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalAsMapWithHeaders() throws Exception;1425288489;Tests that we can unmarshal TSV and produce maps for each row with the given header;@Test_    public void shouldUnmarshalAsMapWithHeaders() throws Exception {_        template.sendBody("direct:mapWithHeaders", join("1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0))__        assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1))__    };tests,that,we,can,unmarshal,tsv,and,produce,maps,for,each,row,with,the,given,header;test,public,void,should,unmarshal,as,map,with,headers,throws,exception,template,send,body,direct,map,with,headers,join,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,as,map,a,1,b,2,c,3,body,get,0,assert,equals,as,map,a,one,b,two,c,three,body,get,1
UniVocityTsvDataFormatUnmarshalTest -> @Test     public void shouldUnmarshalAsMapWithHeaders() throws Exception;1524063209;Tests that we can unmarshal TSV and produce maps for each row with the given header;@Test_    public void shouldUnmarshalAsMapWithHeaders() throws Exception {_        template.sendBody("direct:mapWithHeaders", join("1\t2\t3", "one\ttwo\tthree"))___        result.expectedMessageCount(1)__        result.assertIsSatisfied()___        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody())__        assertEquals(2, body.size())__        assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0))__        assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1))__    };tests,that,we,can,unmarshal,tsv,and,produce,maps,for,each,row,with,the,given,header;test,public,void,should,unmarshal,as,map,with,headers,throws,exception,template,send,body,direct,map,with,headers,join,1,t2,t3,one,ttwo,tthree,result,expected,message,count,1,result,assert,is,satisfied,list,body,assert,is,instance,of,list,class,result,get,exchanges,get,0,get,in,get,body,assert,equals,2,body,size,assert,equals,as,map,a,1,b,2,c,3,body,get,0,assert,equals,as,map,a,one,b,two,c,three,body,get,1
