commented;modifiers;parameterAmount;loc;comment;code
true;public;3;18;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public void marshal(Exchange exchange, Object body, OutputStream stream) throws Exception {     if (writerSettings == null) {         synchronized (writerSettingsToken) {             if (writerSettings == null) {                 writerSettings = createAndConfigureWriterSettings().                 marshaller = new Marshaller<>(headers, headers == null).             }         }     }     Writer writer = new OutputStreamWriter(stream, getCharsetName(exchange)).     try {         marshaller.marshal(exchange, body, createWriter(writer, writerSettings)).     } finally {         writer.close().     } }
false;protected;0;4;;@Override protected CPS initialValue() {     return createAndConfigureParserSettings(). }
true;public;2;24;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     if (parserSettings == null) {         synchronized (parserSettingsToken) {             if (parserSettings == null) {                 parserSettings = new ThreadLocal<CPS>() {                      @Override                     protected CPS initialValue() {                         return createAndConfigureParserSettings().                     }                 }.                 unmarshaller = new Unmarshaller<>(lazyLoad, asMap).             }         }     }     HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor().     CPS settings = parserSettings.get().     settings.setProcessor(headerRowProcessor).     P parser = createParser(settings).     // univocity-parsers is responsible for closing the reader, even in case of error     Reader reader = new InputStreamReader(stream, getCharsetName(exchange)).     return unmarshaller.unmarshal(reader, parser, headerRowProcessor). }
true;public;0;3;/**  * Gets the String representation of a null value.  * If {@code null} then the default settings value is used.  *  * @return the String representation of a null value  * @see com.univocity.parsers.common.CommonSettings#getNullValue()  */ ;/**  * Gets the String representation of a null value.  * If {@code null} then the default settings value is used.  *  * @return the String representation of a null value  * @see com.univocity.parsers.common.CommonSettings#getNullValue()  */ public String getNullValue() {     return nullValue. }
true;public;1;4;/**  * Sets the String representation of a null value.  * If {@code null} then the default settings value is used.  *  * @param nullValue the String representation of a null value  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setNullValue(String)  */ ;/**  * Sets the String representation of a null value.  * If {@code null} then the default settings value is used.  *  * @param nullValue the String representation of a null value  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setNullValue(String)  */ public DF setNullValue(String nullValue) {     this.nullValue = nullValue.     return self(). }
true;public;0;3;/**  * Gets whether or not empty lines should be ignored.  * If {@code null} then the default settings value is used.  *  * @return whether or not empty lines should be ignored  * @see com.univocity.parsers.common.CommonSettings#getSkipEmptyLines()  */ ;/**  * Gets whether or not empty lines should be ignored.  * If {@code null} then the default settings value is used.  *  * @return whether or not empty lines should be ignored  * @see com.univocity.parsers.common.CommonSettings#getSkipEmptyLines()  */ public Boolean getSkipEmptyLines() {     return skipEmptyLines. }
true;public;1;4;/**  * Sets whether or not empty lines should be ignored.  * If {@code null} then the default settings value is used.  *  * @param skipEmptyLines whether or not empty lines should be ignored  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setSkipEmptyLines(boolean)  */ ;/**  * Sets whether or not empty lines should be ignored.  * If {@code null} then the default settings value is used.  *  * @param skipEmptyLines whether or not empty lines should be ignored  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setSkipEmptyLines(boolean)  */ public DF setSkipEmptyLines(Boolean skipEmptyLines) {     this.skipEmptyLines = skipEmptyLines.     return self(). }
true;public;0;3;/**  * Gets whether or not trailing whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @return whether or not trailing whitespaces should be ignored  * @see com.univocity.parsers.common.CommonSettings#getIgnoreTrailingWhitespaces()  */ ;/**  * Gets whether or not trailing whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @return whether or not trailing whitespaces should be ignored  * @see com.univocity.parsers.common.CommonSettings#getIgnoreTrailingWhitespaces()  */ public Boolean getIgnoreTrailingWhitespaces() {     return ignoreTrailingWhitespaces. }
true;public;1;4;/**  * Sets whether or not trailing whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @param ignoreTrailingWhitespaces whether or not trailing whitespaces should be ignored  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setIgnoreTrailingWhitespaces(boolean)  */ ;/**  * Sets whether or not trailing whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @param ignoreTrailingWhitespaces whether or not trailing whitespaces should be ignored  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setIgnoreTrailingWhitespaces(boolean)  */ public DF setIgnoreTrailingWhitespaces(Boolean ignoreTrailingWhitespaces) {     this.ignoreTrailingWhitespaces = ignoreTrailingWhitespaces.     return self(). }
true;public;0;3;/**  * Gets whether or not leading whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @return whether or not leading whitespaces should be ignored  * @see com.univocity.parsers.common.CommonSettings#getIgnoreLeadingWhitespaces()  */ ;/**  * Gets whether or not leading whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @return whether or not leading whitespaces should be ignored  * @see com.univocity.parsers.common.CommonSettings#getIgnoreLeadingWhitespaces()  */ public Boolean getIgnoreLeadingWhitespaces() {     return ignoreLeadingWhitespaces. }
true;public;1;4;/**  * Sets whether or not leading whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @param ignoreLeadingWhitespaces whether or not leading whitespaces should be ignored  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setIgnoreLeadingWhitespaces(boolean)  */ ;/**  * Sets whether or not leading whitespaces should be ignored.  * If {@code null} then the default settings value is used.  *  * @param ignoreLeadingWhitespaces whether or not leading whitespaces should be ignored  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setIgnoreLeadingWhitespaces(boolean)  */ public DF setIgnoreLeadingWhitespaces(Boolean ignoreLeadingWhitespaces) {     this.ignoreLeadingWhitespaces = ignoreLeadingWhitespaces.     return self(). }
true;public;0;3;/**  * Gets whether or not headers are disabled.  * If {@code true} then it passes {@code null} to  * {@link com.univocity.parsers.common.CommonSettings#setHeaders(String...)} in order to disabled them.  *  * @return whether or not headers are disabled  * @see com.univocity.parsers.common.CommonSettings#getHeaders()  */ ;/**  * Gets whether or not headers are disabled.  * If {@code true} then it passes {@code null} to  * {@link com.univocity.parsers.common.CommonSettings#setHeaders(String...)} in order to disabled them.  *  * @return whether or not headers are disabled  * @see com.univocity.parsers.common.CommonSettings#getHeaders()  */ public boolean isHeadersDisabled() {     return headersDisabled. }
true;public;1;4;/**  * Sets whether or not headers are disabled.  * If {@code true} then it passes {@code null} to  * {@link com.univocity.parsers.common.CommonSettings#setHeaders(String...)} in order to disabled them.  *  * @param headersDisabled whether or not headers are disabled  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setHeaders(String...)  */ ;/**  * Sets whether or not headers are disabled.  * If {@code true} then it passes {@code null} to  * {@link com.univocity.parsers.common.CommonSettings#setHeaders(String...)} in order to disabled them.  *  * @param headersDisabled whether or not headers are disabled  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setHeaders(String...)  */ public DF setHeadersDisabled(boolean headersDisabled) {     this.headersDisabled = headersDisabled.     return self(). }
true;public;0;3;/**  * Gets the headers.  * If {@code null} then the default settings value is used.  *  * @return the headers  * @see com.univocity.parsers.common.CommonSettings#getHeaders()  */ ;/**  * Gets the headers.  * If {@code null} then the default settings value is used.  *  * @return the headers  * @see com.univocity.parsers.common.CommonSettings#getHeaders()  */ public String[] getHeaders() {     return headers. }
true;public;1;4;/**  * Sets the headers.  * If {@code null} then the default settings value is used.  *  * @param headers the headers  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setHeaders(String...)  */ ;/**  * Sets the headers.  * If {@code null} then the default settings value is used.  *  * @param headers the headers  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonSettings#setHeaders(String...)  */ public DF setHeaders(String[] headers) {     this.headers = headers.     return self(). }
true;public;0;3;/**  * Gets whether or not the header extraction is enabled.  * If {@code null} then the default settings value is used.  *  * @return whether or not the header extraction is enabled  * @see com.univocity.parsers.common.CommonParserSettings#isHeaderExtractionEnabled()  */ ;/**  * Gets whether or not the header extraction is enabled.  * If {@code null} then the default settings value is used.  *  * @return whether or not the header extraction is enabled  * @see com.univocity.parsers.common.CommonParserSettings#isHeaderExtractionEnabled()  */ public Boolean getHeaderExtractionEnabled() {     return headerExtractionEnabled. }
true;public;1;4;/**  * Sets whether or not the header extraction is enabled.  * If {@code null} then the default settings value is used.  *  * @param headerExtractionEnabled whether or not the header extraction is enabled  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonParserSettings#setHeaderExtractionEnabled(boolean)  */ ;/**  * Sets whether or not the header extraction is enabled.  * If {@code null} then the default settings value is used.  *  * @param headerExtractionEnabled whether or not the header extraction is enabled  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonParserSettings#setHeaderExtractionEnabled(boolean)  */ public DF setHeaderExtractionEnabled(Boolean headerExtractionEnabled) {     this.headerExtractionEnabled = headerExtractionEnabled.     return self(). }
true;public;0;3;/**  * Gets the number of records to read.  * If {@code null} then the default settings value is used.  *  * @return the number of records to read  * @see com.univocity.parsers.common.CommonParserSettings#getNumberOfRecordsToRead()  */ ;/**  * Gets the number of records to read.  * If {@code null} then the default settings value is used.  *  * @return the number of records to read  * @see com.univocity.parsers.common.CommonParserSettings#getNumberOfRecordsToRead()  */ public Integer getNumberOfRecordsToRead() {     return numberOfRecordsToRead. }
true;public;1;4;/**  * Sets the number of records to read.  * If {@code null} then the default settings value is used.  *  * @param numberOfRecordsToRead the number of records to read  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonParserSettings#setNumberOfRecordsToRead(long)  */ ;/**  * Sets the number of records to read.  * If {@code null} then the default settings value is used.  *  * @param numberOfRecordsToRead the number of records to read  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonParserSettings#setNumberOfRecordsToRead(long)  */ public DF setNumberOfRecordsToRead(Integer numberOfRecordsToRead) {     this.numberOfRecordsToRead = numberOfRecordsToRead.     return self(). }
true;public;0;3;/**  * Gets the String representation of an empty value.  * If {@code null} then the default settings value is used.  *  * @return the String representation of an empty value  * @see com.univocity.parsers.common.CommonWriterSettings#getEmptyValue()  */ ;/**  * Gets the String representation of an empty value.  * If {@code null} then the default settings value is used.  *  * @return the String representation of an empty value  * @see com.univocity.parsers.common.CommonWriterSettings#getEmptyValue()  */ public String getEmptyValue() {     return emptyValue. }
true;public;1;4;/**  * Sets the String representation of an empty value.  * If {@code null} then the default settings value is used.  *  * @param emptyValue the String representation of an empty value  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonWriterSettings#setEmptyValue(String)  */ ;/**  * Sets the String representation of an empty value.  * If {@code null} then the default settings value is used.  *  * @param emptyValue the String representation of an empty value  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.CommonWriterSettings#setEmptyValue(String)  */ public DF setEmptyValue(String emptyValue) {     this.emptyValue = emptyValue.     return self(). }
true;public;0;3;/**  * Gets the line separator.  * If {@code null} then the default format value is used.  *  * @return the line separator  * @see com.univocity.parsers.common.Format#getLineSeparatorString()  */ ;/**  * Gets the line separator.  * If {@code null} then the default format value is used.  *  * @return the line separator  * @see com.univocity.parsers.common.Format#getLineSeparatorString()  */ public String getLineSeparator() {     return lineSeparator. }
true;public;1;4;/**  * Sets the line separator.  * If {@code null} then the default format value is used.  *  * @param lineSeparator the line separator  * @return current data format instance, fluent API  * @see Format#setLineSeparator(String)  */ ;/**  * Sets the line separator.  * If {@code null} then the default format value is used.  *  * @param lineSeparator the line separator  * @return current data format instance, fluent API  * @see Format#setLineSeparator(String)  */ public DF setLineSeparator(String lineSeparator) {     this.lineSeparator = lineSeparator.     return self(). }
true;public;0;3;/**  * Gets the normalized line separator.  * If {@code null} then the default format value is used.  *  * @return the normalized line separator  * @see com.univocity.parsers.common.Format#getNormalizedNewline()  */ ;/**  * Gets the normalized line separator.  * If {@code null} then the default format value is used.  *  * @return the normalized line separator  * @see com.univocity.parsers.common.Format#getNormalizedNewline()  */ public Character getNormalizedLineSeparator() {     return normalizedLineSeparator. }
true;public;1;4;/**  * Sets the normalized line separator.  * If {@code null} then the default format value is used.  *  * @param normalizedLineSeparator the normalized line separator  * @return current data format instance, fluent API  * @see Format#setNormalizedNewline(char)  */ ;/**  * Sets the normalized line separator.  * If {@code null} then the default format value is used.  *  * @param normalizedLineSeparator the normalized line separator  * @return current data format instance, fluent API  * @see Format#setNormalizedNewline(char)  */ public DF setNormalizedLineSeparator(Character normalizedLineSeparator) {     this.normalizedLineSeparator = normalizedLineSeparator.     return self(). }
true;public;0;3;/**  * Gets the comment symbol.  * If {@code null} then the default format value is used.  *  * @return the comment symbol  * @see com.univocity.parsers.common.Format#getComment()  */ ;/**  * Gets the comment symbol.  * If {@code null} then the default format value is used.  *  * @return the comment symbol  * @see com.univocity.parsers.common.Format#getComment()  */ public Character getComment() {     return comment. }
true;public;1;4;/**  * Gets the comment symbol.  * If {@code null} then the default format value is used.  *  * @param comment the comment symbol  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.Format#setComment(char)  */ ;/**  * Gets the comment symbol.  * If {@code null} then the default format value is used.  *  * @param comment the comment symbol  * @return current data format instance, fluent API  * @see com.univocity.parsers.common.Format#setComment(char)  */ public DF setComment(Character comment) {     this.comment = comment.     return self(). }
true;public;0;3;/**  * Gets whether or not the unmarshalling should read lines lazily.  *  * @return whether or not the unmarshalling should read lines lazily  */ ;/**  * Gets whether or not the unmarshalling should read lines lazily.  *  * @return whether or not the unmarshalling should read lines lazily  */ public boolean isLazyLoad() {     return lazyLoad. }
true;public;1;4;/**  * Sets whether or not the unmarshalling should read lines lazily.  *  * @param lazyLoad whether or not the unmarshalling should read lines lazily  * @return current data format instance, fluent API  */ ;/**  * Sets whether or not the unmarshalling should read lines lazily.  *  * @param lazyLoad whether or not the unmarshalling should read lines lazily  * @return current data format instance, fluent API  */ public DF setLazyLoad(boolean lazyLoad) {     this.lazyLoad = lazyLoad.     return self(). }
true;public;0;3;/**  * Gets whether or not the unmarshalling should produces maps instead of lists.  *  * @return whether or not the unmarshalling should produces maps instead of lists  */ ;/**  * Gets whether or not the unmarshalling should produces maps instead of lists.  *  * @return whether or not the unmarshalling should produces maps instead of lists  */ public boolean isAsMap() {     return asMap. }
true;public;1;4;/**  * Sets whether or not the unmarshalling should produces maps instead of lists.  *  * @param asMap whether or not the unmarshalling should produces maps instead of lists  * @return current data format instance, fluent API  */ ;/**  * Sets whether or not the unmarshalling should produces maps instead of lists.  *  * @param asMap whether or not the unmarshalling should produces maps instead of lists  * @return current data format instance, fluent API  */ public DF setAsMap(boolean asMap) {     this.asMap = asMap.     return self(). }
true;protected,abstract;0;1;/**  * Creates a new instance of the writer settings.  *  * @return New instance of the writer settings  */ ;/**  * Creates a new instance of the writer settings.  *  * @return New instance of the writer settings  */ protected abstract CWS createWriterSettings().
true;protected;1;7;/**  * Configures the writer settings.  *  * @param settings Writer settings to configure  */ ;/**  * Configures the writer settings.  *  * @param settings Writer settings to configure  */ protected void configureWriterSettings(CWS settings) {     configureCommonSettings(settings).     if (emptyValue != null) {         settings.setEmptyValue(emptyValue).     } }
true;protected,abstract;2;1;/**  * Creates a new instance of the uniVocity writer.  *  * @param writer   Output writer to use  * @param settings Writer settings to use  * @return New uinstance of the uniVocity writer  */ ;/**  * Creates a new instance of the uniVocity writer.  *  * @param writer   Output writer to use  * @param settings Writer settings to use  * @return New uinstance of the uniVocity writer  */ protected abstract W createWriter(Writer writer, CWS settings).
true;protected,abstract;0;1;/**  * Creates a new instance of the parser settings.  *  * @return New instance of the parser settings  */ ;/**  * Creates a new instance of the parser settings.  *  * @return New instance of the parser settings  */ protected abstract CPS createParserSettings().
true;protected;1;10;/**  * Configure the parser settings.  *  * @param settings Parser settings to configure  */ ;/**  * Configure the parser settings.  *  * @param settings Parser settings to configure  */ protected void configureParserSettings(CPS settings) {     configureCommonSettings(settings).     if (headerExtractionEnabled != null) {         settings.setHeaderExtractionEnabled(headerExtractionEnabled).     }     if (numberOfRecordsToRead != null) {         settings.setNumberOfRecordsToRead(numberOfRecordsToRead).     } }
true;protected,abstract;1;1;/**  * Creates a new instance of the uniVocity parser.  *  * @param settings Parser settings to use  * @return New instance of the uniVocity parser  */ ;/**  * Creates a new instance of the uniVocity parser.  *  * @param settings Parser settings to use  * @return New instance of the uniVocity parser  */ protected abstract P createParser(CPS settings).
true;protected;1;11;/**  * Configures the format.  *  * @param format format to configure  */ ;/**  * Configures the format.  *  * @param format format to configure  */ protected void configureFormat(F format) {     if (lineSeparator != null) {         format.setLineSeparator(lineSeparator).     }     if (normalizedLineSeparator != null) {         format.setNormalizedNewline(normalizedLineSeparator).     }     if (comment != null) {         format.setComment(comment).     } }
true;final;0;6;/**  * Creates and configures the writer settings.  *  * @return new configured instance of the writer settings  */ ;/**  * Creates and configures the writer settings.  *  * @return new configured instance of the writer settings  */ final CWS createAndConfigureWriterSettings() {     CWS settings = createWriterSettings().     configureWriterSettings(settings).     configureFormat(settings.getFormat()).     return settings. }
true;final;0;6;/**  * Creates and configures the parser settings.  *  * @return new configured instance of the parser settings  */ ;/**  * Creates and configures the parser settings.  *  * @return new configured instance of the parser settings  */ final CPS createAndConfigureParserSettings() {     CPS settings = createParserSettings().     configureParserSettings(settings).     configureFormat(settings.getFormat()).     return settings. }
true;private;1;19;/**  * Configures the common settings shared by parser and writer.  *  * @param settings settings to configure  */ ;/**  * Configures the common settings shared by parser and writer.  *  * @param settings settings to configure  */ private void configureCommonSettings(CommonSettings<F> settings) {     if (nullValue != null) {         settings.setNullValue(nullValue).     }     if (skipEmptyLines != null) {         settings.setSkipEmptyLines(skipEmptyLines).     }     if (ignoreTrailingWhitespaces != null) {         settings.setIgnoreTrailingWhitespaces(ignoreTrailingWhitespaces).     }     if (ignoreLeadingWhitespaces != null) {         settings.setIgnoreLeadingWhitespaces(ignoreLeadingWhitespaces).     }     if (headersDisabled) {         settings.setHeaders((String[]) null).     } else if (headers != null) {         settings.setHeaders(headers).     } }
true;private;0;4;/**  * Returns {@code this} as the proper data format type. It helps the fluent API with inheritance.  *  * @return {@code this} as the proper data format type  */ ;/**  * Returns {@code this} as the proper data format type. It helps the fluent API with inheritance.  *  * @return {@code this} as the proper data format type  */ @SuppressWarnings("unchecked") private DF self() {     return (DF) this. }
false;protected;0;7;;@Override protected void doStart() throws Exception {     writerSettings = null.     marshaller = null.     parserSettings = null.     unmarshaller = null. }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
