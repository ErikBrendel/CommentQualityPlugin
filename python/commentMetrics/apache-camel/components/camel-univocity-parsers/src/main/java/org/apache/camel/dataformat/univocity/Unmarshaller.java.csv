commented;modifiers;parameterAmount;loc;comment;code
true;public;3;5;/**  * Unmarshal from the given reader.  *  * @param reader             reader to read from  * @param parser             uniVocity parser to use  * @param headerRowProcessor Row processor that retrieves the header  * @return Unmarshalled data  */ ;/**  * Unmarshal from the given reader.  *  * @param reader             reader to read from  * @param parser             uniVocity parser to use  * @param headerRowProcessor Row processor that retrieves the header  * @return Unmarshalled data  */ public Object unmarshal(Reader reader, P parser, HeaderRowProcessor headerRowProcessor) {     parser.beginParsing(reader).     Iterator<?> iterator = asMap ? new MapRowIterator<>(parser, headerRowProcessor) : new ListRowIterator<>(parser).     return lazyLoad ? iterator : convertToList(iterator). }
true;private,static;1;7;/**  * Converts the given iterator into a list.  *  * @param iterator iterator to convert  * @param <T>      item class  * @return a list that contains all the items of the iterator  */ ;/**  * Converts the given iterator into a list.  *  * @param iterator iterator to convert  * @param <T>      item class  * @return a list that contains all the items of the iterator  */ private static <T> List<T> convertToList(Iterator<T> iterator) {     List<T> result = new ArrayList<>().     while (iterator.hasNext()) {         result.add(iterator.next()).     }     return result. }
true;public,final;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public final boolean hasNext() {     return row != null. }
true;public,final;0;10;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public final E next() {     if (row == null) {         throw new NoSuchElementException().     }     E result = convertRow(row).     row = parser.parseNext().     return result. }
true;public,final;0;4;/**  * Warning: it always throws an {@code UnsupportedOperationException}  */ ;/**  * Warning: it always throws an {@code UnsupportedOperationException}  */ @Override public final void remove() {     throw new UnsupportedOperationException(). }
true;protected,abstract;1;1;/**  * Converts the rows into the expected object.  *  * @param row row to convert  * @return converted row  */ ;/**  * Converts the rows into the expected object.  *  * @param row row to convert  * @return converted row  */ protected abstract E convertRow(String[] row).
true;protected;1;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override protected List<String> convertRow(String[] row) {     return Arrays.asList(row). }
true;protected;1;11;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override protected Map<String, String> convertRow(String[] row) {     String[] headers = headerRowProcessor.getHeaders().     int size = Math.min(row.length, headers.length).     Map<String, String> result = new LinkedHashMap<>(size).     for (int i = 0. i < size. i++) {         result.put(headers[i], row[i]).     }     return result. }
