# id;timestamp;commentText;codeText;commentWords;codeWords
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1416561667;Creates a new instance.__@param headers      the base headers to use_@param adaptHeaders whether or not we can add headers on the fly depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            this.headers.addAll(Arrays.asList(headers))__        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1425288489;Creates a new instance.__@param headers      the base headers to use_@param adaptHeaders whether or not we can add headers on the fly depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            this.headers.addAll(Arrays.asList(headers))__        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1501230426;Creates a new instance.__@param headers      the base headers to use_@param adaptHeaders whether or not we can add headers on the fly depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            synchronized (this.headers) {_                this.headers.addAll(Arrays.asList(headers))_   _            }_        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,synchronized,this,headers,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1501231988;Creates a new instance.__@param headers      the base headers to use_@param adaptHeaders whether or not we can add headers on the fly depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            this.headers.addAll(Arrays.asList(headers))__        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1501586700;Creates a new instance.__@param headers      the base headers to use_@param adaptHeaders whether or not we can add headers on the fly depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            this.headers.addAll(Arrays.asList(headers))__        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1501592961;Creates a new instance.__@param headers the base headers to use_@param adaptHeaders whether or not we can add headers on the fly_depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            this.headers.addAll(Arrays.asList(headers))__        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1524063209;Creates a new instance.__@param headers the base headers to use_@param adaptHeaders whether or not we can add headers on the fly_depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            this.headers.addAll(Arrays.asList(headers))__        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> Marshaller(String[] headers, boolean adaptHeaders);1540108163;Creates a new instance.__@param headers the base headers to use_@param adaptHeaders whether or not we can add headers on the fly_depending on the data;Marshaller(String[] headers, boolean adaptHeaders) {_        if (headers != null) {_            this.headers.addAll(Arrays.asList(headers))__        }_        this.adaptHeaders = adaptHeaders__    };creates,a,new,instance,param,headers,the,base,headers,to,use,param,adapt,headers,whether,or,not,we,can,add,headers,on,the,fly,depending,on,the,data;marshaller,string,headers,boolean,adapt,headers,if,headers,null,this,headers,add,all,arrays,as,list,headers,this,adapt,headers,adapt,headers
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1416561667;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body     body to marshal_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1425288489;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body     body to marshal_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1501230426;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body     body to marshal_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1501231988;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body     body to marshal_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1501586700;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body     body to marshal_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1501592961;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body body to marshal_@param writer uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to_convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1524063209;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body body to marshal_@param writer uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to_convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException;1540108163;Marshals the given body.__@param exchange exchange to use (for type conversion)_@param body body to marshal_@param writer uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to_convert the body as list and maps.;public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {_        try {_            List<?> list = convertToType(exchange, List.class, body)__            if (list != null) {_                for (Object row : list) {_                    writeRow(exchange, row, writer)__                }_            } else {_                writeRow(exchange, body, writer)__            }_        } finally {_            writer.close()__        }_    };marshals,the,given,body,param,exchange,exchange,to,use,for,type,conversion,param,body,body,to,marshal,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,body,as,list,and,maps;public,void,marshal,exchange,exchange,object,body,w,writer,throws,no,type,conversion,available,exception,try,list,list,convert,to,type,exchange,list,class,body,if,list,null,for,object,row,list,write,row,exchange,row,writer,else,write,row,exchange,body,writer,finally,writer,close
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1416561667;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row      row to write_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            for (Object key : map.keySet()) {_                headers.add(convertToMandatoryType(exchange, String.class, key))__            }_        }__        Object[] values = new Object[headers.size()]__        int index = 0__        for (String header : headers) {_            values[index++] = map.get(header)__        }_        writer.writeRow(values)__    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,for,object,key,map,key,set,headers,add,convert,to,mandatory,type,exchange,string,class,key,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1425288489;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row      row to write_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            for (Object key : map.keySet()) {_                headers.add(convertToMandatoryType(exchange, String.class, key))__            }_        }__        Object[] values = new Object[headers.size()]__        int index = 0__        for (String header : headers) {_            values[index++] = map.get(header)__        }_        writer.writeRow(values)__    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,for,object,key,map,key,set,headers,add,convert,to,mandatory,type,exchange,string,class,key,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1501230426;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row      row to write_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            for (Object key : map.keySet()) {_                synchronized (headers) {_                    headers.add(convertToMandatoryType(exchange, String.class, key))__                }_            }_        }__        Object[] values = new Object[headers.size()]__        int index = 0__        for (String header : headers) {_            values[index++] = map.get(header)__        }_        writer.writeRow(values)__    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,for,object,key,map,key,set,synchronized,headers,headers,add,convert,to,mandatory,type,exchange,string,class,key,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1501231988;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row      row to write_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            for (Object key : map.keySet()) {_                headers.add(convertToMandatoryType(exchange, String.class, key))__            }_        }__        Object[] values = new Object[headers.size()]__        int index = 0__        for (String header : headers) {_            values[index++] = map.get(header)__        }_        writer.writeRow(values)__    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,for,object,key,map,key,set,headers,add,convert,to,mandatory,type,exchange,string,class,key,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1501586700;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row      row to write_@param writer   uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            synchronized (headers) {_                for (Object key : map.keySet()) {_                    headers.add(convertToMandatoryType(exchange, String.class, key))__                }_                writeRow(map, writer)__            }_        } else {_            writeRow(map, writer)__        }_    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,synchronized,headers,for,object,key,map,key,set,headers,add,convert,to,mandatory,type,exchange,string,class,key,write,row,map,writer,else,write,row,map,writer
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1501592961;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row row to write_@param writer uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to_convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            synchronized (headers) {_                for (Object key : map.keySet()) {_                    headers.add(convertToMandatoryType(exchange, String.class, key))__                }_                writeRow(map, writer)__            }_        } else {_            writeRow(map, writer)__        }_    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,synchronized,headers,for,object,key,map,key,set,headers,add,convert,to,mandatory,type,exchange,string,class,key,write,row,map,writer,else,write,row,map,writer
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1524063209;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row row to write_@param writer uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to_convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            synchronized (headers) {_                for (Object key : map.keySet()) {_                    headers.add(convertToMandatoryType(exchange, String.class, key))__                }_                writeRow(map, writer)__            }_        } else {_            writeRow(map, writer)__        }_    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,synchronized,headers,for,object,key,map,key,set,headers,add,convert,to,mandatory,type,exchange,string,class,key,write,row,map,writer,else,write,row,map,writer
Marshaller -> private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException;1540108163;Writes the given row.__@param exchange exchange to use (for type conversion)_@param row row to write_@param writer uniVocity writer to use_@throws NoTypeConversionAvailableException when it's not possible to_convert the row as map.;private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {_        Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row)__        if (adaptHeaders) {_            synchronized (headers) {_                for (Object key : map.keySet()) {_                    headers.add(convertToMandatoryType(exchange, String.class, key))__                }_                writeRow(map, writer)__            }_        } else {_            writeRow(map, writer)__        }_    };writes,the,given,row,param,exchange,exchange,to,use,for,type,conversion,param,row,row,to,write,param,writer,uni,vocity,writer,to,use,throws,no,type,conversion,available,exception,when,it,s,not,possible,to,convert,the,row,as,map;private,void,write,row,exchange,exchange,object,row,w,writer,throws,no,type,conversion,available,exception,map,map,convert,to,mandatory,type,exchange,map,class,row,if,adapt,headers,synchronized,headers,for,object,key,map,key,set,headers,add,convert,to,mandatory,type,exchange,string,class,key,write,row,map,writer,else,write,row,map,writer
Marshaller -> private void writeRow(Map<?, ?> map, W writer);1501586700;Writes the given map as row.__@param map row values by header_@param writer uniVocity writer to use;private void writeRow(Map<?, ?> map, W writer) {_      Object[] values = new Object[headers.size()]__      int index = 0__      for (String header : headers) {_          values[index++] = map.get(header)__      }_      writer.writeRow(values)__    };writes,the,given,map,as,row,param,map,row,values,by,header,param,writer,uni,vocity,writer,to,use;private,void,write,row,map,map,w,writer,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
Marshaller -> private void writeRow(Map<?, ?> map, W writer);1501592961;Writes the given map as row.__@param map row values by header_@param writer uniVocity writer to use;private void writeRow(Map<?, ?> map, W writer) {_        Object[] values = new Object[headers.size()]__        int index = 0__        for (String header : headers) {_            values[index++] = map.get(header)__        }_        writer.writeRow(values)__    };writes,the,given,map,as,row,param,map,row,values,by,header,param,writer,uni,vocity,writer,to,use;private,void,write,row,map,map,w,writer,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
Marshaller -> private void writeRow(Map<?, ?> map, W writer);1524063209;Writes the given map as row.__@param map row values by header_@param writer uniVocity writer to use;private void writeRow(Map<?, ?> map, W writer) {_        Object[] values = new Object[headers.size()]__        int index = 0__        for (String header : headers) {_            values[index++] = map.get(header)__        }_        writer.writeRow(values)__    };writes,the,given,map,as,row,param,map,row,values,by,header,param,writer,uni,vocity,writer,to,use;private,void,write,row,map,map,w,writer,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
Marshaller -> private void writeRow(Map<?, ?> map, W writer);1540108163;Writes the given map as row.__@param map row values by header_@param writer uniVocity writer to use;private void writeRow(Map<?, ?> map, W writer) {_        Object[] values = new Object[headers.size()]__        int index = 0__        for (String header : headers) {_            values[index++] = map.get(header)__        }_        writer.writeRow(values)__    };writes,the,given,map,as,row,param,map,row,values,by,header,param,writer,uni,vocity,writer,to,use;private,void,write,row,map,map,w,writer,object,values,new,object,headers,size,int,index,0,for,string,header,headers,values,index,map,get,header,writer,write,row,values
