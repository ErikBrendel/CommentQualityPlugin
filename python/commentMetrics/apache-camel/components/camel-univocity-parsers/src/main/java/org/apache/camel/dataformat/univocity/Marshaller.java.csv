commented;modifiers;parameterAmount;loc;comment;code
true;public;3;14;/**  * Marshals the given body.  *  * @param exchange exchange to use (for type conversion)  * @param body body to marshal  * @param writer uniVocity writer to use  * @throws NoTypeConversionAvailableException when it's not possible to  *             convert the body as list and maps.  */ ;/**  * Marshals the given body.  *  * @param exchange exchange to use (for type conversion)  * @param body body to marshal  * @param writer uniVocity writer to use  * @throws NoTypeConversionAvailableException when it's not possible to  *             convert the body as list and maps.  */ public void marshal(Exchange exchange, Object body, W writer) throws NoTypeConversionAvailableException {     try {         List<?> list = convertToType(exchange, List.class, body).         if (list != null) {             for (Object row : list) {                 writeRow(exchange, row, writer).             }         } else {             writeRow(exchange, body, writer).         }     } finally {         writer.close().     } }
true;private;3;13;/**  * Writes the given row.  *  * @param exchange exchange to use (for type conversion)  * @param row row to write  * @param writer uniVocity writer to use  * @throws NoTypeConversionAvailableException when it's not possible to  *             convert the row as map.  */ ;/**  * Writes the given row.  *  * @param exchange exchange to use (for type conversion)  * @param row row to write  * @param writer uniVocity writer to use  * @throws NoTypeConversionAvailableException when it's not possible to  *             convert the row as map.  */ private void writeRow(Exchange exchange, Object row, W writer) throws NoTypeConversionAvailableException {     Map<?, ?> map = convertToMandatoryType(exchange, Map.class, row).     if (adaptHeaders) {         synchronized (headers) {             for (Object key : map.keySet()) {                 headers.add(convertToMandatoryType(exchange, String.class, key)).             }             writeRow(map, writer).         }     } else {         writeRow(map, writer).     } }
true;private;2;8;/**  * Writes the given map as row.  *  * @param map row values by header  * @param writer uniVocity writer to use  */ ;/**  * Writes the given map as row.  *  * @param map row values by header  * @param writer uniVocity writer to use  */ private void writeRow(Map<?, ?> map, W writer) {     Object[] values = new Object[headers.size()].     int index = 0.     for (String header : headers) {         values[index++] = map.get(header).     }     writer.writeRow(values). }
