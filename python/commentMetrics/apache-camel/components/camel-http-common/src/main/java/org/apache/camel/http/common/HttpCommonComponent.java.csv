commented;modifiers;parameterAmount;loc;comment;code
true;public;3;3;/**  * Gets the parameter. This method doesn't resolve reference parameters in the registry.  *  * @param parameters    the parameters  * @param key           the key  * @param type          the requested type to convert the value from the parameter  * @return  the converted value parameter  */ ;/**  * Gets the parameter. This method doesn't resolve reference parameters in the registry.  *  * @param parameters    the parameters  * @param key           the key  * @param type          the requested type to convert the value from the parameter  * @return  the converted value parameter  */ public <T> T getParameter(Map<String, Object> parameters, String key, Class<T> type) {     return getParameter(parameters, key, type, null). }
true;public;4;11;/**  * Gets the parameter. This method doesn't resolve reference parameters in the registry.  *  * @param parameters    the parameters  * @param key           the key  * @param type          the requested type to convert the value from the parameter  * @param defaultValue  use this default value if the parameter does not contain the key  * @return  the converted value parameter  */ ;/**  * Gets the parameter. This method doesn't resolve reference parameters in the registry.  *  * @param parameters    the parameters  * @param key           the key  * @param type          the requested type to convert the value from the parameter  * @param defaultValue  use this default value if the parameter does not contain the key  * @return  the converted value parameter  */ public <T> T getParameter(Map<String, Object> parameters, String key, Class<T> type, T defaultValue) {     Object value = parameters.get(key).     if (value == null) {         value = defaultValue.     }     if (value == null) {         return null.     }     return CamelContextHelper.convertTo(getCamelContext(), type, value). }
true;public;1;2;/**  * Connects the URL specified on the endpoint to the specified processor.  *  * @param consumer the consumer  * @throws Exception can be thrown  */ ;/**  * Connects the URL specified on the endpoint to the specified processor.  *  * @param consumer the consumer  * @throws Exception can be thrown  */ public void connect(HttpConsumer consumer) throws Exception { }
true;public;1;2;/**  * Disconnects the URL specified on the endpoint from the specified processor.  *  * @param consumer the consumer  * @throws Exception can be thrown  */ ;/**  * Disconnects the URL specified on the endpoint from the specified processor.  *  * @param consumer the consumer  * @throws Exception can be thrown  */ public void disconnect(HttpConsumer consumer) throws Exception { }
true;public;1;3;/**  * Checks whether the consumer is possible to connect to the endoint.  *  * @param consumer the consumer  * @throws Exception can be thrown  */ ;/**  * Checks whether the consumer is possible to connect to the endoint.  *  * @param consumer the consumer  * @throws Exception can be thrown  */ public boolean canConnect(HttpConsumer consumer) throws Exception {     return true. }
false;protected;0;4;;@Override protected boolean useIntrospectionOnEndpoint() {     return false. }
false;public;0;3;;public HttpBinding getHttpBinding() {     return httpBinding. }
true;public;1;3;/**  * To use a custom HttpBinding to control the mapping between Camel message and HttpClient.  */ ;/**  * To use a custom HttpBinding to control the mapping between Camel message and HttpClient.  */ public void setHttpBinding(HttpBinding httpBinding) {     this.httpBinding = httpBinding. }
false;public;0;3;;public HttpConfiguration getHttpConfiguration() {     return httpConfiguration. }
true;public;1;3;/**  * To use the shared HttpConfiguration as base configuration.  */ ;/**  * To use the shared HttpConfiguration as base configuration.  */ public void setHttpConfiguration(HttpConfiguration httpConfiguration) {     this.httpConfiguration = httpConfiguration. }
false;public;0;3;;public boolean isAllowJavaSerializedObject() {     return allowJavaSerializedObject. }
true;public;1;3;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ ;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ public void setAllowJavaSerializedObject(boolean allowJavaSerializedObject) {     this.allowJavaSerializedObject = allowJavaSerializedObject. }
