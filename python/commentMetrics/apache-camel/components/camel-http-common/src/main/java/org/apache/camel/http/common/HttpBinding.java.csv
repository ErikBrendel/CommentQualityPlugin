commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Strategy to read the given request and bindings it to the given message.  *  * @param request  the request  * @param message  the message to populate with data from request  */ ;/**  * Strategy to read the given request and bindings it to the given message.  *  * @param request  the request  * @param message  the message to populate with data from request  */ void readRequest(HttpServletRequest request, HttpMessage message).
true;;1;1;/**  * Parses the body from a {@link org.apache.camel.http.common.HttpMessage}  *  * @param httpMessage the http message  * @return the parsed body returned as either a {@link java.io.InputStream} or a {@link java.io.Reader}  * depending on the {@link #setUseReaderForPayload(boolean)} property.  * @throws java.io.IOException can be thrown  */ ;/**  * Parses the body from a {@link org.apache.camel.http.common.HttpMessage}  *  * @param httpMessage the http message  * @return the parsed body returned as either a {@link java.io.InputStream} or a {@link java.io.Reader}  * depending on the {@link #setUseReaderForPayload(boolean)} property.  * @throws java.io.IOException can be thrown  */ Object parseBody(HttpMessage httpMessage) throws IOException.
true;;2;1;/**  * Writes the exchange to the servlet response.  * <p/>  * Default implementation will delegate to the following methods depending on the status of the exchange  * <ul>  *   <li>doWriteResponse - processing returns a OUT message </li>  *   <li>doWriteFaultResponse - processing returns a fault message</li>  *   <li>doWriteResponse - processing returns an exception and status code 500</li>  * </ul>  *  * @param exchange the exchange  * @param response the http response  * @throws java.io.IOException can be thrown from http response  */ ;/**  * Writes the exchange to the servlet response.  * <p/>  * Default implementation will delegate to the following methods depending on the status of the exchange  * <ul>  *   <li>doWriteResponse - processing returns a OUT message </li>  *   <li>doWriteFaultResponse - processing returns a fault message</li>  *   <li>doWriteResponse - processing returns an exception and status code 500</li>  * </ul>  *  * @param exchange the exchange  * @param response the http response  * @throws java.io.IOException can be thrown from http response  */ void writeResponse(Exchange exchange, HttpServletResponse response) throws IOException.
true;;2;1;/**  * Strategy method that writes the response to the http response stream when an exception occurred  *  * @param exception  the exception occurred  * @param response   the http response  * @throws java.io.IOException can be thrown from http response  */ ;/**  * Strategy method that writes the response to the http response stream when an exception occurred  *  * @param exception  the exception occurred  * @param response   the http response  * @throws java.io.IOException can be thrown from http response  */ void doWriteExceptionResponse(Throwable exception, HttpServletResponse response) throws IOException.
true;;3;1;/**  * Strategy method that writes the response to the http response stream for a fault message  *  * @param message  the fault message  * @param response the http response  * @param exchange the exchange to provide context for header filtering  * @throws java.io.IOException can be thrown from http response  */ ;/**  * Strategy method that writes the response to the http response stream for a fault message  *  * @param message  the fault message  * @param response the http response  * @param exchange the exchange to provide context for header filtering  * @throws java.io.IOException can be thrown from http response  */ void doWriteFaultResponse(Message message, HttpServletResponse response, Exchange exchange) throws IOException.
true;;3;1;/**  * Strategy method that writes the response to the http response stream for an OUT message  *  * @param message  the OUT message  * @param response the http response  * @param exchange the exchange to provide context for header filtering  * @throws java.io.IOException can be thrown from http response  */ ;/**  * Strategy method that writes the response to the http response stream for an OUT message  *  * @param message  the OUT message  * @param response the http response  * @param exchange the exchange to provide context for header filtering  * @throws java.io.IOException can be thrown from http response  */ void doWriteResponse(Message message, HttpServletResponse response, Exchange exchange) throws IOException.
true;;0;1;/**  * Should reader by used instead of input stream.  *  * @see #setUseReaderForPayload(boolean) for more details  * @return <tt>true</tt> if reader should be used  */ ;/**  * Should reader by used instead of input stream.  *  * @see #setUseReaderForPayload(boolean) for more details  * @return <tt>true</tt> if reader should be used  */ boolean isUseReaderForPayload().
true;;1;1;/**  * Should the {@link javax.servlet.http.HttpServletRequest#getReader()} be exposed as the payload of input messages in the Camel  * {@link org.apache.camel.Message#getBody()} or not. If false then the {@link javax.servlet.http.HttpServletRequest#getInputStream()} will be exposed.  * <p/>  * Is default <tt>false</tt>.  *  * @param useReaderForPayload whether to use reader or not  */ ;/**  * Should the {@link javax.servlet.http.HttpServletRequest#getReader()} be exposed as the payload of input messages in the Camel  * {@link org.apache.camel.Message#getBody()} or not. If false then the {@link javax.servlet.http.HttpServletRequest#getInputStream()} will be exposed.  * <p/>  * Is default <tt>false</tt>.  *  * @param useReaderForPayload whether to use reader or not  */ void setUseReaderForPayload(boolean useReaderForPayload).
true;;0;1;/**  * If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back  * serialized in the response as a application/x-java-serialized-object content type (for example using Jetty or  * Servlet Camel components). On the producer side the exception will be deserialized and thrown as is,  * instead of the HttpOperationFailedException. The caused exception is required to be serialized.  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ ;/**  * If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back  * serialized in the response as a application/x-java-serialized-object content type (for example using Jetty or  * Servlet Camel components). On the producer side the exception will be deserialized and thrown as is,  * instead of the HttpOperationFailedException. The caused exception is required to be serialized.  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ boolean isTransferException().
true;;0;1;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ ;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ boolean isAllowJavaSerializedObject().
true;;0;1;/**  * Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present.  * This can be turned on in case HTTP clients do not send streamed data.  */ ;/**  * Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present.  * This can be turned on in case HTTP clients do not send streamed data.  */ boolean isEagerCheckContentAvailable().
true;;0;1;/**  * Whether to allow Exchange Body HTTP mapping  */ ;/**  * Whether to allow Exchange Body HTTP mapping  */ boolean isMapHttpMessageBody().
true;;0;1;/**  * Whether to allow Exchange Headers HTTP mapping  */ ;/**  * Whether to allow Exchange Headers HTTP mapping  */ boolean isMapHttpMessageHeaders().
true;;0;1;/**  * Whether to allow Exchange Form URL Encoded Body HTTP mapping  */ ;/**  * Whether to allow Exchange Form URL Encoded Body HTTP mapping  */ boolean isMapHttpMessageFormUrlEncodedBody().
true;;1;1;/**  * Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present.  * This can be turned on in case HTTP clients do not send streamed data.  */ ;/**  * Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present.  * This can be turned on in case HTTP clients do not send streamed data.  */ void setEagerCheckContentAvailable(boolean eagerCheckContentAvailable).
true;;1;1;/**  * If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back  * serialized in the response as a application/x-java-serialized-object content type (for example using Jetty or  * Servlet Camel components). On the producer side the exception will be deserialized and thrown as is,  * instead of the HttpOperationFailedException. The caused exception is required to be serialized.  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ ;/**  * If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back  * serialized in the response as a application/x-java-serialized-object content type (for example using Jetty or  * Servlet Camel components). On the producer side the exception will be deserialized and thrown as is,  * instead of the HttpOperationFailedException. The caused exception is required to be serialized.  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ void setTransferException(boolean transferException).
true;;1;1;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @param allowJavaSerializedObject <tt>true</tt> to allow serializing java objects  */ ;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @param allowJavaSerializedObject <tt>true</tt> to allow serializing java objects  */ void setAllowJavaSerializedObject(boolean allowJavaSerializedObject).
true;;0;1;/**  * Gets the header filter strategy  *  * @return the strategy  */ ;/**  * Gets the header filter strategy  *  * @return the strategy  */ HeaderFilterStrategy getHeaderFilterStrategy().
true;;1;1;/**  * Sets the header filter strategy to use.  * <p/>  * Will default use {@link org.apache.camel.http.common.HttpHeaderFilterStrategy}  *  * @param headerFilterStrategy the custom strategy  */ ;/**  * Sets the header filter strategy to use.  * <p/>  * Will default use {@link org.apache.camel.http.common.HttpHeaderFilterStrategy}  *  * @param headerFilterStrategy the custom strategy  */ void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy).
true;;1;1;/**  * Whether to allow Exchange Body HTTP mapping  * <p/>  * This is by default turned on. If you disable this then be aware that the Exchange body won't be mapped to HTTP  */ ;/**  * Whether to allow Exchange Body HTTP mapping  * <p/>  * This is by default turned on. If you disable this then be aware that the Exchange body won't be mapped to HTTP  */ void setMapHttpMessageBody(boolean mapHttpMessageBody).
true;;1;1;/**  * Whether to allow Exchange Headers HTTP mapping  * <p/>  * This is by default turned on. If you disable this then be aware that the Exchange headers won't be mapped to HTTP  */ ;/**  * Whether to allow Exchange Headers HTTP mapping  * <p/>  * This is by default turned on. If you disable this then be aware that the Exchange headers won't be mapped to HTTP  */ void setMapHttpMessageHeaders(boolean mapHttpMessageHeaders).
true;;1;1;/**  * Whether to allow Exchange Form URL Encoded Body HTTP mapping  * <p/>  * This is by default turned on. If you disable this then be aware that the Exchange Form URL Encoded Body won't be mapped to HTTP  */ ;/**  * Whether to allow Exchange Form URL Encoded Body HTTP mapping  * <p/>  * This is by default turned on. If you disable this then be aware that the Exchange Form URL Encoded Body won't be mapped to HTTP  */ void setMapHttpMessageFormUrlEncodedBody(boolean mapHttpMessageFormUrlEncodedBody).
true;;0;1;/**  * Whitelist of accepted filename extensions for accepting uploaded files.  * <p/>  * Multiple extensions can be separated by comma, such as txt,xml.  */ ;/**  * Whitelist of accepted filename extensions for accepting uploaded files.  * <p/>  * Multiple extensions can be separated by comma, such as txt,xml.  */ String getFileNameExtWhitelist().
true;;1;1;/**  * Whitelist of accepted filename extensions for accepting uploaded files.  * <p/>  * Multiple extensions can be separated by comma, such as txt,xml.  */ ;/**  * Whitelist of accepted filename extensions for accepting uploaded files.  * <p/>  * Multiple extensions can be separated by comma, such as txt,xml.  */ void setFileNameExtWhitelist(String fileNameExtWhitelist).
