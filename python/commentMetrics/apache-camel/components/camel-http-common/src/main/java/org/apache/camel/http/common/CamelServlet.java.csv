# id;timestamp;commentText;codeText;commentWords;codeWords
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1437656670;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1457965219;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1461303885;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1461303885;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1509180004;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1515694940;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1523994367;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1530672587;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1530705239;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1535377714;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1536517284;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1539154354;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> @Deprecated     protected HttpConsumer resolve(HttpServletRequest request);1541670803;@deprecated use {@link ServletResolveConsumerStrategy#resolve(javax.servlet.http.HttpServletRequest, java.util.Map)};@Deprecated_    protected HttpConsumer resolve(HttpServletRequest request) {_        return getServletResolveConsumerStrategy().resolve(request, getConsumers())__    };deprecated,use,link,servlet,resolve,consumer,strategy,resolve,javax,servlet,http,http,servlet,request,java,util,map;deprecated,protected,http,consumer,resolve,http,servlet,request,request,return,get,servlet,resolve,consumer,strategy,resolve,request,get,consumers
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1437656670;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1457965219;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1461303885;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1461303885;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1509180004;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1515694940;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1523994367;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1530672587;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1530705239;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1535377714;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1536517284;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1539154354;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl);1541670803;Restore the Thread Context ClassLoader if the old TCCL is not null.;protected void restoreTccl(final Exchange exchange, ClassLoader oldTccl) {_        if (oldTccl == null) {_            return__        }_        Thread.currentThread().setContextClassLoader(oldTccl)__        if (log.isTraceEnabled()) {_            log.trace("Restored TCCL for exchangeId {} to {} on thread {}", _                    new String[] {exchange.getExchangeId(), oldTccl.toString(), Thread.currentThread().getName()})__        }_    };restore,the,thread,context,class,loader,if,the,old,tccl,is,not,null;protected,void,restore,tccl,final,exchange,exchange,class,loader,old,tccl,if,old,tccl,null,return,thread,current,thread,set,context,class,loader,old,tccl,if,log,is,trace,enabled,log,trace,restored,tccl,for,exchange,id,to,on,thread,new,string,exchange,get,exchange,id,old,tccl,to,string,thread,current,thread,get,name
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1461303885;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            log.debug("No consumer to service request {}", request)__            response.sendError(HttpServletResponse.SC_NOT_FOUND)__            return__        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String s__            if (consumer.getEndpoint().getHttpMethodRestrict() != null) {_                s = "OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict()__            } else {_                _                s = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            response.addHeader("Allow", s)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = new DefaultExchange(consumer.getEndpoint(), ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,log,debug,no,consumer,to,service,request,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,s,if,consumer,get,endpoint,get,http,method,restrict,null,s,options,consumer,get,endpoint,get,http,method,restrict,else,s,get,head,post,put,delete,trace,options,connect,patch,response,add,header,allow,s,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,new,default,exchange,consumer,get,endpoint,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1461303885;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            log.debug("No consumer to service request {}", request)__            response.sendError(HttpServletResponse.SC_NOT_FOUND)__            return__        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String s__            if (consumer.getEndpoint().getHttpMethodRestrict() != null) {_                s = "OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict()__            } else {_                _                s = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            response.addHeader("Allow", s)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = new DefaultExchange(consumer.getEndpoint(), ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,log,debug,no,consumer,to,service,request,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,s,if,consumer,get,endpoint,get,http,method,restrict,null,s,options,consumer,get,endpoint,get,http,method,restrict,else,s,get,head,post,put,delete,trace,options,connect,patch,response,add,header,allow,s,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,new,default,exchange,consumer,get,endpoint,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1509180004;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            log.debug("No consumer to service request {}", request)__            response.sendError(HttpServletResponse.SC_NOT_FOUND)__            return__        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String s__            if (consumer.getEndpoint().getHttpMethodRestrict() != null) {_                s = "OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict()__            } else {_                _                s = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            response.addHeader("Allow", s)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,log,debug,no,consumer,to,service,request,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,s,if,consumer,get,endpoint,get,http,method,restrict,null,s,options,consumer,get,endpoint,get,http,method,restrict,else,s,get,head,post,put,delete,trace,options,connect,patch,response,add,header,allow,s,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1515694940;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String s__            if (consumer.getEndpoint().getHttpMethodRestrict() != null) {_                s = "OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict()__            } else {_                _                s = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            response.addHeader("Allow", s)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,s,if,consumer,get,endpoint,get,http,method,restrict,null,s,options,consumer,get,endpoint,get,http,method,restrict,else,s,get,head,post,put,delete,trace,options,connect,patch,response,add,header,allow,s,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1523994367;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String s__            if (consumer.getEndpoint().getHttpMethodRestrict() != null) {_                s = "OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict()__            } else {_                _                s = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            response.addHeader("Allow", s)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,s,if,consumer,get,endpoint,get,http,method,restrict,null,s,options,consumer,get,endpoint,get,http,method,restrict,else,s,get,head,post,put,delete,trace,options,connect,patch,response,add,header,allow,s,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1530672587;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String s__            if (consumer.getEndpoint().getHttpMethodRestrict() != null) {_                s = "OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict()__            } else {_                _                s = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            response.addHeader("Allow", s)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,s,if,consumer,get,endpoint,get,http,method,restrict,null,s,options,consumer,get,endpoint,get,http,method,restrict,else,s,get,head,post,put,delete,trace,options,connect,patch,response,add,header,allow,s,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1530705239;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String s__            if (consumer.getEndpoint().getHttpMethodRestrict() != null) {_                s = "OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict()__            } else {_                _                s = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            response.addHeader("Allow", s)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,s,if,consumer,get,endpoint,get,http,method,restrict,null,s,options,consumer,get,endpoint,get,http,method,restrict,else,s,get,head,post,put,delete,trace,options,connect,patch,response,add,header,allow,s,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1535377714;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String allowedMethods = METHODS.stream().filter(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers())).collect(Collectors.joining(","))__            if (allowedMethods == null && consumer.getEndpoint().getHttpMethodRestrict() != null) {_                allowedMethods = consumer.getEndpoint().getHttpMethodRestrict()__            }_            if (allowedMethods == null) {_               _                allowedMethods = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            if (!allowedMethods.contains("OPTIONS")) {_                allowedMethods = allowedMethods + ",OPTIONS"__            }_            response.addHeader("Allow", allowedMethods)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,allowed,methods,methods,stream,filter,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,collect,collectors,joining,if,allowed,methods,null,consumer,get,endpoint,get,http,method,restrict,null,allowed,methods,consumer,get,endpoint,get,http,method,restrict,if,allowed,methods,null,allowed,methods,get,head,post,put,delete,trace,options,connect,patch,if,allowed,methods,contains,options,allowed,methods,allowed,methods,options,response,add,header,allow,allowed,methods,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1536517284;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String allowedMethods = METHODS.stream().filter(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers())).collect(Collectors.joining(","))__            if (allowedMethods == null && consumer.getEndpoint().getHttpMethodRestrict() != null) {_                allowedMethods = consumer.getEndpoint().getHttpMethodRestrict()__            }_            if (allowedMethods == null) {_               _                allowedMethods = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            if (!allowedMethods.contains("OPTIONS")) {_                allowedMethods = allowedMethods + ",OPTIONS"__            }_            response.addHeader("Allow", allowedMethods)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,allowed,methods,methods,stream,filter,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,collect,collectors,joining,if,allowed,methods,null,consumer,get,endpoint,get,http,method,restrict,null,allowed,methods,consumer,get,endpoint,get,http,method,restrict,if,allowed,methods,null,allowed,methods,get,head,post,put,delete,trace,options,connect,patch,if,allowed,methods,contains,options,allowed,methods,allowed,methods,options,response,add,header,allow,allowed,methods,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1539154354;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String allowedMethods = METHODS.stream().filter(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers())).collect(Collectors.joining(","))__            if (allowedMethods == null && consumer.getEndpoint().getHttpMethodRestrict() != null) {_                allowedMethods = consumer.getEndpoint().getHttpMethodRestrict()__            }_            if (allowedMethods == null) {_               _                allowedMethods = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            if (!allowedMethods.contains("OPTIONS")) {_                allowedMethods = allowedMethods + ",OPTIONS"__            }_            response.addHeader("Allow", allowedMethods)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,allowed,methods,methods,stream,filter,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,collect,collectors,joining,if,allowed,methods,null,consumer,get,endpoint,get,http,method,restrict,null,allowed,methods,consumer,get,endpoint,get,http,method,restrict,if,allowed,methods,null,allowed,methods,get,head,post,put,delete,trace,options,connect,patch,if,allowed,methods,contains,options,allowed,methods,allowed,methods,options,response,add,header,allow,allowed,methods,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;1541670803;This is the logical implementation to handle request with {@link CamelServlet}_This is where most exceptions should be handled__@param request the {@link HttpServletRequest}_@param response the {@link HttpServletResponse}_@throws ServletException_@throws IOException;protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {_        log.trace("Service: {}", request)___        _        HttpConsumer consumer = resolve(request)__        if (consumer == null) {_            _            _            boolean hasAnyMethod = METHODS.stream().anyMatch(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers()))__            if (hasAnyMethod) {_                log.debug("No consumer to service request {} as method {} is not allowed", request, request.getMethod())__                response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__                return__            } else {_                log.debug("No consumer to service request {} as resource is not found", request)__                response.sendError(HttpServletResponse.SC_NOT_FOUND)__                return__            }_        }       _        _        _        if (consumer.isSuspended()) {_            log.debug("Consumer suspended, cannot service request {}", request)__            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__            return__        }__        _        if ("OPTIONS".equals(request.getMethod()) && !consumer.isOptionsEnabled()) {_            String allowedMethods = METHODS.stream().filter(m -> getServletResolveConsumerStrategy().isHttpMethodAllowed(request, m, getConsumers())).collect(Collectors.joining(","))__            if (allowedMethods == null && consumer.getEndpoint().getHttpMethodRestrict() != null) {_                allowedMethods = consumer.getEndpoint().getHttpMethodRestrict()__            }_            if (allowedMethods == null) {_               _                allowedMethods = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"__            }_            if (!allowedMethods.contains("OPTIONS")) {_                allowedMethods = allowedMethods + ",OPTIONS"__            }_            response.addHeader("Allow", allowedMethods)__            response.setStatus(HttpServletResponse.SC_OK)__            return__        }_        _        if (consumer.getEndpoint().getHttpMethodRestrict() != null _            && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod())) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }__        if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {_            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED)__            return__        }_        _        _        Exchange exchange = consumer.getEndpoint().createExchange(ExchangePattern.InOut)___        if (consumer.getEndpoint().isBridgeEndpoint()) {_            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE)__            exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED, Boolean.TRUE)__        }_        if (consumer.getEndpoint().isDisableStreamCache()) {_            exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.TRUE)__        }__        _        _        ClassLoader oldTccl = overrideTccl(exchange)__        HttpHelper.setCharsetFromContentType(request.getContentType(), exchange)__        exchange.setIn(new HttpMessage(exchange, consumer.getEndpoint(), request, response))__        _        String contextPath = consumer.getEndpoint().getPath()__        exchange.getIn().setHeader("CamelServletContextPath", contextPath)___        String httpPath = (String)exchange.getIn().getHeader(Exchange.HTTP_PATH)__        _        if (contextPath != null_            && httpPath.startsWith(contextPath)) {_            exchange.getIn().setHeader(Exchange.HTTP_PATH,_                    httpPath.substring(contextPath.length()))__        }__        _        try {_            consumer.createUoW(exchange)__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        }__        try {_            if (log.isTraceEnabled()) {_                log.trace("Processing request for exchangeId: {}", exchange.getExchangeId())__            }_            _            consumer.getProcessor().process(exchange)__        } catch (Exception e) {_            exchange.setException(e)__        }__        try {_            _            if (log.isTraceEnabled()) {_                log.trace("Writing response for exchangeId: {}", exchange.getExchangeId())__            }_            Integer bs = consumer.getEndpoint().getResponseBufferSize()__            if (bs != null) {_                log.trace("Using response buffer size: {}", bs)__                response.setBufferSize(bs)__            }_            consumer.getBinding().writeResponse(exchange, response)__        } catch (IOException e) {_            log.error("Error processing request", e)__            throw e__        } catch (Exception e) {_            log.error("Error processing request", e)__            throw new ServletException(e)__        } finally {_            consumer.doneUoW(exchange)__            restoreTccl(exchange, oldTccl)__        }_    };this,is,the,logical,implementation,to,handle,request,with,link,camel,servlet,this,is,where,most,exceptions,should,be,handled,param,request,the,link,http,servlet,request,param,response,the,link,http,servlet,response,throws,servlet,exception,throws,ioexception;protected,void,do,service,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,log,trace,service,request,http,consumer,consumer,resolve,request,if,consumer,null,boolean,has,any,method,methods,stream,any,match,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,if,has,any,method,log,debug,no,consumer,to,service,request,as,method,is,not,allowed,request,request,get,method,response,send,error,http,servlet,response,return,else,log,debug,no,consumer,to,service,request,as,resource,is,not,found,request,response,send,error,http,servlet,response,return,if,consumer,is,suspended,log,debug,consumer,suspended,cannot,service,request,request,response,send,error,http,servlet,response,return,if,options,equals,request,get,method,consumer,is,options,enabled,string,allowed,methods,methods,stream,filter,m,get,servlet,resolve,consumer,strategy,is,http,method,allowed,request,m,get,consumers,collect,collectors,joining,if,allowed,methods,null,consumer,get,endpoint,get,http,method,restrict,null,allowed,methods,consumer,get,endpoint,get,http,method,restrict,if,allowed,methods,null,allowed,methods,get,head,post,put,delete,trace,options,connect,patch,if,allowed,methods,contains,options,allowed,methods,allowed,methods,options,response,add,header,allow,allowed,methods,response,set,status,http,servlet,response,return,if,consumer,get,endpoint,get,http,method,restrict,null,consumer,get,endpoint,get,http,method,restrict,contains,request,get,method,response,send,error,http,servlet,response,return,if,trace,equals,request,get,method,consumer,is,trace,enabled,response,send,error,http,servlet,response,return,exchange,exchange,consumer,get,endpoint,create,exchange,exchange,pattern,in,out,if,consumer,get,endpoint,is,bridge,endpoint,exchange,set,property,exchange,boolean,true,exchange,set,property,exchange,boolean,true,if,consumer,get,endpoint,is,disable,stream,cache,exchange,set,property,exchange,boolean,true,class,loader,old,tccl,override,tccl,exchange,http,helper,set,charset,from,content,type,request,get,content,type,exchange,exchange,set,in,new,http,message,exchange,consumer,get,endpoint,request,response,string,context,path,consumer,get,endpoint,get,path,exchange,get,in,set,header,camel,servlet,context,path,context,path,string,http,path,string,exchange,get,in,get,header,exchange,if,context,path,null,http,path,starts,with,context,path,exchange,get,in,set,header,exchange,http,path,substring,context,path,length,try,consumer,create,uo,w,exchange,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,try,if,log,is,trace,enabled,log,trace,processing,request,for,exchange,id,exchange,get,exchange,id,consumer,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,try,if,log,is,trace,enabled,log,trace,writing,response,for,exchange,id,exchange,get,exchange,id,integer,bs,consumer,get,endpoint,get,response,buffer,size,if,bs,null,log,trace,using,response,buffer,size,bs,response,set,buffer,size,bs,consumer,get,binding,write,response,exchange,response,catch,ioexception,e,log,error,error,processing,request,e,throw,e,catch,exception,e,log,error,error,processing,request,e,throw,new,servlet,exception,e,finally,consumer,done,uo,w,exchange,restore,tccl,exchange,old,tccl
CamelServlet -> protected void doServiceAsync(AsyncContext context);1461303885;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        }_        _        catch (Exception e) {_            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            }_            catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        }_        finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1461303885;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1509180004;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1515694940;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1523994367;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1530672587;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1530705239;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1535377714;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1536517284;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1539154354;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected void doServiceAsync(AsyncContext context);1541670803;This is used to handle request asynchronously_@param context the {@link AsyncContext};protected void doServiceAsync(AsyncContext context) {_        final HttpServletRequest request = (HttpServletRequest) context.getRequest()__        final HttpServletResponse response = (HttpServletResponse) context.getResponse()__        try {_            doService(request, response)__        } catch (Exception e) {_            _            log.error("Error processing request", e)__            try {_                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__            } catch (Exception e1) {_                log.debug("Cannot send reply to client!", e1)__            }_            _            throw new RuntimeCamelException(e)__        } finally {_            context.complete()__        }_    };this,is,used,to,handle,request,asynchronously,param,context,the,link,async,context;protected,void,do,service,async,async,context,context,final,http,servlet,request,request,http,servlet,request,context,get,request,final,http,servlet,response,response,http,servlet,response,context,get,response,try,do,service,request,response,catch,exception,e,log,error,error,processing,request,e,try,response,send,error,http,servlet,response,catch,exception,e1,log,debug,cannot,send,reply,to,client,e1,throw,new,runtime,camel,exception,e,finally,context,complete
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1437656670;Override the Thread Context ClassLoader if need be.__@param exchange_@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,param,exchange,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1457965219;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1461303885;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1461303885;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1509180004;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1515694940;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1523994367;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1530672587;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1530705239;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1535377714;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1536517284;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1539154354;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
CamelServlet -> protected ClassLoader overrideTccl(final Exchange exchange);1541670803;Override the Thread Context ClassLoader if need be._@return old classloader if overridden_ otherwise returns null;protected ClassLoader overrideTccl(final Exchange exchange) {_        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader()__        ClassLoader appCtxCl = exchange.getContext().getApplicationContextClassLoader()__        if (oldClassLoader == null || appCtxCl == null) {_            return null__        }_        _        if (!oldClassLoader.equals(appCtxCl)) {_            Thread.currentThread().setContextClassLoader(appCtxCl)__            if (log.isTraceEnabled()) {_                log.trace("Overrode TCCL for exchangeId {} to {} on thread {}", _                        new Object[] {exchange.getExchangeId(), appCtxCl, Thread.currentThread().getName()})__            }_            return oldClassLoader__        }_        return null__    };override,the,thread,context,class,loader,if,need,be,return,old,classloader,if,overridden,otherwise,returns,null;protected,class,loader,override,tccl,final,exchange,exchange,class,loader,old,class,loader,thread,current,thread,get,context,class,loader,class,loader,app,ctx,cl,exchange,get,context,get,application,context,class,loader,if,old,class,loader,null,app,ctx,cl,null,return,null,if,old,class,loader,equals,app,ctx,cl,thread,current,thread,set,context,class,loader,app,ctx,cl,if,log,is,trace,enabled,log,trace,overrode,tccl,for,exchange,id,to,on,thread,new,object,exchange,get,exchange,id,app,ctx,cl,thread,current,thread,get,name,return,old,class,loader,return,null
