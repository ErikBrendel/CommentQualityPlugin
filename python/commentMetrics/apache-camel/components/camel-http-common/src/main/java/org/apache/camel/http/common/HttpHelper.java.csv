# id;timestamp;commentText;codeText;commentWords;codeWords
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1437656672;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (hasPayload) {_            _            answer = HttpMethods.POST__        } else {_            _            answer = HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,has,payload,answer,http,methods,post,else,answer,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1437656675;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (hasPayload) {_            _            answer = HttpMethods.POST__        } else {_            _            answer = HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,has,payload,answer,http,methods,post,else,answer,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1437656675;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1439455823;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1440718658;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1450792234;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1452350047;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1452419599;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1456393004;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1457082923;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1472223211;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__        if (m != null) {_            _            answer = m__        } else if (queryString != null) {_            _            answer = HttpMethods.GET__        } else {_            _            answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1487854167;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        if (ObjectHelper.isNotEmpty(endpoint.getHttpMethod())) {_        	answer = HttpMethods.valueOf(endpoint.getHttpMethod())__        } else {_            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,object,helper,is,not,empty,endpoint,get,http,method,answer,http,methods,value,of,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1487854168;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        _        HttpMethods answer__        if (ObjectHelper.isNotEmpty(endpoint.getHttpMethod())) {_            answer = HttpMethods.valueOf(endpoint.getHttpMethod())__        } else {_            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,object,helper,is,not,empty,endpoint,get,http,method,answer,http,methods,value,of,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1487927619;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1513617645;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1523602857;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1523994367;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1535969486;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1540108158;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1540108163;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1540108164;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException;1540108165;Creates the HttpMethod to use to call the remote server, often either its GET or POST.__@param exchange  the exchange_@return the created method_@throws URISyntaxException;public static HttpMethods createMethod(Exchange exchange, HttpCommonEndpoint endpoint, boolean hasPayload) throws URISyntaxException {_        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        _        String uriString = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        _        try {_            uriString = exchange.getContext().resolvePropertyPlaceholders(uriString)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uriString, exchange, e)__        }_        if (uriString != null) {_            _            uriString = UnsafeUriCharactersEncoder.encodeHttpURI(uriString)__            URI uri = new URI(uriString)__            queryString = uri.getQuery()__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }__        HttpMethods answer__        if (endpoint.getHttpMethod() != null) {_            _            answer = endpoint.getHttpMethod()__        } else {_            _            HttpMethods m = exchange.getIn().getHeader(Exchange.HTTP_METHOD, HttpMethods.class)__            if (m != null) {_                _                answer = m__            } else if (queryString != null) {_                _                answer = HttpMethods.GET__            } else {_                _                answer = hasPayload ? HttpMethods.POST : HttpMethods.GET__            }_        }__        return answer__    };creates,the,http,method,to,use,to,call,the,remote,server,often,either,its,get,or,post,param,exchange,the,exchange,return,the,created,method,throws,urisyntax,exception;public,static,http,methods,create,method,exchange,exchange,http,common,endpoint,endpoint,boolean,has,payload,throws,urisyntax,exception,string,query,string,exchange,get,in,get,header,exchange,string,class,string,uri,string,exchange,get,in,get,header,exchange,string,class,try,uri,string,exchange,get,context,resolve,property,placeholders,uri,string,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,string,exchange,e,if,uri,string,null,uri,string,unsafe,uri,characters,encoder,encode,http,uri,uri,string,uri,uri,new,uri,uri,string,query,string,uri,get,query,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,http,methods,answer,if,endpoint,get,http,method,null,answer,endpoint,get,http,method,else,http,methods,m,exchange,get,in,get,header,exchange,http,methods,class,if,m,null,answer,m,else,if,query,string,null,answer,http,methods,get,else,answer,has,payload,http,methods,post,http,methods,get,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1437656670;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1437656672;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1437656675;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1437656675;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1439455823;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1440718658;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1450792234;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1452350047;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1452419599;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1456393004;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1457082923;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1472223211;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1487854167;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1487854168;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1487927619;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1513617645;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1523602857;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1523994367;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = ObjectHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,object,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1535969486;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = StringHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,string,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1540108158;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = StringHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,string,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1540108163;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = StringHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,string,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1540108164;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = StringHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,string,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception;1540108165;Processes any custom {@link org.apache.camel.http.common.UrlRewrite}.__@param exchange    the exchange_@param url         the url_@param endpoint    the http endpoint_@param producer    the producer_@return            the rewritten url, or <tt>null</tt> to use original url_@throws Exception is thrown if any error during rewriting url;public static String urlRewrite(Exchange exchange, String url, HttpCommonEndpoint endpoint, Producer producer) throws Exception {_        String answer = null___        String relativeUrl__        if (endpoint.getUrlRewrite() != null) {_            _            String baseUrl__            relativeUrl = endpoint.getHttpUri().toASCIIString()__            _            if (relativeUrl.contains("?")) {_                relativeUrl = StringHelper.before(relativeUrl, "?")__            }_            if (url.startsWith(relativeUrl)) {_                baseUrl = url.substring(0, relativeUrl.length())__                relativeUrl = url.substring(relativeUrl.length())__            } else {_                baseUrl = null__                relativeUrl = url__            }_            _            if (ObjectHelper.isEmpty(relativeUrl)) {_                relativeUrl = null__            }__            String newUrl__            if (endpoint.getUrlRewrite() instanceof HttpServletUrlRewrite) {_                _                HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class)__                if (request == null) {_                    HttpMessage msg = exchange.getIn(HttpMessage.class)__                    if (msg != null) {_                        request = msg.getRequest()__                    }_                }_                if (request == null) {_                    throw new IllegalArgumentException("UrlRewrite " + endpoint.getUrlRewrite() + " requires the message body to be a"_                            + "HttpServletRequest instance, but was: " + ObjectHelper.className(exchange.getIn().getBody()))__                }_                _                _                _                String contextPath = exchange.getIn().getHeader("CamelServletContextPath", String.class)__                request = new UrlRewriteHttpServletRequestAdapter(request, contextPath)__                newUrl = ((HttpServletUrlRewrite) endpoint.getUrlRewrite()).rewrite(url, relativeUrl, producer, request)__            } else {_                newUrl = endpoint.getUrlRewrite().rewrite(url, relativeUrl, producer)__            }__            if (ObjectHelper.isNotEmpty(newUrl) && !newUrl.equals(url)) {_                _                _                if (newUrl.startsWith("http:") || newUrl.startsWith("https:")) {_                    answer = newUrl__                } else if (baseUrl != null) {_                    _                    if (baseUrl.endsWith("/") && newUrl.startsWith("/")) {_                        answer = baseUrl + newUrl.substring(1)__                    } else {_                        answer = baseUrl + newUrl__                    }_                } else {_                    _                    answer = newUrl__                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Using url rewrite to rewrite from url {} to {} -> {}",_                            new Object[]{relativeUrl != null ? relativeUrl : url, newUrl, answer})__                }_            }_        }__        return answer__    };processes,any,custom,link,org,apache,camel,http,common,url,rewrite,param,exchange,the,exchange,param,url,the,url,param,endpoint,the,http,endpoint,param,producer,the,producer,return,the,rewritten,url,or,tt,null,tt,to,use,original,url,throws,exception,is,thrown,if,any,error,during,rewriting,url;public,static,string,url,rewrite,exchange,exchange,string,url,http,common,endpoint,endpoint,producer,producer,throws,exception,string,answer,null,string,relative,url,if,endpoint,get,url,rewrite,null,string,base,url,relative,url,endpoint,get,http,uri,to,asciistring,if,relative,url,contains,relative,url,string,helper,before,relative,url,if,url,starts,with,relative,url,base,url,url,substring,0,relative,url,length,relative,url,url,substring,relative,url,length,else,base,url,null,relative,url,url,if,object,helper,is,empty,relative,url,relative,url,null,string,new,url,if,endpoint,get,url,rewrite,instanceof,http,servlet,url,rewrite,http,servlet,request,request,exchange,get,in,get,body,http,servlet,request,class,if,request,null,http,message,msg,exchange,get,in,http,message,class,if,msg,null,request,msg,get,request,if,request,null,throw,new,illegal,argument,exception,url,rewrite,endpoint,get,url,rewrite,requires,the,message,body,to,be,a,http,servlet,request,instance,but,was,object,helper,class,name,exchange,get,in,get,body,string,context,path,exchange,get,in,get,header,camel,servlet,context,path,string,class,request,new,url,rewrite,http,servlet,request,adapter,request,context,path,new,url,http,servlet,url,rewrite,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,request,else,new,url,endpoint,get,url,rewrite,rewrite,url,relative,url,producer,if,object,helper,is,not,empty,new,url,new,url,equals,url,if,new,url,starts,with,http,new,url,starts,with,https,answer,new,url,else,if,base,url,null,if,base,url,ends,with,new,url,starts,with,answer,base,url,new,url,substring,1,else,answer,base,url,new,url,else,answer,new,url,if,log,is,debug,enabled,log,debug,using,url,rewrite,to,rewrite,from,url,to,new,object,relative,url,null,relative,url,url,new,url,answer,return,answer
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1437656670;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1437656672;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1437656675;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1437656675;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1439455823;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1440718658;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1450792234;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1452350047;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1452419599;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1456393004;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1457082923;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1472223211;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1487854167;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1487854168;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1487927619;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1513617645;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1523602857;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1523994367;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1535969486;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1540108158;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1540108163;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1540108164;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException;1540108165;Reads the response body from the given http servlet request.__@param request  http servlet request_@param exchange the exchange_@return the request body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromServletRequest(HttpServletRequest request, Exchange exchange) throws IOException {_        InputStream is = HttpConverter.toInputStream(request, exchange)__        return readResponseBodyFromInputStream(is, exchange)__    };reads,the,response,body,from,the,given,http,servlet,request,param,request,http,servlet,request,param,exchange,the,exchange,return,the,request,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,servlet,request,http,servlet,request,request,exchange,exchange,throws,ioexception,input,stream,is,http,converter,to,input,stream,request,exchange,return,read,response,body,from,input,stream,is,exchange
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1437656670;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                _                if (!uri.endsWith("/")) {_                    uri = uri + "/"__                }_                uri = uri.concat(path)__            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,starts,with,path,path,substring,1,if,path,length,0,if,uri,ends,with,uri,uri,uri,uri,concat,path,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1437656672;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                _                if (!uri.endsWith("/")) {_                    uri = uri + "/"__                }_                uri = uri.concat(path)__            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,starts,with,path,path,substring,1,if,path,length,0,if,uri,ends,with,uri,uri,uri,uri,concat,path,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1437656675;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                _                if (!uri.endsWith("/")) {_                    uri = uri + "/"__                }_                uri = uri.concat(path)__            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,starts,with,path,path,substring,1,if,path,length,0,if,uri,ends,with,uri,uri,uri,uri,concat,path,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1437656675;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                _                if (!uri.endsWith("/")) {_                    uri = uri + "/"__                }_                uri = uri.concat(path)__            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,starts,with,path,path,substring,1,if,path,length,0,if,uri,ends,with,uri,uri,uri,uri,concat,path,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1439455823;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                _                if (!uri.endsWith("/")) {_                    uri = uri + "/"__                }_                uri = uri.concat(path)__            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,starts,with,path,path,substring,1,if,path,length,0,if,uri,ends,with,uri,uri,uri,uri,concat,path,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1440718658;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1450792234;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1452350047;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1452419599;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1456393004;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1457082923;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        String uri = null__        if (!(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,null,if,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1472223211;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1487854167;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1487854168;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1487927619;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1513617645;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1523602857;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1523994367;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1535969486;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1540108158;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1540108163;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1540108164;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint);1540108165;Creates the URL to invoke.__@param exchange the exchange_@param endpoint the endpoint_@return the URL to invoke;public static String createURL(Exchange exchange, HttpCommonEndpoint endpoint) {_        _        String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI)___        if (uri == null && !(endpoint.isBridgeEndpoint())) {_            uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class)__        }_        if (uri == null) {_            uri = endpoint.getHttpUri().toASCIIString()__        }__        _        try {_            uri = exchange.getContext().resolvePropertyPlaceholders(uri)__        } catch (Exception e) {_            throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri, exchange, e)__        }__        _        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class)__        _        if (path != null) {_            if (path.length() > 1 && path.startsWith("/")) {_                path = path.substring(1)__            }_            if (path.length() > 0) {_                _                int idx = uri.indexOf("?")___                _                if (idx == -1) {_                    _                    uri = uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/"__                    uri = uri.concat(path)__                } else {_                    _                    String base = uri.substring(0, idx)__                    base = base.endsWith("/") ? base : base + "/"__                    base = base.concat(path)__                    uri = base.concat(uri.substring(idx))__                }_            }_        }__        _        uri = UnsafeUriCharactersEncoder.encodeHttpURI(uri)___        return uri__    };creates,the,url,to,invoke,param,exchange,the,exchange,param,endpoint,the,endpoint,return,the,url,to,invoke;public,static,string,create,url,exchange,exchange,http,common,endpoint,endpoint,string,uri,string,exchange,get,in,remove,header,exchange,if,uri,null,endpoint,is,bridge,endpoint,uri,exchange,get,in,get,header,exchange,string,class,if,uri,null,uri,endpoint,get,http,uri,to,asciistring,try,uri,exchange,get,context,resolve,property,placeholders,uri,catch,exception,e,throw,new,runtime,exchange,exception,cannot,resolve,property,placeholders,with,uri,uri,exchange,e,string,path,exchange,get,in,get,header,exchange,string,class,if,path,null,if,path,length,1,path,starts,with,path,path,substring,1,if,path,length,0,int,idx,uri,index,of,if,idx,1,uri,uri,ends,with,path,starts,with,uri,uri,uri,uri,concat,path,else,string,base,uri,substring,0,idx,base,base,ends,with,base,base,base,base,concat,path,uri,base,concat,uri,substring,idx,uri,unsafe,uri,characters,encoder,encode,http,uri,uri,return,uri
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1437656670;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1437656672;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1437656675;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1437656675;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1439455823;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1440718658;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1450792234;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1452350047;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1452419599;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1456393004;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1457082923;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1472223211;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1487854167;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1487854168;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1487927619;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1513617645;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1523602857;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1523994367;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1535969486;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1540108158;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1540108163;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1540108164;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException;1540108165;Deserializes the input stream to a Java object__@param is input stream for the Java object_@param context the camel context which could help us to apply the customer classloader_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown;public static Object deserializeJavaObjectFromStream(InputStream is, CamelContext context) throws ClassNotFoundException, IOException {_        if (is == null) {_            return null__        }__        Object answer = null__        ObjectInputStream ois = new CamelObjectInputStream(is, context)__        try {_            answer = ois.readObject()__        } finally {_            IOHelper.close(ois)__        }__        return answer__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,param,context,the,camel,context,which,could,help,us,to,apply,the,customer,classloader,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown;public,static,object,deserialize,java,object,from,stream,input,stream,is,camel,context,context,throws,class,not,found,exception,ioexception,if,is,null,return,null,object,answer,null,object,input,stream,ois,new,camel,object,input,stream,is,context,try,answer,ois,read,object,finally,iohelper,close,ois,return,answer
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656670;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656672;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656675;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656675;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1439455823;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1440718658;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1450792234;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1452350047;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1452419599;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1456393004;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1457082923;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1472223211;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1487854167;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1487854168;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1487927619;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1513617645;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1523602857;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1523994367;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1535969486;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108158;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108163;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108164;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108165;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readRequestBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        boolean disableStreamCaching = false__        _        if (exchange.getContext() instanceof DefaultCamelContext) { _            DefaultCamelContext context = (DefaultCamelContext) exchange.getContext()__            disableStreamCaching = !context.isStreamCaching()__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, disableStreamCaching, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,request,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,boolean,disable,stream,caching,false,if,exchange,get,context,instanceof,default,camel,context,default,camel,context,context,default,camel,context,exchange,get,context,disable,stream,caching,context,is,stream,caching,if,exchange,get,property,exchange,disable,stream,caching,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1437656670;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1437656672;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1437656675;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1437656675;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1439455823;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1440718658;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1450792234;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1452350047;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1452419599;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1456393004;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1457082923;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        _        String queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1472223211;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1487854167;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1487854168;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1487927619;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1513617645;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1523602857;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1523994367;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1535969486;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1540108158;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1540108163;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1540108164;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException;1540108165;Creates the URI to invoke.__@param exchange the exchange_@param url      the url to invoke_@param endpoint the endpoint_@return the URI to invoke;public static URI createURI(Exchange exchange, String url, HttpCommonEndpoint endpoint) throws URISyntaxException {_        URI uri = new URI(url)__        _        String queryString = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY)__        _        _        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_RAW_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)__        }_        if (queryString == null) {_            queryString = endpoint.getHttpUri().getRawQuery()__        }_        _        if (queryString == null) {_            queryString = uri.getRawQuery()__        }_        if (queryString != null) {_            _            queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString)__            uri = URISupport.createURIWithQuery(uri, queryString)__        }_        return uri__    };creates,the,uri,to,invoke,param,exchange,the,exchange,param,url,the,url,to,invoke,param,endpoint,the,endpoint,return,the,uri,to,invoke;public,static,uri,create,uri,exchange,exchange,string,url,http,common,endpoint,endpoint,throws,urisyntax,exception,uri,uri,new,uri,url,string,query,string,string,exchange,get,in,remove,header,exchange,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,exchange,get,in,get,header,exchange,string,class,if,query,string,null,query,string,endpoint,get,http,uri,get,raw,query,if,query,string,null,query,string,uri,get,raw,query,if,query,string,null,query,string,unsafe,uri,characters,encoder,encode,http,uri,query,string,uri,urisupport,create,uriwith,query,uri,query,string,return,uri
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1437656670;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1437656672;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1437656675;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1437656675;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1439455823;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1440718658;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1450792234;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1452350047;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1452419599;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1456393004;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1457082923;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1472223211;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1487854167;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1487854168;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1487927619;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1513617645;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1523602857;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<Object>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,object,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1523994367;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1535969486;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1540108158;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1540108163;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1540108164;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> @SuppressWarnings("unchecked")     public static void appendHeader(Map<String, Object> headers, String key, Object value);1540108165;Appends the key/value to the headers._<p/>_This implementation supports keys with multiple values. In such situations the value_will be a {@link java.util.List} that contains the multiple values.__@param headers  headers_@param key      the key_@param value    the value;@SuppressWarnings("unchecked")_    public static void appendHeader(Map<String, Object> headers, String key, Object value) {_        if (headers.containsKey(key)) {_            Object existing = headers.get(key)__            List<Object> list__            if (existing instanceof List) {_                list = (List<Object>) existing__            } else {_                list = new ArrayList<>()__                list.add(existing)__            }_            list.add(value)__            value = list__        }__        headers.put(key, value)__    };appends,the,key,value,to,the,headers,p,this,implementation,supports,keys,with,multiple,values,in,such,situations,the,value,will,be,a,link,java,util,list,that,contains,the,multiple,values,param,headers,headers,param,key,the,key,param,value,the,value;suppress,warnings,unchecked,public,static,void,append,header,map,string,object,headers,string,key,object,value,if,headers,contains,key,key,object,existing,headers,get,key,list,object,list,if,existing,instanceof,list,list,list,object,existing,else,list,new,array,list,list,add,existing,list,add,value,value,list,headers,put,key,value
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1437656670;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1437656672;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1437656675;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1437656675;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1439455823;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1440718658;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1450792234;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1452350047;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1452419599;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1456393004;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1457082923;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1472223211;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1487854167;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1487854168;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1487927619;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1513617645;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1523602857;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1523994367;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1535969486;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1540108158;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1540108163;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1540108164;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException;1540108165;Writes the given object as response body to the servlet response_<p/>_The content type will be set to {@link HttpConstants#CONTENT_TYPE_JAVA_SERIALIZED_OBJECT}__@param response servlet response_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToServletResponse(ServletResponse response, Object target) throws IOException {_        response.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT)__        writeObjectToStream(response.getOutputStream(), target)__    };writes,the,given,object,as,response,body,to,the,servlet,response,p,the,content,type,will,be,set,to,link,http,constants,param,response,servlet,response,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,servlet,response,servlet,response,response,object,target,throws,ioexception,response,set,content,type,http,constants,write,object,to,stream,response,get,output,stream,target
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1437656670;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1437656672;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1437656675;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1437656675;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1439455823;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1440718658;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1450792234;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1452350047;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1452419599;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1456393004;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1457082923;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1472223211;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1487854167;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1487854168;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1487927619;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1513617645;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1523602857;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1523994367;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1535969486;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1540108158;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1540108163;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1540108164;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static void writeObjectToStream(OutputStream stream, Object target) throws IOException;1540108165;Writes the given object as response body to the output stream__@param stream output stream_@param target   object to write_@throws IOException is thrown if error writing;public static void writeObjectToStream(OutputStream stream, Object target) throws IOException {_        ObjectOutputStream oos = new ObjectOutputStream(stream)__        oos.writeObject(target)__        oos.flush()__        IOHelper.close(oos)__    };writes,the,given,object,as,response,body,to,the,output,stream,param,stream,output,stream,param,target,object,to,write,throws,ioexception,is,thrown,if,error,writing;public,static,void,write,object,to,stream,output,stream,stream,object,target,throws,ioexception,object,output,stream,oos,new,object,output,stream,stream,oos,write,object,target,oos,flush,iohelper,close,oos
HttpHelper -> public static Object extractHttpParameterValue(String value);1437656670;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1437656672;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1437656675;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1437656675;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1439455823;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1440718658;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1450792234;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1452350047;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1452419599;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1456393004;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1457082923;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1472223211;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1487854167;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1487854168;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1487927619;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1513617645;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1523602857;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<String>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1523994367;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1535969486;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1540108158;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1540108163;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1540108164;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object extractHttpParameterValue(String value);1540108165;Extracts the parameter value._<p/>_This implementation supports HTTP multi value parameters which_is based on the syntax of <tt>[value1, value2, value3]</tt> by returning_a {@link List} containing the values._<p/>_If the value is not a HTTP mulit value the value is returned as is.__@param value the parameter value_@return the extracted parameter value, see more details in javadoc.;public static Object extractHttpParameterValue(String value) {_        if (value == null || ObjectHelper.isEmpty(value)) {_            return value__        }__        _        String trimmed = value.trim()___        if (trimmed.startsWith("[") && trimmed.endsWith("]")) {_            _            trimmed = trimmed.substring(1, trimmed.length() - 1)__            List<String> list = new ArrayList<>()__            String[] values = trimmed.split(",")__            for (String s : values) {_                list.add(s.trim())__            }_            return list__        }__        return value__    };extracts,the,parameter,value,p,this,implementation,supports,http,multi,value,parameters,which,is,based,on,the,syntax,of,tt,value1,value2,value3,tt,by,returning,a,link,list,containing,the,values,p,if,the,value,is,not,a,http,mulit,value,the,value,is,returned,as,is,param,value,the,parameter,value,return,the,extracted,parameter,value,see,more,details,in,javadoc;public,static,object,extract,http,parameter,value,string,value,if,value,null,object,helper,is,empty,value,return,value,string,trimmed,value,trim,if,trimmed,starts,with,trimmed,ends,with,trimmed,trimmed,substring,1,trimmed,length,1,list,string,list,new,array,list,string,values,trimmed,split,for,string,s,values,list,add,s,trim,return,list,return,value
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656670;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656672;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656675;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1437656675;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1439455823;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1440718658;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1450792234;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1452350047;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1452419599;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1456393004;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1457082923;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1472223211;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1487854167;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1487854168;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1487927619;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1513617645;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1523602857;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1523994367;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1535969486;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108158;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108163;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108164;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException;1540108165;Reads the response body from the given input stream.__@param is       the input stream_@param exchange the exchange_@return the response body, can be <tt>null</tt> if no body_@throws IOException is thrown if error reading response body;public static Object readResponseBodyFromInputStream(InputStream is, Exchange exchange) throws IOException {_        if (is == null) {_            return null__        }_        _        if (exchange.getProperty(Exchange.DISABLE_HTTP_STREAM_CACHE, Boolean.FALSE, Boolean.class)) {_            return is__        } else {_            CachedOutputStream cos = new CachedOutputStream(exchange)__            IOHelper.copyAndCloseInput(is, cos)__            return cos.newStreamCache()__        }_    };reads,the,response,body,from,the,given,input,stream,param,is,the,input,stream,param,exchange,the,exchange,return,the,response,body,can,be,tt,null,tt,if,no,body,throws,ioexception,is,thrown,if,error,reading,response,body;public,static,object,read,response,body,from,input,stream,input,stream,is,exchange,exchange,throws,ioexception,if,is,null,return,null,if,exchange,get,property,exchange,boolean,false,boolean,class,return,is,else,cached,output,stream,cos,new,cached,output,stream,exchange,iohelper,copy,and,close,input,is,cos,return,cos,new,stream,cache
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1439455823;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1440718658;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1450792234;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1452350047;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1452419599;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1456393004;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1457082923;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1472223211;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1487854167;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1487854168;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1487927619;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        int from = Integer.valueOf(ObjectHelper.before(okStatusCodeRange, "-"))__        int to = Integer.valueOf(ObjectHelper.after(okStatusCodeRange, "-"))__        return statusCode >= from && statusCode <= to__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,int,from,integer,value,of,object,helper,before,ok,status,code,range,int,to,integer,value,of,object,helper,after,ok,status,code,range,return,status,code,from,status,code,to
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1513617645;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1523602857;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1523994367;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1535969486;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1540108158;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1540108163;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1540108164;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange);1540108165;Checks whether the given http status code is within the ok range__@param statusCode the status code_@param okStatusCodeRange the ok range (inclusive)_@return <tt>true</tt> if ok, <tt>false</tt> otherwise;public static boolean isStatusCodeOk(int statusCode, String okStatusCodeRange) {_        String[] ranges = okStatusCodeRange.split(",")__        for (String range : ranges) {_            boolean ok__            if (range.contains("-")) {_                int from = Integer.valueOf(StringHelper.before(range, "-"))__                int to = Integer.valueOf(StringHelper.after(range, "-"))__                ok =  statusCode >= from && statusCode <= to__            } else {_                int exact = Integer.valueOf(range)__                ok = exact == statusCode__            }_            if (ok) {_                return true__            }_        }_        return false__    };checks,whether,the,given,http,status,code,is,within,the,ok,range,param,status,code,the,status,code,param,ok,status,code,range,the,ok,range,inclusive,return,tt,true,tt,if,ok,tt,false,tt,otherwise;public,static,boolean,is,status,code,ok,int,status,code,string,ok,status,code,range,string,ranges,ok,status,code,range,split,for,string,range,ranges,boolean,ok,if,range,contains,int,from,integer,value,of,string,helper,before,range,int,to,integer,value,of,string,helper,after,range,ok,status,code,from,status,code,to,else,int,exact,integer,value,of,range,ok,exact,status,code,if,ok,return,true,return,false
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1437656670;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1437656672;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1437656675;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1437656675;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1439455823;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1440718658;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1450792234;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1452350047;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1452419599;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1456393004;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1457082923;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1472223211;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1487854167;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1487854168;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1487927619;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1513617645;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1523602857;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1523994367;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1535969486;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1540108158;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1540108163;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1540108164;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
HttpHelper -> @Deprecated     public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException;1540108165;Deserializes the input stream to a Java object__@param is input stream for the Java object_@return the java object, or <tt>null</tt> if input stream was <tt>null</tt>_@throws ClassNotFoundException is thrown if class not found_@throws IOException can be thrown_@deprecated Camel 3.0_Please use the one which has the parameter of camel context;@Deprecated_    public static Object deserializeJavaObjectFromStream(InputStream is) throws ClassNotFoundException, IOException {_        return deserializeJavaObjectFromStream(is, null)__    };deserializes,the,input,stream,to,a,java,object,param,is,input,stream,for,the,java,object,return,the,java,object,or,tt,null,tt,if,input,stream,was,tt,null,tt,throws,class,not,found,exception,is,thrown,if,class,not,found,throws,ioexception,can,be,thrown,deprecated,camel,3,0,please,use,the,one,which,has,the,parameter,of,camel,context;deprecated,public,static,object,deserialize,java,object,from,stream,input,stream,is,throws,class,not,found,exception,ioexception,return,deserialize,java,object,from,stream,is,null
