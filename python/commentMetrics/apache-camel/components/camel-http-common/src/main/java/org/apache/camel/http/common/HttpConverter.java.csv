commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;@Converter public static HttpServletRequest toServletRequest(Message message) {     if (message == null) {         return null.     }     return message.getHeader(Exchange.HTTP_SERVLET_REQUEST, HttpServletRequest.class). }
false;public,static;1;7;;@Converter public static HttpServletResponse toServletResponse(Message message) {     if (message == null) {         return null.     }     return message.getHeader(Exchange.HTTP_SERVLET_RESPONSE, HttpServletResponse.class). }
false;public,static;1;8;;@Converter public static ServletInputStream toServletInputStream(HttpMessage message) throws IOException {     HttpServletRequest request = toServletRequest(message).     if (request != null) {         return request.getInputStream().     }     return null. }
false;public,static;2;4;;@Converter public static InputStream toInputStream(HttpMessage message, Exchange exchange) throws Exception {     return toInputStream(toServletRequest(message), exchange). }
false;public,static;1;8;;@Converter public static BufferedReader toReader(HttpMessage message) throws IOException {     HttpServletRequest request = toServletRequest(message).     if (request != null) {         return request.getReader().     }     return null. }
false;public,static;2;17;;@Converter public static InputStream toInputStream(HttpServletRequest request, Exchange exchange) throws IOException {     if (request == null) {         return null.     }     InputStream is = request.getInputStream().     if (is != null && is.available() <= 0) {         // there is no data, so we cannot uncompress etc.         return is.     }     if (exchange == null || !exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {         String contentEncoding = request.getHeader(Exchange.CONTENT_ENCODING).         return GZIPHelper.uncompressGzip(contentEncoding, is).     } else {         return is.     } }
