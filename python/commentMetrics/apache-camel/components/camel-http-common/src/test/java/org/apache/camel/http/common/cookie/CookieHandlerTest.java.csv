commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;14;/*      * This test tries to set a cookie for domain .example.com from host      * www.example.com or www.sub.example.com According to RFC 2965 section      * 3.3.1 the latter cookie has to be rejected, however if we set the cookie      * policy to ACCEPT_ALL the cookie will be accepted again. If a cookie is      * set, the resulting Cookie header has two lines, one containing the      * version and one the (single) cookie.      */ ;/*      * This test tries to set a cookie for domain .example.com from host      * www.example.com or www.sub.example.com According to RFC 2965 section      * 3.3.1 the latter cookie has to be rejected, however if we set the cookie      * policy to ACCEPT_ALL the cookie will be accepted again. If a cookie is      * set, the resulting Cookie header has two lines, one containing the      * version and one the (single) cookie.      */ @Parameters(name = "{index}: {4} policy for {2} returns {3} Cookie header lines") public static Iterable<Object[]> data() {     return Arrays.asList(new Object[][] { { new InstanceCookieHandler(), CookiePolicy.ACCEPT_ORIGINAL_SERVER, "http://www.example.com/acme/foo", 2, "InstanceCookieHandler with ACCEPT_ORIGINAL_SERVER" }, { new InstanceCookieHandler(), CookiePolicy.ACCEPT_ORIGINAL_SERVER, "http://www.sub.example.com/acme/foo", 0, "InstanceCookieHandler with ACCEPT_ORIGINAL_SERVER" }, { new InstanceCookieHandler(), CookiePolicy.ACCEPT_ALL, "http://www.sub.example.com/acme/foo", 2, "InstanceCookieHandler with ACCEPT_ALL" }, { new ExchangeCookieHandler(), CookiePolicy.ACCEPT_ORIGINAL_SERVER, "http://www.example.com/acme/foo", 2, "ExchangeCookieHandler with ACCEPT_ORIGINAL_SERVER" }, { new ExchangeCookieHandler(), CookiePolicy.ACCEPT_ORIGINAL_SERVER, "http://www.sub.example.com/acme/foo", 0, "ExchangeCookieHandler with ACCEPT_ORIGINAL_SERVER" }, { new ExchangeCookieHandler(), CookiePolicy.ACCEPT_ALL, "http://www.sub.example.com/acme/foo", 2, "ExchangeCookieHandler with ACCEPT_ALL" } }). }
false;public;0;5;;@Before public void setUp() throws Exception {     super.setUp().     exchange = createExchangeWithBody(null). }
false;public;0;13;;@Test public void setReceiveAndTestCookie() throws IOException, URISyntaxException {     URI uri = new URI(uriStr).     cookieHandler.setCookiePolicy(cookiePolicy).     Map<String, List<String>> headerMap = new HashMap<>().     headerMap.put("Set-Cookie", Collections.singletonList("Customer=\"WILE_E_COYOTE\".Version=1.Path=\"/acme\".Domain=\".example.com\"")).     cookieHandler.storeCookies(exchange, uri, headerMap).     Map<String, List<String>> cookieHeaders = cookieHandler.loadCookies(exchange, uri).     assertNotNull(cookieHeaders).     assertNotNull(cookieHeaders.get("Cookie")).     assertEquals(expectedNumberOfCookieValues, cookieHeaders.get("Cookie").size()). }
