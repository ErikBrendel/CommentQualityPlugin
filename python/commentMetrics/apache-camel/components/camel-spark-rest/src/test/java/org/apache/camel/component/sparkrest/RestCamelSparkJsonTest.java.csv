commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json"). }
false;public;0;13;;@Test public void testSparkHello() throws Exception {     Exchange out = template.request("http://localhost:" + getPort() + "/spark/hello", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json").         }     }).     assertNotNull(out).     assertEquals("application/json", out.getOut().getHeader(Exchange.CONTENT_TYPE)).     assertEquals("{'reply': 'Hello World'}", out.getOut().getBody(String.class)). }
false;public;0;10;;@Override public void configure() throws Exception {     // will automatic find the spark component to use, as we setup that component in the BaseSparkTest     rest("/spark").consumes("application/json").produces("application/json").get("/hello").to("direct:hello").     from("direct:hello").transform().constant("{'reply': 'Hello World'}"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // will automatic find the spark component to use, as we setup that component in the BaseSparkTest             rest("/spark").consumes("application/json").produces("application/json").get("/hello").to("direct:hello").             from("direct:hello").transform().constant("{'reply': 'Hello World'}").         }     }. }
