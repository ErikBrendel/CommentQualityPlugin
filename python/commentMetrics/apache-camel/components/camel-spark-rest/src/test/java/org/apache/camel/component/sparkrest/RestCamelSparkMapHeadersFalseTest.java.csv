commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSparkMapHeadersFalse() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:foo").message(0).header(Exchange.HTTP_PATH).isNull().     String out2 = template.requestBodyAndHeader("http://localhost:" + getPort() + "/hello", null, "Accept", "application/json", String.class).     assertEquals("{ \"reply\": \"Bye World\" }", out2).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     restConfiguration().component("spark-rest").componentProperty("mapHeaders", "false").     rest("/hello").get().consumes("application/json").route().to("mock:foo").transform().constant("{ \"reply\": \"Bye World\" }"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("spark-rest").componentProperty("mapHeaders", "false").             rest("/hello").get().consumes("application/json").route().to("mock:foo").transform().constant("{ \"reply\": \"Bye World\" }").         }     }. }
