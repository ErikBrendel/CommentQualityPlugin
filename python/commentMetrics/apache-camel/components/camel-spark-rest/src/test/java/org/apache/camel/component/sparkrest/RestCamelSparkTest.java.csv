commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testSparkHello() throws Exception {     String out = template.requestBody("http://localhost:" + getPort() + "/spark/hello", null, String.class).     assertEquals("Hello World", out). }
false;public;0;5;;@Test public void testSparkBye() throws Exception {     String out = template.requestBody("http://localhost:" + getPort() + "/spark/bye", null, String.class).     assertEquals("Bye World", out). }
false;public;0;8;;@Test public void testSparkPost() throws Exception {     getMockEndpoint("mock:update").expectedBodiesReceived("I did this").     template.requestBody("http://localhost:" + getPort() + "/spark/bye", "I did this", String.class).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     // will automatic find the spark component to use, as we setup that component in the BaseSparkTest     rest("/spark/hello").get().to("direct:hello").     rest("/spark/bye").get().to("direct:bye").post().to("mock:update").     from("direct:hello").transform().constant("Hello World").     from("direct:bye").transform().constant("Bye World"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // will automatic find the spark component to use, as we setup that component in the BaseSparkTest             rest("/spark/hello").get().to("direct:hello").             rest("/spark/bye").get().to("direct:bye").post().to("mock:update").             from("direct:hello").transform().constant("Hello World").             from("direct:bye").transform().constant("Bye World").         }     }. }
