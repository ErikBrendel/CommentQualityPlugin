commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testSparkGet() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     try {         template.requestBodyAndHeader("http://localhost:" + getPort() + "/hello", null, "Accept", "text/plain", String.class).         fail("Should fail").     } catch (CamelExecutionException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(404, cause.getStatusCode()).     }     String out2 = template.requestBodyAndHeader("http://localhost:" + getPort() + "/hello", null, "Accept", "application/json", String.class).     assertEquals("{ \"reply\": \"Bye World\" }", out2).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("spark-rest:get:hello?accept=application/json").to("mock:foo").transform().constant("{ \"reply\": \"Bye World\" }"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("spark-rest:get:hello?accept=application/json").to("mock:foo").transform().constant("{ \"reply\": \"Bye World\" }").         }     }. }
