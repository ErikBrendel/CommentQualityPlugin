commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before public void setup() {     defaultSparkBinding = new DefaultSparkBinding().     when(request.raw()).thenReturn(httpServletRequest).     when(request.headers()).thenReturn(Sets.newHashSet("Content-Type")).     when(request.headers("Content-Type")).thenReturn("application/json").     when(httpServletRequest.getMethod()).thenReturn("POST").     when(httpServletRequest.getQueryString()).thenReturn("?query=value").     when(httpServletRequest.getRequestURL()).thenReturn(new StringBuffer("http://localhost?query=value")).     when(httpServletRequest.getRequestURI()).thenReturn("http://localhost?query=value").     when(httpServletRequest.getContentType()).thenReturn("application/json").     when(camelExchange.getFromEndpoint()).thenReturn(new SparkEndpoint("/", null)). }
false;public,static;0;15;;@DataPoints("exchangeHeaderScenarios") public static List<ExchangeHeaderScenario> exchangeHeaderScenarios() {     return asList(new ExchangeHeaderScenario(emptyMap(), HTTP_METHOD, "POST"), new ExchangeHeaderScenario(emptyMap(), HTTP_QUERY, "?query=value"), new ExchangeHeaderScenario(emptyMap(), HTTP_URL, "http://localhost?query=value"), new ExchangeHeaderScenario(emptyMap(), HTTP_URI, "http://localhost?query=value"), new ExchangeHeaderScenario(emptyMap(), CONTENT_TYPE, "application/json"), new ExchangeHeaderScenario(ImmutableMap.of(HTTP_METHOD, "GET"), HTTP_METHOD, "GET"), new ExchangeHeaderScenario(ImmutableMap.of(HTTP_QUERY, "?originalQuery=value"), HTTP_QUERY, "?originalQuery=value"), new ExchangeHeaderScenario(ImmutableMap.of(HTTP_URL, "http://originalhost?query=value"), HTTP_URL, "http://originalhost?query=value"), new ExchangeHeaderScenario(ImmutableMap.of(HTTP_URI, "http://originalhost?query=value"), HTTP_URI, "http://originalhost?query=value"), new ExchangeHeaderScenario(ImmutableMap.of(CONTENT_TYPE, "text/plain"), CONTENT_TYPE, "text/plain")). }
false;public;1;14;;@Theory @Test public void shouldOnlyAddStandardExchangeHeaderGivenHeaderNotPresentInInput(@FromDataPoints("exchangeHeaderScenarios") ExchangeHeaderScenario scenario) throws Exception {     // given     Map<String, Object> headers = scenario.headers.     // when     defaultSparkBinding.populateCamelHeaders(request, headers, camelExchange, sparkConfiguration).     // then     String actualHeader = Objects.toString(headers.get(scenario.expectedHeaderName), null).     assertEquals(scenario.expectedHeaderValue, actualHeader). }
