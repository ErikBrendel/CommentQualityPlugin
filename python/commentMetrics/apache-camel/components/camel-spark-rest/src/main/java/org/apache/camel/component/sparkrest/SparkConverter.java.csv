commented;modifiers;parameterAmount;loc;comment;code
true;public,static;4;21;/**  * A fallback converter that allows us to easily call Java beans and use the raw Spark {@link Request} as parameter types.  */ ;/**  * A fallback converter that allows us to easily call Java beans and use the raw Spark {@link Request} as parameter types.  */ @FallbackConverter public static Object convertToRequest(Class<?> type, Exchange exchange, Object value, TypeConverterRegistry registry) {     // if we want to covert to Request     if (value != null && Request.class.isAssignableFrom(type)) {         // okay we may need to cheat a bit when we want to grab the HttpRequest as its stored on the NettyHttpMessage         // so if the message instance is a NettyHttpMessage and its body is the value, then we can grab the         // HttpRequest from the NettyHttpMessage         SparkMessage msg.         if (exchange.hasOut()) {             msg = exchange.getOut(SparkMessage.class).         } else {             msg = exchange.getIn(SparkMessage.class).         }         if (msg != null) {             return msg.getRequest().         }     }     return null. }
true;public,static;4;21;/**  * A fallback converter that allows us to easily call Java beans and use the raw Spark {@link Response} as parameter types.  */ ;/**  * A fallback converter that allows us to easily call Java beans and use the raw Spark {@link Response} as parameter types.  */ @FallbackConverter public static Object convertToResponse(Class<?> type, Exchange exchange, Object value, TypeConverterRegistry registry) {     // if we want to covert to Response     if (value != null && Response.class.isAssignableFrom(type)) {         // okay we may need to cheat a bit when we want to grab the HttpRequest as its stored on the NettyHttpMessage         // so if the message instance is a NettyHttpMessage and its body is the value, then we can grab the         // HttpRequest from the NettyHttpMessage         SparkMessage msg.         if (exchange.hasOut()) {             msg = exchange.getOut(SparkMessage.class).         } else {             msg = exchange.getIn(SparkMessage.class).         }         if (msg != null) {             return msg.getResponse().         }     }     return null. }
