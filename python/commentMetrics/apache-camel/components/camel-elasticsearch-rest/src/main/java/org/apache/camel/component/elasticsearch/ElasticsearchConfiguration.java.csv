commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Name of the cluster  */ ;/**  * Name of the cluster  */ public String getClusterName() {     return clusterName. }
false;public;1;3;;public void setClusterName(String clusterName) {     this.clusterName = clusterName. }
true;public;0;3;/**  * What operation to perform  */ ;/**  * What operation to perform  */ public ElasticsearchOperation getOperation() {     return operation. }
false;public;1;3;;public void setOperation(ElasticsearchOperation operation) {     this.operation = operation. }
true;public;0;3;/**  * The name of the index to act against  */ ;/**  * The name of the index to act against  */ public String getIndexName() {     return indexName. }
false;public;1;3;;public void setIndexName(String indexName) {     this.indexName = indexName. }
true;public;0;3;/**  * The type of the index to act against  */ ;/**  * The type of the index to act against  */ public String getIndexType() {     return indexType. }
false;public;1;3;;public void setIndexType(String indexType) {     this.indexType = indexType. }
true;public;0;3;/**  * Comma separated list with ip:port formatted remote transport addresses to use.  * The ip and port options must be left blank for hostAddresses to be considered instead.  */ ;/**  * Comma separated list with ip:port formatted remote transport addresses to use.  * The ip and port options must be left blank for hostAddresses to be considered instead.  */ public String getHostAddresses() {     return hostAddresses. }
false;public;1;3;;public void setHostAddresses(String hostAddresses) {     this.hostAddresses = hostAddresses. }
true;public;0;3;/**  * Index creation waits for the write consistency number of shards to be available  */ ;/**  * Index creation waits for the write consistency number of shards to be available  */ public int getWaitForActiveShards() {     return waitForActiveShards. }
false;public;1;3;;public void setWaitForActiveShards(int waitForActiveShards) {     this.waitForActiveShards = waitForActiveShards. }
false;public;0;3;;public List<HttpHost> getHostAddressesList() {     return hostAddressesList. }
false;public;1;3;;public void setHostAddressesList(List<HttpHost> hostAddressesList) {     this.hostAddressesList = hostAddressesList. }
true;public;0;3;/**  * The timeout in ms to wait before the socket will timeout.  */ ;/**  * The timeout in ms to wait before the socket will timeout.  */ public int getSocketTimeout() {     return socketTimeout. }
false;public;1;3;;public void setSocketTimeout(int socketTimeout) {     this.socketTimeout = socketTimeout. }
true;public;0;3;/**  *  The time in ms to wait before connection will timeout.  */ ;/**  *  The time in ms to wait before connection will timeout.  */ public int getConnectionTimeout() {     return connectionTimeout. }
false;public;1;3;;public void setConnectionTimeout(int connectionTimeout) {     this.connectionTimeout = connectionTimeout. }
true;public;0;3;/**  *  Basic authenticate user  */ ;/**  *  Basic authenticate user  */ public String getUser() {     return user. }
false;public;1;3;;public void setUser(String user) {     this.user = user. }
true;public;0;3;/**  *  Password for authenticate  */ ;/**  *  Password for authenticate  */ public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
true;public;0;3;/**  * Enable SSL  */ ;/**  * Enable SSL  */ public Boolean getEnableSSL() {     return enableSSL. }
false;public;1;3;;public void setEnableSSL(Boolean enableSSL) {     this.enableSSL = enableSSL. }
true;public;0;3;/**  * The time in ms before retry  */ ;/**  * The time in ms before retry  */ public int getMaxRetryTimeout() {     return maxRetryTimeout. }
false;public;1;3;;public void setMaxRetryTimeout(int maxRetryTimeout) {     this.maxRetryTimeout = maxRetryTimeout. }
true;public;0;3;/**  * Disconnect after it finish calling the producer  */ ;/**  * Disconnect after it finish calling the producer  */ public Boolean getDisconnect() {     return disconnect. }
false;public;1;3;;public void setDisconnect(Boolean disconnect) {     this.disconnect = disconnect. }
true;public;0;3;/**  * Enable automatically discover nodes from a running Elasticsearch cluster  */ ;/**  * Enable automatically discover nodes from a running Elasticsearch cluster  */ public Boolean getEnableSniffer() {     return enableSniffer. }
false;public;1;3;;public void setEnableSniffer(Boolean enableSniffer) {     this.enableSniffer = enableSniffer. }
true;public;0;3;/**  * The interval between consecutive ordinary sniff executions in milliseconds. Will be honoured when  * sniffOnFailure is disabled or when there are no failures between consecutive sniff executions  */ ;/**  * The interval between consecutive ordinary sniff executions in milliseconds. Will be honoured when  * sniffOnFailure is disabled or when there are no failures between consecutive sniff executions  */ public int getSnifferInterval() {     return snifferInterval. }
false;public;1;3;;public void setSnifferInterval(int snifferInterval) {     this.snifferInterval = snifferInterval. }
true;public;0;3;/**  * The delay of a sniff execution scheduled after a failure (in milliseconds)  */ ;/**  * The delay of a sniff execution scheduled after a failure (in milliseconds)  */ public int getSniffAfterFailureDelay() {     return sniffAfterFailureDelay. }
false;public;1;3;;public void setSniffAfterFailureDelay(int sniffAfterFailureDelay) {     this.sniffAfterFailureDelay = sniffAfterFailureDelay. }
true;public;0;3;/**  * Enable scroll usage  */ ;/**  * Enable scroll usage  */ public boolean getUseScroll() {     return useScroll. }
false;public;1;3;;public void setUseScroll(boolean useScroll) {     this.useScroll = useScroll. }
true;public;0;3;/**  * Time in ms during which elasticsearch will keep search context alive  */ ;/**  * Time in ms during which elasticsearch will keep search context alive  */ public int getScrollKeepAliveMs() {     return scrollKeepAliveMs. }
false;public;1;3;;public void setScrollKeepAliveMs(int scrollKeepAliveMs) {     this.scrollKeepAliveMs = scrollKeepAliveMs. }
