commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public boolean hasNext() {     if (closed) {         return false.     }     boolean hasNext = currentSearchHits.hasNext().     if (!hasNext) {         updateCurrentSearchHits().         hasNext = currentSearchHits.hasNext().     }     return hasNext. }
false;public;0;4;;@Override public SearchHit next() {     return closed ? null : currentSearchHits.next(). }
true;private;0;4;/**  * Execute next Elasticsearch scroll request and update the current scroll result.  */ ;/**  * Execute next Elasticsearch scroll request and update the current scroll result.  */ private void updateCurrentSearchHits() {     SearchResponse searchResponse = scrollSearch().     this.currentSearchHits = searchResponse.getHits().iterator(). }
false;private;0;5;;private void setFirstCurrentSearchHits() {     SearchResponse searchResponse = firstSearch().     this.currentSearchHits = searchResponse.getHits().iterator().     this.scrollId = searchResponse.getScrollId(). }
false;private;0;10;;private SearchResponse firstSearch() {     SearchResponse searchResponse.     try {         searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT).         requestCount++.     } catch (IOException e) {         throw new IllegalStateException(e).     }     return searchResponse. }
false;private;0;14;;private SearchResponse scrollSearch() {     SearchResponse searchResponse.     try {         SearchScrollRequest searchScrollRequest = new SearchScrollRequest().scroll(new Scroll(TimeValue.timeValueMillis(scrollKeepAliveMs))).scrollId(scrollId).         searchResponse = restHighLevelClient.scroll(searchScrollRequest, RequestOptions.DEFAULT).         requestCount++.     } catch (IOException e) {         throw new IllegalStateException(e).     }     return searchResponse. }
false;public;0;14;;public void close() {     if (!closed) {         try {             ClearScrollRequest clearScrollRequest = new ClearScrollRequest().             clearScrollRequest.addScrollId(scrollId).             restHighLevelClient.clearScroll(clearScrollRequest, RequestOptions.DEFAULT).             closed = true.             exchange.setProperty(PROPERTY_SCROLL_ES_QUERY_COUNT, requestCount).         } catch (IOException e) {             throw new IllegalStateException(e).         }     } }
false;public;0;3;;public int getRequestCount() {     return requestCount. }
false;public;0;3;;public boolean isClosed() {     return closed. }
