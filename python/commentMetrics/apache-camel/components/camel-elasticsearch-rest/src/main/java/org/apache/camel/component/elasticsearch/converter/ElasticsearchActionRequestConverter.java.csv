commented;modifiers;parameterAmount;loc;comment;code
true;private,static;2;29;// Update requests ;// Update requests private static UpdateRequest createUpdateRequest(Object document, Exchange exchange) {     if (document instanceof UpdateRequest) {         return (UpdateRequest) document.     }     UpdateRequest updateRequest = new UpdateRequest().     if (document instanceof byte[]) {         updateRequest.doc((byte[]) document).     } else if (document instanceof Map) {         updateRequest.doc((Map<String, Object>) document).     } else if (document instanceof String) {         updateRequest.doc((String) document, XContentFactory.xContentType((String) document)).     } else if (document instanceof XContentBuilder) {         updateRequest.doc((XContentBuilder) document).     } else {         return null.     }     return updateRequest.waitForActiveShards(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_WAIT_FOR_ACTIVE_SHARDS, Integer.class)).parent(exchange.getIn().getHeader(PARENT, String.class)).index(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_NAME, String.class)).type(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_TYPE, String.class)).id(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_ID, String.class)). }
true;private,static;2;27;// Index requests ;// Index requests private static IndexRequest createIndexRequest(Object document, Exchange exchange) {     if (document instanceof IndexRequest) {         return (IndexRequest) document.     }     IndexRequest indexRequest = new IndexRequest().     if (document instanceof byte[]) {         indexRequest.source((byte[]) document, XContentFactory.xContentType((byte[]) document)).     } else if (document instanceof Map) {         indexRequest.source((Map<String, Object>) document).     } else if (document instanceof String) {         indexRequest.source((String) document, XContentFactory.xContentType((String) document)).     } else if (document instanceof XContentBuilder) {         indexRequest.source((XContentBuilder) document).     } else {         return null.     }     return indexRequest.waitForActiveShards(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_WAIT_FOR_ACTIVE_SHARDS, Integer.class)).parent(exchange.getIn().getHeader(PARENT, String.class)).index(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_NAME, String.class)).type(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_TYPE, String.class)). }
false;public,static;2;5;;@Converter public static IndexRequest toIndexRequest(Object document, Exchange exchange) {     return createIndexRequest(document, exchange).id(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_ID, String.class)). }
false;public,static;2;5;;@Converter public static UpdateRequest toUpdateRequest(Object document, Exchange exchange) {     return createUpdateRequest(document, exchange).id(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_ID, String.class)). }
false;public,static;2;11;;@Converter public static GetRequest toGetRequest(Object document, Exchange exchange) {     if (document instanceof GetRequest) {         return (GetRequest) document.     }     return new GetRequest(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_NAME, String.class)).type(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_TYPE, String.class)).id((String) document). }
false;public,static;2;17;;@Converter public static DeleteRequest toDeleteRequest(Object document, Exchange exchange) {     if (document instanceof DeleteRequest) {         return (DeleteRequest) document.     }     if (document instanceof String) {         return new DeleteRequest().index(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_NAME, String.class)).type(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_TYPE, String.class)).id((String) document).     } else {         throw new IllegalArgumentException("Wrong body type. Only DeleteRequest or String is allowed as a type").     } }
false;public,static;2;42;;@Converter public static SearchRequest toSearchRequest(Object queryObject, Exchange exchange) throws IOException {     if (queryObject instanceof SearchRequest) {         return (SearchRequest) queryObject.     }     SearchRequest searchRequest = new SearchRequest(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_NAME, String.class)).types(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_TYPE, String.class)).     SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().     String queryText = null.     if (queryObject instanceof Map<?, ?>) {         Map<String, Object> mapQuery = (Map<String, Object>) queryObject.         // Remove 'query' prefix from the query object for backward compatibility         if (mapQuery.containsKey(ES_QUERY_DSL_PREFIX)) {             mapQuery = (Map<String, Object>) mapQuery.get(ES_QUERY_DSL_PREFIX).         }         try {             XContentBuilder contentBuilder = XContentFactory.contentBuilder(XContentType.JSON).             queryText = Strings.toString(contentBuilder.map(mapQuery)).         } catch (IOException e) {             LOG.error(e.getMessage()).         }     } else if (queryObject instanceof String) {         queryText = (String) queryObject.         ObjectMapper mapper = new ObjectMapper().         JsonNode jsonTextObject = mapper.readValue(queryText, JsonNode.class).         JsonNode parentJsonNode = jsonTextObject.get(ES_QUERY_DSL_PREFIX).         if (parentJsonNode != null) {             queryText = parentJsonNode.toString().         }     } else {         // Cannot convert the queryObject into SearchRequest         return null.     }     searchSourceBuilder.query(QueryBuilders.wrapperQuery(queryText)).     searchRequest.source(searchSourceBuilder).     return searchRequest. }
false;public,static;2;15;;@Converter public static BulkRequest toBulkRequest(Object documents, Exchange exchange) {     if (documents instanceof BulkRequest) {         return (BulkRequest) documents.     }     if (documents instanceof List) {         BulkRequest request = new BulkRequest().         for (Object document : (List<Object>) documents) {             request.add(createIndexRequest(document, exchange)).         }         return request.     } else {         throw new IllegalArgumentException("Wrong body type. Only BulkRequest or List is allowed as a type").     } }
