commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;11;;// ********************************* // Parameters validation // ********************************* @Override protected Result verifyParameters(Map<String, Object> parameters) {     ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.PARAMETERS).error(ResultErrorHelper.requiresOption("clusterName", parameters)).error(ResultErrorHelper.requiresOption("hostAddresses", parameters)).     // Validate using the catalog     super.verifyParametersAgainstCatalog(builder, parameters).     return builder.build(). }
false;protected;1;20;;// ********************************* // Connectivity validation // ********************************* @Override protected Result verifyConnectivity(Map<String, Object> parameters) {     ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.CONNECTIVITY).     try {         ElasticsearchConfiguration configuration = setProperties(new ElasticsearchConfiguration(), parameters).         RestClientBuilder clientBuilder = RestClient.builder(configuration.getHostAddressesList().toArray(new HttpHost[0])).         RestHighLevelClient restHighLevelClient = new RestHighLevelClient(clientBuilder).         restHighLevelClient.ping().     } catch (IOException e) {         ResultErrorBuilder errorBuilder = ResultErrorBuilder.withCodeAndDescription(VerificationError.StandardCode.AUTHENTICATION, e.getMessage()).detail("elasticsearch_rest_exception_message", e.getMessage()).detail(VerificationError.ExceptionAttribute.EXCEPTION_CLASS, e.getClass().getName()).detail(VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE, e).         builder.error(errorBuilder.build()).     } catch (Exception e) {         builder.error(ResultErrorBuilder.withException(e).build()).     }     return builder.build(). }
