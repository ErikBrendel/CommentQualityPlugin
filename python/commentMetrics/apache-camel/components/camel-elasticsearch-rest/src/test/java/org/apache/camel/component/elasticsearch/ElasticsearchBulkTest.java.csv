commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testBulkIndex() throws Exception {     List<Map<String, String>> documents = new ArrayList<>().     Map<String, String> document1 = createIndexedData("1").     Map<String, String> document2 = createIndexedData("2").     documents.add(document1).     documents.add(document2).     List<?> indexIds = template.requestBody("direct:bulk_index", documents, List.class).     assertNotNull("indexIds should be set", indexIds).     assertCollectionSize("Indexed documents should match the size of documents", indexIds, documents.size()). }
false;public;0;18;;@Test public void bulkIndexListRequestBody() throws Exception {     String prefix = createPrefix().     // given     List<Map<String, String>> request = new ArrayList<>().     final HashMap<String, String> valueMap = new HashMap<>().     valueMap.put("id", prefix + "baz").     valueMap.put("content", prefix + "hello").     request.add(valueMap).     // when     @SuppressWarnings("unchecked")     List<String> indexedDocumentIds = template.requestBody("direct:bulk_index", request, List.class).     // then     assertThat(indexedDocumentIds, notNullValue()).     assertThat(indexedDocumentIds.size(), equalTo(1)). }
false;public;0;18;;@Test public void bulkIndexRequestBody() throws Exception {     String prefix = createPrefix().     // given     BulkRequest request = new BulkRequest().     request.add(new IndexRequest(prefix + "foo", prefix + "bar", prefix + "baz").source(prefix + "content", prefix + "hello")).     // when     @SuppressWarnings("unchecked")     BulkItemResponse[] response = template.requestBody("direct:bulk_index", request, BulkItemResponse[].class).     // then     assertThat(response, notNullValue()).     assertThat(response.length, equalTo(1)).     assertThat(response[0].isFailed(), equalTo(false)).     assertThat(response[0].getId(), equalTo(prefix + "baz")). }
false;public;0;15;;@Test public void bulkRequestBody() throws Exception {     String prefix = createPrefix().     // given     BulkRequest request = new BulkRequest().     request.add(new IndexRequest(prefix + "foo", prefix + "bar", prefix + "baz").source(prefix + "content", prefix + "hello")).     // when     BulkItemResponse[] response = (BulkItemResponse[]) template.requestBody("direct:bulk", request).     // then     assertThat(response, notNullValue()).     assertEquals(prefix + "baz", response[0].getResponse().getId()). }
false;public;0;5;;@Override public void configure() {     from("direct:bulk_index").to("elasticsearch-rest://elasticsearch?operation=BulkIndex&indexName=twitter&indexType=tweet").     from("direct:bulk").to("elasticsearch-rest://elasticsearch?operation=Bulk&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:bulk_index").to("elasticsearch-rest://elasticsearch?operation=BulkIndex&indexName=twitter&indexType=tweet").             from("direct:bulk").to("elasticsearch-rest://elasticsearch?operation=Bulk&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT).         }     }. }
