commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testIndex() throws Exception {     Map<String, String> map = createIndexedData().     String indexId = template.requestBody("direct:index", map, String.class).     assertNotNull("indexId should be set", indexId). }
false;public;0;9;;@Test public void testIndexDelete() throws Exception {     Map<String, String> map = createIndexedData().     String indexId = template.requestBody("direct:index", map, String.class).     assertNotNull("indexId should be set", indexId).     int status = template.requestBody("direct:deleteIndex", "", Integer.class).     assertEquals("status should be 200", 200, status). }
false;public;0;6;;@Test public void testIndexWithReplication() throws Exception {     Map<String, String> map = createIndexedData().     String indexId = template.requestBody("direct:indexWithReplication", map, String.class).     assertNotNull("indexId should be set", indexId). }
false;public;0;11;;@Test public void testIndexWithHeaders() throws Exception {     Map<String, String> map = createIndexedData().     Map<String, Object> headers = new HashMap<>().     headers.put(ElasticsearchConstants.PARAM_OPERATION, ElasticsearchOperation.Index).     headers.put(ElasticsearchConstants.PARAM_INDEX_NAME, "twitter").     headers.put(ElasticsearchConstants.PARAM_INDEX_TYPE, "tweet").     String indexId = template.requestBodyAndHeaders("direct:start", map, headers, String.class).     assertNotNull("indexId should be set", indexId). }
false;public;0;13;;@Test public void testIndexWithIDInHeader() throws Exception {     Map<String, String> map = createIndexedData().     Map<String, Object> headers = new HashMap<>().     headers.put(ElasticsearchConstants.PARAM_OPERATION, ElasticsearchOperation.Index).     headers.put(ElasticsearchConstants.PARAM_INDEX_NAME, "twitter").     headers.put(ElasticsearchConstants.PARAM_INDEX_TYPE, "tweet").     headers.put(ElasticsearchConstants.PARAM_INDEX_ID, "123").     String indexId = template.requestBodyAndHeaders("direct:start", map, headers, String.class).     assertNotNull("indexId should be set", indexId).     assertEquals("indexId should be equals to the provided id", "123", indexId). }
false;public;0;7;;@Override public void configure() {     from("direct:start").to("elasticsearch-rest://elasticsearch?hostAddresses=localhost:" + ES_BASE_HTTP_PORT).     from("direct:index").to("elasticsearch-rest://elasticsearch?operation=Index&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT).     from("direct:deleteIndex").to("elasticsearch-rest://elasticsearch?operation=DeleteIndex&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT).     from("direct:indexWithReplication").to("elasticsearch-rest://elasticsearch?operation=Index&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("elasticsearch-rest://elasticsearch?hostAddresses=localhost:" + ES_BASE_HTTP_PORT).             from("direct:index").to("elasticsearch-rest://elasticsearch?operation=Index&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT).             from("direct:deleteIndex").to("elasticsearch-rest://elasticsearch?operation=DeleteIndex&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT).             from("direct:indexWithReplication").to("elasticsearch-rest://elasticsearch?operation=Index&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_BASE_HTTP_PORT).         }     }. }
