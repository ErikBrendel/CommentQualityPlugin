commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;21;;@SuppressWarnings("resource") @BeforeClass public static void cleanupOnce() throws Exception {     deleteDirectory("target/testcluster/").     clusterName = "es-cl-run-" + System.currentTimeMillis().     runner = new ElasticsearchClusterRunner().     // create ES nodes     runner.onBuild((number, settingsBuilder) -> {         settingsBuilder.put("http.cors.enabled", true).         settingsBuilder.put("http.cors.allow-origin", "*").     }).build(newConfigs().clusterName(clusterName).numOfNode(1).baseHttpPort(ES_BASE_TRANSPORT_PORT).basePath("target/testcluster/")).     // wait for green status     runner.ensureGreen().     client = RestClient.builder(new HttpHost(InetAddress.getByName("localhost"), ES_BASE_HTTP_PORT)).build(). }
false;public,static;0;9;;@AfterClass public static void teardownOnce() throws IOException {     if (client != null) {         client.close().     }     if (runner != null) {         runner.close().     } }
false;public;0;5;;@Override public boolean isCreateCamelContextPerClass() {     // let's speed up the tests using the same context     return true. }
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     final ElasticsearchComponent elasticsearchComponent = new ElasticsearchComponent().     elasticsearchComponent.setHostAddresses("localhost:" + ES_BASE_HTTP_PORT).     context.addComponent("elasticsearch-rest", elasticsearchComponent).     return context. }
true;;1;20;/**  * As we don't delete the {@code target/data} folder for <b>each</b> test  * below (otherwise they would run much slower), we need to make sure  * there's no side effect of the same used data through creating unique  * indexes.  */ ;/**  * As we don't delete the {@code target/data} folder for <b>each</b> test  * below (otherwise they would run much slower), we need to make sure  * there's no side effect of the same used data through creating unique  * indexes.  */ Map<String, String> createIndexedData(String... additionalPrefixes) {     String prefix = createPrefix().     // take over any potential prefixes we may have been asked for     if (additionalPrefixes.length > 0) {         StringBuilder sb = new StringBuilder(prefix).         for (String additionalPrefix : additionalPrefixes) {             sb.append(additionalPrefix).append("-").         }         prefix = sb.toString().     }     String key = prefix + "key".     String value = prefix + "value".     log.info("Creating indexed data using the key/value pair {} => {}", key, value).     Map<String, String> map = new HashMap<>().     map.put(key, value).     return map. }
false;;0;4;;String createPrefix() {     // make use of the test method name to avoid collision     return getTestMethodName().toLowerCase() + "-". }
false;;0;3;;RestClient getClient() {     return client. }
