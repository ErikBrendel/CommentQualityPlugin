commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void indexWithIpAndPort() throws Exception {     Map<String, String> map = createIndexedData().     Map<String, Object> headers = new HashMap<>().     headers.put(ElasticsearchConstants.PARAM_OPERATION, ElasticsearchOperation.Index).     headers.put(ElasticsearchConstants.PARAM_INDEX_NAME, "twitter").     headers.put(ElasticsearchConstants.PARAM_INDEX_TYPE, "tweet").     headers.put(ElasticsearchConstants.PARAM_INDEX_ID, "1").     String indexId = template.requestBodyAndHeaders("direct:indexWithIpAndPort", map, headers, String.class).     assertNotNull("indexId should be set", indexId).     indexId = template.requestBodyAndHeaders("direct:indexWithIpAndPort", map, headers, String.class).     assertNotNull("indexId should be set", indexId).     assertEquals("Cluster must be of three nodes", runner.getNodeSize(), 3).     assertEquals("Index id 1 must exists", true, client.get(new GetRequest("twitter", "tweet", "1")).isExists()). }
false;public;0;19;;@Test public void indexWithSnifferEnable() throws Exception {     Map<String, String> map = createIndexedData().     Map<String, Object> headers = new HashMap<>().     headers.put(ElasticsearchConstants.PARAM_OPERATION, ElasticsearchOperation.Index).     headers.put(ElasticsearchConstants.PARAM_INDEX_NAME, "facebook").     headers.put(ElasticsearchConstants.PARAM_INDEX_TYPE, "post").     headers.put(ElasticsearchConstants.PARAM_INDEX_ID, "4").     String indexId = template.requestBodyAndHeaders("direct:indexWithSniffer", map, headers, String.class).     assertNotNull("indexId should be set", indexId).     assertEquals("Cluster must be of three nodes", runner.getNodeSize(), 3).     assertEquals("Index id 4 must exists", true, client.get(new GetRequest("facebook", "post", "4")).isExists()).     final BasicResponseHandler responseHandler = new BasicResponseHandler().     String body = responseHandler.handleEntity(restClient.performRequest("GET", "/_cluster/health?pretty").getEntity()).     assertStringContains(body, "\"number_of_data_nodes\" : 3"). }
false;public;0;7;;@Override public void configure() {     from("direct:indexWithIpAndPort").to("elasticsearch-rest://" + clusterName + "?operation=Index&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_FIRST_NODE_TRANSPORT_PORT).     from("direct:indexWithSniffer").to("elasticsearch-rest://" + clusterName + "?operation=Index&indexName=twitter&indexType=tweet&enableSniffer=true&hostAddresses=localhost:" + ES_FIRST_NODE_TRANSPORT_PORT). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:indexWithIpAndPort").to("elasticsearch-rest://" + clusterName + "?operation=Index&indexName=twitter&indexType=tweet&hostAddresses=localhost:" + ES_FIRST_NODE_TRANSPORT_PORT).             from("direct:indexWithSniffer").to("elasticsearch-rest://" + clusterName + "?operation=Index&indexName=twitter&indexType=tweet&enableSniffer=true&hostAddresses=localhost:" + ES_FIRST_NODE_TRANSPORT_PORT).         }     }. }
