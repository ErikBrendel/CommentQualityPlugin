commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;6;;public List<Exchange> getExchanges() {     if (exchanges == null) {         exchanges = createExchangeList().     }     return exchanges. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     onExchange(exchange). }
false;public;0;7;;public Producer createProducer() throws Exception {     return new DefaultProducer(this) {          public void process(Exchange exchange) throws Exception {             onExchange(exchange).         }     }. }
false;public;1;7;;public Consumer createConsumer(Processor processor) throws Exception {     this.onExchangeProcessor = processor.     Consumer answer = new DefaultConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;protected;0;3;;protected List<Exchange> createExchangeList() {     return new CopyOnWriteArrayList<>(). }
true;protected;1;8;/**  * Invoked on a message exchange being sent by a producer  *  * @param exchange the exchange  * @throws Exception is thrown if failed to process the exchange  */ ;/**  * Invoked on a message exchange being sent by a producer  *  * @param exchange the exchange  * @throws Exception is thrown if failed to process the exchange  */ protected void onExchange(Exchange exchange) throws Exception {     getExchanges().add(exchange).     // now fire the consumer     if (onExchangeProcessor != null) {         onExchangeProcessor.process(exchange).     } }
false;protected;0;5;;@Override protected void doStart() throws Exception {     exchanges = createExchangeList().     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     if (exchanges != null) {         exchanges.clear().         exchanges = null.     }     super.doStop(). }
