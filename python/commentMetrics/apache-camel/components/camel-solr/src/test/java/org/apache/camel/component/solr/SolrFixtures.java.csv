commented;modifiers;parameterAmount;loc;comment;code
false;;0;11;;String solrRouteUri() {     if (serverType == TestServerType.USE_HTTPS) {         return "solrs://127.0.0.1:" + httpsPort + "/solr/collection1".     } else if (serverType == TestServerType.USE_CLOUD) {         String zkAddrStr = cloudFixture.miniCluster.getZkServer().getZkAddress().         return "solrCloud://localhost:" + httpsPort + "/solr?zkHost=" + zkAddrStr + "&collection=collection1".     } else {         return "solr://localhost:" + port + "/solr/collection1".     } }
false;;0;9;;SolrClient getServer() {     if (serverType == TestServerType.USE_HTTPS) {         return solrHttpsServer.     } else if (serverType == TestServerType.USE_CLOUD) {         return cloudFixture.solrClient.     } else {         return solrServer.     } }
false;static;0;15;;static void createSolrFixtures() throws Exception {     solrHttpsRunner = JettySolrFactory.createJettyTestFixture(true).     httpsPort = solrHttpsRunner.getLocalPort().     log.info("Started Https Test Server: " + solrHttpsRunner.getBaseUrl()).     solrHttpsServer = new HttpSolrClient.Builder("https://127.0.0.1:" + httpsPort + "/solr").build().     solrHttpsServer.setConnectionTimeout(60000).     solrRunner = JettySolrFactory.createJettyTestFixture(false).     port = solrRunner.getLocalPort().     solrServer = new HttpSolrClient.Builder("http://localhost:" + port + "/solr").build().     log.info("Started Test Server: " + solrRunner.getBaseUrl()).     cloudFixture = new SolrCloudFixture("src/test/resources/solr"). }
false;public,static;0;11;;public static void teardownSolrFixtures() throws Exception {     if (solrRunner != null) {         solrRunner.stop().     }     if (solrHttpsRunner != null) {         solrHttpsRunner.stop().     }     if (cloudFixture != null) {         cloudFixture.teardown().     } }
false;public,static;0;15;;public static void clearIndex() throws SolrServerException, IOException {     if (solrServer != null) {         // Clear the Solr index.         solrServer.deleteByQuery("collection1", "*:*").         solrServer.commit("collection1").     }     if (solrHttpsServer != null) {         solrHttpsServer.deleteByQuery("collection1", "*:*").         solrHttpsServer.commit("collection1").     }     if (cloudFixture != null) {         cloudFixture.solrClient.deleteByQuery("*:*").         cloudFixture.solrClient.commit().     } }
