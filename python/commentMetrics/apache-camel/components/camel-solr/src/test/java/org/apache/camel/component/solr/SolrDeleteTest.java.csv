commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testDeleteById() throws Exception {     // insert, commit and verify     solrInsertTestEntry().     solrCommit().     assertEquals("wrong number of entries found", 1, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()).     // delete     template.sendBodyAndHeader("direct:start", TEST_ID, SolrConstants.OPERATION, SolrConstants.OPERATION_DELETE_BY_ID).     solrCommit().     // verify     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()). }
false;public;0;15;;@Test public void testDeleteListOfIDs() throws Exception {     // insert, commit and verify     solrInsertTestEntry(TEST_ID).     solrInsertTestEntry(TEST_ID2).     solrCommit().     assertEquals("wrong number of entries found", 2, executeSolrQuery("id:test*").getResults().getNumFound()).     // delete     template.sendBodyAndHeader("direct:splitThenCommit", Arrays.asList(TEST_ID, TEST_ID2), SolrConstants.OPERATION, SolrConstants.OPERATION_DELETE_BY_ID).     // verify     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:test*").getResults().getNumFound()). }
false;public;0;16;;@Test public void testDeleteByQuery() throws Exception {     // insert, commit and verify     solrInsertTestEntry(TEST_ID).     solrInsertTestEntry(TEST_ID2).     solrCommit().     assertEquals("wrong number of entries found", 2, executeSolrQuery("id:test*").getResults().getNumFound()).     // delete     template.sendBodyAndHeader("direct:start", "id:test*", SolrConstants.OPERATION, SolrConstants.OPERATION_DELETE_BY_QUERY).     solrCommit().     // verify     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:test*").getResults().getNumFound()). }
