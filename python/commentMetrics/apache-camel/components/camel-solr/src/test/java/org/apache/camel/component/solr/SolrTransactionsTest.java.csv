commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testCommit() throws Exception {     // insert and verify     solrInsertTestEntry().     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()).     // commit     template.sendBodyAndHeader("direct:start", null, SolrConstants.OPERATION, SolrConstants.OPERATION_COMMIT).     // verify exists after commit     assertEquals("wrong number of entries found", 1, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()). }
false;public;0;27;;@Test public void testRollback() throws Exception {     if (SolrFixtures.TestServerType.USE_CLOUD == this.solrServerType) {         // Twisting expectations in this case as rollback is currently no         // more supported in SolrCloud mode. See SOLR-4895         thrown.expect(CamelExecutionException.class).         final String expectedMessagePart = "Rollback is currently not supported in SolrCloud mode. (SOLR-4895)".         thrown.expectCause(allOf(isA(HttpSolrClient.RemoteSolrException.class), hasMessage(containsString(expectedMessagePart)))).     }     // insert and verify     solrInsertTestEntry().     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()).     // rollback     template.sendBodyAndHeader("direct:start", null, SolrConstants.OPERATION, SolrConstants.OPERATION_ROLLBACK).     // verify after rollback     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()).     // commit     template.sendBodyAndHeader("direct:start", null, SolrConstants.OPERATION, SolrConstants.OPERATION_COMMIT).     // verify after commit (again)     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()). }
false;public;0;13;;@Test public void testOptimize() throws Exception {     // insert and verify     solrInsertTestEntry().     assertEquals("wrong number of entries found", 0, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()).     // optimize     template.sendBodyAndHeader("direct:start", null, SolrConstants.OPERATION, SolrConstants.OPERATION_OPTIMIZE).     // verify exists after optimize     assertEquals("wrong number of entries found", 1, executeSolrQuery("id:" + TEST_ID).getResults().getNumFound()). }
