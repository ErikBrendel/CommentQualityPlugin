commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected void solrInsertTestEntry() {     solrInsertTestEntry(TEST_ID). }
false;protected,static;0;3;;protected static Collection<Object[]> secureOrNot() {     return Arrays.asList(new Object[][] { { true }, { false } }). }
false;;0;3;;String solrRouteUri() {     return solrFixtures.solrRouteUri(). }
false;protected;1;6;;protected void solrInsertTestEntry(String id) {     Map<String, Object> headers = new HashMap<>().     headers.put(SolrConstants.OPERATION, SolrConstants.OPERATION_INSERT).     headers.put("SolrField.id", id).     template.sendBodyAndHeaders("direct:start", "", headers). }
false;protected;0;3;;protected void solrCommit() {     template.sendBodyAndHeader("direct:start", "", SolrConstants.OPERATION, SolrConstants.OPERATION_COMMIT). }
false;protected;1;6;;protected QueryResponse executeSolrQuery(String query) throws SolrServerException, IOException {     SolrQuery solrQuery = new SolrQuery().     solrQuery.setQuery(query).     SolrClient solrServer = solrFixtures.getServer().     return solrServer.query("collection1", solrQuery). }
false;public,static;0;4;;@BeforeClass public static void beforeClass() throws Exception {     SolrFixtures.createSolrFixtures(). }
false;public,static;0;4;;@AfterClass public static void afterClass() throws Exception {     SolrFixtures.teardownSolrFixtures(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").to(solrRouteUri()).     from("direct:splitThenCommit").split(body()).to(solrRouteUri()).end().setHeader(SolrConstants.OPERATION, constant(SolrConstants.OPERATION_COMMIT)).to(solrRouteUri()). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(solrRouteUri()).             from("direct:splitThenCommit").split(body()).to(solrRouteUri()).end().setHeader(SolrConstants.OPERATION, constant(SolrConstants.OPERATION_COMMIT)).to(solrRouteUri()).         }     }. }
false;public,static;0;7;;@Parameters public static Collection<Object[]> serverTypes() {     Object[][] serverTypes = { { SolrFixtures.TestServerType.USE_CLOUD }, { SolrFixtures.TestServerType.USE_HTTPS }, { SolrFixtures.TestServerType.USE_HTTP } }.     return Arrays.asList(serverTypes). }
false;public;0;4;;@Before public void clearIndex() throws Exception {     SolrFixtures.clearIndex(). }
