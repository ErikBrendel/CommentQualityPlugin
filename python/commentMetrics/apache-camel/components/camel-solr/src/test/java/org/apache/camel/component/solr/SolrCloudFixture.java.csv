commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;4;;public static void putConfig(String confName, SolrZkClient zkClient, File solrhome, final String name) throws Exception {     putConfig(confName, zkClient, solrhome, name, name). }
false;protected;5;12;;protected NamedList<Object> createCollection(CloudSolrClient server, String name, int numShards, int replicationFactor, String configName) throws Exception {     ModifiableSolrParams modParams = new ModifiableSolrParams().     modParams.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name()).     modParams.set("name", name).     modParams.set("numShards", numShards).     modParams.set("replicationFactor", replicationFactor).     modParams.set("collection.configName", configName).     QueryRequest request = new QueryRequest(modParams).     request.setPath("/admin/collections").     return server.request(request). }
false;public,static;5;12;;public static void putConfig(String confName, SolrZkClient zkClient, File solrhome, final String srcName, String destName) throws Exception {     File file = new File(solrhome, "collection1" + File.separator + "conf" + File.separator + srcName).     if (!file.exists()) {         LOG.info("zk skipping " + file.getAbsolutePath() + " because it doesn't exist").         return.     }     String destPath = "/configs/" + confName + "/" + destName.     LOG.info("zk put " + file.getAbsolutePath() + " to " + destPath).     zkClient.makePath(destPath, file, false, true). }
true;public;5;23;// static to share with distrib test ;// static to share with distrib test public void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config, String schema) throws Exception {     zkClient = new SolrZkClient(zkAddress, 60000).     Map<String, Object> props = new HashMap<>().     props.put("configName", "conf1").     // for now, always upload the config and schema to the canonical names     putConfig("conf1", zkClient, solrhome, config, "solrconfig.xml").     putConfig("conf1", zkClient, solrhome, schema, "schema.xml").     putConfig("conf1", zkClient, solrhome, "stopwords.txt").     putConfig("conf1", zkClient, solrhome, "stopwords_en.txt").     putConfig("conf1", zkClient, solrhome, "protwords.txt").     putConfig("conf1", zkClient, solrhome, "currency.xml").     putConfig("conf1", zkClient, solrhome, "enumsConfig.xml").     putConfig("conf1", zkClient, solrhome, "open-exchange-rates.json").     putConfig("conf1", zkClient, solrhome, "mapping-ISOLatin1Accent.txt").     putConfig("conf1", zkClient, solrhome, "old_synonyms.txt").     putConfig("conf1", zkClient, solrhome, "synonyms.txt").     putConfig("conf1", zkClient, solrhome, "elevate.xml").     zkClient.close(). }
false;public;0;8;;public void teardown() throws Exception {     solrClient.close().     miniCluster.shutdown().     Files.walk(TEMP_DIR).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete).     solrClient = null.     miniCluster = null. }
