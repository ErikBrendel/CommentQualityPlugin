commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;5;;private static SSLConfig buildSSLConfig(boolean useSsl, boolean sslClientAuth) {     SSLConfig sslConfig = new SSLConfig(useSsl, false, TEST_KEYSTORE_PATH, TEST_KEYSTORE_PASSWORD, TEST_KEYSTORE_PATH, TEST_KEYSTORE_PASSWORD).     return sslConfig. }
false;public;2;3;;@Override public void checkClientTrusted(final X509Certificate[] chain, final String authType) { }
false;public;2;3;;@Override public void checkServerTrusted(final X509Certificate[] chain, final String authType) { }
false;public;0;4;;@Override public X509Certificate[] getAcceptedIssuers() {     return null. }
false;private,static;0;33;;private static void installAllTrustingClientSsl() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {     SSLContextBuilder builder = new SSLContextBuilder().     builder.loadTrustMaterial(null, new TrustSelfSignedStrategy()).     // // Create a trust manager that does not validate certificate chains     final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {          @Override         public void checkClientTrusted(final X509Certificate[] chain, final String authType) {         }          @Override         public void checkServerTrusted(final X509Certificate[] chain, final String authType) {         }          @Override         public X509Certificate[] getAcceptedIssuers() {             return null.         }     } }.     final SSLContext sslContext = SSLContext.getInstance("TLS").     sslContext.init(null, trustAllCerts, new java.security.SecureRandom()).     SSLContext.setDefault(sslContext). // // Install the all-trusting trust manager // final SSLContext sslContext = SSLContext.getInstance( "SSL" ). // sslContext.init( null, trustAllCerts, new // java.security.SecureRandom() ). // // Create an ssl socket factory with our all-trusting manager // final SSLSocketFactory sslSocketFactory = // sslContext.getSocketFactory(). // HttpsURLConnection.setDefaultSSLSocketFactory(sslSocketFactory). }
false;private,static;7;27;;private static JettySolrRunner createJetty(String solrHome, String configFile, String schemaFile, String context, boolean stopAtShutdown, SortedMap<ServletHolder, String> extraServlets, boolean ssl) throws Exception {     if (!mockedSslClient) {         installAllTrustingClientSsl().         mockedSslClient = true.     }     // Set appropriate paths for Solr to use.     System.setProperty("solr.solr.home", solrHome).     System.setProperty("jetty.testMode", "true").     System.setProperty("solr.data.dir", "target/test-classes/solr/data" + (dataDirNo++)).     System.setProperty("solr.log.dir", "target/").     // Instruct Solr to keep the index in memory, for faster testing.     System.setProperty("solr.directoryFactory", "solr.RAMDirectoryFactory").     SSLConfig sslConfig = buildSSLConfig(ssl, false).     context = context == null ? "/solr" : context.     JettyConfig jettyConfig = new JettyConfig.Builder().setContext(context).setPort(0).stopAtShutdown(false).withServlets(extraServlets).withSSLConfig(sslConfig).build().     JettySolrRunner jetty = new JettySolrRunner(solrHome, jettyConfig).     jetty.start().     return jetty. }
false;public,static;1;15;;public static JettySolrRunner createJettyTestFixture(boolean useSsl) throws Exception {     String solrHome = "src/test/resources/solr".     String configFile = solrHome + "/solr-no-core.xml".     String schemaFile = solrHome + "/collection1/conf/schema.xml".     String context = "/solr".     boolean stopAtShutdown = true.     SortedMap<ServletHolder, String> extraServlets = null.     if (!useSsl) {         System.setProperty("tests.jettySsl", "false").     }     return createJetty(solrHome, configFile, schemaFile, context, stopAtShutdown, extraServlets, useSsl). }
