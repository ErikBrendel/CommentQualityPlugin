commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void setServiceUri(String serviceUri) {     if (serviceUri == null || serviceUri.isEmpty()) {         throw new IllegalArgumentException("serviceUri is not set").     }     this.serviceUri = serviceUri.endsWith(SEPARATOR) ? serviceUri.substring(0, serviceUri.length() - 1) : serviceUri. }
false;public;0;4;;@Override public String getServiceUri() {     return serviceUri. }
false;public;0;4;;@Override public Map<String, String> getHttpHeaders() {     return httpHeaders. }
false;public;1;4;;@Override public void setHttpHeaders(Map<String, String> httpHeaders) {     this.httpHeaders = httpHeaders. }
false;public;0;4;;@Override public String getContentType() {     return contentType.toContentTypeString(). }
false;public;1;4;;@Override public void setContentType(String contentType) {     this.contentType = ContentType.parse(contentType). }
false;public;0;4;;@Override public void close() { }
false;public;1;4;;@Override public void onCompleted(HttpResponse result) throws IOException {     readContent(uriInfo, result.getEntity() != null ? result.getEntity().getContent() : null, headersToMap(result.getAllHeaders()), responseHandler). }
false;public;5;15;;@Override public <T> void read(final Edm edm, final String resourcePath, final Map<String, String> queryParams, final Map<String, String> endpointHttpHeaders, final Olingo4ResponseHandler<T> responseHandler) {     final String queryOptions = concatQueryParams(queryParams).     final UriInfo uriInfo = parseUri(edm, resourcePath, queryOptions, serviceUri).     execute(new HttpGet(createUri(resourcePath, queryOptions)), getResourceContentType(uriInfo), endpointHttpHeaders, new AbstractFutureCallback<T>(responseHandler) {          @Override         public void onCompleted(HttpResponse result) throws IOException {             readContent(uriInfo, result.getEntity() != null ? result.getEntity().getContent() : null, headersToMap(result.getAllHeaders()), responseHandler).         }     }). }
false;public;1;11;;@Override public void onCompleted(HttpResponse result) throws IOException {     InputStream responseStream = result.getEntity() != null ? result.getEntity().getContent() : null.     if (responseStream != null && result.getEntity() instanceof DecompressingEntity) {         // In case of GZIP compression it's necessary to create         // InputStream from the source byte array         responseHandler.onResponse(new ByteArrayInputStream(IOUtils.toByteArray(responseStream)), headersToMap(result.getAllHeaders())).     } else {         responseHandler.onResponse(responseStream, headersToMap(result.getAllHeaders())).     } }
false;public;5;21;;@Override public void uread(final Edm edm, final String resourcePath, final Map<String, String> queryParams, final Map<String, String> endpointHttpHeaders, final Olingo4ResponseHandler<InputStream> responseHandler) {     final String queryOptions = concatQueryParams(queryParams).     final UriInfo uriInfo = parseUri(edm, resourcePath, queryOptions, serviceUri).     execute(new HttpGet(createUri(resourcePath, queryOptions)), getResourceContentType(uriInfo), endpointHttpHeaders, new AbstractFutureCallback<InputStream>(responseHandler) {          @Override         public void onCompleted(HttpResponse result) throws IOException {             InputStream responseStream = result.getEntity() != null ? result.getEntity().getContent() : null.             if (responseStream != null && result.getEntity() instanceof DecompressingEntity) {                 // In case of GZIP compression it's necessary to create                 // InputStream from the source byte array                 responseHandler.onResponse(new ByteArrayInputStream(IOUtils.toByteArray(responseStream)), headersToMap(result.getAllHeaders())).             } else {                 responseHandler.onResponse(responseStream, headersToMap(result.getAllHeaders())).             }         }     }). }
false;public;5;6;;@Override public <T> void create(final Edm edm, final String resourcePath, final Map<String, String> endpointHttpHeaders, final Object data, final Olingo4ResponseHandler<T> responseHandler) {     final UriInfo uriInfo = parseUri(edm, resourcePath, null, serviceUri).     writeContent(edm, new HttpPost(createUri(resourcePath, null)), uriInfo, data, endpointHttpHeaders, responseHandler). }
false;public;5;6;;@Override public <T> void update(final Edm edm, final String resourcePath, final Map<String, String> endpointHttpHeaders, final Object data, final Olingo4ResponseHandler<T> responseHandler) {     final UriInfo uriInfo = parseUri(edm, resourcePath, null, serviceUri).     writeContent(edm, new HttpPut(createUri(resourcePath, null)), uriInfo, data, endpointHttpHeaders, responseHandler). }
false;public;1;5;;@Override public void onCompleted(HttpResponse result) {     final StatusLine statusLine = result.getStatusLine().     responseHandler.onResponse(HttpStatusCode.fromStatusCode(statusLine.getStatusCode()), headersToMap(result.getAllHeaders())). }
false;public;3;10;;@Override public void delete(final String resourcePath, final Map<String, String> endpointHttpHeaders, final Olingo4ResponseHandler<HttpStatusCode> responseHandler) {     execute(new HttpDelete(createUri(resourcePath)), contentType, endpointHttpHeaders, new AbstractFutureCallback<HttpStatusCode>(responseHandler) {          @Override         public void onCompleted(HttpResponse result) {             final StatusLine statusLine = result.getStatusLine().             responseHandler.onResponse(HttpStatusCode.fromStatusCode(statusLine.getStatusCode()), headersToMap(result.getAllHeaders())).         }     }). }
false;public;5;6;;@Override public <T> void patch(final Edm edm, final String resourcePath, final Map<String, String> endpointHttpHeaders, final Object data, final Olingo4ResponseHandler<T> responseHandler) {     final UriInfo uriInfo = parseUri(edm, resourcePath, null, serviceUri).     writeContent(edm, new HttpPatch(createUri(resourcePath, null)), uriInfo, data, endpointHttpHeaders, responseHandler). }
false;public;5;6;;@Override public <T> void merge(final Edm edm, final String resourcePath, final Map<String, String> endpointHttpHeaders, final Object data, final Olingo4ResponseHandler<T> responseHandler) {     final UriInfo uriInfo = parseUri(edm, resourcePath, null, serviceUri).     writeContent(edm, new HttpMerge(createUri(resourcePath, null)), uriInfo, data, endpointHttpHeaders, responseHandler). }
false;public;4;6;;@Override public void batch(final Edm edm, final Map<String, String> endpointHttpHeaders, final Object data, final Olingo4ResponseHandler<List<Olingo4BatchResponse>> responseHandler) {     final UriInfo uriInfo = parseUri(edm, SegmentType.BATCH.getValue(), null, serviceUri).     writeContent(edm, new HttpPost(createUri(SegmentType.BATCH.getValue(), null)), uriInfo, data, endpointHttpHeaders, responseHandler). }
false;private;1;26;;private ContentType getResourceContentType(UriInfo uriInfo) {     ContentType resourceContentType.     switch(uriInfo.getKind()) {         case service:             // service document             resourceContentType = SERVICE_DOCUMENT_CONTENT_TYPE.             break.         case metadata:             // metadata             resourceContentType = METADATA_CONTENT_TYPE.             break.         case resource:             List<UriResource> listResource = uriInfo.getUriResourceParts().             UriResourceKind lastResourceKind = listResource.get(listResource.size() - 1).getKind().             // is it a $value or $count URI??             if (lastResourceKind == UriResourceKind.count || lastResourceKind == UriResourceKind.value) {                 resourceContentType = TEXT_PLAIN_WITH_CS_UTF_8.             } else {                 resourceContentType = contentType.             }             break.         default:             resourceContentType = contentType.     }     return resourceContentType. }
false;private;4;9;;private <T> void readContent(UriInfo uriInfo, InputStream content, Map<String, String> endpointHttpHeaders, Olingo4ResponseHandler<T> responseHandler) {     try {         responseHandler.onResponse(this.<T>readContent(uriInfo, content), endpointHttpHeaders).     } catch (Exception e) {         responseHandler.onException(e).     } catch (Error e) {         responseHandler.onException(new ODataException("Runtime Error Occurred", e)).     } }
false;private;2;98;;@SuppressWarnings("unchecked") private <T> T readContent(UriInfo uriInfo, InputStream content) throws ODataException {     T response = null.     switch(uriInfo.getKind()) {         case service:             // service document             response = (T) odataReader.readServiceDocument(content, SERVICE_DOCUMENT_CONTENT_TYPE).             break.         case metadata:             // $metadata             response = (T) odataReader.readMetadata(content).             break.         case resource:             // any resource entity             List<UriResource> listResource = uriInfo.getUriResourceParts().             UriResourceKind lastResourceKind = listResource.get(listResource.size() - 1).getKind().             switch(lastResourceKind) {                 case entitySet:                     UriResourceEntitySet uriResourceEntitySet = (UriResourceEntitySet) listResource.get(listResource.size() - 1).                     List<UriParameter> keyPredicates = uriResourceEntitySet.getKeyPredicates().                     // on key predicate detection                     if (keyPredicates.size() == 1) {                         response = (T) odataReader.readEntity(content, getResourceContentType(uriInfo)).                     } else {                         response = (T) odataReader.readEntitySet(content, getResourceContentType(uriInfo)).                     }                     break.                 case count:                     String stringCount = null.                     try {                         stringCount = IOUtils.toString(content, Consts.UTF_8).                         response = (T) Long.valueOf(stringCount).                     } catch (IOException e) {                         throw new ODataException("Error during $count value deserialization", e).                     } catch (NumberFormatException e) {                         throw new ODataException("Error during $count value conversion: " + stringCount, e).                     }                     break.                 case value:                     try {                         ClientPrimitiveValue value = odataClient.getObjectFactory().newPrimitiveValueBuilder().setType(EdmPrimitiveTypeKind.String).setValue(IOUtils.toString(content, Consts.UTF_8)).build().                         response = (T) value.                     } catch (IOException e) {                         throw new ODataException("Error during $value deserialization", e).                     }                     break.                 case primitiveProperty:                 case complexProperty:                     ClientProperty property = odataReader.readProperty(content, getResourceContentType(uriInfo)).                     if (property.hasPrimitiveValue()) {                         response = (T) property.getPrimitiveValue().                     } else if (property.hasComplexValue()) {                         response = (T) property.getComplexValue().                     } else {                         throw new ODataException("Unsupported property: " + property.getName()).                     }                     break.                 case function:                     UriResourceFunction uriResourceFunction = (UriResourceFunction) listResource.get(listResource.size() - 1).                     EdmReturnType functionReturnType = uriResourceFunction.getFunction().getReturnType().                     switch(functionReturnType.getType().getKind()) {                         case ENTITY:                             if (functionReturnType.isCollection()) {                                 response = (T) odataReader.readEntitySet(content, getResourceContentType(uriInfo)).                             } else {                                 response = (T) odataReader.readEntity(content, getResourceContentType(uriInfo)).                             }                             break.                         case PRIMITIVE:                         case COMPLEX:                             ClientProperty functionProperty = odataReader.readProperty(content, getResourceContentType(uriInfo)).                             if (functionProperty.hasPrimitiveValue()) {                                 response = (T) functionProperty.getPrimitiveValue().                             } else if (functionProperty.hasComplexValue()) {                                 response = (T) functionProperty.getComplexValue().                             } else {                                 throw new ODataException("Unsupported property: " + functionProperty.getName()).                             }                             break.                         default:                             throw new ODataException("Unsupported function return type " + uriInfo.getKind().name()).                     }                     break.                 default:                     throw new ODataException("Unsupported resource type: " + lastResourceKind.name()).             }             break.         default:             throw new ODataException("Unsupported resource type " + uriInfo.getKind().name()).     }     return response. }
false;public;1;33;;@SuppressWarnings("unchecked") @Override public void onCompleted(HttpResponse result) throws IOException, ODataException {     // if a entity is created (via POST request) the response     // body contains the new created entity     HttpStatusCode statusCode = HttpStatusCode.fromStatusCode(result.getStatusLine().getStatusCode()).     // look for no content, or no response body!!!     final boolean noEntity = result.getEntity() == null || result.getEntity().getContentLength() == 0.     if (statusCode == HttpStatusCode.NO_CONTENT || noEntity) {         responseHandler.onResponse((T) HttpStatusCode.fromStatusCode(result.getStatusLine().getStatusCode()), headersToMap(result.getAllHeaders())).     } else {         if (uriInfo.getKind() == UriInfoKind.resource) {             List<UriResource> listResource = uriInfo.getUriResourceParts().             UriResourceKind lastResourceKind = listResource.get(listResource.size() - 1).getKind().             switch(lastResourceKind) {                 case entitySet:                     ClientEntity entity = odataReader.readEntity(result.getEntity().getContent(), ContentType.parse(result.getEntity().getContentType().getValue())).                     responseHandler.onResponse((T) entity, headersToMap(result.getAllHeaders())).                     break.                 default:                     break.             }         } else if (uriInfo.getKind() == UriInfoKind.batch) {             List<Olingo4BatchResponse> batchResponse = parseBatchResponse(edm, result, (List<Olingo4BatchRequest>) content).             responseHandler.onResponse((T) batchResponse, headersToMap(result.getAllHeaders())).         } else {             throw new ODataException("Unsupported resource type: " + uriInfo.getKind().name()).         }     } }
false;private;6;51;;private <T> void writeContent(final Edm edm, HttpEntityEnclosingRequestBase httpEntityRequest, final UriInfo uriInfo, final Object content, final Map<String, String> endpointHttpHeaders, final Olingo4ResponseHandler<T> responseHandler) {     try {         httpEntityRequest.setEntity(writeContent(edm, uriInfo, content)).         final Header requestContentTypeHeader = httpEntityRequest.getEntity().getContentType().         final ContentType requestContentType = requestContentTypeHeader != null ? ContentType.parse(requestContentTypeHeader.getValue()) : contentType.         execute(httpEntityRequest, requestContentType, endpointHttpHeaders, new AbstractFutureCallback<T>(responseHandler) {              @SuppressWarnings("unchecked")             @Override             public void onCompleted(HttpResponse result) throws IOException, ODataException {                 // if a entity is created (via POST request) the response                 // body contains the new created entity                 HttpStatusCode statusCode = HttpStatusCode.fromStatusCode(result.getStatusLine().getStatusCode()).                 // look for no content, or no response body!!!                 final boolean noEntity = result.getEntity() == null || result.getEntity().getContentLength() == 0.                 if (statusCode == HttpStatusCode.NO_CONTENT || noEntity) {                     responseHandler.onResponse((T) HttpStatusCode.fromStatusCode(result.getStatusLine().getStatusCode()), headersToMap(result.getAllHeaders())).                 } else {                     if (uriInfo.getKind() == UriInfoKind.resource) {                         List<UriResource> listResource = uriInfo.getUriResourceParts().                         UriResourceKind lastResourceKind = listResource.get(listResource.size() - 1).getKind().                         switch(lastResourceKind) {                             case entitySet:                                 ClientEntity entity = odataReader.readEntity(result.getEntity().getContent(), ContentType.parse(result.getEntity().getContentType().getValue())).                                 responseHandler.onResponse((T) entity, headersToMap(result.getAllHeaders())).                                 break.                             default:                                 break.                         }                     } else if (uriInfo.getKind() == UriInfoKind.batch) {                         List<Olingo4BatchResponse> batchResponse = parseBatchResponse(edm, result, (List<Olingo4BatchRequest>) content).                         responseHandler.onResponse((T) batchResponse, headersToMap(result.getAllHeaders())).                     } else {                         throw new ODataException("Unsupported resource type: " + uriInfo.getKind().name()).                     }                 }             }         }).     } catch (Exception e) {         responseHandler.onException(e).     } catch (Error e) {         responseHandler.onException(new ODataException("Runtime Error Occurred", e)).     } }
false;private;3;48;;private AbstractHttpEntity writeContent(final Edm edm, final UriInfo uriInfo, final Object content) throws ODataException {     InputStream requestStream = null.     AbstractHttpEntity httpEntity = null.     if (uriInfo.getKind() == UriInfoKind.resource) {         // any resource entity         List<UriResource> listResource = uriInfo.getUriResourceParts().         UriResourceKind lastResourceKind = listResource.get(listResource.size() - 1).getKind().         switch(lastResourceKind) {             case entitySet:                 if (content instanceof ClientEntity) {                     requestStream = odataWriter.writeEntity((ClientEntity) content, getResourceContentType(uriInfo)).                 } else if (content instanceof String) {                     httpEntity = new StringEntity((String) content, org.apache.http.entity.ContentType.APPLICATION_JSON).                     httpEntity.setChunked(false).                     return httpEntity.                 } else {                     throw new ODataException("Unsupported content type: " + content).                 }                 break.             default:                 throw new ODataException("Unsupported resource type: " + lastResourceKind).         }         try {             httpEntity = new ByteArrayEntity(IOUtils.toByteArray(requestStream)).         } catch (IOException e) {             throw new ODataException("Error during converting input stream to byte array", e).         }         httpEntity.setChunked(false).     } else if (uriInfo.getKind() == UriInfoKind.batch) {         final String boundary = BOUNDARY_PREFIX + UUID.randomUUID().         final String contentHeader = BATCH_CONTENT_TYPE + BOUNDARY_PARAMETER + boundary.         final List<Olingo4BatchRequest> batchParts = (List<Olingo4BatchRequest>) content.         requestStream = serializeBatchRequest(edm, batchParts, BOUNDARY_DOUBLE_DASH + boundary).         try {             httpEntity = new ByteArrayEntity(IOUtils.toByteArray(requestStream)).         } catch (IOException e) {             throw new ODataException("Error during converting input stream to byte array", e).         }         httpEntity.setChunked(false).         httpEntity.setContentType(contentHeader).     } else {         throw new ODataException("Unsupported resource type: " + uriInfo.getKind().name()).     }     return httpEntity. }
false;private;3;77;;private InputStream serializeBatchRequest(final Edm edm, final List<Olingo4BatchRequest> batchParts, String boundary) throws ODataException {     final ByteArrayOutputStream batchRequestHeaderOutputStream = new ByteArrayOutputStream().     try {         batchRequestHeaderOutputStream.write(boundary.getBytes(Constants.UTF8)).         batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).         for (Olingo4BatchRequest batchPart : batchParts) {             writeHttpHeader(batchRequestHeaderOutputStream, HttpHeaders.CONTENT_TYPE, ContentType.APPLICATION_HTTP.toContentTypeString()).             writeHttpHeader(batchRequestHeaderOutputStream, ODataBatchConstants.ITEM_TRANSFER_ENCODING_LINE, null).             if (batchPart instanceof Olingo4BatchQueryRequest) {                 final Olingo4BatchQueryRequest batchQueryPart = (Olingo4BatchQueryRequest) batchPart.                 final String batchQueryUri = createUri(StringUtils.isBlank(batchQueryPart.getResourceUri()) ? serviceUri : batchQueryPart.getResourceUri(), batchQueryPart.getResourcePath(), concatQueryParams(batchQueryPart.getQueryParams())).                 final UriInfo uriInfo = parseUri(edm, batchQueryPart.getResourcePath(), concatQueryParams(batchQueryPart.getQueryParams()), serviceUri).                 batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                 batchRequestHeaderOutputStream.write((HttpGet.METHOD_NAME + " " + batchQueryUri + " " + HttpVersion.HTTP_1_1).getBytes(Constants.UTF8)).                 batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                 final ContentType acceptType = getResourceContentType(uriInfo).                 final String acceptCharset = acceptType.getParameter(ContentType.PARAMETER_CHARSET).                 writeHttpHeader(batchRequestHeaderOutputStream, HttpHeaders.ACCEPT, contentType.getType().toLowerCase() + "/" + contentType.getSubtype().toLowerCase()).                 if (null != acceptCharset) {                     writeHttpHeader(batchRequestHeaderOutputStream, HttpHeaders.ACCEPT_CHARSET, acceptCharset.toLowerCase()).                 }                 batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                 batchRequestHeaderOutputStream.write(boundary.getBytes(Constants.UTF8)).                 batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).             } else if (batchPart instanceof Olingo4BatchChangeRequest) {                 final Olingo4BatchChangeRequest batchChangePart = (Olingo4BatchChangeRequest) batchPart.                 final String batchChangeUri = createUri(StringUtils.isBlank(batchChangePart.getResourceUri()) ? serviceUri : batchChangePart.getResourceUri(), batchChangePart.getResourcePath(), null).                 final UriInfo uriInfo = parseUri(edm, batchChangePart.getResourcePath(), null, serviceUri).                 if (batchChangePart.getOperation() != Operation.DELETE) {                     writeHttpHeader(batchRequestHeaderOutputStream, CONTENT_ID_HEADER, batchChangePart.getContentId()).                 }                 batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                 batchRequestHeaderOutputStream.write((batchChangePart.getOperation().getHttpMethod() + " " + batchChangeUri + " " + HttpVersion.HTTP_1_1).getBytes(Constants.UTF8)).                 batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                 writeHttpHeader(batchRequestHeaderOutputStream, HttpHeader.ODATA_VERSION, ODataServiceVersion.V40.toString()).                 final ContentType acceptType = getResourceContentType(uriInfo).                 final String acceptCharset = acceptType.getParameter(ContentType.PARAMETER_CHARSET).                 writeHttpHeader(batchRequestHeaderOutputStream, HttpHeaders.ACCEPT, contentType.getType().toLowerCase() + "/" + contentType.getSubtype().toLowerCase()).                 if (null != acceptCharset) {                     writeHttpHeader(batchRequestHeaderOutputStream, HttpHeaders.ACCEPT_CHARSET, acceptCharset.toLowerCase()).                 }                 writeHttpHeader(batchRequestHeaderOutputStream, HttpHeaders.CONTENT_TYPE, acceptType.toContentTypeString()).                 if (batchChangePart.getOperation() != Operation.DELETE) {                     batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                     AbstractHttpEntity httpEnity = writeContent(edm, uriInfo, batchChangePart.getBody()).                     batchRequestHeaderOutputStream.write(IOUtils.toByteArray(httpEnity.getContent())).                     batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                     batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                 } else {                     batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).                 }                 batchRequestHeaderOutputStream.write(boundary.getBytes(Constants.UTF8)).                 batchRequestHeaderOutputStream.write(ODataStreamer.CRLF).             } else {                 throw new ODataException("Unsupported batch part request object type: " + batchPart).             }         }     } catch (Exception e) {         throw new ODataException("Error during batch request serialization", e).     }     return new ByteArrayInputStream(batchRequestHeaderOutputStream.toByteArray()). }
false;private;3;4;;private void writeHttpHeader(ByteArrayOutputStream headerOutputStream, String headerName, String headerValue) throws IOException {     headerOutputStream.write(createHttpHeader(headerName, headerValue).getBytes(Constants.UTF8)).     headerOutputStream.write(ODataStreamer.CRLF). }
false;private;2;3;;private String createHttpHeader(String headerName, String headerValue) {     return headerName + (StringUtils.isBlank(headerValue) ? "" : (": " + headerValue)). }
false;private;3;64;;private List<Olingo4BatchResponse> parseBatchResponse(final Edm edm, HttpResponse response, List<Olingo4BatchRequest> batchRequest) throws ODataException {     List<Olingo4BatchResponse> batchResponse = new <Olingo4BatchResponse> ArrayList().     try {         final Header[] contentHeaders = response.getHeaders(HttpHeader.CONTENT_TYPE).         final ODataBatchLineIterator batchLineIterator = new ODataBatchLineIteratorImpl(IOUtils.lineIterator(response.getEntity().getContent(), Constants.UTF8)).         final String batchBoundary = ODataBatchUtilities.getBoundaryFromHeader(getHeadersCollection(contentHeaders)).         final ODataBatchController batchController = new ODataBatchController(batchLineIterator, batchBoundary).         batchController.getBatchLineIterator().next().         int batchRequestIndex = 0.         while (batchController.getBatchLineIterator().hasNext()) {             OutputStream os = new ByteArrayOutputStream().             ODataBatchUtilities.readBatchPart(batchController, os, false).             Object content = null.             final Olingo4BatchRequest batchPartRequest = batchRequest.get(batchRequestIndex).             final HttpResponse batchPartHttpResponse = constructBatchPartHttpResponse(new ByteArrayInputStream(((ByteArrayOutputStream) os).toByteArray())).             final StatusLine batchPartStatusLine = batchPartHttpResponse.getStatusLine().             final int batchPartLineStatusCode = batchPartStatusLine.getStatusCode().             Map<String, String> batchPartHeaders = getHeadersValueMap(batchPartHttpResponse.getAllHeaders()).             if (batchPartRequest instanceof Olingo4BatchQueryRequest) {                 Olingo4BatchQueryRequest batchPartQueryRequest = (Olingo4BatchQueryRequest) batchPartRequest.                 final UriInfo uriInfo = parseUri(edm, batchPartQueryRequest.getResourcePath(), null, serviceUri).                 if (HttpStatusCode.BAD_REQUEST.getStatusCode() <= batchPartLineStatusCode && batchPartLineStatusCode <= AbstractFutureCallback.NETWORK_CONNECT_TIMEOUT_ERROR) {                     final ContentType responseContentType = getContentTypeHeader(batchPartHttpResponse).                     content = odataReader.readError(batchPartHttpResponse.getEntity().getContent(), responseContentType).                 } else if (batchPartLineStatusCode == HttpStatusCode.NO_CONTENT.getStatusCode()) {                 // nothing to do if NO_CONTENT returning                 } else {                     content = readContent(uriInfo, batchPartHttpResponse.getEntity().getContent()).                 }                 Olingo4BatchResponse batchPartResponse = new Olingo4BatchResponse(batchPartStatusLine.getStatusCode(), batchPartStatusLine.getReasonPhrase(), null, batchPartHeaders, content).                 batchResponse.add(batchPartResponse).             } else if (batchPartRequest instanceof Olingo4BatchChangeRequest) {                 Olingo4BatchChangeRequest batchPartChangeRequest = (Olingo4BatchChangeRequest) batchPartRequest.                 if (batchPartLineStatusCode != HttpStatusCode.NO_CONTENT.getStatusCode()) {                     if (HttpStatusCode.BAD_REQUEST.getStatusCode() <= batchPartLineStatusCode && batchPartLineStatusCode <= AbstractFutureCallback.NETWORK_CONNECT_TIMEOUT_ERROR) {                         final ContentType responseContentType = ContentType.parse(batchPartHttpResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue()).                         content = odataReader.readError(response.getEntity().getContent(), responseContentType).                     } else {                         final UriInfo uriInfo = parseUri(edm, batchPartChangeRequest.getResourcePath() + (batchPartChangeRequest.getOperation() == Operation.CREATE ? CLIENT_ENTITY_FAKE_MARKER : ""), null, serviceUri).                         content = readContent(uriInfo, batchPartHttpResponse.getEntity().getContent()).                     }                 }                 Olingo4BatchResponse batchPartResponse = new Olingo4BatchResponse(batchPartStatusLine.getStatusCode(), batchPartStatusLine.getReasonPhrase(), batchPartChangeRequest.getContentId(), batchPartHeaders, content).                 batchResponse.add(batchPartResponse).             } else {                 throw new ODataException("Unsupported batch part request object type: " + batchPartRequest).             }             batchRequestIndex++.         }     } catch (IOException | HttpException e) {         throw new ODataException(e).     }     return batchResponse. }
false;private;1;47;;private HttpResponse constructBatchPartHttpResponse(InputStream batchPartStream) throws IOException, HttpException {     final LineIterator lines = IOUtils.lineIterator(batchPartStream, Constants.UTF8).     final ByteArrayOutputStream headerOutputStream = new ByteArrayOutputStream().     final ByteArrayOutputStream bodyOutputStream = new ByteArrayOutputStream().     boolean startBatchPartHeader = false.     boolean startBatchPartBody = false.     // Iterate through lines in the batch part     while (lines.hasNext()) {         String line = lines.nextLine().trim().         // Ignore all lines below HTTP/1.1 line         if (line.startsWith(HttpVersion.HTTP)) {             // This is the first header line             startBatchPartHeader = true.         }         // Body starts with empty string after header lines         if (startBatchPartHeader && StringUtils.isBlank(line)) {             startBatchPartHeader = false.             startBatchPartBody = true.         }         if (startBatchPartHeader) {             // Write header to the output stream             headerOutputStream.write(line.getBytes(Constants.UTF8)).             headerOutputStream.write(ODataStreamer.CRLF).         } else if (startBatchPartBody && StringUtils.isNotBlank(line)) {             // Write body to the output stream             bodyOutputStream.write(line.getBytes(Constants.UTF8)).             bodyOutputStream.write(ODataStreamer.CRLF).         }     }     // Prepare for parsing headers in to the HttpResponse object     HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl().     SessionInputBufferImpl sessionInputBuffer = new SessionInputBufferImpl(metrics, 2048).     HttpResponseFactory responseFactory = new DefaultHttpResponseFactory().     sessionInputBuffer.bind(new ByteArrayInputStream(headerOutputStream.toByteArray())).     DefaultHttpResponseParser responseParser = new DefaultHttpResponseParser(sessionInputBuffer, new BasicLineParser(), responseFactory, MessageConstraints.DEFAULT).     // Parse HTTP response and headers     HttpResponse response = responseParser.parse().     // Set body inside entity     response.setEntity(new ByteArrayEntity(bodyOutputStream.toByteArray())).     return response. }
false;private;1;7;;private Collection<String> getHeadersCollection(Header[] headers) {     Collection<String> headersCollection = new ArrayList().     for (Header header : Arrays.asList(headers)) {         headersCollection.add(header.getValue()).     }     return headersCollection. }
false;private;1;7;;private Map<String, String> getHeadersValueMap(Header[] headers) {     Map<String, String> headersValueMap = new HashMap().     for (Header header : Arrays.asList(headers)) {         headersValueMap.put(header.getName(), header.getValue()).     }     return headersValueMap. }
false;private;1;3;;private String createUri(String resourcePath) {     return createUri(serviceUri, resourcePath, null). }
false;private;2;3;;private String createUri(String resourcePath, String queryOptions) {     return createUri(serviceUri, resourcePath, queryOptions). }
false;private;3;9;;private String createUri(String resourceUri, String resourcePath, String queryOptions) {     final StringBuilder absolutUri = new StringBuilder(resourceUri).append(SEPARATOR).append(resourcePath).     if (queryOptions != null && !queryOptions.isEmpty()) {         absolutUri.append("?" + queryOptions).     }     return absolutUri.toString(). }
false;private;1;14;;private String concatQueryParams(final Map<String, String> queryParams) {     final StringBuilder concatQuery = new StringBuilder("").     if (queryParams != null && !queryParams.isEmpty()) {         int nParams = queryParams.size().         int index = 0.         for (Map.Entry<String, String> entry : queryParams.entrySet()) {             concatQuery.append(entry.getKey()).append('=').append(entry.getValue()).             if (++index < nParams) {                 concatQuery.append('&').             }         }     }     return concatQuery.toString().replaceAll("  *", "%20"). }
false;private,static;4;11;;private static UriInfo parseUri(Edm edm, String resourcePath, String queryOptions, String serviceUri) {     Parser parser = new Parser(edm, OData.newInstance()).     UriInfo result.     try {         result = parser.parseUri(resourcePath, queryOptions, null, serviceUri).     } catch (Exception e) {         throw new IllegalArgumentException("parseUri (" + resourcePath + "," + queryOptions + "): " + e.getMessage(), e).     }     return result. }
false;private,static;1;7;;private static Map<String, String> headersToMap(final Header[] headers) {     final Map<String, String> responseHeaders = new HashMap<>().     for (Header header : headers) {         responseHeaders.put(header.getName(), header.getValue()).     }     return responseHeaders. }
false;public;4;59;;public void execute(HttpUriRequest httpUriRequest, ContentType contentType, final Map<String, String> endpointHttpHeaders, FutureCallback<HttpResponse> callback) {     // add accept header when its not a form or multipart     if (!ContentType.APPLICATION_FORM_URLENCODED.equals(contentType) && !contentType.toContentTypeString().startsWith(MULTIPART_MIME_TYPE)) {         // otherwise accept what is being sent         httpUriRequest.addHeader(HttpHeaders.ACCEPT, contentType.getType().toLowerCase() + "/" + contentType.getSubtype().toLowerCase()).         final String acceptCharset = contentType.getParameter(ContentType.PARAMETER_CHARSET).         if (null != acceptCharset) {             httpUriRequest.addHeader(HttpHeaders.ACCEPT_CHARSET, acceptCharset.toLowerCase()).         }     }     // is something being sent?     if (httpUriRequest instanceof HttpEntityEnclosingRequestBase && httpUriRequest.getFirstHeader(HttpHeaders.CONTENT_TYPE) == null) {         httpUriRequest.addHeader(HttpHeaders.CONTENT_TYPE, contentType.toString()).     }     // set user specified custom headers     if (ObjectHelper.isNotEmpty(httpHeaders)) {         for (Map.Entry<String, String> entry : httpHeaders.entrySet()) {             httpUriRequest.setHeader(entry.getKey(), entry.getValue()).         }     }     // set user specified endpoint headers     if (ObjectHelper.isNotEmpty(endpointHttpHeaders)) {         for (Map.Entry<String, String> entry : endpointHttpHeaders.entrySet()) {             httpUriRequest.setHeader(entry.getKey(), entry.getValue()).         }     }     // response stream     if (!httpUriRequest.containsHeader(HttpHeaders.ACCEPT_CHARSET)) {         httpUriRequest.addHeader(HttpHeaders.ACCEPT_CHARSET, Constants.UTF8.toLowerCase()).     }     // add client protocol version if not specified     if (!httpUriRequest.containsHeader(HttpHeader.ODATA_VERSION)) {         httpUriRequest.addHeader(HttpHeader.ODATA_VERSION, ODataServiceVersion.V40.toString()).     }     if (!httpUriRequest.containsHeader(HttpHeader.ODATA_MAX_VERSION)) {         httpUriRequest.addHeader(HttpHeader.ODATA_MAX_VERSION, ODataServiceVersion.V40.toString()).     }     // execute request     if (client instanceof CloseableHttpAsyncClient) {         ((CloseableHttpAsyncClient) client).execute(httpUriRequest, callback).     } else {         // request synchronously         try {             CloseableHttpResponse result = ((CloseableHttpClient) client).execute(httpUriRequest).             callback.completed(result).         } catch (IOException e) {             callback.failed(e).         }     } }
