commented;modifiers;parameterAmount;loc;comment;code
false;private;1;6;;private Object filter(Object o) {     if (resultIndex.contains(o.hashCode())) {         return null.     }     return o. }
false;private;1;3;;private void indexDefault(Object o) {     resultIndex.add(o.hashCode()). }
false;private;1;11;;private Iterable<?> filter(Iterable<?> iterable) {     List<Object> filtered = new ArrayList<>().     for (Object o : iterable) {         if (resultIndex.contains(o.hashCode())) {             continue.         }         filtered.add(o).     }     return filtered. }
false;private;1;5;;private void index(Iterable<?> iterable) {     for (Object o : iterable) {         resultIndex.add(o.hashCode()).     } }
false;private;1;18;;private ClientEntitySet filter(ClientEntitySet entitySet) {     List<ClientEntity> entities = entitySet.getEntities().     if (entities.isEmpty()) {         return entitySet.     }     List<ClientEntity> copyEntities = new ArrayList<>().     copyEntities.addAll(entities).     for (ClientEntity entity : copyEntities) {         if (resultIndex.contains(entity.hashCode())) {             entities.remove(entity).         }     }     return entitySet. }
false;private;1;5;;private void index(ClientEntitySet entitySet) {     for (ClientEntity entity : entitySet.getEntities()) {         resultIndex.add(entity.hashCode()).     } }
true;public;1;9;/**  * Index the results  */ ;/**  * Index the results  */ public void index(Object result) {     if (result instanceof ClientEntitySet) {         index((ClientEntitySet) result).     } else if (result instanceof Iterable) {         index((Iterable<?>) result).     } else {         indexDefault(result).     } }
false;public;1;19;;@SuppressWarnings("unchecked") public Object filterResponse(Object response) {     if (response instanceof ClientEntitySet) {         response = filter((ClientEntitySet) response).     } else if (response instanceof Iterable) {         response = filter((Iterable<Object>) response).     } else if (response.getClass().isArray()) {         List<Object> result = new ArrayList<>().         final int size = Array.getLength(response).         for (int i = 0. i < size. i++) {             result.add(Array.get(response, i)).         }         response = filter(result).     } else {         response = filter(response).     }     return response. }
