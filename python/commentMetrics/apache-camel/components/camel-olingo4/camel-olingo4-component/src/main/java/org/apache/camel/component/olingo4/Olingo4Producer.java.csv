commented;modifiers;parameterAmount;loc;comment;code
false;public;2;19;;@Override public void onResponse(Object response, Map<String, String> responseHeaders) {     if (resultIndex != null) {         response = resultIndex.filterResponse(response).     }     // producer returns a single response, even for methods with     // List return types     exchange.getOut().setBody(response).     // copy headers     exchange.getOut().setHeaders(exchange.getIn().getHeaders()).     // Add http response headers     exchange.getOut().setHeader(Olingo4Constants.PROPERTY_PREFIX + Olingo4Constants.RESPONSE_HTTP_HEADERS, responseHeaders).     interceptResult(response, exchange).     callback.done(false). }
false;public;1;5;;@Override public void onException(Exception ex) {     exchange.setException(ex).     callback.done(false). }
false;public;0;5;;@Override public void onCanceled() {     exchange.setException(new RuntimeCamelException("OData HTTP Request cancelled!")).     callback.done(false). }
false;public;2;68;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     // properties for method arguments     final Map<String, Object> properties = new HashMap<>().     properties.putAll(endpoint.getEndpointProperties()).     propertiesHelper.getExchangeProperties(exchange, properties).     // let the endpoint and the Producer intercept properties     endpoint.interceptProperties(properties).     interceptProperties(properties).     // create response handler     properties.put(Olingo4Endpoint.RESPONSE_HANDLER_PROPERTY, new Olingo4ResponseHandler<Object>() {          @Override         public void onResponse(Object response, Map<String, String> responseHeaders) {             if (resultIndex != null) {                 response = resultIndex.filterResponse(response).             }             // producer returns a single response, even for methods with             // List return types             exchange.getOut().setBody(response).             // copy headers             exchange.getOut().setHeaders(exchange.getIn().getHeaders()).             // Add http response headers             exchange.getOut().setHeader(Olingo4Constants.PROPERTY_PREFIX + Olingo4Constants.RESPONSE_HTTP_HEADERS, responseHeaders).             interceptResult(response, exchange).             callback.done(false).         }          @Override         public void onException(Exception ex) {             exchange.setException(ex).             callback.done(false).         }          @Override         public void onCanceled() {             exchange.setException(new RuntimeCamelException("OData HTTP Request cancelled!")).             callback.done(false).         }     }).     // decide which method to invoke     final ApiMethod method = findMethod(exchange, properties).     if (method == null) {         // synchronous failure         callback.done(true).         return true.     }     if (LOG.isDebugEnabled()) {         LOG.debug("Invoking operation {} with {}", method.getName(), properties.keySet()).     }     try {         doInvokeMethod(method, properties).     } catch (Throwable t) {         exchange.setException(RuntimeCamelException.wrapRuntimeCamelException(t)).         callback.done(true).         return true.     }     return false. }
false;public;1;17;;@Override public void interceptProperties(Map<String, Object> properties) {     //      // If we have a filterAlreadySeen property then initialise the filter index     //      Object value = properties.get(Olingo4Endpoint.FILTER_ALREADY_SEEN).     if (value == null) {         return.     }     //      if (Boolean.parseBoolean(value.toString()) && resultIndex == null) {         resultIndex = new Olingo4Index().     } }
false;public;2;8;;@Override public void interceptResult(Object result, Exchange resultExchange) {     if (resultIndex == null) {         return.     }     resultIndex.index(result). }
