commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Olingo4ApiName getApiName(String apiNameStr) throws IllegalArgumentException {     return Olingo4ApiName.fromValue(apiNameStr). }
false;protected;3;29;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // parse remaining to extract resourcePath and queryParams     final String[] pathSegments = remaining.split("/", -1).     final String methodName = pathSegments[0].     if (pathSegments.length > 1) {         final StringBuilder resourcePath = new StringBuilder().         for (int i = 1. i < pathSegments.length. i++) {             resourcePath.append(pathSegments[i]).             if (i < (pathSegments.length - 1)) {                 resourcePath.append('/').             }         }         // This will override any URI supplied ?resourcePath=... param         parameters.put(Olingo4Endpoint.RESOURCE_PATH_PROPERTY, resourcePath.toString()).     }     final Olingo4Configuration endpointConfiguration = createEndpointConfiguration(Olingo4ApiName.DEFAULT).     final Endpoint endpoint = createEndpoint(uri, methodName, Olingo4ApiName.DEFAULT, endpointConfiguration).     // set endpoint property inBody     setProperties(endpoint, parameters).     // configure endpoint properties and initialize state     endpoint.configureProperties(parameters).     return endpoint. }
false;protected;4;6;;@Override protected Endpoint createEndpoint(String uri, String methodName, Olingo4ApiName apiName, Olingo4Configuration endpointConfiguration) {     endpointConfiguration.setApiName(apiName).     endpointConfiguration.setMethodName(methodName).     return new Olingo4Endpoint(uri, this, apiName, methodName, endpointConfiguration). }
true;public;1;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public void setConfiguration(Olingo4Configuration configuration) {     super.setConfiguration(configuration). }
true;public;0;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public Olingo4Configuration getConfiguration() {     return super.getConfiguration(). }
false;public;1;14;;public Olingo4AppWrapper createApiProxy(Olingo4Configuration endpointConfiguration) {     final Olingo4AppWrapper result.     if (endpointConfiguration.equals(this.configuration)) {         synchronized (this) {             if (apiProxy == null) {                 apiProxy = createOlingo4App(this.configuration).             }         }         result = apiProxy.     } else {         result = createOlingo4App(endpointConfiguration).     }     return result. }
false;private;1;51;;private Olingo4AppWrapper createOlingo4App(Olingo4Configuration configuration) {     Object clientBuilder = configuration.getHttpAsyncClientBuilder().     if (clientBuilder == null) {         HttpAsyncClientBuilder asyncClientBuilder = HttpAsyncClientBuilder.create().         // apply simple configuration properties         final RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().         requestConfigBuilder.setConnectTimeout(configuration.getConnectTimeout()).         requestConfigBuilder.setSocketTimeout(configuration.getSocketTimeout()).         final HttpHost proxy = configuration.getProxy().         if (proxy != null) {             requestConfigBuilder.setProxy(proxy).         }         // set default request config         asyncClientBuilder.setDefaultRequestConfig(requestConfigBuilder.build()).         SSLContextParameters sslContextParameters = configuration.getSslContextParameters().         if (sslContextParameters == null) {             // use global ssl config             sslContextParameters = retrieveGlobalSslContextParameters().         }         if (sslContextParameters == null) {             // use defaults if not specified             sslContextParameters = new SSLContextParameters().         }         try {             asyncClientBuilder.setSSLContext(sslContextParameters.createSSLContext(getCamelContext())).         } catch (GeneralSecurityException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         } catch (IOException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }         clientBuilder = asyncClientBuilder.     }     Olingo4AppImpl olingo4App.     if (clientBuilder == null || clientBuilder instanceof HttpAsyncClientBuilder) {         olingo4App = new Olingo4AppImpl(configuration.getServiceUri(), (HttpAsyncClientBuilder) clientBuilder).     } else {         olingo4App = new Olingo4AppImpl(configuration.getServiceUri(), (HttpClientBuilder) clientBuilder).     }     apiProxy = new Olingo4AppWrapper(olingo4App).     apiProxy.getOlingo4App().setContentType(configuration.getContentType()).     apiProxy.getOlingo4App().setHttpHeaders(configuration.getHttpHeaders()).     return apiProxy. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;public;1;6;;public void closeApiProxy(Olingo4AppWrapper apiProxy) {     if (this.apiProxy != apiProxy) {         // not a shared proxy         apiProxy.close().     } }
false;protected;0;6;;@Override protected void doStop() throws Exception {     if (apiProxy != null) {         apiProxy.close().     } }
