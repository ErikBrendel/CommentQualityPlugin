commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void validateConstructor(List<Throwable> errors) { // The test class is instantiated as a CDI bean so we bypass the // default JUnit test class constructor constraints validation. }
false;protected;3;9;;@Override protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors) {     // Overrides the default validation to allow test methods with     // parameters so that we can inject CDI references.     List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(annotation).     for (FrameworkMethod eachTestMethod : methods) {         eachTestMethod.validatePublicVoid(isStatic, errors).     } }
false;protected;0;16;;@Override protected List<FrameworkMethod> getChildren() {     List<FrameworkMethod> children = super.getChildren().     boolean hasDefinedOrder = false.     for (FrameworkMethod method : children) {         if (method.getAnnotation(Order.class) != null) {             hasDefinedOrder = true.         }     }     if (hasDefinedOrder) {         List<FrameworkMethod> sorted = new ArrayList<>(children).         Collections.sort(sorted, new FrameworkMethodSorter()).         return sorted.     }     return children. }
false;protected;0;8;;@Override protected List<TestRule> classRules() {     List<TestRule> rules = super.classRules().     // Add the CDI container rule before all the other class rules     // so that it's the last one in FIFO     rules.add(0, new CamelCdiDeployment(getTestClass(), context)).     return rules. }
false;protected;0;8;;@Override protected Object createTest() {     BeanManager manager = context.getBeanManager().     Set<Bean<?>> beans = manager.getBeans(getTestClass().getJavaClass(), AnyLiteral.INSTANCE).     Bean<?> bean = beans.iterator().next().     // TODO: manage lifecycle of @Dependent beans     return manager.getReference(bean, bean.getBeanClass(), manager.createCreationalContext(bean)). }
false;protected;2;4;;@Override protected Statement methodInvoker(FrameworkMethod method, Object test) {     return new FrameworkMethodCdiInjection(method, test, context). }
