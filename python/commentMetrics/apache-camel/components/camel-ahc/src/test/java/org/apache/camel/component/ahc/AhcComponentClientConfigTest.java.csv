commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void configureComponent() {     // START SNIPPET: e1     // create a client config builder     DefaultAsyncHttpClientConfig.Builder builder = new DefaultAsyncHttpClientConfig.Builder().     // use the builder to set the options we want, in this case we want to follow redirects and try     // at most 3 retries to send a request to the host     DefaultAsyncHttpClientConfig config = builder.setFollowRedirect(true).setMaxRequestRetry(3).build().     // lookup AhcComponent     AhcComponent component = context.getComponent("ahc", AhcComponent.class).     // and set our custom client config to be used     component.setClientConfig(config). // END SNIPPET: e1 }
false;public;0;8;;@Test public void testAhcComponentClientConfig() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // redirect to test the client config worked as we told it to follow redirects     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, "301").     exchange.getOut().setHeader("Location", getTestServerEndpointTwoUrl()). }
false;public;0;20;;@Override public void configure() throws Exception {     configureComponent().     from("direct:start").to(getAhcEndpointUri()).to("mock:result").     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             // redirect to test the client config worked as we told it to follow redirects             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, "301").             exchange.getOut().setHeader("Location", getTestServerEndpointTwoUrl()).         }     }).     from(getTestServerEndpointTwoUri()).transform(constant("Bye World")). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             configureComponent().             from("direct:start").to(getAhcEndpointUri()).to("mock:result").             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // redirect to test the client config worked as we told it to follow redirects                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, "301").                     exchange.getOut().setHeader("Location", getTestServerEndpointTwoUrl()).                 }             }).             from(getTestServerEndpointTwoUri()).transform(constant("Bye World")).         }     }. }
