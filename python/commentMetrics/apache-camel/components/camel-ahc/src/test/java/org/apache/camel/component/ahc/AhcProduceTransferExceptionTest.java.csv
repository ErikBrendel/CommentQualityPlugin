commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testAhcProduce() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", null).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         MyOrderException cause = assertIsInstanceOf(MyOrderException.class, e.getCause()).         assertNotNull(cause).         assertEquals("123", cause.getOrderId()).     }     assertMockEndpointsSatisfied(). }
false;protected;0;4;;@Override protected String getTestServerEndpointUri() {     return super.getTestServerEndpointUri() + "?transferException=true". }
false;protected;0;4;;@Override protected String getAhcEndpointUri() {     return super.getAhcEndpointUri() + "?transferException=true". }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").to(getAhcEndpointUri()).to("mock:result").     from(getTestServerEndpointUri()).throwException(new MyOrderException("123")). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(getAhcEndpointUri()).to("mock:result").             from(getTestServerEndpointUri()).throwException(new MyOrderException("123")).         }     }. }
