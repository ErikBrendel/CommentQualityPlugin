commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testAhcDoWhile() throws Exception {     getMockEndpoint("mock:line").expectedBodiesReceived("Bye World", "Bye Bye World", "Bye Bye Bye World", "Bye Bye Bye Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("done").     template.requestBody("direct:start", "World", String.class).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").streamCaching().loopDoWhile(body().isNotEqualTo("done")).to(getAhcEndpointUri()).to("mock:line").filter(exchangeProperty(Exchange.LOOP_INDEX).isEqualTo(3)).setBody().constant("done").end().end().to("mock:result").     from(getTestServerEndpointUri()).transform(simple("Bye ${body}")). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").streamCaching().loopDoWhile(body().isNotEqualTo("done")).to(getAhcEndpointUri()).to("mock:line").filter(exchangeProperty(Exchange.LOOP_INDEX).isEqualTo(3)).setBody().constant("done").end().end().to("mock:result").             from(getTestServerEndpointUri()).transform(simple("Bye ${body}")).         }     }. }
