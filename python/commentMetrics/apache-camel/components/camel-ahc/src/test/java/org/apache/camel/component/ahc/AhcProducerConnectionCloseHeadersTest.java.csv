commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testAhcProduce() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedHeaderReceived("foo", 123).     getMockEndpoint("mock:result").expectedHeaderReceived("bar", "cool").     getMockEndpoint("mock:result").expectedHeaderReceived(Exchange.HTTP_RESPONSE_CODE, 200).     getMockEndpoint("mock:result").expectedHeaderReceived(Exchange.HTTP_RESPONSE_TEXT, "OK").     getMockEndpoint("mock:result").expectedHeaderReceived(Exchange.CONTENT_LENGTH, 9).     getMockEndpoint("mock:result").expectedHeaderReceived("Connection", "close").     Map<String, Object> headers = new HashMap<>().     headers.put("foo", 123).     headers.put("bar", "cool").     template.sendBodyAndHeaders("direct:start", null, headers).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").to(getAhcEndpointUri() + "?connectionClose=true").to("mock:result").     from(getTestServerEndpointUri()).removeHeaders("*").transform(constant("Bye World")). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(getAhcEndpointUri() + "?connectionClose=true").to("mock:result").             from(getTestServerEndpointUri()).removeHeaders("*").transform(constant("Bye World")).         }     }. }
