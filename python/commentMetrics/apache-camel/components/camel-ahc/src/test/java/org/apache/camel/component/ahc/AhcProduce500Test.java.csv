commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testAhcProduce() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", null).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         AhcOperationFailedException cause = assertIsInstanceOf(AhcOperationFailedException.class, e.getCause()).         assertNotNull(cause).         assertEquals(500, cause.getStatusCode()).         assertEquals("Server Error", cause.getStatusText()).         assertEquals("Does not work", cause.getResponseBody()).         assertEquals(false, cause.isRedirectError()).         assertNotNull(cause.getResponseHeaders()).     }     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).     exchange.getOut().setBody("Does not work"). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").to(getAhcEndpointUri()).to("mock:result").     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).             exchange.getOut().setBody("Does not work").         }     }). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(getAhcEndpointUri()).to("mock:result").             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).                     exchange.getOut().setBody("Does not work").                 }             }).         }     }. }
