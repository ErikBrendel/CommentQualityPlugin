commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void initPort() throws Exception {     port = AvailablePortFinder.getNextAvailable(24000). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("ref:prop")).     return context. }
false;protected;0;14;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     Properties prop = new Properties().     prop.setProperty("port", "" + getPort()).     jndi.bind("prop", prop).     if (isHttps()) {         addSslContextParametersToRegistry(jndi).     }     return jndi. }
false;protected;1;3;;protected void addSslContextParametersToRegistry(JndiRegistry registry) {     registry.bind("sslContextParameters", createSSLContextParameters()). }
false;protected;0;27;;protected SSLContextParameters createSSLContextParameters() {     KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString()).     ksp.setPassword(KEY_STORE_PASSWORD).     KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyPassword(KEY_STORE_PASSWORD).     kmp.setKeyStore(ksp).     TrustManagersParameters tmp = new TrustManagersParameters().     tmp.setKeyStore(ksp).     // NOTE: Needed since the client uses a loose trust configuration when no ssl context     // is provided.  We turn on WANT client-auth to prefer using authentication     SSLContextServerParameters scsp = new SSLContextServerParameters().     scsp.setClientAuthentication(ClientAuthentication.WANT.name()).     SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setKeyManagers(kmp).     sslContextParameters.setTrustManagers(tmp).     sslContextParameters.setServerParameters(scsp).     // use SSLv3 to avoid issue with (eg disable TLS)     // Caused by: javax.net.ssl.SSLException: bad record MAC     sslContextParameters.setSecureSocketProtocol("SSLv3").     return sslContextParameters. }
true;protected;0;3;/**  * Indicates if the URIs returned from {@link #getTestServerEndpointUri()} and  * {@link #getAhcEndpointUri()} should use the HTTPS protocol instead of  * the HTTP protocol.  *  * If true, an {@link SSLContextParameters} is also placed in the registry under the  * key {@code sslContextParameters}.  The parameters are not added to the endpoint URIs  * as that is test specific.  *  * @return false by default  */ ;/**  * Indicates if the URIs returned from {@link #getTestServerEndpointUri()} and  * {@link #getAhcEndpointUri()} should use the HTTPS protocol instead of  * the HTTP protocol.  *  * If true, an {@link SSLContextParameters} is also placed in the registry under the  * key {@code sslContextParameters}.  The parameters are not added to the endpoint URIs  * as that is test specific.  *  * @return false by default  */ protected boolean isHttps() {     return false. }
false;protected;0;8;;protected String getProtocol() {     String protocol = "http".     if (isHttps()) {         protocol = protocol + "s".     }     return protocol. }
false;protected;0;3;;protected String getTestServerEndpointUrl() {     return getProtocol() + "://localhost:{{port}}/foo". }
false;protected;0;3;;protected String getTestServerEndpointUri() {     return "jetty:" + getTestServerEndpointUrl(). }
false;protected;0;5;;protected String getTestServerEndpointTwoUrl() {     // field that supports the placeholders.     return getProtocol() + "://localhost:" + getPort() + "/bar". }
false;protected;0;3;;protected String getTestServerEndpointTwoUri() {     return "jetty:" + getTestServerEndpointTwoUrl(). }
false;protected;0;3;;protected String getAhcEndpointUri() {     return "ahc:" + getProtocol() + "://localhost:{{port}}/foo". }
false;protected,synchronized;0;4;;protected synchronized int getNextPort() {     port = AvailablePortFinder.getNextAvailable(port + 1).     return port. }
false;protected;0;3;;protected int getPort() {     return port. }
