commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testAhcProduce() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Does not work").     getMockEndpoint("mock:result").expectedHeaderReceived(Exchange.HTTP_RESPONSE_CODE, 500).     getMockEndpoint("mock:result").expectedHeaderReceived(Exchange.HTTP_RESPONSE_TEXT, "Server Error").     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;protected;0;4;;@Override protected String getAhcEndpointUri() {     return super.getAhcEndpointUri() + "?throwExceptionOnFailure=false". }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).     exchange.getOut().setBody("Does not work"). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").to(getAhcEndpointUri()).to("mock:result").     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).             exchange.getOut().setBody("Does not work").         }     }). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(getAhcEndpointUri()).to("mock:result").             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).                     exchange.getOut().setBody("Does not work").                 }             }).         }     }. }
