commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBridgeEndpoint() throws Exception {     String response = template.requestBodyAndHeader("http://localhost:" + port1 + "/test/hello", new ByteArrayInputStream("This is a test".getBytes()), "Content-Type", "application/xml", String.class).     assertEquals("Get a wrong response", "/", response).     response = template.requestBody("http://localhost:" + port2 + "/hello/world", "hello", String.class).     assertEquals("Get a wrong response", "/hello/world", response).     try {         template.requestBody("http://localhost:" + port1 + "/hello/world", "hello", String.class).         fail("Expect exception here!").     } catch (Exception ex) {         assertTrue("We should get a RuntimeCamelException", ex instanceof RuntimeCamelException).     } }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // get the request URL and copy it to the request body     String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).     exchange.getOut().setBody(uri). }
false;public;0;19;;@Override public void configure() throws Exception {     port1 = getPort().     port2 = getNextPort().     Processor serviceProc = new Processor() {          public void process(Exchange exchange) throws Exception {             // get the request URL and copy it to the request body             String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).             exchange.getOut().setBody(uri).         }     }.     from("jetty:http://localhost:" + port1 + "/test/hello").to("ahc:http://localhost:" + port2 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").     from("jetty:http://localhost:" + port2 + "?matchOnUriPrefix=true").process(serviceProc). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             port1 = getPort().             port2 = getNextPort().             Processor serviceProc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     // get the request URL and copy it to the request body                     String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).                     exchange.getOut().setBody(uri).                 }             }.             from("jetty:http://localhost:" + port1 + "/test/hello").to("ahc:http://localhost:" + port2 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").             from("jetty:http://localhost:" + port2 + "?matchOnUriPrefix=true").process(serviceProc).         }     }. }
