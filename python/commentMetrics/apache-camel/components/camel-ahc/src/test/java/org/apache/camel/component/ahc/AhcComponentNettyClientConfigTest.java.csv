commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;14;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     DefaultAsyncHttpClientConfig config = new DefaultAsyncHttpClientConfig.Builder().setFollowRedirect(true).setMaxRequestRetry(3).build().     AhcComponent ahc = context.getComponent("ahc", AhcComponent.class).     ahc.setClientConfig(config).     return context. }
false;public;0;8;;@Test public void testAhcComponentCustomClientConfig() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // redirect to test the client config worked as we told it to follow redirects     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, "301").     exchange.getOut().setHeader("Location", getTestServerEndpointTwoUrl()). }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:start").to(getAhcEndpointUri()).to("mock:result").     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             // redirect to test the client config worked as we told it to follow redirects             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, "301").             exchange.getOut().setHeader("Location", getTestServerEndpointTwoUrl()).         }     }).     from(getTestServerEndpointTwoUri()).transform(constant("Bye World")). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(getAhcEndpointUri()).to("mock:result").             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // redirect to test the client config worked as we told it to follow redirects                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, "301").                     exchange.getOut().setHeader("Location", getTestServerEndpointTwoUrl()).                 }             }).             from(getTestServerEndpointTwoUri()).transform(constant("Bye World")).         }     }. }
