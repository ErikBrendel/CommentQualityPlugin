commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testAhcProduce() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testAhcProduceInOut() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.requestBody("direct:start", null, String.class).     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Test public void testAhcProduceDirectly() throws Exception {     Object out = template.requestBody(getAhcEndpointUri(), null, String.class).     assertEquals("Bye World", out). }
false;public;0;8;;@Test public void testAhcProduceGetHeader() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBodyAndHeader("direct:start", null, Exchange.HTTP_METHOD, "GET").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").to(getAhcEndpointUri()).to("mock:result").     from(getTestServerEndpointUri()).transform(constant("Bye World")). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(getAhcEndpointUri()).to("mock:result").             from(getTestServerEndpointUri()).transform(constant("Bye World")).         }     }. }
