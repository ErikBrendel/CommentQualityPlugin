commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class).     assertNotNull(cool).     assertEquals(123, cool.getId()).     assertEquals("Camel", cool.getName()).     // we send back plain test     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "text/plain").     exchange.getOut().setBody("OK"). }
false;public;0;17;;@Override public void configure() throws Exception {     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class).             assertNotNull(cool).             assertEquals(123, cool.getId()).             assertEquals("Camel", cool.getName()).             // we send back plain test             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "text/plain").             exchange.getOut().setBody("OK").         }     }). }
false;public;0;36;;@Test public void testHttpSendJavaBodyAndReceiveString() throws Exception {     HttpCommonComponent jetty = context.getComponent("jetty", HttpCommonComponent.class).     jetty.setAllowJavaSerializedObject(true).     AhcComponent ahc = context.getComponent("ahc", AhcComponent.class).     ahc.setAllowJavaSerializedObject(true).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class).                     assertNotNull(cool).                     assertEquals(123, cool.getId()).                     assertEquals("Camel", cool.getName()).                     // we send back plain test                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "text/plain").                     exchange.getOut().setBody("OK").                 }             }).         }     }).     context.start().     MyCoolBean cool = new MyCoolBean(123, "Camel").     String reply = template.requestBodyAndHeader(getAhcEndpointUri(), cool, Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT, String.class).     assertEquals("OK", reply). }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class).     assertNotNull(cool).     assertEquals(123, cool.getId()).     assertEquals("Camel", cool.getName()).     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").     exchange.getOut().setBody(reply).     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT). }
false;public;0;17;;@Override public void configure() throws Exception {     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class).             assertNotNull(cool).             assertEquals(123, cool.getId()).             assertEquals("Camel", cool.getName()).             MyCoolBean reply = new MyCoolBean(456, "Camel rocks").             exchange.getOut().setBody(reply).             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).         }     }). }
false;public;0;37;;@Test public void testHttpSendJavaBodyAndReceiveJavaBody() throws Exception {     HttpCommonComponent jetty = context.getComponent("jetty", HttpCommonComponent.class).     jetty.setAllowJavaSerializedObject(true).     AhcComponent ahc = context.getComponent("ahc", AhcComponent.class).     ahc.setAllowJavaSerializedObject(true).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     MyCoolBean cool = exchange.getIn().getBody(MyCoolBean.class).                     assertNotNull(cool).                     assertEquals(123, cool.getId()).                     assertEquals("Camel", cool.getName()).                     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").                     exchange.getOut().setBody(reply).                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).                 }             }).         }     }).     context.start().     MyCoolBean cool = new MyCoolBean(123, "Camel").     MyCoolBean reply = template.requestBodyAndHeader(getAhcEndpointUri(), cool, Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT, MyCoolBean.class).     assertEquals(456, reply.getId()).     assertEquals("Camel rocks", reply.getName()). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertNotNull(body).     assertEquals("Hello World", body).     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").     exchange.getOut().setBody(reply).     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT). }
false;public;0;15;;@Override public void configure() throws Exception {     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertNotNull(body).             assertEquals("Hello World", body).             MyCoolBean reply = new MyCoolBean(456, "Camel rocks").             exchange.getOut().setBody(reply).             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).         }     }). }
false;public;0;32;;@Test public void testHttpSendStringAndReceiveJavaBody() throws Exception {     HttpCommonComponent jetty = context.getComponent("jetty", HttpCommonComponent.class).     jetty.setAllowJavaSerializedObject(true).     AhcComponent ahc = context.getComponent("ahc", AhcComponent.class).     ahc.setAllowJavaSerializedObject(true).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertNotNull(body).                     assertEquals("Hello World", body).                     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").                     exchange.getOut().setBody(reply).                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).                 }             }).         }     }).     context.start().     MyCoolBean reply = template.requestBody(getAhcEndpointUri(), "Hello World", MyCoolBean.class).     assertEquals(456, reply.getId()).     assertEquals("Camel rocks", reply.getName()). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertNotNull(body).     assertEquals("Hello World", body).     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").     exchange.getOut().setBody(reply).     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT). }
false;public;0;15;;@Override public void configure() throws Exception {     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertNotNull(body).             assertEquals("Hello World", body).             MyCoolBean reply = new MyCoolBean(456, "Camel rocks").             exchange.getOut().setBody(reply).             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).         }     }). }
false;public;0;31;;@Test public void testNotAllowedReceive() throws Exception {     HttpCommonComponent jetty = context.getComponent("jetty", HttpCommonComponent.class).     jetty.setAllowJavaSerializedObject(true).     AhcComponent ahc = context.getComponent("ahc", AhcComponent.class).     ahc.setAllowJavaSerializedObject(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertNotNull(body).                     assertEquals("Hello World", body).                     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").                     exchange.getOut().setBody(reply).                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).                 }             }).         }     }).     context.start().     Object reply = template.requestBody(getAhcEndpointUri(), "Hello World", Object.class).     MyCoolBean bean = context.getTypeConverter().convertTo(MyCoolBean.class, reply).     assertNull(bean). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertNotNull(body).     assertEquals("Hello World", body).     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").     exchange.getOut().setBody(reply).     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT). }
false;public;0;15;;@Override public void configure() throws Exception {     from(getTestServerEndpointUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertNotNull(body).             assertEquals("Hello World", body).             MyCoolBean reply = new MyCoolBean(456, "Camel rocks").             exchange.getOut().setBody(reply).             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).         }     }). }
false;public;0;37;;@Test public void testNotAllowed() throws Exception {     JettyHttpComponent jetty = context.getComponent("jetty", JettyHttpComponent.class).     jetty.setAllowJavaSerializedObject(false).     AhcComponent ahc = context.getComponent("ahc", AhcComponent.class).     ahc.setAllowJavaSerializedObject(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getTestServerEndpointUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertNotNull(body).                     assertEquals("Hello World", body).                     MyCoolBean reply = new MyCoolBean(456, "Camel rocks").                     exchange.getOut().setBody(reply).                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT).                 }             }).         }     }).     context.start().     MyCoolBean cool = new MyCoolBean(123, "Camel").     try {         template.requestBodyAndHeader(getAhcEndpointUri(), cool, Exchange.CONTENT_TYPE, AhcConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT, MyCoolBean.class).         fail("Should fail").     } catch (Exception e) {         assertTrue(e.getCause().getMessage().startsWith("Content-type application/x-java-serialized-object is not allowed")).     } }
