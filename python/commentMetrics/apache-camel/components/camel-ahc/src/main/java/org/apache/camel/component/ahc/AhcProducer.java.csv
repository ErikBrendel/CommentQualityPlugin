commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AhcEndpoint getEndpoint() {     return (AhcEndpoint) super.getEndpoint(). }
false;public;2;14;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     try {         // AHC supports async processing         Request request = getEndpoint().getBinding().prepareRequest(getEndpoint(), exchange).         log.debug("Executing request {}", request).         client.executeRequest(request, new AhcAsyncHandler(exchange, callback, request.getUrl(), getEndpoint().getBufferSize())).         return false.     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     } }
false;public;1;13;;@Override public void onThrowable(Throwable t) {     if (log.isTraceEnabled()) {         log.trace("{} onThrowable {}", exchange.getExchangeId(), t).     }     try {         getEndpoint().getBinding().onThrowable(getEndpoint(), exchange, t).     } catch (Exception e) {         exchange.setException(e).     } finally {         callback.done(false).     } }
false;public;0;15;;@Override public Exchange onCompleted() throws Exception {     if (log.isTraceEnabled()) {         log.trace("{} onCompleted", exchange.getExchangeId()).     }     try {         getEndpoint().getBinding().onComplete(getEndpoint(), exchange, url, os, contentLength, statusCode, statusText).     } catch (Exception e) {         exchange.setException(e).     } finally {         // signal we are done         callback.done(false).     }     return exchange. }
false;public;0;4;;@Override public String toString() {     return "AhcAsyncHandler for exchangeId: " + exchange.getExchangeId() + " -> " + url. }
false;public;1;11;;@Override public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {     // write body parts to stream, which we will bind to the Camel Exchange in onComplete     os.write(bodyPart.getBodyPartBytes()).     if (log.isTraceEnabled()) {         log.trace("{} onBodyPartReceived {} bytes", exchange.getExchangeId(), bodyPart.length()).     }     contentLength += bodyPart.length().     return State.CONTINUE. }
false;public;1;15;;@Override public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {     if (log.isTraceEnabled()) {         log.trace("{} onStatusReceived {}", exchange.getExchangeId(), responseStatus).     }     try {         statusCode = responseStatus.getStatusCode().         statusText = responseStatus.getStatusText().         getEndpoint().getBinding().onStatusReceived(getEndpoint(), exchange, responseStatus).     } catch (Exception e) {         exchange.setException(e).     }     return State.CONTINUE. }
false;public;1;12;;@Override public State onHeadersReceived(HttpHeaders headers) throws Exception {     if (log.isTraceEnabled()) {         log.trace("{} onHeadersReceived {}", exchange.getExchangeId(), headers).     }     try {         getEndpoint().getBinding().onHeadersReceived(getEndpoint(), exchange, headers).     } catch (Exception e) {         exchange.setException(e).     }     return State.CONTINUE. }
