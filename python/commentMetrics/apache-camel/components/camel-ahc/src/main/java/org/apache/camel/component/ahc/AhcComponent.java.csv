commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;85;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     String addressUri = createAddressUri(uri, remaining).     SSLContextParameters ssl = getSslContextParameters().     if (ssl == null) {         ssl = retrieveGlobalSslContextParameters().     }     // Do not set the HTTP URI because we still have all of the Camel internal     // parameters in the URI at this point.     AhcEndpoint endpoint = createAhcEndpoint(uri, this, null).     setEndpointHeaderFilterStrategy(endpoint).     endpoint.setClient(getClient()).     endpoint.setClientConfig(getClientConfig()).     endpoint.setBinding(getBinding()).     endpoint.setSslContextParameters(ssl).     setProperties(endpoint, parameters).     if (IntrospectionSupport.hasProperties(parameters, CLIENT_CONFIG_PREFIX)) {         DefaultAsyncHttpClientConfig.Builder builder = endpoint.getClientConfig() == null ? new DefaultAsyncHttpClientConfig.Builder() : AhcComponent.cloneConfig(endpoint.getClientConfig()).         if (endpoint.getClient() != null) {             log.warn("The user explicitly set an AsyncHttpClient instance on the component or " + "endpoint, but this endpoint URI contains client configuration parameters.  " + "Are you sure that this is what was intended?  The AsyncHttpClient will be used" + " and the URI parameters will be ignored.").         } else if (endpoint.getClientConfig() != null) {             log.warn("The user explicitly set an AsyncHttpClientConfig instance on the component or " + "endpoint, but this endpoint URI contains client configuration parameters.  " + "Are you sure that this is what was intended?  The URI parameters will be applied" + " to a clone of the supplied AsyncHttpClientConfig in order to prevent unintended modification" + " of the explicitly configured AsyncHttpClientConfig.  That is, the URI parameters override the" + " settings on the explicitly configured AsyncHttpClientConfig for this endpoint.").         }         // special for realm builder         Builder realmBuilder = null.         if (IntrospectionSupport.hasProperties(parameters, CLIENT_REALM_CONFIG_PREFIX)) {             // set and validate additional parameters on client config             Map<String, Object> realmParams = IntrospectionSupport.extractProperties(parameters, CLIENT_REALM_CONFIG_PREFIX).             // copy the parameters for the endpoint to have             endpoint.setClientConfigRealmOptions(new LinkedHashMap<>(realmParams)).             Object principal = realmParams.remove("principal").             Object password = realmParams.remove("password").             if (ObjectHelper.isEmpty(principal)) {                 throw new IllegalArgumentException(CLIENT_REALM_CONFIG_PREFIX + ".principal must be configured").             }             if (password == null) {                 password = "".             }             realmBuilder = new Realm.Builder(principal.toString(), password.toString()).             setProperties(realmBuilder, realmParams).             validateParameters(uri, realmParams, null).         }         // set and validate additional parameters on client config         Map<String, Object> clientParams = IntrospectionSupport.extractProperties(parameters, CLIENT_CONFIG_PREFIX).         // copy the parameters for the endpoint to have         endpoint.setClientConfigOptions(new LinkedHashMap<>(clientParams)).         setProperties(builder, clientParams).         validateParameters(uri, clientParams, null).         if (realmBuilder != null) {             builder.setRealm(realmBuilder.build()).         }         endpoint.setClientConfig(builder.build()).     }     // restructure uri to be based on the parameters left as we dont want to include the Camel internal options     addressUri = UnsafeUriCharactersEncoder.encodeHttpURI(addressUri).     URI httpUri = URISupport.createRemainingURI(new URI(addressUri), parameters).     endpoint.setHttpUri(httpUri).     return endpoint. }
false;public;0;3;;public AsyncHttpClient getClient() {     return client. }
true;public;1;3;/**  * To use a custom {@link AsyncHttpClient}  */ ;/**  * To use a custom {@link AsyncHttpClient}  */ public void setClient(AsyncHttpClient client) {     this.client = client. }
false;public;0;6;;public AhcBinding getBinding() {     if (binding == null) {         binding = new DefaultAhcBinding().     }     return binding. }
true;public;1;3;/**  * To use a custom {@link AhcBinding} which allows to control how to bind between AHC and Camel.  */ ;/**  * To use a custom {@link AhcBinding} which allows to control how to bind between AHC and Camel.  */ public void setBinding(AhcBinding binding) {     this.binding = binding. }
false;public;0;3;;public AsyncHttpClientConfig getClientConfig() {     return clientConfig. }
true;public;1;3;/**  * To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance.  */ ;/**  * To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance.  */ public void setClientConfig(AsyncHttpClientConfig clientConfig) {     this.clientConfig = clientConfig. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * Reference to a org.apache.camel.support.jsse.SSLContextParameters in the Registry.  * Note that configuring this option will override any SSL/TLS configuration options provided through the  * clientConfig option at the endpoint or component level.  */ ;/**  * Reference to a org.apache.camel.support.jsse.SSLContextParameters in the Registry.  * Note that configuring this option will override any SSL/TLS configuration options provided through the  * clientConfig option at the endpoint or component level.  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;3;;public boolean isAllowJavaSerializedObject() {     return allowJavaSerializedObject. }
true;public;1;3;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ ;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ public void setAllowJavaSerializedObject(boolean allowJavaSerializedObject) {     this.allowJavaSerializedObject = allowJavaSerializedObject. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;protected;2;3;;protected String createAddressUri(String uri, String remaining) {     return remaining. }
false;protected;3;3;;protected AhcEndpoint createAhcEndpoint(String endpointUri, AhcComponent component, URI httpUri) {     return new AhcEndpoint(endpointUri, component, httpUri). }
true;static;1;4;/**  * Creates a new client configuration builder using {@code DefaultAsyncHttpClientConfig} as a template for  * the builder.  *  * @param clientConfig the instance to serve as a template for the builder  * @return a builder configured with the same options as the supplied config  */ ;/**  * Creates a new client configuration builder using {@code DefaultAsyncHttpClientConfig} as a template for  * the builder.  *  * @param clientConfig the instance to serve as a template for the builder  * @return a builder configured with the same options as the supplied config  */ static DefaultAsyncHttpClientConfig.Builder cloneConfig(AsyncHttpClientConfig clientConfig) {     DefaultAsyncHttpClientConfig.Builder builder = new DefaultAsyncHttpClientConfig.Builder(clientConfig).     return builder. }
