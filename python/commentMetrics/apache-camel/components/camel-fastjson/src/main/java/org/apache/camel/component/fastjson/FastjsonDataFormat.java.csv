commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "json-fastjson". }
false;public;3;18;;@Override public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {     int len = JSON.writeJSONString(stream, config.getCharset(), graph, config.getSerializeConfig(), config.getSerializeFilters(), config.getDateFormat(), JSON.DEFAULT_GENERATE_FEATURE, config.getSerializerFeatures()).     if (contentTypeHeader) {         Message message = exchange.hasOut() ? exchange.getOut() : exchange.getIn().         message.setHeader(Exchange.CONTENT_TYPE, "application/json").         message.setHeader(Exchange.CONTENT_LENGTH, len).     } }
false;public;2;8;;@Override public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {     if (unmarshalGenericType == null) {         return JSON.parseObject(stream, config.getCharset(), unmarshalType, config.getFeatures()).     } else {         return JSON.parseObject(stream, config.getCharset(), unmarshalGenericType, config.getFeatures()).     } }
false;protected;0;22;;@Override protected void doStart() throws Exception {     if (config == null) {         List<SerializerFeature> serializerFeatureList = new ArrayList<>().         config = new FastJsonConfig().         if (prettyPrint) {             serializerFeatureList.add(SerializerFeature.PrettyFormat).         }         if (serializeNulls) {             serializerFeatureList.add(SerializerFeature.WriteMapNullValue).             serializerFeatureList.add(SerializerFeature.WriteNullBooleanAsFalse).             serializerFeatureList.add(SerializerFeature.WriteNullListAsEmpty).             serializerFeatureList.add(SerializerFeature.WriteNullNumberAsZero).             serializerFeatureList.add(SerializerFeature.WriteNullStringAsEmpty).         }         if (this.dateFormatPattern != null) {             serializerFeatureList.add(SerializerFeature.WriteDateUseDateFormat).             config.setDateFormat(this.dateFormatPattern).         }     } }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public Class<?> getUnmarshalType() {     return this.unmarshalType. }
false;public;1;3;;public void setUnmarshalType(Class<?> unmarshalType) {     this.unmarshalType = unmarshalType. }
false;public;0;3;;public Type getUnmarshalGenericType() {     return this.unmarshalType. }
false;public;1;3;;public void setUnmarshalGenericType(Type unmarshalGenericType) {     this.unmarshalGenericType = unmarshalGenericType. }
false;public;0;3;;public boolean isSerializeNulls() {     return serializeNulls. }
false;public;1;3;;public void setSerializeNulls(boolean serializeNulls) {     this.serializeNulls = serializeNulls. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
false;public;1;3;;public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public String getDateFormatPattern() {     return dateFormatPattern. }
false;public;1;3;;public void setDateFormatPattern(String dateFormatPattern) {     this.dateFormatPattern = dateFormatPattern. }
false;public;0;3;;public boolean isContentTypeHeader() {     return contentTypeHeader. }
true;public;1;3;/**  * If enabled then JSON will set the Content-Type header to <tt>application/json</tt> when marshalling.  */ ;/**  * If enabled then JSON will set the Content-Type header to <tt>application/json</tt> when marshalling.  */ public void setContentTypeHeader(boolean contentTypeHeader) {     this.contentTypeHeader = contentTypeHeader. }
false;public;0;3;;public FastJsonConfig getConfig() {     return this.config. }
