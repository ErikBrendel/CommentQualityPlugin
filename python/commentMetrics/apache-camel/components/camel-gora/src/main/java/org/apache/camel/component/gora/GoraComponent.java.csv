commented;modifiers;parameterAmount;loc;comment;code
true;private;1;8;/**  * Initialize class and create DataStore instance  *  * @param config component configuration  * @throws IOException  */ ;/**  * Initialize class and create DataStore instance  *  * @param config component configuration  * @throws IOException  */ private void init(final GoraConfiguration config) throws IOException {     this.goraProperties = DataStoreFactory.createProps().     this.dataStore = DataStoreFactory.getDataStore(goraProperties.getProperty(GORA_DEFAULT_DATASTORE_KEY, config.getDataStoreClass()), config.getKeyClass(), config.getValueClass(), this.configuration). }
false;protected;3;11;;@Override protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {     final GoraConfiguration config = new GoraConfiguration().     setProperties(config, parameters).     config.setName(remaining).     init(config).     return new GoraEndpoint(uri, this, config, dataStore). }
true;public;0;3;/**  * Get DataStore  */ ;/**  * Get DataStore  */ public DataStore<Object, Persistent> getDataStore() {     return dataStore. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     if (configuration == null) {         configuration = new Configuration().     } }
false;protected;0;6;;@Override protected void doStop() throws Exception {     if (dataStore != null) {         dataStore.close().     } }
