commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;public void onAcceptAlertNotification(AlertNotification alertNotification) {     LOG.debug("Received an alertNotification {}", alertNotification).     Exchange exchange = endpoint.createOnAcceptAlertNotificationExchange(alertNotification).     try {         processor.process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     if (exchange.getException() != null) {         exceptionHandler.handleException("Cannot process exchange. This exception will be ignored.", exchange, exchange.getException()).     } }
false;public;1;25;;public void onAcceptDeliverSm(DeliverSm deliverSm) throws ProcessRequestException {     LOG.debug("Received a deliverSm {}", deliverSm).     Exchange exchange.     try {         exchange = endpoint.createOnAcceptDeliverSmExchange(deliverSm).     } catch (Exception e) {         exceptionHandler.handleException("Cannot create exchange. This exception will be ignored.", e).         return.     }     try {         processor.process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     if (exchange.getException() != null) {         ProcessRequestException pre = exchange.getException(ProcessRequestException.class).         if (pre == null) {             pre = new ProcessRequestException(exchange.getException().getMessage(), 255, exchange.getException()).         }         throw pre.     } }
false;public;2;21;;public DataSmResult onAcceptDataSm(DataSm dataSm, Session session) throws ProcessRequestException {     LOG.debug("Received a dataSm {}", dataSm).     MessageId newMessageId = messageIDGenerator.newMessageId().     Exchange exchange = endpoint.createOnAcceptDataSm(dataSm, newMessageId.getValue()).     try {         processor.process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     if (exchange.getException() != null) {         ProcessRequestException pre = exchange.getException(ProcessRequestException.class).         if (pre == null) {             pre = new ProcessRequestException(exchange.getException().getMessage(), 255, exchange.getException()).         }         throw pre.     }     return new DataSmResult(newMessageId, dataSm.getOptionalParameters()). }
false;public;1;3;;public void setMessageIDGenerator(MessageIDGenerator messageIDGenerator) {     this.messageIDGenerator = messageIDGenerator. }
