# id;timestamp;commentText;codeText;commentWords;codeWords
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1431507831;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1457085334;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1463214394;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1465649425;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1470578961;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1470579366;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1540108161;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1540108700;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setReplaceIfPresentFlag(byte replaceIfPresentFlag);1550436745;Used to request the SMSC to replace a previously submitted message, that is still pending delivery._The SMSC will replace an existing message provided that the source address, destination address and service_type match the same fields in the new message._The following replace if present flag values are defined:_<ul>_<li>0: Don't replace</li>_<li>1: Replace</li>_</ul>;public void setReplaceIfPresentFlag(byte replaceIfPresentFlag) {_        this.replaceIfPresentFlag = replaceIfPresentFlag__    };used,to,request,the,smsc,to,replace,a,previously,submitted,message,that,is,still,pending,delivery,the,smsc,will,replace,an,existing,message,provided,that,the,source,address,destination,address,and,service,type,match,the,same,fields,in,the,new,message,the,following,replace,if,present,flag,values,are,defined,ul,li,0,don,t,replace,li,li,1,replace,li,ul;public,void,set,replace,if,present,flag,byte,replace,if,present,flag,this,replace,if,present,flag,replace,if,present,flag
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1431507831;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1457085334;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1463214394;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1465649425;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1470578961;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1470579366;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1540108161;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1540108700;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setLazySessionCreation(boolean lazySessionCreation);1550436745;Sessions can be lazily created to avoid exceptions, if the SMSC is not available when the Camel producer is started._Camel will check the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of the first exchange._If they are present, Camel will use these data to connect to the SMSC.;public void setLazySessionCreation(boolean lazySessionCreation) {_        this.lazySessionCreation = lazySessionCreation__    };sessions,can,be,lazily,created,to,avoid,exceptions,if,the,smsc,is,not,available,when,the,camel,producer,is,started,camel,will,check,the,in,message,headers,camel,smpp,system,id,and,camel,smpp,password,of,the,first,exchange,if,they,are,present,camel,will,use,these,data,to,connect,to,the,smsc;public,void,set,lazy,session,creation,boolean,lazy,session,creation,this,lazy,session,creation,lazy,session,creation
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1431507831;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1457085334;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1463214394;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1465649425;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1470578961;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1470579366;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1540108161;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1540108700;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setSourceAddr(String sourceAddr);1550436745;Defines the address of SME (Short Message Entity) which originated this message.;public void setSourceAddr(String sourceAddr) {_        this.sourceAddr = sourceAddr__    };defines,the,address,of,sme,short,message,entity,which,originated,this,message;public,void,set,source,addr,string,source,addr,this,source,addr,source,addr
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1431507831;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1457085334;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1463214394;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1465649425;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1470578961;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1470579366;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1540108161;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1540108700;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setRegisteredDelivery(byte registeredDelivery);1550436745;Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined:_<ul>_<li>0: No SMSC delivery receipt requested.</li>_<li>1: SMSC delivery receipt requested where final delivery outcome is success or failure.</li>_<li>2: SMSC delivery receipt requested where the final delivery outcome is delivery failure.</li>_</ul>;public void setRegisteredDelivery(byte registeredDelivery) {_        this.registeredDelivery = registeredDelivery__    };is,used,to,request,an,smsc,delivery,receipt,and,or,sme,originated,acknowledgements,the,following,values,are,defined,ul,li,0,no,smsc,delivery,receipt,requested,li,li,1,smsc,delivery,receipt,requested,where,final,delivery,outcome,is,success,or,failure,li,li,2,smsc,delivery,receipt,requested,where,the,final,delivery,outcome,is,delivery,failure,li,ul;public,void,set,registered,delivery,byte,registered,delivery,this,registered,delivery,registered,delivery
SmppConfiguration -> public void setDestAddr(String destAddr);1431507831;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1457085334;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1463214394;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1465649425;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1470578961;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1470579366;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1540108161;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1540108700;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setDestAddr(String destAddr);1550436745;Defines the destination SME address. For mobile terminated messages, this is the directory number of the recipient MS._Only for SubmitSm, SubmitMulti, CancelSm and DataSm.;public void setDestAddr(String destAddr) {_        this.destAddr = destAddr__    };defines,the,destination,sme,address,for,mobile,terminated,messages,this,is,the,directory,number,of,the,recipient,ms,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm;public,void,set,dest,addr,string,dest,addr,this,dest,addr,dest,addr
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1431507831;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1457085334;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1463214394;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1465649425;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1470578961;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1470579366;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1540108161;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1540108700;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setInitialReconnectDelay(long initialReconnectDelay);1550436745;Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC, after the connection was lost.;public void setInitialReconnectDelay(long initialReconnectDelay) {_        this.initialReconnectDelay = initialReconnectDelay__    };defines,the,initial,delay,in,milliseconds,after,the,consumer,producer,tries,to,reconnect,to,the,smsc,after,the,connection,was,lost;public,void,set,initial,reconnect,delay,long,initial,reconnect,delay,this,initial,reconnect,delay,initial,reconnect,delay
SmppConfiguration -> public void setSystemId(String systemId);1431507831;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1457085334;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1463214394;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1465649425;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1470578961;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1470579366;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1540108161;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1540108700;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSystemId(String systemId);1550436745;The system id (username) for connecting to SMSC server.;public void setSystemId(String systemId) {_        this.systemId = systemId__    };the,system,id,username,for,connecting,to,smsc,server;public,void,set,system,id,string,system,id,this,system,id,system,id
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1431507831;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1457085334;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1463214394;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1465649425;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1470578961;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1470579366;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1540108161;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1540108700;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setSessionStateListener(SessionStateListener sessionStateListener);1550436745;You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed.;public void setSessionStateListener(SessionStateListener sessionStateListener) {_        this.sessionStateListener = sessionStateListener__    };you,can,refer,to,a,org,jsmpp,session,session,state,listener,in,the,registry,to,receive,callbacks,when,the,session,state,changed;public,void,set,session,state,listener,session,state,listener,session,state,listener,this,session,state,listener,session,state,listener
SmppConfiguration -> public void setEncoding(String encoding);1431507831;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1457085334;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1463214394;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1465649425;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1470578961;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1470579366;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1540108161;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1540108700;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setEncoding(String encoding);1550436745;Defines the encoding scheme of the short message user data._Only for SubmitSm, ReplaceSm and SubmitMulti.;public void setEncoding(String encoding) {_        if (!Charset.isSupported(encoding)) {_            LOG.warn("Unsupported encoding \"{}\" is being set.", encoding)__        }_        this.encoding = encoding__    };defines,the,encoding,scheme,of,the,short,message,user,data,only,for,submit,sm,replace,sm,and,submit,multi;public,void,set,encoding,string,encoding,if,charset,is,supported,encoding,log,warn,unsupported,encoding,is,being,set,encoding,this,encoding,encoding
SmppConfiguration -> public void setServiceType(String serviceType);1431507831;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1457085334;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1463214394;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1465649425;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1470578961;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1470579366;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1540108161;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1540108700;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setServiceType(String serviceType);1550436745;The service type parameter can be used to indicate the SMS Application service associated with the message._The following generic service_types are defined:_<ul>_<li>CMT: Cellular Messaging</li>_<li>CPT: Cellular Paging</li>_<li>VMN: Voice Mail Notification</li>_<li>VMA: Voice Mail Alerting</li>_<li>WAP: Wireless Application Protocol</li>_<li>USSD: Unstructured Supplementary Services Data</li>_</ul>;public void setServiceType(String serviceType) {_        this.serviceType = serviceType__    };the,service,type,parameter,can,be,used,to,indicate,the,sms,application,service,associated,with,the,message,the,following,generic,are,defined,ul,li,cmt,cellular,messaging,li,li,cpt,cellular,paging,li,li,vmn,voice,mail,notification,li,li,vma,voice,mail,alerting,li,li,wap,wireless,application,protocol,li,li,ussd,unstructured,supplementary,services,data,li,ul;public,void,set,service,type,string,service,type,this,service,type,service,type
SmppConfiguration -> public void setAddressRange(String addressRange);1431507831;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1457085334;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1463214394;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1465649425;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1470578961;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1470579366;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1540108161;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1540108700;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setAddressRange(String addressRange);1550436745;You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification._The SmppConsumer will receive messages only from SMSC's which target an address (MSISDN or IP address) within this range.;public void setAddressRange(String addressRange) {_        this.addressRange = addressRange__    };you,can,specify,the,address,range,for,the,smpp,consumer,as,defined,in,section,5,2,7,of,the,smpp,3,4,specification,the,smpp,consumer,will,receive,messages,only,from,smsc,s,which,target,an,address,msisdn,or,ip,address,within,this,range;public,void,set,address,range,string,address,range,this,address,range,address,range
SmppConfiguration -> public void setPort(Integer port);1431507831;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1457085334;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1463214394;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1465649425;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1470578961;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1470579366;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1540108161;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1540108700;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setPort(Integer port);1550436745;Port number for the SMSC server to use.;public void setPort(Integer port) {_        this.port = port__    };port,number,for,the,smsc,server,to,use;public,void,set,port,integer,port,this,port,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1431507831;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1457085334;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1463214394;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1465649425;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1470578961;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1470579366;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1540108161;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1540108700;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setHttpProxyPort(Integer httpProxyPort);1550436745;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the port of your HTTP proxy.;public void setHttpProxyPort(Integer httpProxyPort) {_        this.httpProxyPort = httpProxyPort__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,port,of,your,http,proxy;public,void,set,http,proxy,port,integer,http,proxy,port,this,http,proxy,port,http,proxy,port
SmppConfiguration -> public void setDataCoding(byte dataCoding);1431507831;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1457085334;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1463214394;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1465649425;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1470578961;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1470579366;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1540108161;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1540108700;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setDataCoding(byte dataCoding);1550436745;Defines the data coding according the SMPP 3.4 specification, section 5.2.19._Example data encodings are:_<ul>_<li>0: SMSC Default Alphabet</li>_<li>3: Latin 1 (ISO-8859-1)</li>_<li>4: Octet unspecified (8-bit binary)</li>_<li>8: UCS2 (ISO/IEC-10646)</li>_<li>13: Extended Kanji JIS(X 0212-1990)</li>_</ul>;public void setDataCoding(byte dataCoding) {_        this.dataCoding = dataCoding__    };defines,the,data,coding,according,the,smpp,3,4,specification,section,5,2,19,example,data,encodings,are,ul,li,0,smsc,default,alphabet,li,li,3,latin,1,iso,8859,1,li,li,4,octet,unspecified,8,bit,binary,li,li,8,ucs2,iso,iec,10646,li,li,13,extended,kanji,jis,x,0212,1990,li,ul;public,void,set,data,coding,byte,data,coding,this,data,coding,data,coding
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1431507831;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1457085334;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1463214394;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1465649425;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1470578961;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1470579366;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1540108161;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1540108700;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public void setEnquireLinkTimer(Integer enquireLinkTimer);1550436745;Defines the interval in milliseconds between the confidence checks._The confidence check is used to test the communication path between an ESME and an SMSC.;public void setEnquireLinkTimer(Integer enquireLinkTimer) {_        this.enquireLinkTimer = enquireLinkTimer__    };defines,the,interval,in,milliseconds,between,the,confidence,checks,the,confidence,check,is,used,to,test,the,communication,path,between,an,esme,and,an,smsc;public,void,set,enquire,link,timer,integer,enquire,link,timer,this,enquire,link,timer,enquire,link,timer
SmppConfiguration -> public String getPassword();1431507831;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1457085334;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1463214394;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1465649425;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1470578961;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1470579366;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1540108161;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1540108700;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public String getPassword();1550436745;The password for connecting to SMSC server.;public String getPassword() {_        return password__    };the,password,for,connecting,to,smsc,server;public,string,get,password,return,password
SmppConfiguration -> public int getMaxReconnect();1470578961;CAMEL-6616_Defines the maximum number of attempts to reconnect to the SMSC, if SMSC returns a negative bind response;public int getMaxReconnect() {_		return maxReconnect__	};camel,6616,defines,the,maximum,number,of,attempts,to,reconnect,to,the,smsc,if,smsc,returns,a,negative,bind,response;public,int,get,max,reconnect,return,max,reconnect
SmppConfiguration -> public int getMaxReconnect();1470579366;Defines the maximum number of attempts to reconnect to the SMSC, if SMSC returns a negative bind response;public int getMaxReconnect() {_        return maxReconnect__    };defines,the,maximum,number,of,attempts,to,reconnect,to,the,smsc,if,smsc,returns,a,negative,bind,response;public,int,get,max,reconnect,return,max,reconnect
SmppConfiguration -> public int getMaxReconnect();1540108161;Defines the maximum number of attempts to reconnect to the SMSC, if SMSC returns a negative bind response;public int getMaxReconnect() {_        return maxReconnect__    };defines,the,maximum,number,of,attempts,to,reconnect,to,the,smsc,if,smsc,returns,a,negative,bind,response;public,int,get,max,reconnect,return,max,reconnect
SmppConfiguration -> public int getMaxReconnect();1540108700;Defines the maximum number of attempts to reconnect to the SMSC, if SMSC returns a negative bind response;public int getMaxReconnect() {_        return maxReconnect__    };defines,the,maximum,number,of,attempts,to,reconnect,to,the,smsc,if,smsc,returns,a,negative,bind,response;public,int,get,max,reconnect,return,max,reconnect
SmppConfiguration -> public int getMaxReconnect();1550436745;Defines the maximum number of attempts to reconnect to the SMSC, if SMSC returns a negative bind response;public int getMaxReconnect() {_        return maxReconnect__    };defines,the,maximum,number,of,attempts,to,reconnect,to,the,smsc,if,smsc,returns,a,negative,bind,response;public,int,get,max,reconnect,return,max,reconnect
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1431507831;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1457085334;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1463214394;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1465649425;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1470578961;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1470579366;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1540108161;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1540108700;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy);1550436745;You can specify a policy for handling long messages:_<ul>_<li>ALLOW - the default, long messages are split to 140 bytes per message</li>_<li>TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC._Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered.</li>_<li>REJECT - if a message would need to be split, it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long.</li>_</ul>;public void setSplittingPolicy(SmppSplittingPolicy splittingPolicy) {_        this.splittingPolicy = splittingPolicy__    };you,can,specify,a,policy,for,handling,long,messages,ul,li,allow,the,default,long,messages,are,split,to,140,bytes,per,message,li,li,truncate,long,messages,are,split,and,only,the,first,fragment,will,be,sent,to,the,smsc,some,carriers,drop,subsequent,fragments,so,this,reduces,load,on,the,smpp,connection,sending,parts,of,a,message,that,will,never,be,delivered,li,li,reject,if,a,message,would,need,to,be,split,it,is,rejected,with,an,smpp,negative,response,exception,and,the,reason,code,signifying,the,message,is,too,long,li,ul;public,void,set,splitting,policy,smpp,splitting,policy,splitting,policy,this,splitting,policy,splitting,policy
SmppConfiguration -> public void setProtocolId(byte protocolId);1431507831;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1457085334;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1463214394;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1465649425;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1470578961;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1470579366;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1540108161;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1540108700;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setProtocolId(byte protocolId);1550436745;The protocol id;public void setProtocolId(byte protocolId) {_        this.protocolId = protocolId__    };the,protocol,id;public,void,set,protocol,id,byte,protocol,id,this,protocol,id,protocol,id
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1431507831;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1457085334;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1463214394;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1465649425;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1470578961;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1470579366;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1540108161;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1540108700;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setPriorityFlag(byte priorityFlag);1550436745;Allows the originating SME to assign a priority level to the short message._Only for SubmitSm and SubmitMulti._Four Priority Levels are supported:_<ul>_<li>0: Level 0 (lowest) priority</li>_<li>1: Level 1 priority</li>_<li>2: Level 2 priority</li>_<li>3: Level 3 (highest) priority</li>_</ul>;public void setPriorityFlag(byte priorityFlag) {_        this.priorityFlag = priorityFlag__    };allows,the,originating,sme,to,assign,a,priority,level,to,the,short,message,only,for,submit,sm,and,submit,multi,four,priority,levels,are,supported,ul,li,0,level,0,lowest,priority,li,li,1,level,1,priority,li,li,2,level,2,priority,li,li,3,level,3,highest,priority,li,ul;public,void,set,priority,flag,byte,priority,flag,this,priority,flag,priority,flag
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1457085334;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1463214394;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1465649425;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1470578961;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1470579366;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1540108161;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1540108700;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setProxyHeaders(Map<String, String> proxyHeaders);1550436745;These headers will be passed to the proxy server while establishing the connection.;public void setProxyHeaders(Map<String, String> proxyHeaders) {_        this.proxyHeaders = proxyHeaders__    };these,headers,will,be,passed,to,the,proxy,server,while,establishing,the,connection;public,void,set,proxy,headers,map,string,string,proxy,headers,this,proxy,headers,proxy,headers
SmppConfiguration -> public void setSystemType(String systemType);1431507831;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1457085334;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1463214394;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1465649425;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1470578961;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1470579366;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1540108161;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1540108700;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setSystemType(String systemType);1550436745;This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters).;public void setSystemType(String systemType) {_        this.systemType = systemType__    };this,parameter,is,used,to,categorize,the,type,of,esme,external,short,message,entity,that,is,binding,to,the,smsc,max,13,characters;public,void,set,system,type,string,system,type,this,system,type,system,type
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1431507831;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1457085334;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1463214394;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1465649425;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1470578961;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1470579366;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1540108161;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1540108700;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setHttpProxyPassword(String httpProxyPassword);1550436745;If your HTTP proxy requires basic authentication, set this attribute to the password required for your HTTP proxy.;public void setHttpProxyPassword(String httpProxyPassword) {_        this.httpProxyPassword = httpProxyPassword__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,password,required,for,your,http,proxy;public,void,set,http,proxy,password,string,http,proxy,password,this,http,proxy,password,http,proxy,password
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1431507831;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1457085334;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1463214394;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1465649425;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1470578961;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1470579366;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1540108161;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1540108700;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setNumberingPlanIndicator(byte numberingPlanIndicator);1550436745;Defines the numeric plan indicator (NPI) to be used in the SME._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setNumberingPlanIndicator(byte numberingPlanIndicator) {_        this.numberingPlanIndicator = numberingPlanIndicator__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,numbering,plan,indicator,byte,numbering,plan,indicator,this,numbering,plan,indicator,numbering,plan,indicator
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1431507831;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1457085334;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1463214394;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1465649425;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1470578961;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1470579366;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1540108161;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1540108700;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void setReconnectDelay(long reconnectDelay);1550436745;Defines the interval in milliseconds between the reconnect attempts, if the connection to the SMSC was lost and the previous was not succeed.;public void setReconnectDelay(long reconnectDelay) {_        this.reconnectDelay = reconnectDelay__    };defines,the,interval,in,milliseconds,between,the,reconnect,attempts,if,the,connection,to,the,smsc,was,lost,and,the,previous,was,not,succeed;public,void,set,reconnect,delay,long,reconnect,delay,this,reconnect,delay,reconnect,delay
SmppConfiguration -> public void configureFromURI(URI uri);1260263234;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port
SmppConfiguration -> public void configureFromURI(URI uri);1273024980;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1276431904;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1276465706;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1283287539;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1297402135;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1297975937;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1303422898;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1305183367;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1308432267;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1317851746;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1330408133;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1338755308;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1342647791;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1350656978;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1405374721;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1417631679;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1420192440;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1425146605;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1427880501;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1431507831;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1457085334;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1463214394;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1465649425;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1470578961;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1470579366;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1540108161;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1540108700;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        setSystemId(uri.getUserInfo())__        setHost(uri.getHost())__        setPort(uri.getPort())__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,set,system,id,uri,get,user,info,set,host,uri,get,host,set,port,uri,get,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void configureFromURI(URI uri);1550436745;A POJO which contains all necessary configuration parameters for the SMPP connection__@param uri the full URI of the endpoint;public void configureFromURI(URI uri) {_        String userInfo = uri.getUserInfo()__        if (userInfo != null) {_            setSystemId(uri.getUserInfo())__        }__        String host = uri.getHost()__        if (host != null) {_            setHost(host)__        }__        int port = uri.getPort()__        if (port > 0) {_            setPort(port)__        }__        if (uri.getScheme().startsWith("smpps")) {_            setUsingSSL(true)__        }_    };a,pojo,which,contains,all,necessary,configuration,parameters,for,the,smpp,connection,param,uri,the,full,uri,of,the,endpoint;public,void,configure,from,uri,uri,uri,string,user,info,uri,get,user,info,if,user,info,null,set,system,id,uri,get,user,info,string,host,uri,get,host,if,host,null,set,host,host,int,port,uri,get,port,if,port,0,set,port,port,if,uri,get,scheme,starts,with,smpps,set,using,ssl,true
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1431507831;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1457085334;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1463214394;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1465649425;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1470578961;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1470579366;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1540108161;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1540108700;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setTransactionTimer(Integer transactionTimer);1550436745;Defines the maximum period of inactivity allowed after a transaction, after which_an SMPP entity may assume that the session is no longer active._This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME).;public void setTransactionTimer(Integer transactionTimer) {_        this.transactionTimer = transactionTimer__    };defines,the,maximum,period,of,inactivity,allowed,after,a,transaction,after,which,an,smpp,entity,may,assume,that,the,session,is,no,longer,active,this,timer,may,be,active,on,either,communicating,smpp,entity,i,e,smsc,or,esme;public,void,set,transaction,timer,integer,transaction,timer,this,transaction,timer,transaction,timer
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1431507831;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1457085334;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1463214394;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1465649425;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1470578961;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1470579366;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1540108161;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1540108700;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setSourceAddrNpi(byte sourceAddrNpi);1550436745;Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setSourceAddrNpi(byte sourceAddrNpi) {_        this.sourceAddrNpi = sourceAddrNpi__    };defines,the,numeric,plan,indicator,npi,to,be,used,in,the,sme,originator,address,parameters,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,source,addr,npi,byte,source,addr,npi,this,source,addr,npi,source,addr,npi
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1431507831;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1457085334;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1463214394;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1465649425;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1470578961;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1470579366;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1540108161;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1540108700;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setTypeOfNumber(byte typeOfNumber);1550436745;Defines the type of number (TON) to be used in the SME._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setTypeOfNumber(byte typeOfNumber) {_        this.typeOfNumber = typeOfNumber__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,type,of,number,byte,type,of,number,this,type,of,number,type,of,number
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1431507831;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1457085334;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1463214394;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1465649425;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1470578961;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1470579366;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1540108161;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1540108700;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setDestAddrTon(byte destAddrTon);1550436745;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setDestAddrTon(byte destAddrTon) {_        this.destAddrTon = destAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,dest,addr,ton,byte,dest,addr,ton,this,dest,addr,ton,dest,addr,ton
SmppConfiguration -> public void setAlphabet(byte alphabet);1431507831;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1457085334;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1463214394;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1465649425;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1470578961;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1470579366;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1540108161;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1540108700;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setAlphabet(byte alphabet);1550436745;Defines encoding of data according the SMPP 3.4 specification, section 5.2.19._<ul>_<li>0: SMSC Default Alphabet_<li>4: 8 bit Alphabet</li>_<li>8: UCS2 Alphabet</li></li>_</ul>;public void setAlphabet(byte alphabet) {_        this.alphabet = alphabet__    };defines,encoding,of,data,according,the,smpp,3,4,specification,section,5,2,19,ul,li,0,smsc,default,alphabet,li,4,8,bit,alphabet,li,li,8,ucs2,alphabet,li,li,ul;public,void,set,alphabet,byte,alphabet,this,alphabet,alphabet
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1431507831;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1457085334;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1463214394;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1465649425;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1470578961;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1470579366;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1540108161;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1540108700;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setSourceAddrTon(byte sourceAddrTon);1550436745;Defines the type of number (TON) to be used in the SME originator address parameters._The following TON values are defined:_<ul>_<li>0: Unknown</li>_<li>1: International</li>_<li>2: National</li>_<li>3: Network Specific</li>_<li>4: Subscriber Number</li>_<li>5: Alphanumeric</li>_<li>6: Abbreviated</li>_</ul>;public void setSourceAddrTon(byte sourceAddrTon) {_        this.sourceAddrTon = sourceAddrTon__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,originator,address,parameters,the,following,ton,values,are,defined,ul,li,0,unknown,li,li,1,international,li,li,2,national,li,li,3,network,specific,li,li,4,subscriber,number,li,li,5,alphanumeric,li,li,6,abbreviated,li,ul;public,void,set,source,addr,ton,byte,source,addr,ton,this,source,addr,ton,source,addr,ton
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1431507831;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1457085334;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1463214394;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1465649425;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1470578961;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1470579366;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1540108161;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1540108700;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setHttpProxyHost(String httpProxyHost);1550436745;If you need to tunnel SMPP through a HTTP proxy, set this attribute to the hostname or ip address of your HTTP proxy.;public void setHttpProxyHost(String httpProxyHost) {_        this.httpProxyHost = httpProxyHost__    };if,you,need,to,tunnel,smpp,through,a,http,proxy,set,this,attribute,to,the,hostname,or,ip,address,of,your,http,proxy;public,void,set,http,proxy,host,string,http,proxy,host,this,http,proxy,host,http,proxy,host
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1431507831;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1457085334;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1463214394;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1465649425;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1470578961;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1470579366;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1540108161;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1540108700;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setDestAddrNpi(byte destAddrNpi);1550436745;Defines the type of number (TON) to be used in the SME destination address parameters._Only for SubmitSm, SubmitMulti, CancelSm and DataSm._The following NPI values are defined:_<ul>_<li>0: Unknown</li>_<li>1: ISDN (E163/E164)</li>_<li>2: Data (X.121)</li>_<li>3: Telex (F.69)</li>_<li>6: Land Mobile (E.212)</li>_<li>8: National</li>_<li>9: Private</li>_<li>10: ERMES</li>_<li>13: Internet (IP)</li>_<li>18: WAP Client Id (to be defined by WAP Forum)</li>_</ul>;public void setDestAddrNpi(byte destAddrNpi) {_        this.destAddrNpi = destAddrNpi__    };defines,the,type,of,number,ton,to,be,used,in,the,sme,destination,address,parameters,only,for,submit,sm,submit,multi,cancel,sm,and,data,sm,the,following,npi,values,are,defined,ul,li,0,unknown,li,li,1,isdn,e163,e164,li,li,2,data,x,121,li,li,3,telex,f,69,li,li,6,land,mobile,e,212,li,li,8,national,li,li,9,private,li,li,10,ermes,li,li,13,internet,ip,li,li,18,wap,client,id,to,be,defined,by,wap,forum,li,ul;public,void,set,dest,addr,npi,byte,dest,addr,npi,this,dest,addr,npi,dest,addr,npi
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1431507831;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1457085334;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1463214394;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1465649425;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1470578961;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1470579366;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1540108161;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1540108700;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setUsingSSL(boolean usingSSL);1550436745;Whether using SSL with the smpps protocol;public void setUsingSSL(boolean usingSSL) {_        this.usingSSL = usingSSL__    };whether,using,ssl,with,the,smpps,protocol;public,void,set,using,ssl,boolean,using,ssl,this,using,ssl,using,ssl
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1431507831;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1457085334;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1463214394;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1465649425;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1470578961;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1470579366;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1540108161;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1540108700;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHttpProxyUsername(String httpProxyUsername);1550436745;If your HTTP proxy requires basic authentication, set this attribute to the username required for your HTTP proxy.;public void setHttpProxyUsername(String httpProxyUsername) {_        this.httpProxyUsername = httpProxyUsername__    };if,your,http,proxy,requires,basic,authentication,set,this,attribute,to,the,username,required,for,your,http,proxy;public,void,set,http,proxy,username,string,http,proxy,username,this,http,proxy,username,http,proxy,username
SmppConfiguration -> public void setHost(String host);1431507831;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1457085334;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1463214394;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1465649425;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1470578961;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1470579366;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1540108161;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1540108700;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
SmppConfiguration -> public void setHost(String host);1550436745;Hostname for the SMSC server to use.;public void setHost(String host) {_        this.host = host__    };hostname,for,the,smsc,server,to,use;public,void,set,host,string,host,this,host,host
