commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public SmppMessage newInstance() {     SmppMessage answer = new SmppMessage(getCamelContext(), null, this.configuration).     return answer. }
false;public;0;3;;public boolean isAlertNotification() {     return command instanceof AlertNotification. }
false;public;0;3;;public boolean isDataSm() {     return command instanceof DataSm. }
false;public;0;3;;public boolean isDeliverSm() {     return command instanceof DeliverSm && !((DeliverSm) command).isSmscDeliveryReceipt(). }
false;public;0;3;;public boolean isDeliveryReceipt() {     return command instanceof DeliverSm && ((DeliverSm) command).isSmscDeliveryReceipt(). }
false;protected;0;27;;@Override protected Object createBody() {     if (command instanceof MessageRequest) {         MessageRequest msgRequest = (MessageRequest) command.         byte[] shortMessage = msgRequest.getShortMessage().         if (shortMessage == null || shortMessage.length == 0) {             return null.         }         Alphabet alphabet = Alphabet.parseDataCoding(msgRequest.getDataCoding()).         if (SmppUtils.is8Bit(alphabet)) {             return shortMessage.         }         String encoding = ExchangeHelper.getCharsetName(getExchange(), false).         if (ObjectHelper.isEmpty(encoding) || !Charset.isSupported(encoding)) {             encoding = configuration.getEncoding().         }         try {             return new String(shortMessage, encoding).         } catch (UnsupportedEncodingException e) {             LOG.info("Unsupported encoding \"{}\". Using system default encoding.", encoding).         }         return new String(shortMessage).     }     return null. }
false;public;0;8;;@Override public String toString() {     if (command != null) {         return "SmppMessage: " + command.     } else {         return "SmppMessage: " + getBody().     } }
true;public;0;3;/**  * Returns the underlying jSMPP command  *  * @return command  */ ;/**  * Returns the underlying jSMPP command  *  * @return command  */ public Command getCommand() {     return command. }
