commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static String formatTime(Date date) {     return TIME_FORMATTER.format(date). }
true;public,static;1;16;/**  * YYMMDDhhmmSS where:  * <ul>  * <li>YY = last two digits of the year (00-99)</li>  * <li>MM = month (01-12)</li>  * <li>DD = day (01-31)</li>  * <li>hh = hour (00-23)</li>  * <li>mm = minute (00-59)</li>  * <li>SS = second (00-59)</li>  * </ul>  *  * Java format is (yyMMddHHmmSS).  *  * @param date in <tt>String</tt> format.  * @return the date  * @throws NumberFormatException if there is contains non number on  *         <code>date</code> parameter.  * @throws IndexOutOfBoundsException if the date length in <tt>String</tt>  *         format is less than 10.  */ ;/**  * YYMMDDhhmmSS where:  * <ul>  * <li>YY = last two digits of the year (00-99)</li>  * <li>MM = month (01-12)</li>  * <li>DD = day (01-31)</li>  * <li>hh = hour (00-23)</li>  * <li>mm = minute (00-59)</li>  * <li>SS = second (00-59)</li>  * </ul>  *  * Java format is (yyMMddHHmmSS).  *  * @param date in <tt>String</tt> format.  * @return the date  * @throws NumberFormatException if there is contains non number on  *         <code>date</code> parameter.  * @throws IndexOutOfBoundsException if the date length in <tt>String</tt>  *         format is less than 10.  */ public static Date string2Date(String date) {     if (date == null) {         return null.     }     int year = Integer.parseInt(date.substring(0, 2)).     int month = Integer.parseInt(date.substring(2, 4)).     int day = Integer.parseInt(date.substring(4, 6)).     int hour = Integer.parseInt(date.substring(6, 8)).     int minute = Integer.parseInt(date.substring(8, 10)).     int second = Integer.parseInt(date.substring(10, 12)).     Calendar cal = Calendar.getInstance().     cal.set(convertTwoDigitYear(year), month - 1, day, hour, minute, second).     cal.set(Calendar.MILLISECOND, 0).     return cal.getTime(). }
false;private,static;1;10;;private static int convertTwoDigitYear(int year) {     if (year >= 0 && year <= 37) {         return 2000 + year.     } else if (year >= 38 && year <= 99) {         return 1900 + year.     } else {         // should never happen         return year.     } }
false;public,static;1;3;;public static boolean is8Bit(Alphabet alphabet) {     return alphabet == Alphabet.ALPHA_UNSPECIFIED_2 || alphabet == Alphabet.ALPHA_8_BIT. }
true;public,static;1;17;/**  * Decides if the characters in the argument are GSM 3.38 encodeable.  * @param aMessage must be a set of characters encoded in ISO-8859-1  *                 or a compatible character set.  In particular,  *                 UTF-8 encoded text should not be passed to this method.  * @return true if the characters can be represented in GSM 3.38  */ ;/**  * Decides if the characters in the argument are GSM 3.38 encodeable.  * @param aMessage must be a set of characters encoded in ISO-8859-1  *                 or a compatible character set.  In particular,  *                 UTF-8 encoded text should not be passed to this method.  * @return true if the characters can be represented in GSM 3.38  */ public static boolean isGsm0338Encodeable(byte[] aMessage) {     outer: for (int i = 0. i < aMessage.length. i++) {         for (int j = 0. j < ISO_GSM_0338.length. j++) {             if (ISO_GSM_0338[j] == aMessage[i]) {                 continue outer.             }         }         for (int j = 0. j < ISO_GSM_0338_EXT.length. j++) {             if (ISO_GSM_0338_EXT[j][1] == aMessage[i]) {                 continue outer.             }         }         return false.     }     return true. }
false;public,static;1;65;;public static SubmitSm copySubmitSm(SubmitSm src) {     SubmitSm dest = new SubmitSm().     dest.setCommandId(src.getCommandId()).     dest.setCommandLength(src.getCommandLength()).     dest.setCommandStatus(src.getCommandStatus()).     dest.setDataCoding(src.getDataCoding()).     dest.setDestAddress(src.getDestAddress()).     dest.setDestAddrNpi(src.getDestAddrNpi()).     dest.setDestAddrTon(src.getDestAddrTon()).     dest.setEsmClass(src.getEsmClass()).     dest.setOptionalParameters(src.getOptionalParameters()).     dest.setPriorityFlag(src.getPriorityFlag()).     dest.setProtocolId(src.getProtocolId()).     dest.setRegisteredDelivery(src.getRegisteredDelivery()).     dest.setReplaceIfPresent(src.getReplaceIfPresent()).     dest.setScheduleDeliveryTime(src.getScheduleDeliveryTime()).     dest.setSequenceNumber(src.getSequenceNumber()).     dest.setServiceType(src.getServiceType()).     dest.setShortMessage(src.getShortMessage()).     dest.setSmDefaultMsgId(src.getSmDefaultMsgId()).     dest.setSourceAddr(src.getSourceAddr()).     dest.setSourceAddrNpi(src.getSourceAddrNpi()).     dest.setSourceAddrTon(src.getSourceAddrTon()).     dest.setValidityPeriod(src.getValidityPeriod()).     if (src.isDatagramMode()) {         dest.setDatagramMode().     }     if (src.isDefaultMessageType()) {         dest.setDefaultMessageType().     }     if (src.isDefaultMode()) {         dest.setDefaultMode().     }     if (src.isEsmeDeliveryAcknowledgement()) {         dest.setEsmeDelivertAcknowledgement().     }     if (src.isEsmeManualAcknowledgement()) {         dest.setEsmeManualAcknowledgement().     }     if (src.isForwardMode()) {         dest.setForwardMode().     }     if (src.isReplyPath()) {         dest.setReplyPath().     }     if (src.isSmscDelReceiptFailureRequested()) {         dest.setSmscDelReceiptFailureRequested().     }     if (src.isSmscDelReceiptNotRequested()) {         dest.setSmscDelReceiptNotRequested().     }     if (src.isSmscDelReceiptSuccessAndFailureRequested()) {         dest.setSmscDelReceiptSuccessAndFailureRequested().     }     if (src.isStoreAndForwardMode()) {         dest.setStoreAndForwardMode().     }     if (src.isUdhi()) {         dest.setUdhi().     }     if (src.isUdhiAndReplyPath()) {         dest.setUdhiAndReplyPath().     }     return dest. }
false;public,static;1;24;;public static SubmitMulti copySubmitMulti(SubmitMulti src) {     SubmitMulti dest = new SubmitMulti().     dest.setCommandId(src.getCommandId()).     dest.setCommandLength(src.getCommandLength()).     dest.setCommandStatus(src.getCommandStatus()).     dest.setDataCoding(src.getDataCoding()).     dest.setDestAddresses(src.getDestAddresses()).     dest.setEsmClass(src.getEsmClass()).     dest.setOptionalParameters(src.getOptionalParameters()).     dest.setPriorityFlag(src.getPriorityFlag()).     dest.setProtocolId(src.getProtocolId()).     dest.setRegisteredDelivery(src.getRegisteredDelivery()).     dest.setReplaceIfPresentFlag(src.getReplaceIfPresentFlag()).     dest.setScheduleDeliveryTime(src.getScheduleDeliveryTime()).     dest.setSequenceNumber(src.getSequenceNumber()).     dest.setServiceType(src.getServiceType()).     dest.setShortMessage(src.getShortMessage()).     dest.setSmDefaultMsgId(src.getSmDefaultMsgId()).     dest.setSourceAddr(src.getSourceAddr()).     dest.setSourceAddrNpi(src.getSourceAddrNpi()).     dest.setSourceAddrTon(src.getSourceAddrTon()).     dest.setValidityPeriod(src.getValidityPeriod()).     return dest. }
false;public,static;1;31;;public static DataSm copyDataSm(DataSm src) {     DataSm dest = new DataSm().     dest.setCommandId(src.getCommandId()).     dest.setCommandLength(src.getCommandLength()).     dest.setCommandStatus(src.getCommandStatus()).     dest.setDataCoding(src.getDataCoding()).     dest.setDestAddress(src.getDestAddress()).     dest.setDestAddrNpi(src.getDestAddrNpi()).     dest.setDestAddrTon(src.getDestAddrTon()).     dest.setEsmClass(src.getEsmClass()).     dest.setOptionalParameters(src.getOptionalParameters()).     dest.setRegisteredDelivery(src.getRegisteredDelivery()).     dest.setSequenceNumber(src.getSequenceNumber()).     dest.setServiceType(src.getServiceType()).     dest.setSourceAddr(src.getSourceAddr()).     dest.setSourceAddrNpi(src.getSourceAddrNpi()).     dest.setSourceAddrTon(src.getSourceAddrTon()).     if (src.isDefaultMessageType()) {         dest.setDefaultMessageType().     }     if (src.isReplyPath()) {         dest.setReplyPath().     }     if (src.isUdhi()) {         dest.setUdhi().     }     if (src.isUdhiAndReplyPath()) {         dest.setUdhiAndReplyPath().     }     return dest. }
