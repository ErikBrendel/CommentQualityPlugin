commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static SmppConnectionFactory getInstance(SmppConfiguration config) {     return new SmppConnectionFactory(config). }
false;public;2;31;;public Connection createConnection(String host, int port) throws IOException {     try {         Socket socket.         SocketFactory socketFactory.         socketFactory = config.getUsingSSL() && config.getHttpProxyHost() == null ? SSLSocketFactory.getDefault() : SocketFactory.getDefault().         if (config.getHttpProxyHost() != null) {             // setup the proxy tunnel             socket = socketFactory.createSocket().             // jsmpp uses enquire link timer as socket read timeout, so also use it to establish the initial connection             socket.connect(new InetSocketAddress(config.getHttpProxyHost(), config.getHttpProxyPort()), config.getEnquireLinkTimer()).             connectProxy(host, port, socket).         } else {             socket = socketFactory.createSocket().             // jsmpp uses enquire link timer as socket read timeout, so also use it to establish the initial connection             socket.connect(new InetSocketAddress(host, port), config.getEnquireLinkTimer()).         }         if (config.getUsingSSL() && config.getHttpProxyHost() != null) {             // Init the SSL socket which is based on the proxy socket             SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault().             SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(socket, host, port, true).             sslSocket.startHandshake().             socket = sslSocket.         }         return new SocketConnection(socket).     } catch (Exception e) {         throw new IOException(e.getMessage(), e).     } }
false;private;3;67;;private void connectProxy(String host, int port, Socket socket) throws IOException {     try {         OutputStream out = socket.getOutputStream().         InputStream in = socket.getInputStream().         String connectString = "CONNECT " + host + ":" + port + " HTTP/1.0\r\n".         out.write(connectString.getBytes()).         String username = config.getHttpProxyUsername().         String password = config.getHttpProxyPassword().         if (username != null && password != null) {             String usernamePassword = username + ":" + password.             byte[] code = Base64.encodeBase64(usernamePassword.getBytes()).             out.write("Proxy-Authorization: Basic ".getBytes()).             out.write(code).             out.write("\r\n".getBytes()).         }         Map<String, String> proxyHeaders = config.getProxyHeaders().         if (proxyHeaders != null) {             for (Map.Entry<String, String> entry : proxyHeaders.entrySet()) {                 out.write((entry.getKey() + ": " + entry.getValue()).getBytes()).                 out.write("\r\n".getBytes()).             }         }         out.write("\r\n".getBytes()).         out.flush().         int ch = 0.         BufferedReader reader = IOHelper.buffered(new InputStreamReader(in)).         String response = reader.readLine().         if (response == null) {             throw new RuntimeCamelException("Empty response to CONNECT request to host " + host + ":" + port).         }         String reason = "Unknown reason".         int code = -1.         try {             ch = response.indexOf(' ').             int bar = response.indexOf(' ', ch + 1).             code = Integer.parseInt(response.substring(ch + 1, bar)).             reason = response.substring(bar + 1).         } catch (NumberFormatException e) {             throw new RuntimeCamelException("Invalid response to CONNECT request to host " + host + ":" + port + " - cannot parse code from response string: " + response).         }         if (code != 200) {             throw new RuntimeCamelException("Proxy error: " + reason).         }         // read until empty line         for (. response.length() > 0. ) {             response = reader.readLine().             if (response == null) {                 throw new RuntimeCamelException("Proxy error: reached end of stream").             }         }     } catch (RuntimeException re) {         closeSocket(socket).         throw re.     } catch (Exception e) {         closeSocket(socket).         throw new RuntimeException("SmppConnectionFactory: " + e.getMessage(), e).     } }
false;private,static;1;9;;private static void closeSocket(Socket s) {     if (s != null) {         try {             s.close().         } catch (IOException e) {         // ignore         }     } }
