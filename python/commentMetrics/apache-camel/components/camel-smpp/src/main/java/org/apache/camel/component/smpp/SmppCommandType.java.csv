commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public SmppSubmitSmCommand createCommand(SMPPSession session, SmppConfiguration config) {     return new SmppSubmitSmCommand(session, config). }
false;public;2;4;;@Override public SmppReplaceSmCommand createCommand(SMPPSession session, SmppConfiguration config) {     return new SmppReplaceSmCommand(session, config). }
false;public;2;4;;@Override public SmppQuerySmCommand createCommand(SMPPSession session, SmppConfiguration config) {     return new SmppQuerySmCommand(session, config). }
false;public;2;4;;@Override public SmppSubmitMultiCommand createCommand(SMPPSession session, SmppConfiguration config) {     return new SmppSubmitMultiCommand(session, config). }
false;public;2;4;;@Override public SmppCancelSmCommand createCommand(SMPPSession session, SmppConfiguration config) {     return new SmppCancelSmCommand(session, config). }
false;public;2;4;;@Override public SmppDataSmCommand createCommand(SMPPSession session, SmppConfiguration config) {     return new SmppDataSmCommand(session, config). }
false;public;0;3;;public String getCommandName() {     return commandName. }
false;public,abstract;2;1;;public abstract SmppCommand createCommand(SMPPSession session, SmppConfiguration config).
true;public,static;1;18;/**  * Tries to return an instance of {@link SmppCommandType} using  * {@link SmppConstants#COMMAND} header of the incoming message.  * <p/>  * Returns {@link #SUBMIT_SM} if there is no {@link SmppConstants#COMMAND}  * header in the incoming message or value of such a header cannot be  * recognized.  * <p/>  * The valid values for the {@link SmppConstants#COMMAND} header are: <span  * style="font: bold.">SubmitSm</span> <span  * style="font: bold.">ReplaceSm</span>, <span  * style="font: bold.">QuerySm</span>, <span  * style="font: bold.">SubmitMulti</span>, <span  * style="font: bold.">CancelSm</span>, <span  * style="font: bold.">DataSm</span>.  *  * @param exchange  *            an exchange to get an incoming message from  * @return an instance of {@link SmppCommandType}  */ ;/**  * Tries to return an instance of {@link SmppCommandType} using  * {@link SmppConstants#COMMAND} header of the incoming message.  * <p/>  * Returns {@link #SUBMIT_SM} if there is no {@link SmppConstants#COMMAND}  * header in the incoming message or value of such a header cannot be  * recognized.  * <p/>  * The valid values for the {@link SmppConstants#COMMAND} header are: <span  * style="font: bold.">SubmitSm</span> <span  * style="font: bold.">ReplaceSm</span>, <span  * style="font: bold.">QuerySm</span>, <span  * style="font: bold.">SubmitMulti</span>, <span  * style="font: bold.">CancelSm</span>, <span  * style="font: bold.">DataSm</span>.  *  * @param exchange  *            an exchange to get an incoming message from  * @return an instance of {@link SmppCommandType}  */ public static SmppCommandType fromExchange(Exchange exchange) {     Message in = exchange.getIn().     String commandName = null.     if (in.getHeaders().containsKey(SmppConstants.COMMAND)) {         commandName = in.getHeader(SmppConstants.COMMAND, String.class).     }     SmppCommandType commandType = SUBMIT_SM.     for (SmppCommandType nextCommandType : values()) {         if (nextCommandType.commandName.equals(commandName)) {             commandType = nextCommandType.             break.         }     }     return commandType. }
