# id;timestamp;commentText;codeText;commentWords;codeWords
SmppCommandType -> public static SmppCommandType fromExchange(Exchange exchange);1317851746;Tries to return an instance of {@link SmppCommandType} using_{@link SmppConstants#COMMAND} header of the incoming message._<p/>_Returns {@link #SUBMIT_SM} if threre is no {@link SmppConstants#COMMAND}_header in the incoming message or value of such a header cannot be_recognized._<p/>_The valid values for the {@link SmppConstants#COMMAND} header are: <span_style="font: bold_">SubmitSm</span> <span_style="font: bold_">ReplaceSm</span>, <span_style="font: bold_">QuerySm</span>, <span_style="font: bold_">SubmitMulti</span>, <span_style="font: bold_">CancelSm</span>, <span_style="font: bold_">DataSm</span>.__@param exchange_an exchange to get an incoming message from_@return an instalce of {@link SmppCommandType};public static SmppCommandType fromExchange(Exchange exchange) {_        Message in = exchange.getIn()___        String commandName = null__        if (in.getHeaders().containsKey(SmppConstants.COMMAND)) {_            commandName = in.getHeader(SmppConstants.COMMAND, String.class)__        }__        SmppCommandType commandType = SUBMIT_SM__        for (SmppCommandType nextCommandType : values()) {_            if (nextCommandType.commandName.equals(commandName)) {_                commandType = nextCommandType__                break__            }_        }__        return commandType__    };tries,to,return,an,instance,of,link,smpp,command,type,using,link,smpp,constants,command,header,of,the,incoming,message,p,returns,link,if,threre,is,no,link,smpp,constants,command,header,in,the,incoming,message,or,value,of,such,a,header,cannot,be,recognized,p,the,valid,values,for,the,link,smpp,constants,command,header,are,span,style,font,bold,submit,sm,span,span,style,font,bold,replace,sm,span,span,style,font,bold,query,sm,span,span,style,font,bold,submit,multi,span,span,style,font,bold,cancel,sm,span,span,style,font,bold,data,sm,span,param,exchange,an,exchange,to,get,an,incoming,message,from,return,an,instalce,of,link,smpp,command,type;public,static,smpp,command,type,from,exchange,exchange,exchange,message,in,exchange,get,in,string,command,name,null,if,in,get,headers,contains,key,smpp,constants,command,command,name,in,get,header,smpp,constants,command,string,class,smpp,command,type,command,type,for,smpp,command,type,next,command,type,values,if,next,command,type,command,name,equals,command,name,command,type,next,command,type,break,return,command,type
SmppCommandType -> public static SmppCommandType fromExchange(Exchange exchange);1349714461;Tries to return an instance of {@link SmppCommandType} using_{@link SmppConstants#COMMAND} header of the incoming message._<p/>_Returns {@link #SUBMIT_SM} if there is no {@link SmppConstants#COMMAND}_header in the incoming message or value of such a header cannot be_recognized._<p/>_The valid values for the {@link SmppConstants#COMMAND} header are: <span_style="font: bold_">SubmitSm</span> <span_style="font: bold_">ReplaceSm</span>, <span_style="font: bold_">QuerySm</span>, <span_style="font: bold_">SubmitMulti</span>, <span_style="font: bold_">CancelSm</span>, <span_style="font: bold_">DataSm</span>.__@param exchange_an exchange to get an incoming message from_@return an instance of {@link SmppCommandType};public static SmppCommandType fromExchange(Exchange exchange) {_        Message in = exchange.getIn()___        String commandName = null__        if (in.getHeaders().containsKey(SmppConstants.COMMAND)) {_            commandName = in.getHeader(SmppConstants.COMMAND, String.class)__        }__        SmppCommandType commandType = SUBMIT_SM__        for (SmppCommandType nextCommandType : values()) {_            if (nextCommandType.commandName.equals(commandName)) {_                commandType = nextCommandType__                break__            }_        }__        return commandType__    };tries,to,return,an,instance,of,link,smpp,command,type,using,link,smpp,constants,command,header,of,the,incoming,message,p,returns,link,if,there,is,no,link,smpp,constants,command,header,in,the,incoming,message,or,value,of,such,a,header,cannot,be,recognized,p,the,valid,values,for,the,link,smpp,constants,command,header,are,span,style,font,bold,submit,sm,span,span,style,font,bold,replace,sm,span,span,style,font,bold,query,sm,span,span,style,font,bold,submit,multi,span,span,style,font,bold,cancel,sm,span,span,style,font,bold,data,sm,span,param,exchange,an,exchange,to,get,an,incoming,message,from,return,an,instance,of,link,smpp,command,type;public,static,smpp,command,type,from,exchange,exchange,exchange,message,in,exchange,get,in,string,command,name,null,if,in,get,headers,contains,key,smpp,constants,command,command,name,in,get,header,smpp,constants,command,string,class,smpp,command,type,command,type,for,smpp,command,type,next,command,type,values,if,next,command,type,command,name,equals,command,name,command,type,next,command,type,break,return,command,type
SmppCommandType -> public static SmppCommandType fromExchange(Exchange exchange);1461921869;Tries to return an instance of {@link SmppCommandType} using_{@link SmppConstants#COMMAND} header of the incoming message._<p/>_Returns {@link #SUBMIT_SM} if there is no {@link SmppConstants#COMMAND}_header in the incoming message or value of such a header cannot be_recognized._<p/>_The valid values for the {@link SmppConstants#COMMAND} header are: <span_style="font: bold_">SubmitSm</span> <span_style="font: bold_">ReplaceSm</span>, <span_style="font: bold_">QuerySm</span>, <span_style="font: bold_">SubmitMulti</span>, <span_style="font: bold_">CancelSm</span>, <span_style="font: bold_">DataSm</span>.__@param exchange_an exchange to get an incoming message from_@return an instance of {@link SmppCommandType};public static SmppCommandType fromExchange(Exchange exchange) {_        Message in = exchange.getIn()___        String commandName = null__        if (in.getHeaders().containsKey(SmppConstants.COMMAND)) {_            commandName = in.getHeader(SmppConstants.COMMAND, String.class)__        }__        SmppCommandType commandType = SUBMIT_SM__        for (SmppCommandType nextCommandType : values()) {_            if (nextCommandType.commandName.equals(commandName)) {_                commandType = nextCommandType__                break__            }_        }__        return commandType__    };tries,to,return,an,instance,of,link,smpp,command,type,using,link,smpp,constants,command,header,of,the,incoming,message,p,returns,link,if,there,is,no,link,smpp,constants,command,header,in,the,incoming,message,or,value,of,such,a,header,cannot,be,recognized,p,the,valid,values,for,the,link,smpp,constants,command,header,are,span,style,font,bold,submit,sm,span,span,style,font,bold,replace,sm,span,span,style,font,bold,query,sm,span,span,style,font,bold,submit,multi,span,span,style,font,bold,cancel,sm,span,span,style,font,bold,data,sm,span,param,exchange,an,exchange,to,get,an,incoming,message,from,return,an,instance,of,link,smpp,command,type;public,static,smpp,command,type,from,exchange,exchange,exchange,message,in,exchange,get,in,string,command,name,null,if,in,get,headers,contains,key,smpp,constants,command,command,name,in,get,header,smpp,constants,command,string,class,smpp,command,type,command,type,for,smpp,command,type,next,command,type,values,if,next,command,type,command,name,equals,command,name,command,type,next,command,type,break,return,command,type
