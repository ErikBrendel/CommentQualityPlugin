commented;modifiers;parameterAmount;loc;comment;code
true;public;2;6;/**  * Create the SmppCommand object from the inbound exchange  *  * @throws UnsupportedEncodingException if the encoding is not supported  */ ;/**  * Create the SmppCommand object from the inbound exchange  *  * @throws UnsupportedEncodingException if the encoding is not supported  */ public SmppCommand createSmppCommand(SMPPSession session, Exchange exchange) {     SmppCommandType commandType = SmppCommandType.fromExchange(exchange).     SmppCommand command = commandType.createCommand(session, configuration).     return command. }
true;public;2;16;/**  * Create a new SmppMessage from the inbound alert notification  */ ;/**  * Create a new SmppMessage from the inbound alert notification  */ public SmppMessage createSmppMessage(CamelContext camelContext, AlertNotification alertNotification) {     SmppMessage smppMessage = new SmppMessage(camelContext, alertNotification, configuration).     smppMessage.setHeader(SmppConstants.MESSAGE_TYPE, SmppMessageType.AlertNotification.toString()).     smppMessage.setHeader(SmppConstants.SEQUENCE_NUMBER, alertNotification.getSequenceNumber()).     smppMessage.setHeader(SmppConstants.COMMAND_ID, alertNotification.getCommandId()).     smppMessage.setHeader(SmppConstants.COMMAND_STATUS, alertNotification.getCommandStatus()).     smppMessage.setHeader(SmppConstants.SOURCE_ADDR, alertNotification.getSourceAddr()).     smppMessage.setHeader(SmppConstants.SOURCE_ADDR_NPI, alertNotification.getSourceAddrNpi()).     smppMessage.setHeader(SmppConstants.SOURCE_ADDR_TON, alertNotification.getSourceAddrTon()).     smppMessage.setHeader(SmppConstants.ESME_ADDR, alertNotification.getEsmeAddr()).     smppMessage.setHeader(SmppConstants.ESME_ADDR_NPI, alertNotification.getEsmeAddrNpi()).     smppMessage.setHeader(SmppConstants.ESME_ADDR_TON, alertNotification.getEsmeAddrTon()).     return smppMessage. }
true;public;2;81;/**  * Create a new SmppMessage from the inbound deliver sm or deliver receipt  */ ;/**  * Create a new SmppMessage from the inbound deliver sm or deliver receipt  */ public SmppMessage createSmppMessage(CamelContext camelContext, DeliverSm deliverSm) throws Exception {     SmppMessage smppMessage = new SmppMessage(camelContext, deliverSm, configuration).     String messagePayload = null.     if (deliverSm.getShortMessage() == null && deliverSm.getOptionalParameters() != null) {         List<OptionalParameter> oplist = Arrays.asList(deliverSm.getOptionalParameters()).         for (OptionalParameter optPara : oplist) {             if (OptionalParameter.Tag.MESSAGE_PAYLOAD.code() == optPara.tag && OctetString.class.isInstance(optPara)) {                 messagePayload = ((OctetString) optPara).getValueAsString().                 break.             }         }     }     if (deliverSm.isSmscDeliveryReceipt()) {         smppMessage.setHeader(SmppConstants.MESSAGE_TYPE, SmppMessageType.DeliveryReceipt.toString()).         DeliveryReceipt smscDeliveryReceipt = null.         if (deliverSm.getShortMessage() != null) {             smscDeliveryReceipt = deliverSm.getShortMessageAsDeliveryReceipt().         } else if (messagePayload != null) {             smscDeliveryReceipt = DefaultDecomposer.getInstance().deliveryReceipt(messagePayload).         }         if (smscDeliveryReceipt != null) {             smppMessage.setBody(smscDeliveryReceipt.getText()).             smppMessage.setHeader(SmppConstants.ID, smscDeliveryReceipt.getId()).             smppMessage.setHeader(SmppConstants.DELIVERED, smscDeliveryReceipt.getDelivered()).             smppMessage.setHeader(SmppConstants.DONE_DATE, smscDeliveryReceipt.getDoneDate()).             if (!"000".equals(smscDeliveryReceipt.getError())) {                 smppMessage.setHeader(SmppConstants.ERROR, smscDeliveryReceipt.getError()).             }             smppMessage.setHeader(SmppConstants.SUBMIT_DATE, smscDeliveryReceipt.getSubmitDate()).             smppMessage.setHeader(SmppConstants.SUBMITTED, smscDeliveryReceipt.getSubmitted()).             smppMessage.setHeader(SmppConstants.FINAL_STATUS, smscDeliveryReceipt.getFinalStatus()).         }         if (deliverSm.getOptionalParameters() != null && deliverSm.getOptionalParameters().length > 0) {             // the deprecated way             Map<String, Object> optionalParameters = createOptionalParameterByName(deliverSm).             smppMessage.setHeader(SmppConstants.OPTIONAL_PARAMETERS, optionalParameters).             // the new way             Map<Short, Object> optionalParameter = createOptionalParameterByCode(deliverSm).             smppMessage.setHeader(SmppConstants.OPTIONAL_PARAMETER, optionalParameter).         }     } else {         smppMessage.setHeader(SmppConstants.MESSAGE_TYPE, SmppMessageType.DeliverSm.toString()).         if (deliverSm.getShortMessage() != null) {             Alphabet alphabet = Alphabet.parseDataCoding(deliverSm.getDataCoding()).             if (SmppUtils.is8Bit(alphabet)) {                 smppMessage.setBody(deliverSm.getShortMessage()).             } else {                 smppMessage.setBody(String.valueOf(new String(deliverSm.getShortMessage(), configuration.getEncoding()))).             }         } else if (messagePayload != null) {             smppMessage.setBody(messagePayload).         }         smppMessage.setHeader(SmppConstants.SEQUENCE_NUMBER, deliverSm.getSequenceNumber()).         smppMessage.setHeader(SmppConstants.COMMAND_ID, deliverSm.getCommandId()).         smppMessage.setHeader(SmppConstants.SOURCE_ADDR, deliverSm.getSourceAddr()).         smppMessage.setHeader(SmppConstants.SOURCE_ADDR_NPI, deliverSm.getSourceAddrNpi()).         smppMessage.setHeader(SmppConstants.SOURCE_ADDR_TON, deliverSm.getSourceAddrTon()).         smppMessage.setHeader(SmppConstants.DATA_CODING, deliverSm.getDataCoding()).         smppMessage.setHeader(SmppConstants.DEST_ADDR, deliverSm.getDestAddress()).         smppMessage.setHeader(SmppConstants.DEST_ADDR_NPI, deliverSm.getDestAddrNpi()).         smppMessage.setHeader(SmppConstants.DEST_ADDR_TON, deliverSm.getDestAddrTon()).         smppMessage.setHeader(SmppConstants.SCHEDULE_DELIVERY_TIME, deliverSm.getScheduleDeliveryTime()).         smppMessage.setHeader(SmppConstants.VALIDITY_PERIOD, deliverSm.getValidityPeriod()).         smppMessage.setHeader(SmppConstants.SERVICE_TYPE, deliverSm.getServiceType()).     }     return smppMessage. }
false;private;1;31;;private Map<String, Object> createOptionalParameterByName(DeliverSm deliverSm) {     List<OptionalParameter> oplist = Arrays.asList(deliverSm.getOptionalParameters()).     Map<String, Object> optParams = new HashMap<>().     for (OptionalParameter optPara : oplist) {         try {             Tag valueOfTag = OptionalParameter.Tag.valueOf(optPara.tag).             if (valueOfTag != null) {                 if (COctetString.class.isInstance(optPara)) {                     optParams.put(valueOfTag.toString(), ((COctetString) optPara).getValueAsString()).                 } else if (org.jsmpp.bean.OptionalParameter.OctetString.class.isInstance(optPara)) {                     optParams.put(valueOfTag.toString(), ((OctetString) optPara).getValueAsString()).                 } else if (org.jsmpp.bean.OptionalParameter.Byte.class.isInstance(optPara)) {                     optParams.put(valueOfTag.toString(), Byte.valueOf(((org.jsmpp.bean.OptionalParameter.Byte) optPara).getValue())).                 } else if (org.jsmpp.bean.OptionalParameter.Short.class.isInstance(optPara)) {                     optParams.put(valueOfTag.toString(), Short.valueOf(((org.jsmpp.bean.OptionalParameter.Short) optPara).getValue())).                 } else if (org.jsmpp.bean.OptionalParameter.Int.class.isInstance(optPara)) {                     optParams.put(valueOfTag.toString(), Integer.valueOf(((org.jsmpp.bean.OptionalParameter.Int) optPara).getValue())).                 } else if (Null.class.isInstance(optPara)) {                     optParams.put(valueOfTag.toString(), null).                 }             } else {                 LOG.debug("Skipping optional parameter with tag {} because it was not recognized", optPara.tag).             }         } catch (IllegalArgumentException e) {             LOG.debug("Skipping optional parameter with tag {} due to {}", optPara.tag, e.getMessage()).         }     }     return optParams. }
false;private;1;22;;private Map<Short, Object> createOptionalParameterByCode(DeliverSm deliverSm) {     List<OptionalParameter> oplist = Arrays.asList(deliverSm.getOptionalParameters()).     Map<Short, Object> optParams = new HashMap<>().     for (OptionalParameter optPara : oplist) {         if (COctetString.class.isInstance(optPara)) {             optParams.put(Short.valueOf(optPara.tag), ((COctetString) optPara).getValueAsString()).         } else if (org.jsmpp.bean.OptionalParameter.OctetString.class.isInstance(optPara)) {             optParams.put(Short.valueOf(optPara.tag), ((OctetString) optPara).getValue()).         } else if (org.jsmpp.bean.OptionalParameter.Byte.class.isInstance(optPara)) {             optParams.put(Short.valueOf(optPara.tag), Byte.valueOf(((org.jsmpp.bean.OptionalParameter.Byte) optPara).getValue())).         } else if (org.jsmpp.bean.OptionalParameter.Short.class.isInstance(optPara)) {             optParams.put(Short.valueOf(optPara.tag), Short.valueOf(((org.jsmpp.bean.OptionalParameter.Short) optPara).getValue())).         } else if (org.jsmpp.bean.OptionalParameter.Int.class.isInstance(optPara)) {             optParams.put(Short.valueOf(optPara.tag), Integer.valueOf(((org.jsmpp.bean.OptionalParameter.Int) optPara).getValue())).         } else if (Null.class.isInstance(optPara)) {             optParams.put(Short.valueOf(optPara.tag), null).         }     }     return optParams. }
false;public;3;20;;public SmppMessage createSmppMessage(CamelContext camelContext, DataSm dataSm, String smppMessageId) {     SmppMessage smppMessage = new SmppMessage(camelContext, dataSm, configuration).     smppMessage.setHeader(SmppConstants.MESSAGE_TYPE, SmppMessageType.DataSm.toString()).     smppMessage.setHeader(SmppConstants.ID, smppMessageId).     smppMessage.setHeader(SmppConstants.SEQUENCE_NUMBER, dataSm.getSequenceNumber()).     smppMessage.setHeader(SmppConstants.COMMAND_ID, dataSm.getCommandId()).     smppMessage.setHeader(SmppConstants.COMMAND_STATUS, dataSm.getCommandStatus()).     smppMessage.setHeader(SmppConstants.SOURCE_ADDR, dataSm.getSourceAddr()).     smppMessage.setHeader(SmppConstants.SOURCE_ADDR_NPI, dataSm.getSourceAddrNpi()).     smppMessage.setHeader(SmppConstants.SOURCE_ADDR_TON, dataSm.getSourceAddrTon()).     smppMessage.setHeader(SmppConstants.DEST_ADDR, dataSm.getDestAddress()).     smppMessage.setHeader(SmppConstants.DEST_ADDR_NPI, dataSm.getDestAddrNpi()).     smppMessage.setHeader(SmppConstants.DEST_ADDR_TON, dataSm.getDestAddrTon()).     smppMessage.setHeader(SmppConstants.SERVICE_TYPE, dataSm.getServiceType()).     smppMessage.setHeader(SmppConstants.REGISTERED_DELIVERY, dataSm.getRegisteredDelivery()).     smppMessage.setHeader(SmppConstants.DATA_CODING, dataSm.getDataCoding()).     return smppMessage. }
true;;0;3;/**  * Returns the current date. Externalized for better test support.  *  * @return the current date  */ ;/**  * Returns the current date. Externalized for better test support.  *  * @return the current date  */ Date getCurrentDate() {     return new Date(). }
true;public;0;3;/**  * Returns the smpp configuration  *  * @return the configuration  */ ;/**  * Returns the smpp configuration  *  * @return the configuration  */ public SmppConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * Set the smpp configuration.  *  * @param configuration smppConfiguration  */ ;/**  * Set the smpp configuration.  *  * @param configuration smppConfiguration  */ public void setConfiguration(SmppConfiguration configuration) {     this.configuration = configuration. }
