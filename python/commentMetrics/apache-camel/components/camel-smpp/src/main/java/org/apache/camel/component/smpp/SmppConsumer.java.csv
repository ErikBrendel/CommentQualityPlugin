commented;modifiers;parameterAmount;loc;comment;code
false;public;3;12;;@Override public void onStateChange(SessionState newState, SessionState oldState, Session source) {     if (configuration.getSessionStateListener() != null) {         configuration.getSessionStateListener().onStateChange(newState, oldState, source).     }     if (newState.equals(SessionState.CLOSED)) {         log.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString()).         closeSession().         reconnect(configuration.getInitialReconnectDelay()).     } }
false;protected;0;9;;@Override protected void doStart() throws Exception {     log.debug("Connecting to: {}...", getEndpoint().getConnectionString()).     super.doStart().     session = createSession().     log.info("Connected to: {}", getEndpoint().getConnectionString()). }
false;private;0;14;;private SMPPSession createSession() throws IOException {     SMPPSession session = createSMPPSession().     session.setEnquireLinkTimer(configuration.getEnquireLinkTimer()).     session.setTransactionTimer(configuration.getTransactionTimer()).     session.addSessionStateListener(internalSessionStateListener).     session.setMessageReceiverListener(messageReceiverListener).     session.connectAndBind(this.configuration.getHost(), this.configuration.getPort(), new BindParameter(BindType.BIND_RX, this.configuration.getSystemId(), this.configuration.getPassword(), this.configuration.getSystemType(), TypeOfNumber.UNKNOWN, NumberingPlanIndicator.UNKNOWN, configuration.getAddressRange())).     return session. }
true;;0;5;/**  * Factory method to easily instantiate a mock SMPPSession  *  * @return the SMPPSession  */ ;/**  * Factory method to easily instantiate a mock SMPPSession  *  * @return the SMPPSession  */ SMPPSession createSMPPSession() {     return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory.getInstance(configuration)). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     log.debug("Disconnecting from: {}...", getEndpoint().getConnectionString()).     super.doStop().     closeSession().     log.info("Disconnected from: {}", getEndpoint().getConnectionString()). }
false;private;0;8;;private void closeSession() {     if (session != null) {         session.removeSessionStateListener(this.internalSessionStateListener).         session.unbindAndClose().         // clear session as we closed it successfully         session = null.     } }
false;public;0;32;;public void run() {     boolean reconnected = false.     log.info("Schedule reconnect after {} millis", initialReconnectDelay).     try {         Thread.sleep(initialReconnectDelay).     } catch (InterruptedException e) {     // ignore     }     int attempt = 0.     while (!(isStopping() || isStopped()) && (session == null || session.getSessionState().equals(SessionState.CLOSED)) && attempt < configuration.getMaxReconnect()) {         try {             attempt++.             log.info("Trying to reconnect to {} - attempt #{}", getEndpoint().getConnectionString(), attempt).             session = createSession().             reconnected = true.         } catch (IOException e) {             log.warn("Failed to reconnect to {}", getEndpoint().getConnectionString()).             closeSession().             try {                 Thread.sleep(configuration.getReconnectDelay()).             } catch (InterruptedException ee) {             }         }     }     if (reconnected) {         log.info("Reconnected to {}", getEndpoint().getConnectionString()).     } }
false;private;1;48;;private void reconnect(final long initialReconnectDelay) {     if (reconnectLock.tryLock()) {         try {             Runnable r = new Runnable() {                  public void run() {                     boolean reconnected = false.                     log.info("Schedule reconnect after {} millis", initialReconnectDelay).                     try {                         Thread.sleep(initialReconnectDelay).                     } catch (InterruptedException e) {                     // ignore                     }                     int attempt = 0.                     while (!(isStopping() || isStopped()) && (session == null || session.getSessionState().equals(SessionState.CLOSED)) && attempt < configuration.getMaxReconnect()) {                         try {                             attempt++.                             log.info("Trying to reconnect to {} - attempt #{}", getEndpoint().getConnectionString(), attempt).                             session = createSession().                             reconnected = true.                         } catch (IOException e) {                             log.warn("Failed to reconnect to {}", getEndpoint().getConnectionString()).                             closeSession().                             try {                                 Thread.sleep(configuration.getReconnectDelay()).                             } catch (InterruptedException ee) {                             }                         }                     }                     if (reconnected) {                         log.info("Reconnected to {}", getEndpoint().getConnectionString()).                     }                 }             }.             Thread t = new Thread(r).             t.start().             t.join().         } catch (InterruptedException e) {         // noop         } finally {             reconnectLock.unlock().         }     } }
false;public;0;4;;@Override public String toString() {     return "SmppConsumer[" + getEndpoint().getConnectionString() + "]". }
false;public;0;4;;@Override public SmppEndpoint getEndpoint() {     return (SmppEndpoint) super.getEndpoint(). }
true;public;0;3;/**  * Returns the smpp configuration  *  * @return the configuration  */ ;/**  * Returns the smpp configuration  *  * @return the configuration  */ public SmppConfiguration getConfiguration() {     return configuration. }
