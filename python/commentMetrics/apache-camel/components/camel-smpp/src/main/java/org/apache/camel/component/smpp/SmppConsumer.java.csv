# id;timestamp;commentText;codeText;commentWords;codeWords
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1276465706;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1296546062;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1296567562;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1296841723;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1297371099;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1297633251;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1297795631;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1297975937;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1298810600;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1298918482;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Loost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession(session)__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,loost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1305183367;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received an alertNotification " + alertNotification)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a deliverSm " + deliverSm)__                }__                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Received a dataSm " + dataSm)__                }__                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,if,log,is,debug,enabled,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,if,log,is,debug,enabled,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,if,log,is,debug,enabled,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1307685726;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListener() {_            private final MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator()___            public void onAcceptAlertNotification(AlertNotification alertNotification) {_                LOG.debug("Received an alertNotification {}", alertNotification)___                try {_                    Exchange exchange = getEndpoint().createOnAcceptAlertNotificationExchange(_                            alertNotification)___                    LOG.trace("Processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("Processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public void onAcceptDeliverSm(DeliverSm deliverSm) {_                LOG.debug("Received a deliverSm {}", deliverSm)___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDeliverSmExchange(deliverSm)___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                }_            }__            public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)_                throws ProcessRequestException {_                LOG.debug("Received a dataSm {}", dataSm)___                MessageId newMessageId = messageIDGenerator.newMessageId()___                try {_                    Exchange exchange = getEndpoint().createOnAcceptDataSm(dataSm,_                            newMessageId.getValue())___                    LOG.trace("processing the new smpp exchange...")__                    getProcessor().process(exchange)__                    LOG.trace("processed the new smpp exchange")__                } catch (Exception e) {_                    getExceptionHandler().handleException(e)__                    throw new ProcessRequestException(e.getMessage(), 255, e)__                }__                return new DataSmResult(newMessageId, dataSm.getOptionalParametes())__            }_        }__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,private,final,message,idgenerator,message,idgenerator,new,random,message,idgenerator,public,void,on,accept,alert,notification,alert,notification,alert,notification,log,debug,received,an,alert,notification,alert,notification,try,exchange,exchange,get,endpoint,create,on,accept,alert,notification,exchange,alert,notification,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,void,on,accept,deliver,sm,deliver,sm,deliver,sm,log,debug,received,a,deliver,sm,deliver,sm,try,exchange,exchange,get,endpoint,create,on,accept,deliver,sm,exchange,deliver,sm,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,public,data,sm,result,on,accept,data,sm,data,sm,data,sm,session,session,throws,process,request,exception,log,debug,received,a,data,sm,data,sm,message,id,new,message,id,message,idgenerator,new,message,id,try,exchange,exchange,get,endpoint,create,on,accept,data,sm,data,sm,new,message,id,get,value,log,trace,processing,the,new,smpp,exchange,get,processor,process,exchange,log,trace,processed,the,new,smpp,exchange,catch,exception,e,get,exception,handler,handle,exception,e,throw,new,process,request,exception,e,get,message,255,e,return,new,data,sm,result,new,message,id,data,sm,get,optional,parametes
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1309101175;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1330408133;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.sessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: " + getEndpoint().getConnectionString()_                            + " - trying to reconnect...")__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,get,endpoint,get,connection,string,trying,to,reconnect,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1338755308;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1349714461;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1350656978;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1376549254;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1438341242;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            public void onStateChange(SessionState newState, SessionState oldState, Object source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,public,void,on,state,change,session,state,new,state,session,state,old,state,object,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1464422027;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1470578961;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1470579366;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1481622190;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1481793992;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    LOG.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1540108160;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    log.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1540108161;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    log.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor);1540108163;The constructor which gets a smpp endpoint, a smpp configuration and a_processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration config, Processor processor) {_        super(endpoint, processor)___        this.configuration = config__        this.internalSessionStateListener = new SessionStateListener() {_            @Override_            public void onStateChange(SessionState newState, SessionState oldState, Session source) {_                if (configuration.getSessionStateListener() != null) {_                    configuration.getSessionStateListener().onStateChange(newState, oldState, source)__                }_                _                if (newState.equals(SessionState.CLOSED)) {_                    log.warn("Lost connection to: {} - trying to reconnect...", getEndpoint().getConnectionString())__                    closeSession()__                    reconnect(configuration.getInitialReconnectDelay())__                }_            }_        }__        this.messageReceiverListener = new MessageReceiverListenerImpl(getEndpoint(), getProcessor(), getExceptionHandler())__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,config,processor,processor,super,endpoint,processor,this,configuration,config,this,internal,session,state,listener,new,session,state,listener,override,public,void,on,state,change,session,state,new,state,session,state,old,state,session,source,if,configuration,get,session,state,listener,null,configuration,get,session,state,listener,on,state,change,new,state,old,state,source,if,new,state,equals,session,state,closed,log,warn,lost,connection,to,trying,to,reconnect,get,endpoint,get,connection,string,close,session,reconnect,configuration,get,initial,reconnect,delay,this,message,receiver,listener,new,message,receiver,listener,impl,get,endpoint,get,processor,get,exception,handler
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration configuration, Processor processor);1260263234;The constructor which gets a smpp endpoint, a smpp configuration and a processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration configuration, Processor processor) {_        super(endpoint, processor)__        this.configuration = configuration__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,configuration,processor,processor,super,endpoint,processor,this,configuration,configuration
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration configuration, Processor processor);1273024980;The constructor which gets a smpp endpoint, a smpp configuration and a processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration configuration, Processor processor) {_        super(endpoint, processor)__        this.configuration = configuration__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,configuration,processor,processor,super,endpoint,processor,this,configuration,configuration
SmppConsumer -> public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration configuration, Processor processor);1276431904;The constructor which gets a smpp endpoint, a smpp configuration and a processor;public SmppConsumer(SmppEndpoint endpoint, SmppConfiguration configuration, Processor processor) {_        super(endpoint, processor)__        this.configuration = configuration__    };the,constructor,which,gets,a,smpp,endpoint,a,smpp,configuration,and,a,processor;public,smpp,consumer,smpp,endpoint,endpoint,smpp,configuration,configuration,processor,processor,super,endpoint,processor,this,configuration,configuration
SmppConsumer -> SMPPSession createSMPPSession();1260263234;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession()__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1273024980;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(new DefaultComposer())),_                new DefaultPDUReader(), SmppSSLConnectionFactory.getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1276431904;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(new DefaultComposer())),_                new DefaultPDUReader(), SmppSSLConnectionFactory.getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1276465706;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1296546062;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1296567562;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1296841723;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1297371099;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1297633251;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1297795631;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1297975937;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1298810600;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1298918482;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1305183367;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1307685726;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1309101175;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        if (configuration.getUsingSSL()) {_            return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppSSLConnectionFactory_                    .getInstance())__        } else {_            return new SMPPSession()__        }_    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,if,configuration,get,using,ssl,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,sslconnection,factory,get,instance,else,return,new,smppsession
SmppConsumer -> SMPPSession createSMPPSession();1330408133;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1338755308;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1349714461;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1350656978;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1376549254;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1438341242;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1464422027;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1470578961;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1470579366;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1481622190;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1481793992;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1540108160;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1540108161;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> SMPPSession createSMPPSession();1540108163;Factory method to easily instantiate a mock SMPPSession__@return the SMPPSession;SMPPSession createSMPPSession() {_        return new SMPPSession(new SynchronizedPDUSender(new DefaultPDUSender(_                    new DefaultComposer())), new DefaultPDUReader(), SmppConnectionFactory_                    .getInstance(configuration))__    };factory,method,to,easily,instantiate,a,mock,smppsession,return,the,smppsession;smppsession,create,smppsession,return,new,smppsession,new,synchronized,pdusender,new,default,pdusender,new,default,composer,new,default,pdureader,smpp,connection,factory,get,instance,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1260263234;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1273024980;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1276431904;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1276465706;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1296546062;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1296567562;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1296841723;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1297371099;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1297633251;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1297795631;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1297975937;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1298810600;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1298918482;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1305183367;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1307685726;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1309101175;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1330408133;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1338755308;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1349714461;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1350656978;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1376549254;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1438341242;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1464422027;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1470578961;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1470579366;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1481622190;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1481793992;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1540108160;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1540108161;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
SmppConsumer -> public SmppConfiguration getConfiguration();1540108163;Returns the smpp configuration__@return the configuration;public SmppConfiguration getConfiguration() {_        return configuration__    };returns,the,smpp,configuration,return,the,configuration;public,smpp,configuration,get,configuration,return,configuration
