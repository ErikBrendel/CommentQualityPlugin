# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSmppCommand -> @Deprecated     @SuppressWarnings({ "rawtypes", "unchecked" })     protected List<OptionalParameter> createOptionalParametersByName(Map<String, String> optinalParamaters);1464422027;@deprecated will be removed in Camel 2.13.0/3.0.0 - use createOptionalParametersByCode instead_@param optinalParamaters_@return;@Deprecated_    @SuppressWarnings({ "rawtypes", "unchecked" })_    protected List<OptionalParameter> createOptionalParametersByName(Map<String, String> optinalParamaters) {_        List<OptionalParameter> optParams = new ArrayList<OptionalParameter>()___        for (Entry<String, String> entry : optinalParamaters.entrySet()) {_            OptionalParameter optParam = null___            String value = entry.getValue()__            try {_                Tag tag = Tag.valueOf(entry.getKey())__                Class type = determineTypeClass(tag)___                Set<Class> ancestorClasses = new HashSet<Class>(2)__                Class superclass = type.getSuperclass()__                ancestorClasses.add(superclass)__                if (superclass != Object.class) {_                    ancestorClasses.add(superclass.getSuperclass())__                }_                if (ancestorClasses.contains(OctetString.class)) {_                    optParam = (OptionalParameter) type.getConstructor(byte[].class).newInstance(value.getBytes())__                } else if (ancestorClasses.contains(OptionalParameter.Byte.class)) {_                    Byte byteValue = (value == null) ? 0 : Byte.valueOf(value)_ _                    optParam = (OptionalParameter) type.getConstructor(byte.class).newInstance(byteValue)__                } else if (ancestorClasses.contains(OptionalParameter.Int.class)) {_                    Integer intValue = (value == null) ? 0 : Integer.valueOf(value)_ _                    optParam = (OptionalParameter) type.getConstructor(int.class).newInstance(intValue)__                } else if (ancestorClasses.contains(OptionalParameter.Short.class)) {_                    Short shortValue = (value == null) ? 0 : Short.valueOf(value)_ _                    optParam = (OptionalParameter) type.getConstructor(short.class).newInstance(shortValue)__                }__                optParams.add(optParam)__            } catch (Exception e) {_                log.info("Couldn't determine optional parameter for key {} and value {}. Skip this one.", entry.getKey(), value)__            }_        }__        return optParams__    };deprecated,will,be,removed,in,camel,2,13,0,3,0,0,use,create,optional,parameters,by,code,instead,param,optinal,paramaters,return;deprecated,suppress,warnings,rawtypes,unchecked,protected,list,optional,parameter,create,optional,parameters,by,name,map,string,string,optinal,paramaters,list,optional,parameter,opt,params,new,array,list,optional,parameter,for,entry,string,string,entry,optinal,paramaters,entry,set,optional,parameter,opt,param,null,string,value,entry,get,value,try,tag,tag,tag,value,of,entry,get,key,class,type,determine,type,class,tag,set,class,ancestor,classes,new,hash,set,class,2,class,superclass,type,get,superclass,ancestor,classes,add,superclass,if,superclass,object,class,ancestor,classes,add,superclass,get,superclass,if,ancestor,classes,contains,octet,string,class,opt,param,optional,parameter,type,get,constructor,byte,class,new,instance,value,get,bytes,else,if,ancestor,classes,contains,optional,parameter,byte,class,byte,byte,value,value,null,0,byte,value,of,value,opt,param,optional,parameter,type,get,constructor,byte,class,new,instance,byte,value,else,if,ancestor,classes,contains,optional,parameter,int,class,integer,int,value,value,null,0,integer,value,of,value,opt,param,optional,parameter,type,get,constructor,int,class,new,instance,int,value,else,if,ancestor,classes,contains,optional,parameter,short,class,short,short,value,value,null,0,short,value,of,value,opt,param,optional,parameter,type,get,constructor,short,class,new,instance,short,value,opt,params,add,opt,param,catch,exception,e,log,info,couldn,t,determine,optional,parameter,for,key,and,value,skip,this,one,entry,get,key,value,return,opt,params
AbstractSmppCommand -> @Deprecated     @SuppressWarnings({ "rawtypes", "unchecked" })     protected List<OptionalParameter> createOptionalParametersByName(Map<String, String> optinalParamaters);1524063178;@deprecated will be removed in Camel 2.13.0/3.0.0 - use createOptionalParametersByCode instead_@param optinalParamaters_@return;@Deprecated_    @SuppressWarnings({ "rawtypes", "unchecked" })_    protected List<OptionalParameter> createOptionalParametersByName(Map<String, String> optinalParamaters) {_        List<OptionalParameter> optParams = new ArrayList<>()___        for (Entry<String, String> entry : optinalParamaters.entrySet()) {_            OptionalParameter optParam = null___            String value = entry.getValue()__            try {_                Tag tag = Tag.valueOf(entry.getKey())__                Class type = determineTypeClass(tag)___                Set<Class> ancestorClasses = new HashSet<>(2)__                Class superclass = type.getSuperclass()__                ancestorClasses.add(superclass)__                if (superclass != Object.class) {_                    ancestorClasses.add(superclass.getSuperclass())__                }_                if (ancestorClasses.contains(OctetString.class)) {_                    optParam = (OptionalParameter) type.getConstructor(byte[].class).newInstance(value.getBytes())__                } else if (ancestorClasses.contains(OptionalParameter.Byte.class)) {_                    Byte byteValue = (value == null) ? 0 : Byte.valueOf(value)_ _                    optParam = (OptionalParameter) type.getConstructor(byte.class).newInstance(byteValue)__                } else if (ancestorClasses.contains(OptionalParameter.Int.class)) {_                    Integer intValue = (value == null) ? 0 : Integer.valueOf(value)_ _                    optParam = (OptionalParameter) type.getConstructor(int.class).newInstance(intValue)__                } else if (ancestorClasses.contains(OptionalParameter.Short.class)) {_                    Short shortValue = (value == null) ? 0 : Short.valueOf(value)_ _                    optParam = (OptionalParameter) type.getConstructor(short.class).newInstance(shortValue)__                }__                optParams.add(optParam)__            } catch (Exception e) {_                log.info("Couldn't determine optional parameter for key {} and value {}. Skip this one.", entry.getKey(), value)__            }_        }__        return optParams__    };deprecated,will,be,removed,in,camel,2,13,0,3,0,0,use,create,optional,parameters,by,code,instead,param,optinal,paramaters,return;deprecated,suppress,warnings,rawtypes,unchecked,protected,list,optional,parameter,create,optional,parameters,by,name,map,string,string,optinal,paramaters,list,optional,parameter,opt,params,new,array,list,for,entry,string,string,entry,optinal,paramaters,entry,set,optional,parameter,opt,param,null,string,value,entry,get,value,try,tag,tag,tag,value,of,entry,get,key,class,type,determine,type,class,tag,set,class,ancestor,classes,new,hash,set,2,class,superclass,type,get,superclass,ancestor,classes,add,superclass,if,superclass,object,class,ancestor,classes,add,superclass,get,superclass,if,ancestor,classes,contains,octet,string,class,opt,param,optional,parameter,type,get,constructor,byte,class,new,instance,value,get,bytes,else,if,ancestor,classes,contains,optional,parameter,byte,class,byte,byte,value,value,null,0,byte,value,of,value,opt,param,optional,parameter,type,get,constructor,byte,class,new,instance,byte,value,else,if,ancestor,classes,contains,optional,parameter,int,class,integer,int,value,value,null,0,integer,value,of,value,opt,param,optional,parameter,type,get,constructor,int,class,new,instance,int,value,else,if,ancestor,classes,contains,optional,parameter,short,class,short,short,value,value,null,0,short,value,of,value,opt,param,optional,parameter,type,get,constructor,short,class,new,instance,short,value,opt,params,add,opt,param,catch,exception,e,log,info,couldn,t,determine,optional,parameter,for,key,and,value,skip,this,one,entry,get,key,value,return,opt,params
