commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;10;;protected Message getResponseMessage(Exchange exchange) {     Message message.     if (exchange.getPattern().isOutCapable()) {         message = exchange.getOut().     } else {         message = exchange.getIn().     }     return message. }
false;protected;1;34;;protected List<OptionalParameter> createOptionalParametersByCode(Map<Short, Object> optinalParamaters) {     List<OptionalParameter> optParams = new ArrayList<>().     for (Entry<Short, Object> entry : optinalParamaters.entrySet()) {         OptionalParameter optParam = null.         Short key = entry.getKey().         Object value = entry.getValue().         try {             if (value == null) {                 optParam = new OptionalParameter.Null(key).             } else if (value instanceof byte[]) {                 optParam = new OptionalParameter.OctetString(key, (byte[]) value).             } else if (value instanceof String) {                 optParam = new OptionalParameter.COctetString(key, (String) value).             } else if (value instanceof Byte) {                 optParam = new OptionalParameter.Byte(key, (Byte) value).             } else if (value instanceof Integer) {                 optParam = new OptionalParameter.Int(key, (Integer) value).             } else if (value instanceof Short) {                 optParam = new OptionalParameter.Short(key, (Short) value).             } else {                 log.info("Couldn't determine optional parameter for value {} (type: {}). Skip this one.", value, value.getClass()).                 continue.             }             optParams.add(optParam).         } catch (Exception e) {             log.info("Couldn't determine optional parameter for key {} and value {}. Skip this one.", key, value).         }     }     return optParams. }
true;protected;1;40;/**  * @deprecated will be removed in Camel 2.13.0/3.0.0 - use createOptionalParametersByCode instead  * @param optinalParamaters  * @return  */ ;/**  * @deprecated will be removed in Camel 2.13.0/3.0.0 - use createOptionalParametersByCode instead  * @param optinalParamaters  * @return  */ @Deprecated @SuppressWarnings({ "rawtypes", "unchecked" }) protected List<OptionalParameter> createOptionalParametersByName(Map<String, String> optinalParamaters) {     List<OptionalParameter> optParams = new ArrayList<>().     for (Entry<String, String> entry : optinalParamaters.entrySet()) {         OptionalParameter optParam = null.         String value = entry.getValue().         try {             Tag tag = Tag.valueOf(entry.getKey()).             Class type = determineTypeClass(tag).             Set<Class> ancestorClasses = new HashSet<>(2).             Class superclass = type.getSuperclass().             ancestorClasses.add(superclass).             if (superclass != Object.class) {                 ancestorClasses.add(superclass.getSuperclass()).             }             if (ancestorClasses.contains(OctetString.class)) {                 optParam = (OptionalParameter) type.getConstructor(byte[].class).newInstance(value.getBytes()).             } else if (ancestorClasses.contains(OptionalParameter.Byte.class)) {                 // required because jsmpp 2.1.1 interpreted null as 0                 Byte byteValue = (value == null) ? 0 : Byte.valueOf(value).                 optParam = (OptionalParameter) type.getConstructor(byte.class).newInstance(byteValue).             } else if (ancestorClasses.contains(OptionalParameter.Int.class)) {                 // required because jsmpp 2.1.1 interpreted null as 0                 Integer intValue = (value == null) ? 0 : Integer.valueOf(value).                 optParam = (OptionalParameter) type.getConstructor(int.class).newInstance(intValue).             } else if (ancestorClasses.contains(OptionalParameter.Short.class)) {                 // required because jsmpp 2.1.1 interpreted null as 0                 Short shortValue = (value == null) ? 0 : Short.valueOf(value).                 optParam = (OptionalParameter) type.getConstructor(short.class).newInstance(shortValue).             }             optParams.add(optParam).         } catch (Exception e) {             log.info("Couldn't determine optional parameter for key {} and value {}. Skip this one.", entry.getKey(), value).         }     }     return optParams. }
false;protected;1;7;;@SuppressWarnings("unchecked") protected Class<? extends OptionalParameter> determineTypeClass(Tag tag) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {     // we have to use reflection because the type field is private     Field f = tag.getClass().getDeclaredField("type").     f.setAccessible(true).     return (Class<? extends OptionalParameter>) f.get(tag). }
