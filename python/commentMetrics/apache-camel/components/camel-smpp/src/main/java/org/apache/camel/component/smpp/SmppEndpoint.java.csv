commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return getConnectionString(). }
false;public;0;4;;@Override public boolean isLenientProperties() {     return true. }
false;public;1;5;;public Consumer createConsumer(Processor processor) throws Exception {     SmppConsumer answer = new SmppConsumer(this, configuration, processor).     configureConsumer(answer).     return answer. }
false;public;0;3;;public Producer createProducer() throws Exception {     return new SmppProducer(this, configuration). }
true;public;1;3;/**  * Create a new exchange for communicating with this endpoint from a SMSC  *  * @param alertNotification the received message from the SMSC  * @return a new exchange  */ ;/**  * Create a new exchange for communicating with this endpoint from a SMSC  *  * @param alertNotification the received message from the SMSC  * @return a new exchange  */ public Exchange createOnAcceptAlertNotificationExchange(AlertNotification alertNotification) {     return createOnAcceptAlertNotificationExchange(getExchangePattern(), alertNotification). }
true;public;2;7;/**  * Create a new exchange for communicating with this endpoint from a SMSC  * with the specified {@link ExchangePattern} such as whether its going  * to be an {@link ExchangePattern#InOnly} or {@link ExchangePattern#InOut} exchange  *  * @param exchangePattern the message exchange pattern for the exchange  * @param alertNotification the received message from the SMSC  * @return a new exchange  */ ;/**  * Create a new exchange for communicating with this endpoint from a SMSC  * with the specified {@link ExchangePattern} such as whether its going  * to be an {@link ExchangePattern#InOnly} or {@link ExchangePattern#InOut} exchange  *  * @param exchangePattern the message exchange pattern for the exchange  * @param alertNotification the received message from the SMSC  * @return a new exchange  */ public Exchange createOnAcceptAlertNotificationExchange(ExchangePattern exchangePattern, AlertNotification alertNotification) {     Exchange exchange = createExchange(exchangePattern).     exchange.setProperty(Exchange.BINDING, getBinding()).     exchange.setIn(getBinding().createSmppMessage(getCamelContext(), alertNotification)).     return exchange. }
true;public;1;3;/**  * Create a new exchange for communicating with this endpoint from a SMSC  *  * @param deliverSm the received message from the SMSC  * @return a new exchange  */ ;/**  * Create a new exchange for communicating with this endpoint from a SMSC  *  * @param deliverSm the received message from the SMSC  * @return a new exchange  */ public Exchange createOnAcceptDeliverSmExchange(DeliverSm deliverSm) throws Exception {     return createOnAcceptDeliverSmExchange(getExchangePattern(), deliverSm). }
true;public;2;7;/**  * Create a new exchange for communicating with this endpoint from a SMSC  * with the specified {@link ExchangePattern} such as whether its going  * to be an {@link ExchangePattern#InOnly} or {@link ExchangePattern#InOut} exchange  *  * @param exchangePattern the message exchange pattern for the exchange  * @param deliverSm the received message from the SMSC  * @return a new exchange  */ ;/**  * Create a new exchange for communicating with this endpoint from a SMSC  * with the specified {@link ExchangePattern} such as whether its going  * to be an {@link ExchangePattern#InOnly} or {@link ExchangePattern#InOut} exchange  *  * @param exchangePattern the message exchange pattern for the exchange  * @param deliverSm the received message from the SMSC  * @return a new exchange  */ public Exchange createOnAcceptDeliverSmExchange(ExchangePattern exchangePattern, DeliverSm deliverSm) throws Exception {     Exchange exchange = createExchange(exchangePattern).     exchange.setProperty(Exchange.BINDING, getBinding()).     exchange.setIn(getBinding().createSmppMessage(getCamelContext(), deliverSm)).     return exchange. }
true;public;2;3;/**  * Create a new exchange for communicating with this endpoint from a SMSC  *  * @param dataSm the received message from the SMSC  * @param smppMessageId the smpp message id which will be used in the response  * @return a new exchange  */ ;/**  * Create a new exchange for communicating with this endpoint from a SMSC  *  * @param dataSm the received message from the SMSC  * @param smppMessageId the smpp message id which will be used in the response  * @return a new exchange  */ public Exchange createOnAcceptDataSm(DataSm dataSm, String smppMessageId) {     return createOnAcceptDataSm(getExchangePattern(), dataSm, smppMessageId). }
true;public;3;6;/**  * Create a new exchange for communicating with this endpoint from a SMSC  * with the specified {@link ExchangePattern} such as whether its going  * to be an {@link ExchangePattern#InOnly} or {@link ExchangePattern#InOut} exchange  *  * @param exchangePattern the message exchange pattern for the exchange  * @param dataSm the received message from the SMSC  * @param smppMessageId the smpp message id which will be used in the response  * @return a new exchange  */ ;/**  * Create a new exchange for communicating with this endpoint from a SMSC  * with the specified {@link ExchangePattern} such as whether its going  * to be an {@link ExchangePattern#InOnly} or {@link ExchangePattern#InOut} exchange  *  * @param exchangePattern the message exchange pattern for the exchange  * @param dataSm the received message from the SMSC  * @param smppMessageId the smpp message id which will be used in the response  * @return a new exchange  */ public Exchange createOnAcceptDataSm(ExchangePattern exchangePattern, DataSm dataSm, String smppMessageId) {     Exchange exchange = createExchange(exchangePattern).     exchange.setProperty(Exchange.BINDING, getBinding()).     exchange.setIn(getBinding().createSmppMessage(getCamelContext(), dataSm, smppMessageId)).     return exchange. }
true;public;0;6;/**  * Returns the connection string for the current connection which has the form:  * smpp://<user>@<host>:<port>  *  * @return the connection string  */ ;/**  * Returns the connection string for the current connection which has the form:  * smpp://<user>@<host>:<port>  *  * @return the connection string  */ public String getConnectionString() {     return (configuration.getUsingSSL() ? "smpps://" : "smpp://") + (getConfiguration().getSystemId() != null ? getConfiguration().getSystemId() + "@" : "") + getConfiguration().getHost() + ":" + getConfiguration().getPort(). }
true;public;0;3;/**  * Returns the smpp configuration  *  * @return the configuration  */ ;/**  * Returns the smpp configuration  *  * @return the configuration  */ public SmppConfiguration getConfiguration() {     return configuration. }
false;public;0;6;;public SmppBinding getBinding() {     if (binding == null) {         binding = new SmppBinding(getConfiguration()).     }     return binding. }
false;public;1;3;;public void setBinding(SmppBinding binding) {     this.binding = binding. }
