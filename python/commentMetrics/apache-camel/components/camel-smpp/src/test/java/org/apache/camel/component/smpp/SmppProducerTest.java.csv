commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;SMPPSession createSMPPSession() {     return session. }
false;public;0;14;;@Before public void setUp() {     configuration = new SmppConfiguration().     configuration.setServiceType("CMT").     configuration.setSystemType("cp").     endpoint = mock(SmppEndpoint.class).     session = mock(SMPPSession.class).     producer = new SmppProducer(endpoint, configuration) {          SMPPSession createSMPPSession() {             return session.         }     }. }
false;public;0;23;;@Test public void doStartShouldStartANewSmppSession() throws Exception {     when(endpoint.getConnectionString()).thenReturn("smpp://smppclient@localhost:2775").     BindParameter expectedBindParameters = new BindParameter(BindType.BIND_TX, "smppclient", "password", "cp", TypeOfNumber.UNKNOWN, NumberingPlanIndicator.UNKNOWN, "").     when(session.connectAndBind("localhost", new Integer(2775), expectedBindParameters)).thenReturn("1").     when(endpoint.isSingleton()).thenReturn(true).     producer.doStart().     verify(session).setEnquireLinkTimer(5000).     verify(session).setTransactionTimer(10000).     verify(session).addSessionStateListener(isA(SessionStateListener.class)).     verify(session).connectAndBind("localhost", new Integer(2775), expectedBindParameters). }
false;public;0;8;;@Test public void doStopShouldNotCloseTheSMPPSessionIfItIsNull() throws Exception {     when(endpoint.getConnectionString()).thenReturn("smpp://smppclient@localhost:2775").     when(endpoint.isSingleton()).thenReturn(true).     producer.doStop(). }
false;public;0;12;;@Test public void doStopShouldCloseTheSMPPSession() throws Exception {     when(endpoint.getConnectionString()).thenReturn("smpp://smppclient@localhost:2775").     when(endpoint.isSingleton()).thenReturn(true).     producer.doStart().     producer.doStop().     verify(session).removeSessionStateListener(isA(SessionStateListener.class)).     verify(session).unbindAndClose(). }
false;public;0;13;;@Test public void processInOnlyShouldExecuteTheCommand() throws Exception {     SmppBinding binding = mock(SmppBinding.class).     Exchange exchange = mock(Exchange.class).     SmppCommand command = mock(SmppCommand.class).     when(endpoint.getBinding()).thenReturn(binding).     when(binding.createSmppCommand(session, exchange)).thenReturn(command).     producer.doStart().     producer.process(exchange).     verify(command).execute(exchange). }
false;public;0;5;;@Test public void getterShouldReturnTheSetValues() {     assertSame(endpoint, producer.getEndpoint()).     assertSame(configuration, producer.getConfiguration()). }
