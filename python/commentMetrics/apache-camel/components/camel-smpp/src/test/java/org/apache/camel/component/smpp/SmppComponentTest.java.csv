commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() {     context = new DefaultCamelContext().     component = new SmppComponent(context). }
false;public;0;7;;@Test public void constructorSmppConfigurationShouldSetTheConfiguration() {     SmppConfiguration configuration = new SmppConfiguration().     component = new SmppComponent(configuration).     assertSame(configuration, component.getConfiguration()). }
false;public;0;7;;@Test public void constructorCamelContextShouldSetTheContext() {     CamelContext context = new DefaultCamelContext().     component = new SmppComponent(context).     assertSame(context, component.getCamelContext()). }
false;public;0;19;;@Test public void createEndpointStringStringMapShouldReturnASmppEndpoint() throws Exception {     CamelContext context = new DefaultCamelContext().     component = new SmppComponent(context).     Map<String, String> parameters = new HashMap<>().     parameters.put("password", "secret").     Endpoint endpoint = component.createEndpoint("smpp://smppclient@localhost:2775", "?password=secret", parameters).     SmppEndpoint smppEndpoint = (SmppEndpoint) endpoint.     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getEndpointUri()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getEndpointKey()).     assertSame(component, smppEndpoint.getComponent()).     assertNotNull(smppEndpoint.getConfiguration()).     assertEquals("secret", smppEndpoint.getConfiguration().getPassword()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getConnectionString()).     assertEquals(ExchangePattern.InOnly, smppEndpoint.getExchangePattern()).     assertTrue(smppEndpoint.getBinding() instanceof SmppBinding).     assertNotNull(smppEndpoint.getCamelContext()). }
false;public;0;19;;@Test public void createEndpointStringStringMapShouldReturnASmppsEndpoint() throws Exception {     CamelContext context = new DefaultCamelContext().     component = new SmppComponent(context).     Map<String, String> parameters = new HashMap<>().     parameters.put("password", "secret").     Endpoint endpoint = component.createEndpoint("smpps://smppclient@localhost:2775", "?password=secret", parameters).     SmppEndpoint smppEndpoint = (SmppEndpoint) endpoint.     assertEquals("smpps://smppclient@localhost:2775", smppEndpoint.getEndpointUri()).     assertEquals("smpps://smppclient@localhost:2775", smppEndpoint.getEndpointKey()).     assertSame(component, smppEndpoint.getComponent()).     assertNotNull(smppEndpoint.getConfiguration()).     assertEquals("secret", smppEndpoint.getConfiguration().getPassword()).     assertEquals("smpps://smppclient@localhost:2775", smppEndpoint.getConnectionString()).     assertEquals(ExchangePattern.InOnly, smppEndpoint.getExchangePattern()).     assertTrue(smppEndpoint.getBinding() instanceof SmppBinding).     assertNotNull(smppEndpoint.getCamelContext()). }
false;public;0;17;;@Test public void createEndpointStringStringMapWithoutACamelContextShouldReturnASmppEndpoint() throws Exception {     Map<String, String> parameters = new HashMap<>().     parameters.put("password", "secret").     Endpoint endpoint = component.createEndpoint("smpp://smppclient@localhost:2775", "?password=secret", parameters).     SmppEndpoint smppEndpoint = (SmppEndpoint) endpoint.     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getEndpointUri()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getEndpointKey()).     assertSame(component, smppEndpoint.getComponent()).     assertNotNull(smppEndpoint.getConfiguration()).     assertEquals("secret", smppEndpoint.getConfiguration().getPassword()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getConnectionString()).     assertEquals(ExchangePattern.InOnly, smppEndpoint.getExchangePattern()).     assertTrue(smppEndpoint.getBinding() instanceof SmppBinding).     assertNotNull(smppEndpoint.getCamelContext()). }
false;public;0;11;;@Test public void allowEmptySystemTypeAndServiceTypeOption() throws Exception {     Map<String, String> parameters = new HashMap<>().     parameters.put("systemType", null).     parameters.put("serviceType", null).     Endpoint endpoint = component.createEndpoint("smpp://smppclient@localhost:2775", "?systemType=&serviceType=", parameters).     SmppEndpoint smppEndpoint = (SmppEndpoint) endpoint.     assertEquals(null, smppEndpoint.getConfiguration().getSystemType()).     assertEquals(null, smppEndpoint.getConfiguration().getServiceType()). }
false;public;0;15;;@Test public void createEndpointSmppConfigurationShouldReturnASmppEndpoint() throws Exception {     SmppConfiguration configuration = new SmppConfiguration().     Endpoint endpoint = component.createEndpoint(configuration).     SmppEndpoint smppEndpoint = (SmppEndpoint) endpoint.     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getEndpointUri()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getEndpointKey()).     assertSame(component, smppEndpoint.getComponent()).     assertSame(configuration, smppEndpoint.getConfiguration()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getConnectionString()).     assertEquals(ExchangePattern.InOnly, smppEndpoint.getExchangePattern()).     assertTrue(smppEndpoint.getBinding() instanceof SmppBinding).     assertNotNull(smppEndpoint.getCamelContext()). }
false;public;0;15;;@Test public void createEndpointStringSmppConfigurationShouldReturnASmppEndpoint() throws Exception {     SmppConfiguration configuration = new SmppConfiguration().     Endpoint endpoint = component.createEndpoint("smpp://smppclient@localhost:2775?password=password", configuration).     SmppEndpoint smppEndpoint = (SmppEndpoint) endpoint.     assertEquals("smpp://smppclient@localhost:2775?password=password", smppEndpoint.getEndpointUri()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getEndpointKey()).     assertSame(component, smppEndpoint.getComponent()).     assertSame(configuration, smppEndpoint.getConfiguration()).     assertEquals("smpp://smppclient@localhost:2775", smppEndpoint.getConnectionString()).     assertEquals(ExchangePattern.InOnly, smppEndpoint.getExchangePattern()).     assertTrue(smppEndpoint.getBinding() instanceof SmppBinding).     assertNotNull(smppEndpoint.getCamelContext()). }
false;public;0;7;;@Test public void getterShouldReturnTheSetValues() {     SmppConfiguration configuration = new SmppConfiguration().     component.setConfiguration(configuration).     assertSame(configuration, component.getConfiguration()). }
false;public;3;3;;@Override public void onStateChange(SessionState arg0, SessionState arg1, Session arg2) { }
false;public;0;14;;@Test public void createEndpointWithSessionStateListener() throws Exception {     SimpleRegistry registry = new SimpleRegistry().     registry.put("sessionStateListener", new SessionStateListener() {          @Override         public void onStateChange(SessionState arg0, SessionState arg1, Session arg2) {         }     }).     context.setRegistry(registry).     component = new SmppComponent(context).     SmppEndpoint endpoint = (SmppEndpoint) component.createEndpoint("smpp://smppclient@localhost:2775?password=password&sessionStateListener=#sessionStateListener").     assertNotNull(endpoint.getConfiguration().getSessionStateListener()). }
