commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void sendSubmitSMInOut() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = start.createExchange(ExchangePattern.InOut).     exchange.getIn().setBody("Hello SMPP World!").     template.send(start, exchange).     assertMockEndpointsSatisfied().     Exchange resultExchange = result.getExchanges().get(0).     assertEquals(SmppMessageType.DeliveryReceipt.toString(), resultExchange.getIn().getHeader(SmppConstants.MESSAGE_TYPE)).     assertEquals("Hello SMPP World!", resultExchange.getIn().getBody()).     assertNotNull(resultExchange.getIn().getHeader(SmppConstants.ID)).     assertEquals(1, resultExchange.getIn().getHeader(SmppConstants.SUBMITTED)).     assertEquals(1, resultExchange.getIn().getHeader(SmppConstants.DELIVERED)).     assertNotNull(resultExchange.getIn().getHeader(SmppConstants.DONE_DATE)).     assertNotNull(resultExchange.getIn().getHeader(SmppConstants.SUBMIT_DATE)).     assertNull(resultExchange.getIn().getHeader(SmppConstants.ERROR)).     assertNotNull(exchange.getOut().getHeader(SmppConstants.ID)).     assertEquals(1, exchange.getOut().getHeader(SmppConstants.SENT_MESSAGE_COUNT)). }
false;public;0;23;;@Test public void sendSubmitSMInOnly() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = start.createExchange(ExchangePattern.InOnly).     exchange.getIn().setBody("Hello SMPP World!").     template.send(start, exchange).     assertMockEndpointsSatisfied().     Exchange resultExchange = result.getExchanges().get(0).     assertEquals(SmppMessageType.DeliveryReceipt.toString(), resultExchange.getIn().getHeader(SmppConstants.MESSAGE_TYPE)).     assertEquals("Hello SMPP World!", resultExchange.getIn().getBody()).     assertNotNull(resultExchange.getIn().getHeader(SmppConstants.ID)).     assertEquals(1, resultExchange.getIn().getHeader(SmppConstants.SUBMITTED)).     assertEquals(1, resultExchange.getIn().getHeader(SmppConstants.DELIVERED)).     assertNotNull(resultExchange.getIn().getHeader(SmppConstants.DONE_DATE)).     assertNotNull(resultExchange.getIn().getHeader(SmppConstants.SUBMIT_DATE)).     assertNull(resultExchange.getIn().getHeader(SmppConstants.ERROR)).     assertNotNull(exchange.getIn().getHeader(SmppConstants.ID)).     assertEquals(1, exchange.getIn().getHeader(SmppConstants.SENT_MESSAGE_COUNT)). }
false;public;0;18;;@Test public void sendLongSubmitSM() throws Exception {     result.expectedMessageCount(2).     Exchange exchange = start.createExchange(ExchangePattern.InOnly).     exchange.getIn().setBody("Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! " + "Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! " + // 270 chars     "Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! ").     template.send(start, exchange).     assertMockEndpointsSatisfied().     assertEquals(SmppMessageType.DeliveryReceipt.toString(), result.getExchanges().get(0).getIn().getHeader(SmppConstants.MESSAGE_TYPE)).     assertEquals(SmppMessageType.DeliveryReceipt.toString(), result.getExchanges().get(1).getIn().getHeader(SmppConstants.MESSAGE_TYPE)).     assertNotNull(exchange.getIn().getHeader(SmppConstants.ID)).     assertEquals(2, exchange.getIn().getHeader(SmppConstants.SENT_MESSAGE_COUNT)). }
false;public;0;10;;@Test public void sendCancelSM() throws Exception {     Exchange exchange = start.createExchange(ExchangePattern.InOut).     exchange.getIn().setHeader(SmppConstants.COMMAND, "CancelSm").     exchange.getIn().setHeader(SmppConstants.ID, "1").     template.send(start, exchange).     assertEquals("1", exchange.getOut().getHeader(SmppConstants.ID)). }
false;public;0;13;;@Test public void sendQuerySM() throws Exception {     Exchange exchange = start.createExchange(ExchangePattern.InOut).     exchange.getIn().setHeader(SmppConstants.COMMAND, "QuerySm").     exchange.getIn().setHeader(SmppConstants.ID, "1").     template.send(start, exchange).     assertEquals("1", exchange.getOut().getHeader(SmppConstants.ID)).     assertEquals((byte) 0, exchange.getOut().getHeader(SmppConstants.ERROR)).     assertNotNull(exchange.getOut().getHeader(SmppConstants.FINAL_DATE)).     assertEquals("DELIVERED", exchange.getOut().getHeader(SmppConstants.MESSAGE_STATE)). }
false;public;0;11;;@Test public void sendReplaceSM() throws Exception {     Exchange exchange = start.createExchange(ExchangePattern.InOut).     exchange.getIn().setHeader(SmppConstants.COMMAND, "ReplaceSm").     exchange.getIn().setBody("Hello Camel World!").     exchange.getIn().setHeader(SmppConstants.ID, "1").     template.send(start, exchange).     assertEquals("1", exchange.getOut().getHeader(SmppConstants.ID)). }
false;public;0;9;;@Test public void sendDataSM() throws Exception {     Exchange exchange = start.createExchange(ExchangePattern.InOut).     exchange.getIn().setHeader(SmppConstants.COMMAND, "DataSm").     template.send(start, exchange).     assertNotNull(exchange.getOut().getHeader(SmppConstants.ID)). }
false;public;0;13;;@Test public void sendSubmitMultiSM() throws Exception {     Exchange exchange = start.createExchange(ExchangePattern.InOut).     exchange.getIn().setHeader(SmppConstants.COMMAND, "SubmitMulti").     exchange.getIn().setBody("Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! " + "Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! " + // 270 chars     "Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! Hello SMPP World! ").     template.send(start, exchange).     assertNotNull(exchange.getOut().getHeader(SmppConstants.ID)).     assertEquals(2, exchange.getOut().getHeader(SmppConstants.SENT_MESSAGE_COUNT)). }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/smpp/integration/SmppComponentSpringIntegrationTest-context.xml"). }
