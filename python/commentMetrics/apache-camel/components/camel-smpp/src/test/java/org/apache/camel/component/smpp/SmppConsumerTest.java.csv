commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;SMPPSession createSMPPSession() {     return session. }
false;public;0;20;;@Before public void setUp() {     configuration = new SmppConfiguration().     configuration.setServiceType("CMT").     configuration.setSystemType("cp").     endpoint = mock(SmppEndpoint.class).     processor = mock(Processor.class).     session = mock(SMPPSession.class).     // the construction of SmppConsumer will trigger the getCamelContext call     consumer = new SmppConsumer(endpoint, configuration, processor) {          SMPPSession createSMPPSession() {             return session.         }     }. }
false;public;0;22;;@Test public void doStartShouldStartANewSmppSession() throws Exception {     when(endpoint.getConnectionString()).thenReturn("smpp://smppclient@localhost:2775").     BindParameter expectedBindParameter = new BindParameter(BindType.BIND_RX, "smppclient", "password", "cp", TypeOfNumber.UNKNOWN, NumberingPlanIndicator.UNKNOWN, "").     when(session.connectAndBind("localhost", new Integer(2775), expectedBindParameter)).thenReturn("1").     consumer.doStart().     verify(session).setEnquireLinkTimer(5000).     verify(session).setTransactionTimer(10000).     verify(session).addSessionStateListener(isA(SessionStateListener.class)).     verify(session).setMessageReceiverListener(isA(MessageReceiverListener.class)).     verify(session).connectAndBind("localhost", new Integer(2775), expectedBindParameter). }
false;public;0;7;;@Test public void doStopShouldNotCloseTheSMPPSessionIfItIsNull() throws Exception {     when(endpoint.getConnectionString()).thenReturn("smpp://smppclient@localhost:2775").     consumer.doStop(). }
false;public;0;13;;@Test public void doStopShouldCloseTheSMPPSession() throws Exception {     doStartShouldStartANewSmppSession().     reset(endpoint, processor, session).     when(endpoint.getConnectionString()).thenReturn("smpp://smppclient@localhost:2775").     consumer.doStop().     verify(session).removeSessionStateListener(isA(SessionStateListener.class)).     verify(session).unbindAndClose(). }
false;public;0;22;;@Test public void addressRangeFromConfigurationIsUsed() throws Exception {     configuration.setAddressRange("(111*|222*|333*)").     BindParameter expectedBindParameter = new BindParameter(BindType.BIND_RX, "smppclient", "password", "cp", TypeOfNumber.UNKNOWN, NumberingPlanIndicator.UNKNOWN, "(111*|222*|333*)").     when(session.connectAndBind("localhost", new Integer(2775), expectedBindParameter)).thenReturn("1").     consumer.doStart().     verify(session).connectAndBind("localhost", new Integer(2775), expectedBindParameter). }
false;public;0;5;;@Test public void getterShouldReturnTheSetValues() {     assertSame(endpoint, consumer.getEndpoint()).     assertSame(configuration, consumer.getConfiguration()). }
