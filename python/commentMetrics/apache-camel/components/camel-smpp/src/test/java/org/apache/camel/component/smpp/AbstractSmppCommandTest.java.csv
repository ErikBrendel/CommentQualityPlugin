commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public void execute(Exchange exchange) throws SmppException { }
false;public;0;11;;@Before public void setUp() {     session = new SMPPSession().     config = new SmppConfiguration().     command = new AbstractSmppCommand(session, config) {          @Override         public void execute(Exchange exchange) throws SmppException {         }     }. }
false;public;0;5;;@Test public void constructor() {     assertSame(session, command.session).     assertSame(config, command.config). }
false;public;0;8;;@Test public void getResponseMessage() {     Exchange inOnlyExchange = new DefaultExchange(new DefaultCamelContext(), ExchangePattern.InOnly).     Exchange inOutExchange = new DefaultExchange(new DefaultCamelContext(), ExchangePattern.InOut).     assertSame(inOnlyExchange.getIn(), command.getResponseMessage(inOnlyExchange)).     assertSame(inOutExchange.getOut(), command.getResponseMessage(inOutExchange)). }
false;public;0;9;;@Test public void determineTypeClass() throws Exception {     assertSame(OptionalParameter.Source_subaddress.class, command.determineTypeClass(Tag.SOURCE_SUBADDRESS)).     assertSame(OptionalParameter.Additional_status_info_text.class, command.determineTypeClass(Tag.ADDITIONAL_STATUS_INFO_TEXT)).     assertSame(OptionalParameter.Dest_addr_subunit.class, command.determineTypeClass(Tag.DEST_ADDR_SUBUNIT)).     assertSame(OptionalParameter.Dest_telematics_id.class, command.determineTypeClass(Tag.DEST_TELEMATICS_ID)).     assertSame(OptionalParameter.Qos_time_to_live.class, command.determineTypeClass(Tag.QOS_TIME_TO_LIVE)).     assertSame(OptionalParameter.Alert_on_message_delivery.class, command.determineTypeClass(Tag.ALERT_ON_MESSAGE_DELIVERY)). }
