# id;timestamp;commentText;codeText;commentWords;codeWords
S3Endpoint -> AmazonS3Client createS3Client();1301589998;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        return new AmazonS3Client(credentials)__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,return,new,amazon,s3client,credentials
S3Endpoint -> AmazonS3Client createS3Client();1301593672;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        return new AmazonS3Client(credentials)__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,return,new,amazon,s3client,credentials
S3Endpoint -> AmazonS3Client createS3Client();1301600525;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        return new AmazonS3Client(credentials)__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,return,new,amazon,s3client,credentials
S3Endpoint -> AmazonS3Client createS3Client();1303067631;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = new AmazonS3Client(credentials)__        if (configuration.getAmazonS3Endpoint() != null) {_            client.setEndpoint(configuration.getAmazonS3Endpoint())__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,new,amazon,s3client,credentials,if,configuration,get,amazon,s3endpoint,null,client,set,endpoint,configuration,get,amazon,s3endpoint,return,client
S3Endpoint -> AmazonS3Client createS3Client();1313699964;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = new AmazonS3Client(credentials)__        if (configuration.getAmazonS3Endpoint() != null) {_            client.setEndpoint(configuration.getAmazonS3Endpoint())__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,new,amazon,s3client,credentials,if,configuration,get,amazon,s3endpoint,null,client,set,endpoint,configuration,get,amazon,s3endpoint,return,client
S3Endpoint -> AmazonS3Client createS3Client();1321790712;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = new AmazonS3Client(credentials)__        if (configuration.getAmazonS3Endpoint() != null) {_            client.setEndpoint(configuration.getAmazonS3Endpoint())__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,new,amazon,s3client,credentials,if,configuration,get,amazon,s3endpoint,null,client,set,endpoint,configuration,get,amazon,s3endpoint,return,client
S3Endpoint -> AmazonS3Client createS3Client();1324591487;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = new AmazonS3Client(credentials)__        if (configuration.getAmazonS3Endpoint() != null) {_            client.setEndpoint(configuration.getAmazonS3Endpoint())__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,new,amazon,s3client,credentials,if,configuration,get,amazon,s3endpoint,null,client,set,endpoint,configuration,get,amazon,s3endpoint,return,client
S3Endpoint -> AmazonS3Client createS3Client();1326561926;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3Client createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = new AmazonS3Client(credentials)__        if (configuration.getAmazonS3Endpoint() != null) {_            client.setEndpoint(configuration.getAmazonS3Endpoint())__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3client,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,new,amazon,s3client,credentials,if,configuration,get,amazon,s3endpoint,null,client,set,endpoint,configuration,get,amazon,s3endpoint,return,client
S3Endpoint -> AmazonS3 createS3Client();1363645171;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        if (configuration.getAmazonS3Endpoint() != null) {_            client.setEndpoint(configuration.getAmazonS3Endpoint())__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,if,configuration,get,amazon,s3endpoint,null,client,set,endpoint,configuration,get,amazon,s3endpoint,return,client
S3Endpoint -> AmazonS3 createS3Client();1383138956;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        if (configuration.getAmazonS3Endpoint() != null) {_            client.setEndpoint(configuration.getAmazonS3Endpoint())__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,if,configuration,get,amazon,s3endpoint,null,client,set,endpoint,configuration,get,amazon,s3endpoint,return,client
S3Endpoint -> AmazonS3 createS3Client();1395076208;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1415211488;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1420356927;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1420553251;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1425140025;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1427402378;Provide the possibility to override this method for an mock implementation__@return AmazonS3Client;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation,return,amazon,s3client;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1431086344;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1436621893;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3 client = new AmazonS3Client(credentials)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1438419536;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AmazonS3 client = null__        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {_            ClientConfiguration clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            client = new AmazonS3Client(credentials, clientConfiguration)__        } else {_            client = new AmazonS3Client(credentials)__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,object,helper,is,not,empty,configuration,get,proxy,host,object,helper,is,not,empty,configuration,get,proxy,port,client,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1439194111;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AmazonS3 client = null__        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {_            ClientConfiguration clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            client = new AmazonS3Client(credentials, clientConfiguration)__        } else {_            client = new AmazonS3Client(credentials)__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,object,helper,is,not,empty,configuration,get,proxy,host,object,helper,is,not,empty,configuration,get,proxy,port,client,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1451237124;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AmazonS3 client = null__        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {_            ClientConfiguration clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            client = new AmazonS3Client(credentials, clientConfiguration)__        } else {_            client = new AmazonS3Client(credentials)__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,object,helper,is,not,empty,configuration,get,proxy,host,object,helper,is,not,empty,configuration,get,proxy,port,client,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1454731210;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AmazonS3 client = null__        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {_            ClientConfiguration clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            client = new AmazonS3Client(credentials, clientConfiguration)__        } else {_            client = new AmazonS3Client(credentials)__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,object,helper,is,not,empty,configuration,get,proxy,host,object,helper,is,not,empty,configuration,get,proxy,port,client,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1460635929;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AmazonS3 client = null__        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {_            ClientConfiguration clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            client = new AmazonS3Client(credentials, clientConfiguration)__        } else {_            client = new AmazonS3Client(credentials)__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,object,helper,is,not,empty,configuration,get,proxy,host,object,helper,is,not,empty,configuration,get,proxy,port,client,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1460636484;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AmazonS3 client = null__        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {_            ClientConfiguration clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            client = new AmazonS3Client(credentials, clientConfiguration)__        } else {_            client = new AmazonS3Client(credentials)__        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,object,helper,is,not,empty,configuration,get,proxy,host,object,helper,is,not,empty,configuration,get,proxy,port,client,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,return,client
S3Endpoint -> AmazonS3 createS3Client();1465906749;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = configuration.hasProxyConfiguration() ? createClientWithProxy(credentials) : new AmazonS3Client(credentials)___        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,configuration,has,proxy,configuration,create,client,with,proxy,credentials,new,amazon,s3client,credentials,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1478747123;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = configuration.hasProxyConfiguration() ? createClientWithProxy(credentials) : new AmazonS3Client(credentials)___        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,configuration,has,proxy,configuration,create,client,with,proxy,credentials,new,amazon,s3client,credentials,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1484914772;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_        AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__        AmazonS3Client client = configuration.hasProxyConfiguration() ? createClientWithProxy(credentials) : new AmazonS3Client(credentials)___        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,amazon,s3client,client,configuration,has,proxy,configuration,create,client,with,proxy,credentials,new,amazon,s3client,credentials,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1484985735;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_    _        AmazonS3Client client = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            if (isClientConfigFound) {_                client = new AmazonS3Client(credentials, clientConfiguration)__            } else {_                client = new AmazonS3Client(credentials)__            }_        } else {_            if (isClientConfigFound) {_                client = new AmazonS3Client()__            } else {_                client = new AmazonS3Client(clientConfiguration)__            }_        }__        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3client,client,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,is,client,config,found,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,else,if,is,client,config,found,client,new,amazon,s3client,else,client,new,amazon,s3client,client,configuration,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1486048238;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_    _        AmazonS3Client client = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            if (isClientConfigFound) {_                client = new AmazonS3Client(credentials, clientConfiguration)__            } else {_                client = new AmazonS3Client(credentials)__            }_        } else {_            if (isClientConfigFound) {_                client = new AmazonS3Client()__            } else {_                client = new AmazonS3Client(clientConfiguration)__            }_        }__        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3client,client,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,is,client,config,found,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,else,if,is,client,config,found,client,new,amazon,s3client,else,client,new,amazon,s3client,client,configuration,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1503494543;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_    _        AmazonS3Client client = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(configuration.getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(configuration.getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            if (isClientConfigFound) {_                client = new AmazonS3Client(credentials, clientConfiguration)__            } else {_                client = new AmazonS3Client(credentials)__            }_        } else {_            if (isClientConfigFound) {_                client = new AmazonS3Client()__            } else {_                client = new AmazonS3Client(clientConfiguration)__            }_        }__        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3client,client,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,configuration,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,configuration,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,is,client,config,found,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,else,if,is,client,config,found,client,new,amazon,s3client,else,client,new,amazon,s3client,client,configuration,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1503555979;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_    _        AmazonS3Client client = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            if (isClientConfigFound) {_                client = new AmazonS3Client(credentials, clientConfiguration)__            } else {_                client = new AmazonS3Client(credentials)__            }_        } else {_            if (isClientConfigFound) {_                client = new AmazonS3Client()__            } else {_                client = new AmazonS3Client(clientConfiguration)__            }_        }__        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3client,client,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,if,is,client,config,found,client,new,amazon,s3client,credentials,client,configuration,else,client,new,amazon,s3client,credentials,else,if,is,client,config,found,client,new,amazon,s3client,else,client,new,amazon,s3client,client,configuration,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1503579162;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_    _        AmazonS3 client = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound) {_            	client = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).build()__            } else {_                client = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider).build()__            }_        } else {_            if (isClientConfigFound) {_            	client = AmazonS3ClientBuilder.standard().build()__            } else {_            	client = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).build()__            }_        }__        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,client,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,build,else,client,amazon,s3client,builder,standard,with,credentials,credentials,provider,build,else,if,is,client,config,found,client,amazon,s3client,builder,standard,build,else,client,amazon,s3client,builder,standard,with,client,configuration,client,configuration,build,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1503646409;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_    _        AmazonS3 client = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound) {_                client = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).build()__            } else {_                client = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider).build()__            }_        } else {_            if (isClientConfigFound) {_                client = AmazonS3ClientBuilder.standard().build()__            } else {_                client = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).build()__            }_        }__        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,client,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,build,else,client,amazon,s3client,builder,standard,with,credentials,credentials,provider,build,else,if,is,client,config,found,client,amazon,s3client,builder,standard,build,else,client,amazon,s3client,builder,standard,with,client,configuration,client,configuration,build,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1504006354;Provide the possibility to override this method for an mock implementation;AmazonS3 createS3Client() {_    _        AmazonS3 client = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                client = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).build()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                client = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration)_                   .withCredentials(credentialsProvider).withEncryptionMaterials(encryptionMaterialsProvider).build()__            } else {_                client = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider).build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                client = AmazonS3ClientBuilder.standard().build()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                client = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration)_                  .withEncryptionMaterials(encryptionMaterialsProvider).build()__            } else {_                client = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).build()__            }_        }__        S3ClientOptions clientOptions = S3ClientOptions.builder()_            .setPathStyleAccess(configuration.isPathStyleAccess())_            .build()__        client.setS3ClientOptions(clientOptions)__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,build,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,client,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,build,else,client,amazon,s3client,builder,standard,with,credentials,credentials,provider,build,else,if,is,client,config,found,configuration,is,use,encryption,client,amazon,s3client,builder,standard,build,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,client,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,build,else,client,amazon,s3client,builder,standard,with,client,configuration,client,configuration,build,s3client,options,client,options,s3client,options,builder,set,path,style,access,configuration,is,path,style,access,build,client,set,s3client,options,client,options,return,client
S3Endpoint -> AmazonS3 createS3Client();1504256672;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = encClientBuilder.build()__            }_        }__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1505201995;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = encClientBuilder.build()__            }_        }__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1510931884;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                client = encClientBuilder.build()__            }_        }__        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1516875164;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517054221;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517217981;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517219660;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517220367;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                client = clientBuilder.build()__                _            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517221483;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                client = clientBuilder.build()__                _            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517222207;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                client = clientBuilder.build()__                _            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517222680;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__                _            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1517994633;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__                _            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1518443540;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__                _            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> AmazonS3 createS3Client();1518684082;Provide the possibility to override this method for an mock_implementation;AmazonS3 createS3Client() {__        AmazonS3 client = null__        AmazonS3ClientBuilder clientBuilder = null__        AmazonS3EncryptionClientBuilder encClientBuilder = null__        ClientConfiguration clientConfiguration = null__        boolean isClientConfigFound = false__        if (configuration.hasProxyConfiguration()) {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setProxyHost(configuration.getProxyHost())__            clientConfiguration.setProxyPort(configuration.getProxyPort())__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        } else {_            clientConfiguration = new ClientConfiguration()__            clientConfiguration.setMaxConnections(getMaxConnections())__            isClientConfigFound = true__        }_        if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {_            AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey())__            AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials)__            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider)_                    .withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withCredentials(credentialsProvider)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        } else {_            if (isClientConfigFound && !configuration.isUseEncryption()) {_                clientBuilder = AmazonS3ClientBuilder.standard()__            } else if (isClientConfigFound && configuration.isUseEncryption()) {_                StaticEncryptionMaterialsProvider encryptionMaterialsProvider = new StaticEncryptionMaterialsProvider(configuration.getEncryptionMaterials())__                encClientBuilder = AmazonS3EncryptionClientBuilder.standard().withClientConfiguration(clientConfiguration).withEncryptionMaterials(encryptionMaterialsProvider)__            } else {_                clientBuilder = AmazonS3ClientBuilder.standard().withClientConfiguration(clientConfiguration)__            }_            if (!configuration.isUseEncryption()) {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                clientBuilder = clientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                clientBuilder = clientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                clientBuilder = clientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                clientBuilder = clientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                clientBuilder = clientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                clientBuilder = clientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = clientBuilder.build()__                _            } else {_                if (ObjectHelper.isNotEmpty(configuration.getRegion())) {_                    encClientBuilder = encClientBuilder.withRegion(Regions.valueOf(configuration.getRegion()))__                }_                encClientBuilder = encClientBuilder.withPathStyleAccessEnabled(configuration.isPathStyleAccess())__                encClientBuilder = encClientBuilder.withChunkedEncodingDisabled(configuration.isChunkedEncodingDisabled())__                encClientBuilder = encClientBuilder.withAccelerateModeEnabled(configuration.isAccelerateModeEnabled())__                encClientBuilder = encClientBuilder.withDualstackEnabled(configuration.isDualstackEnabled())__                encClientBuilder = encClientBuilder.withPayloadSigningEnabled(configuration.isPayloadSigningEnabled())__                encClientBuilder = encClientBuilder.withForceGlobalBucketAccessEnabled(configuration.isForceGlobalBucketAccessEnabled())__                client = encClientBuilder.build()__            }_        }_        return client__    };provide,the,possibility,to,override,this,method,for,an,mock,implementation;amazon,s3,create,s3client,amazon,s3,client,null,amazon,s3client,builder,client,builder,null,amazon,s3encryption,client,builder,enc,client,builder,null,client,configuration,client,configuration,null,boolean,is,client,config,found,false,if,configuration,has,proxy,configuration,client,configuration,new,client,configuration,client,configuration,set,proxy,host,configuration,get,proxy,host,client,configuration,set,proxy,port,configuration,get,proxy,port,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,else,client,configuration,new,client,configuration,client,configuration,set,max,connections,get,max,connections,is,client,config,found,true,if,configuration,get,access,key,null,configuration,get,secret,key,null,awscredentials,credentials,new,basic,awscredentials,configuration,get,access,key,configuration,get,secret,key,awscredentials,provider,credentials,provider,new,awsstatic,credentials,provider,credentials,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,credentials,credentials,provider,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,credentials,credentials,provider,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,else,if,is,client,config,found,configuration,is,use,encryption,client,builder,amazon,s3client,builder,standard,else,if,is,client,config,found,configuration,is,use,encryption,static,encryption,materials,provider,encryption,materials,provider,new,static,encryption,materials,provider,configuration,get,encryption,materials,enc,client,builder,amazon,s3encryption,client,builder,standard,with,client,configuration,client,configuration,with,encryption,materials,encryption,materials,provider,else,client,builder,amazon,s3client,builder,standard,with,client,configuration,client,configuration,if,configuration,is,use,encryption,if,object,helper,is,not,empty,configuration,get,region,client,builder,client,builder,with,region,regions,value,of,configuration,get,region,client,builder,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,client,builder,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,client,builder,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,client,builder,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,client,builder,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,client,builder,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,client,builder,build,else,if,object,helper,is,not,empty,configuration,get,region,enc,client,builder,enc,client,builder,with,region,regions,value,of,configuration,get,region,enc,client,builder,enc,client,builder,with,path,style,access,enabled,configuration,is,path,style,access,enc,client,builder,enc,client,builder,with,chunked,encoding,disabled,configuration,is,chunked,encoding,disabled,enc,client,builder,enc,client,builder,with,accelerate,mode,enabled,configuration,is,accelerate,mode,enabled,enc,client,builder,enc,client,builder,with,dualstack,enabled,configuration,is,dualstack,enabled,enc,client,builder,enc,client,builder,with,payload,signing,enabled,configuration,is,payload,signing,enabled,enc,client,builder,enc,client,builder,with,force,global,bucket,access,enabled,configuration,is,force,global,bucket,access,enabled,client,enc,client,builder,build,return,client
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1431086344;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1436621893;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1438419536;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1439194111;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1451237124;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1454731210;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1460635929;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1460636484;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1465906749;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1478747123;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1484914772;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1484985735;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1486048238;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1503494543;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1503555979;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1503579162;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1503646409;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1504006354;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1504256672;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1505201995;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1510931884;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1516875164;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517054221;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517217981;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517219660;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517220367;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517221483;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517222207;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517222680;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1517994633;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1518443540;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1518684082;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1518863181;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1518864282;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1519112768;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1521530280;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1540108158;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1540108163;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1545381338;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1547240981;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1547480087;Gets the maximum number of messages as a limit to poll at each polling._<p/>_Is default unlimited, but use 0 or negative number to disable it as_unlimited.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };gets,the,maximum,number,of,messages,as,a,limit,to,poll,at,each,polling,p,is,default,unlimited,but,use,0,or,negative,number,to,disable,it,as,unlimited;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
S3Endpoint -> public void setMaxConnections(int maxConnections);1503555979;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1503579162;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1503646409;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1504006354;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1504256672;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1505201995;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1510931884;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1516875164;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517054221;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517217981;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517219660;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517220367;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517221483;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517222207;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517222680;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1517994633;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1518443540;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1518684082;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1518863181;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1518864282;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1519112768;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1521530280;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1540108158;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1540108163;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1545381338;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1547240981;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
S3Endpoint -> public void setMaxConnections(int maxConnections);1547480087;Set the maxConnections parameter in the S3 client configuration;public void setMaxConnections(int maxConnections) {_        this.maxConnections = maxConnections__    };set,the,max,connections,parameter,in,the,s3,client,configuration;public,void,set,max,connections,int,max,connections,this,max,connections,max,connections
