# id;timestamp;commentText;codeText;commentWords;codeWords
S3Consumer -> protected void processRollback(Exchange exchange);1301589998;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1305790108;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1320497173;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1326561926;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1343079373;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1363645171;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1366112014;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1376549254;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1383138956;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1425474091;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1427718302;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1431086344;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1444576740;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1455358830;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1455359691;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1461827144;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1505201995;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1523968777;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1536687142;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1540108160;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            log.warn("Exchange failed, so rolling back message status: {}", exchange, cause)__        } else {_            log.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1540108163;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            log.warn("Exchange failed, so rolling back message status: {}", exchange, cause)__        } else {_            log.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processRollback(Exchange exchange);1545381338;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            log.warn("Exchange failed, so rolling back message status: {}", exchange, cause)__        } else {_            log.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
S3Consumer -> protected void processCommit(Exchange exchange);1301589998;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)__                _                LOG.trace("Object deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting object", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,object,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,object,e,exchange,set,exception,e
S3Consumer -> protected void processCommit(Exchange exchange);1305790108;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)__                _                LOG.trace("Object deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting object", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,object,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,object,e,exchange,set,exception,e
S3Consumer -> protected void processCommit(Exchange exchange);1320497173;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)__                _                LOG.trace("Object deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting object", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,object,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,object,e,exchange,set,exception,e
S3Consumer -> protected void processCommit(Exchange exchange);1326561926;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)__                _                LOG.trace("Object deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting object", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,object,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,object,e,exchange,set,exception,e
S3Consumer -> protected void processCommit(Exchange exchange);1343079373;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)__                _                LOG.trace("Object deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting object", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,object,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,object,e,exchange,set,exception,e
S3Consumer -> protected void processCommit(Exchange exchange);1363645171;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)__                _                LOG.trace("Object deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting object", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,object,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,object,e,exchange,set,exception,e
S3Consumer -> protected void processCommit(Exchange exchange);1366112014;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1376549254;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1383138956;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1425474091;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1427718302;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1431086344;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1444576740;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1455358830;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1455359691;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1461827144;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1505201995;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1523968777;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1536687142;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                LOG.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                LOG.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1540108160;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                log.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                log.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1540108163;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                log.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                log.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
S3Consumer -> protected void processCommit(Exchange exchange);1545381338;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String bucketName = exchange.getIn().getHeader(S3Constants.BUCKET_NAME, String.class)__                String key = exchange.getIn().getHeader(S3Constants.KEY, String.class)__                _                log.trace("Deleting object from bucket {} with key {}...", bucketName, key)__                _                getAmazonS3Client().deleteObject(bucketName, key)___                log.trace("Deleted object from bucket {} with key {}...", bucketName, key)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting object. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,bucket,name,exchange,get,in,get,header,s3constants,string,class,string,key,exchange,get,in,get,header,s3constants,key,string,class,log,trace,deleting,object,from,bucket,with,key,bucket,name,key,get,amazon,s3client,delete,object,bucket,name,key,log,trace,deleted,object,from,bucket,with,key,bucket,name,key,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,object,this,exception,is,ignored,exchange,e
