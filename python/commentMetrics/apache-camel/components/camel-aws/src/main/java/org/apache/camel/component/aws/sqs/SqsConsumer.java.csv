# id;timestamp;commentText;codeText;commentWords;codeWords
SqsConsumer -> protected void processCommit(Exchange exchange);1294212870;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                if (LOG.isTraceEnabled()) {_                    LOG.trace("Deleting message with receipt handle " + receiptHandle + "...")__                }_                _                getClient().deleteMessage(deleteRequest)__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,if,log,is,trace,enabled,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1294897375;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                if (LOG.isTraceEnabled()) {_                    LOG.trace("Deleting message with receipt handle " + receiptHandle + "...")__                }_                _                getClient().deleteMessage(deleteRequest)__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,if,log,is,trace,enabled,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1294920065;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                if (LOG.isTraceEnabled()) {_                    LOG.trace("Deleting message with receipt handle " + receiptHandle + "...")__                }_                _                getClient().deleteMessage(deleteRequest)__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,if,log,is,trace,enabled,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1296546062;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                if (LOG.isTraceEnabled()) {_                    LOG.trace("Deleting message with receipt handle " + receiptHandle + "...")__                }_                _                getClient().deleteMessage(deleteRequest)__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,if,log,is,trace,enabled,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1297975937;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                if (LOG.isTraceEnabled()) {_                    LOG.trace("Deleting message with receipt handle " + receiptHandle + "...")__                }_                _                getClient().deleteMessage(deleteRequest)__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,if,log,is,trace,enabled,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1300744323;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)__                _                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1305790108;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)__                _                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1320497173;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)__                _                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1326561926;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            LOG.warn("Error occurred during deleting message", e)__            exchange.setException(e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,log,warn,error,occurred,during,deleting,message,e,exchange,set,exception,e
SqsConsumer -> protected void processCommit(Exchange exchange);1338306385;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message.", e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,e
SqsConsumer -> protected void processCommit(Exchange exchange);1346834691;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message.", e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,e
SqsConsumer -> protected void processCommit(Exchange exchange);1347009881;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message.", e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,e
SqsConsumer -> protected void processCommit(Exchange exchange);1350912849;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message.", e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,e
SqsConsumer -> protected void processCommit(Exchange exchange);1351764934;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message.", e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,e
SqsConsumer -> protected void processCommit(Exchange exchange);1353020951;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message.", e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,e
SqsConsumer -> protected void processCommit(Exchange exchange);1363645171;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Message deleted")__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message.", e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,message,deleted,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,e
SqsConsumer -> protected void processCommit(Exchange exchange);1366112014;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1376549254;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (getConfiguration().isDeleteAfterRead()) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)__                _                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)__                _                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,get,configuration,is,delete,after,read,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1381487561;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1382950240;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1389726752;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1415211488;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1438781799;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {_            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1450458470;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1450458659;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1455358830;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1455359691;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1455700418;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1461912409;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1475236121;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1488361180;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1507722782;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1523968777;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                LOG.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                LOG.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1540108160;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                log.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                log.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1540108163;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                log.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                log.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processCommit(Exchange exchange);1545381338;Strategy to delete the message after being processed.__@param exchange the exchange;protected void processCommit(Exchange exchange) {_        try {__            if (shouldDelete(exchange)) {_                String receiptHandle = exchange.getIn().getHeader(SqsConstants.RECEIPT_HANDLE, String.class)__                DeleteMessageRequest deleteRequest = new DeleteMessageRequest(getQueueUrl(), receiptHandle)___                log.trace("Deleting message with receipt handle {}...", receiptHandle)___                getClient().deleteMessage(deleteRequest)___                log.trace("Deleted message with receipt handle {}...", receiptHandle)__            }_        } catch (AmazonClientException e) {_            getExceptionHandler().handleException("Error occurred during deleting message. This exception is ignored.", exchange, e)__        }_    };strategy,to,delete,the,message,after,being,processed,param,exchange,the,exchange;protected,void,process,commit,exchange,exchange,try,if,should,delete,exchange,string,receipt,handle,exchange,get,in,get,header,sqs,constants,string,class,delete,message,request,delete,request,new,delete,message,request,get,queue,url,receipt,handle,log,trace,deleting,message,with,receipt,handle,receipt,handle,get,client,delete,message,delete,request,log,trace,deleted,message,with,receipt,handle,receipt,handle,catch,amazon,client,exception,e,get,exception,handler,handle,exception,error,occurred,during,deleting,message,this,exception,is,ignored,exchange,e
SqsConsumer -> protected void processRollback(Exchange exchange);1294212870;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1294897375;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1294920065;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1296546062;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1297975937;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1300744323;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1305790108;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1320497173;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1326561926;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1338306385;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1346834691;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1347009881;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1350912849;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1351764934;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1353020951;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1363645171;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1366112014;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1376549254;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1381487561;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1382950240;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1389726752;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1415211488;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1438781799;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1450458470;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            LOG.warn("Exchange failed, so rolling back message status: " + exchange, cause)__        } else {_            LOG.warn("Exchange failed, so rolling back message status: {}", exchange)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,log,warn,exchange,failed,so,rolling,back,message,status,exchange,cause,else,log,warn,exchange,failed,so,rolling,back,message,status,exchange
SqsConsumer -> protected void processRollback(Exchange exchange);1450458659;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1455358830;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1455359691;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1455700418;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1461912409;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1475236121;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1488361180;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1507722782;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1523968777;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1540108160;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1540108163;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
SqsConsumer -> protected void processRollback(Exchange exchange);1545381338;Strategy when processing the exchange failed.__@param exchange the exchange;protected void processRollback(Exchange exchange) {_        Exception cause = exchange.getException()__        if (cause != null) {_            getExceptionHandler().handleException("Error during processing exchange. Will attempt to process the message on next poll.", exchange, cause)__        }_    };strategy,when,processing,the,exchange,failed,param,exchange,the,exchange;protected,void,process,rollback,exchange,exchange,exception,cause,exchange,get,exception,if,cause,null,get,exception,handler,handle,exception,error,during,processing,exchange,will,attempt,to,process,the,message,on,next,poll,exchange,cause
