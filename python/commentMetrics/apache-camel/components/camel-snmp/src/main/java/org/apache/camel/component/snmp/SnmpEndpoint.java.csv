commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;public Consumer createConsumer(Processor processor) throws Exception {     if (this.type == SnmpActionType.TRAP) {         SnmpTrapConsumer answer = new SnmpTrapConsumer(this, processor).         // As the SnmpTrapConsumer is not a polling consumer we don't need to call the configureConsumer here.         return answer.     } else if (this.type == SnmpActionType.POLL) {         SnmpOIDPoller answer = new SnmpOIDPoller(this, processor).         configureConsumer(answer).         return answer.     } else {         throw new IllegalArgumentException("The type '" + this.type + "' is not valid!").     } }
false;public;0;7;;public Producer createProducer() throws Exception {     if (this.type == SnmpActionType.TRAP) {         return new SnmpTrapProducer(this).     } else {         return new SnmpProducer(this).     } }
false;public;0;3;;public boolean isSingleton() {     return true. }
true;public;1;5;/**  * creates an exchange for the given message  *  * @param pdu the pdu  * @return an exchange  */ ;/**  * creates an exchange for the given message  *  * @param pdu the pdu  * @return an exchange  */ public Exchange createExchange(PDU pdu) {     Exchange exchange = super.createExchange().     exchange.setIn(new SnmpMessage(getCamelContext(), pdu)).     return exchange. }
true;public;2;5;/**  * creates an exchange for the given message  *  * @param pdu the pdu  * @param event a snmp4j CommandResponderEvent  * @return an exchange  */ ;/**  * creates an exchange for the given message  *  * @param pdu the pdu  * @param event a snmp4j CommandResponderEvent  * @return an exchange  */ public Exchange createExchange(PDU pdu, CommandResponderEvent event) {     Exchange exchange = super.createExchange().     exchange.setIn(new SnmpMessage(getCamelContext(), pdu, event)).     return exchange. }
true;public;0;4;/**  * creates and configures the endpoint  *  * @throws Exception if unable to setup connection  * @deprecated use {@link #start()} instead  */ ;/**  * creates and configures the endpoint  *  * @throws Exception if unable to setup connection  * @deprecated use {@link #start()} instead  */ @Deprecated public void initiate() throws Exception { // noop }
false;public;0;3;;public long getDelay() {     return delay. }
true;public;1;4;/**  * Sets update rate in seconds  *  * @param updateEvery the update rate in seconds  */ ;/**  * Sets update rate in seconds  *  * @param updateEvery the update rate in seconds  */ @Override public void setDelay(long updateEvery) {     this.delay = updateEvery. }
false;public;0;3;;public SnmpActionType getType() {     return this.type. }
true;public;1;3;/**  * Which operation to perform such as poll, trap, etc.  */ ;/**  * Which operation to perform such as poll, trap, etc.  */ public void setType(SnmpActionType type) {     this.type = type. }
false;public;0;3;;public OIDList getOids() {     return this.oids. }
true;public;1;3;/**  * Defines which values you are interested in. Please have a look at the Wikipedia to get a better understanding.  * You may provide a single OID or a coma separated list of OIDs.  * Example: oids="1.3.6.1.2.1.1.3.0,1.3.6.1.2.1.25.3.2.1.5.1,1.3.6.1.2.1.25.3.5.1.1.1,1.3.6.1.2.1.43.5.1.1.11.1"  */ ;/**  * Defines which values you are interested in. Please have a look at the Wikipedia to get a better understanding.  * You may provide a single OID or a coma separated list of OIDs.  * Example: oids="1.3.6.1.2.1.1.3.0,1.3.6.1.2.1.25.3.2.1.5.1,1.3.6.1.2.1.25.3.5.1.1.1,1.3.6.1.2.1.43.5.1.1.11.1"  */ public void setOids(OIDList oids) {     this.oids = oids. }
false;public;0;3;;public String getAddress() {     return this.address. }
false;public;1;3;;public void setAddress(String address) {     this.address = address. }
false;public;0;3;;public int getRetries() {     return this.retries. }
true;public;1;3;/**  * Defines how often a retry is made before canceling the request.  */ ;/**  * Defines how often a retry is made before canceling the request.  */ public void setRetries(int retries) {     this.retries = retries. }
false;public;0;3;;public int getTimeout() {     return this.timeout. }
true;public;1;3;/**  * Sets the timeout value for the request in millis.  */ ;/**  * Sets the timeout value for the request in millis.  */ public void setTimeout(int timeout) {     this.timeout = timeout. }
false;public;0;3;;public int getSnmpVersion() {     return this.snmpVersion. }
true;public;1;3;/**  * Sets the snmp version for the request.  * <p/>  * The value 0 means SNMPv1, 1 means SNMPv2c, and the value 3 means SNMPv3  */ ;/**  * Sets the snmp version for the request.  * <p/>  * The value 0 means SNMPv1, 1 means SNMPv2c, and the value 3 means SNMPv3  */ public void setSnmpVersion(int snmpVersion) {     this.snmpVersion = snmpVersion. }
false;public;0;3;;public String getSnmpCommunity() {     return this.snmpCommunity. }
true;public;1;3;/**  * Sets the community octet string for the snmp request.  */ ;/**  * Sets the community octet string for the snmp request.  */ public void setSnmpCommunity(String snmpCommunity) {     this.snmpCommunity = snmpCommunity. }
false;public;0;3;;public String getProtocol() {     return this.protocol. }
true;public;1;3;/**  * Here you can select which protocol to use. You can use either udp or tcp.  */ ;/**  * Here you can select which protocol to use. You can use either udp or tcp.  */ public void setProtocol(String protocol) {     this.protocol = protocol. }
false;protected;0;24;;@Override protected void doStart() throws Exception {     super.doStart().     URI uri = URI.create(getEndpointUri()).     String host = uri.getHost().     int port = uri.getPort().     if (host == null || host.trim().length() < 1) {         host = "127.0.0.1".     }     if (port == -1) {         if (getType() == SnmpActionType.POLL) {             // default snmp poll port             port = 161.         } else {             // default trap port             port = 162.         }     }     // set the address     String address = String.format("%s:%s/%d", getProtocol(), host, port).     log.debug("Using snmp address {}", address).     setAddress(address). }
false;public;0;3;;public int getSecurityLevel() {     return securityLevel. }
true;public;1;3;/**  * Sets the security level for this target. The supplied security level must  * be supported by the security model dependent information associated with  * the security name set for this target.  * <p/>  * The value 1 means: No authentication and no encryption. Anyone can create and read messages with this security level  * The value 2 means: Authentication and no encryption. Only the one with the right authentication key can create  * messages with this security level, but anyone can read the contents of the message.  * The value 3 means: Authentication and encryption. Only the one with the right authentication key can create messages  * with this security level, and only the one with the right encryption/decryption key can read the contents of the message.  */ ;/**  * Sets the security level for this target. The supplied security level must  * be supported by the security model dependent information associated with  * the security name set for this target.  * <p/>  * The value 1 means: No authentication and no encryption. Anyone can create and read messages with this security level  * The value 2 means: Authentication and no encryption. Only the one with the right authentication key can create  * messages with this security level, but anyone can read the contents of the message.  * The value 3 means: Authentication and encryption. Only the one with the right authentication key can create messages  * with this security level, and only the one with the right encryption/decryption key can read the contents of the message.  */ public void setSecurityLevel(int securityLevel) {     this.securityLevel = securityLevel. }
false;public;0;3;;public String getSecurityName() {     return securityName. }
true;public;1;3;/**  * Sets the security name to be used with this target.  */ ;/**  * Sets the security name to be used with this target.  */ public void setSecurityName(String securityName) {     this.securityName = securityName. }
false;public;0;3;;public String getAuthenticationProtocol() {     return authenticationProtocol. }
true;public;1;3;/**  * Authentication protocol to use if security level is set to enable authentication  * The possible values are: MD5, SHA1  */ ;/**  * Authentication protocol to use if security level is set to enable authentication  * The possible values are: MD5, SHA1  */ public void setAuthenticationProtocol(String authenticationProtocol) {     this.authenticationProtocol = authenticationProtocol. }
false;public;0;3;;public String getAuthenticationPassphrase() {     return authenticationPassphrase. }
true;public;1;3;/**  * The authentication passphrase. If not <code>null</code>, <code>authenticationProtocol</code> must also be not  * <code>null</code>. RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes.  * If the length of <code>authenticationPassphrase</code> is less than 8 bytes an <code>IllegalArgumentException</code> is thrown.  */ ;/**  * The authentication passphrase. If not <code>null</code>, <code>authenticationProtocol</code> must also be not  * <code>null</code>. RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes.  * If the length of <code>authenticationPassphrase</code> is less than 8 bytes an <code>IllegalArgumentException</code> is thrown.  */ public void setAuthenticationPassphrase(String authenticationPassphrase) {     this.authenticationPassphrase = authenticationPassphrase. }
false;public;0;3;;public String getPrivacyProtocol() {     return privacyProtocol. }
true;public;1;3;/**  * The privacy protocol ID to be associated with this user. If set to <code>null</code>, this user only supports unencrypted messages.  */ ;/**  * The privacy protocol ID to be associated with this user. If set to <code>null</code>, this user only supports unencrypted messages.  */ public void setPrivacyProtocol(String privacyProtocol) {     this.privacyProtocol = privacyProtocol. }
false;public;0;3;;public String getPrivacyPassphrase() {     return privacyPassphrase. }
true;public;1;3;/**  * The privacy passphrase. If not <code>null</code>, <code>privacyProtocol</code> must also be not <code>null</code>.  * RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes. If the length of  * <code>authenticationPassphrase</code> is less than 8 bytes an <code>IllegalArgumentException</code> is thrown.  */ ;/**  * The privacy passphrase. If not <code>null</code>, <code>privacyProtocol</code> must also be not <code>null</code>.  * RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes. If the length of  * <code>authenticationPassphrase</code> is less than 8 bytes an <code>IllegalArgumentException</code> is thrown.  */ public void setPrivacyPassphrase(String privacyPassphrase) {     this.privacyPassphrase = privacyPassphrase. }
false;public;0;3;;public String getSnmpContextName() {     return snmpContextName. }
true;public;1;3;/**  * Sets the context name field of this scoped PDU.  */ ;/**  * Sets the context name field of this scoped PDU.  */ public void setSnmpContextName(String snmpContextName) {     this.snmpContextName = snmpContextName. }
false;public;0;3;;public String getSnmpContextEngineId() {     return snmpContextEngineId. }
true;public;1;3;/**  * Sets the context engine ID field of the scoped PDU.  */ ;/**  * Sets the context engine ID field of the scoped PDU.  */ public void setSnmpContextEngineId(String snmpContextEngineId) {     this.snmpContextEngineId = snmpContextEngineId. }
false;public;0;3;;public boolean isTreeList() {     return treeList. }
true;public;1;3;/**  * Sets the flag whether the scoped PDU will be displayed as the list  * if it has child elements in its tree  */ ;/**  * Sets the flag whether the scoped PDU will be displayed as the list  * if it has child elements in its tree  */ public void setTreeList(boolean treeList) {     this.treeList = treeList. }
false;public;0;5;;@Override public String toString() {     // only show address to avoid user and password details to be shown     return "snmp://" + address. }
