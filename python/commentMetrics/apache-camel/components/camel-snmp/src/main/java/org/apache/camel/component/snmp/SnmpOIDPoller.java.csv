commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;78;;@Override protected void doStart() throws Exception {     super.doStart().     this.targetAddress = GenericAddress.parse(this.endpoint.getAddress()).     // either tcp or udp     if ("tcp".equals(endpoint.getProtocol())) {         this.transport = new DefaultTcpTransportMapping().     } else if ("udp".equals(endpoint.getProtocol())) {         this.transport = new DefaultUdpTransportMapping().     } else {         throw new IllegalArgumentException("Unknown protocol: " + endpoint.getProtocol()).     }     this.snmp = new Snmp(this.transport).     if (SnmpConstants.version3 == endpoint.getSnmpVersion()) {         UserTarget userTarget = new UserTarget().         userTarget.setSecurityLevel(endpoint.getSecurityLevel()).         userTarget.setSecurityName(convertToOctetString(endpoint.getSecurityName())).         userTarget.setAddress(targetAddress).         userTarget.setRetries(endpoint.getRetries()).         userTarget.setTimeout(endpoint.getTimeout()).         userTarget.setVersion(endpoint.getSnmpVersion()).         this.target = userTarget.         USM usm = new USM(SecurityProtocols.getInstance(), new OctetString(MPv3.createLocalEngineID()), 0).         SecurityModels.getInstance().addSecurityModel(usm).         OID authProtocol = convertAuthenticationProtocol(endpoint.getAuthenticationProtocol()).         OctetString authPwd = convertToOctetString(endpoint.getAuthenticationPassphrase()).         OID privProtocol = convertPrivacyProtocol(endpoint.getPrivacyProtocol()).         OctetString privPwd = convertToOctetString(endpoint.getPrivacyPassphrase()).         UsmUser user = new UsmUser(convertToOctetString(endpoint.getSecurityName()), authProtocol, authPwd, privProtocol, privPwd).         usm.addUser(convertToOctetString(endpoint.getSecurityName()), user).         ScopedPDU scopedPDU = new ScopedPDU().         if (endpoint.getSnmpContextEngineId() != null) {             scopedPDU.setContextEngineID(new OctetString(endpoint.getSnmpContextEngineId())).         }         if (endpoint.getSnmpContextName() != null) {             scopedPDU.setContextName(new OctetString(endpoint.getSnmpContextName())).         }         this.pdu = scopedPDU.     } else {         CommunityTarget communityTarget = new CommunityTarget().         communityTarget.setCommunity(convertToOctetString(endpoint.getSnmpCommunity())).         communityTarget.setAddress(targetAddress).         communityTarget.setRetries(endpoint.getRetries()).         communityTarget.setTimeout(endpoint.getTimeout()).         communityTarget.setVersion(endpoint.getSnmpVersion()).         this.target = communityTarget.         this.pdu = new PDU().     }     // listen to the transport     if (log.isDebugEnabled()) {         log.debug("Starting OID poller on {} using {} protocol", endpoint.getAddress(), endpoint.getProtocol()).     }     this.transport.listen().     if (log.isInfoEnabled()) {         log.info("Started OID poller on {} using {} protocol", endpoint.getAddress(), endpoint.getProtocol()).     } }
false;protected;0;11;;@Override protected void doStop() throws Exception {     // stop listening to the transport     if (this.transport != null && this.transport.isListening()) {         log.info("Stopping OID poller on {}", targetAddress).         this.transport.close().         log.info("Stopped OID poller on {}", targetAddress).     }     super.doStop(). }
false;protected;0;46;;@Override protected int poll() throws Exception {     this.pdu.clear().     int type = this.getPduType(this.endpoint.getType()).     this.pdu.setType(type).     if (!endpoint.isTreeList()) {         // prepare the request items         for (OID oid : this.endpoint.getOids()) {             this.pdu.add(new VariableBinding(oid)).         }     } else {         TreeUtils treeUtils = new TreeUtils(snmp, new DefaultPDUFactory()).         for (OID oid : this.endpoint.getOids()) {             List events = treeUtils.getSubtree(target, new OID(oid)).             for (Object eventObj : events) {                 TreeEvent event = (TreeEvent) eventObj.                 if (event == null) {                     log.warn("Event is null").                     continue.                 }                 if (event.isError()) {                     log.error("Error in event: {}", event.getErrorMessage()).                     continue.                 }                 VariableBinding[] varBindings = event.getVariableBindings().                 if (varBindings == null || varBindings.length == 0) {                     continue.                 }                 for (VariableBinding varBinding : varBindings) {                     if (varBinding == null) {                         continue.                     }                     this.pdu.add(varBinding).                 }             }         }     }     // send the request     snmp.send(pdu, target, null, this).     return 1. }
false;public;1;16;;public void onResponse(ResponseEvent event) {     // Always cancel async request when response has been received     // otherwise a memory leak is created! Not canceling a request     // immediately can be useful when sending a request to a broadcast address.     ((Snmp) event.getSource()).cancel(event.getRequest(), this).     // check for valid response     if (event.getRequest() == null || event.getResponse() == null) {         // ignore null requests/responses         log.debug("Received invalid SNMP event. Request: " + event.getRequest() + " / Response: " + event.getResponse()).         return.     }     PDU pdu = event.getResponse().     processPDU(pdu). }
true;public;1;11;/**  * processes the pdu message  *  * @param pdu the pdu  */ ;/**  * processes the pdu message  *  * @param pdu the pdu  */ public void processPDU(PDU pdu) {     if (log.isDebugEnabled()) {         log.debug("Received response event for {} : {}", this.endpoint.getAddress(), pdu).     }     Exchange exchange = endpoint.createExchange(pdu).     try {         getProcessor().process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException(e).     } }
true;public;0;3;/**  * @return Returns the target.  */ ;/**  * @return Returns the target.  */ public Target getTarget() {     return this.target. }
true;public;1;3;/**  * @param target The target to set.  */ ;/**  * @param target The target to set.  */ public void setTarget(Target target) {     this.target = target. }
false;private;1;6;;private OctetString convertToOctetString(String value) {     if (value == null) {         return null.     }     return new OctetString(value). }
false;private;1;12;;private OID convertAuthenticationProtocol(String authenticationProtocol) {     if (authenticationProtocol == null) {         return null.     }     if ("MD5".equals(authenticationProtocol)) {         return AuthMD5.ID.     } else if ("SHA1".equals(authenticationProtocol)) {         return AuthSHA.ID.     } else {         throw new IllegalArgumentException("Unknown authentication protocol: " + authenticationProtocol).     } }
false;private;1;18;;private OID convertPrivacyProtocol(String privacyProtocol) {     if (privacyProtocol == null) {         return null.     }     if ("DES".equals(privacyProtocol)) {         return PrivDES.ID.     } else if ("TRIDES".equals(privacyProtocol)) {         return Priv3DES.ID.     } else if ("AES128".equals(privacyProtocol)) {         return PrivAES128.ID.     } else if ("AES192".equals(privacyProtocol)) {         return PrivAES192.ID.     } else if ("AES256".equals(privacyProtocol)) {         return PrivAES256.ID.     } else {         throw new IllegalArgumentException("Unknown privacy protocol: " + privacyProtocol).     } }
false;private;1;7;;private int getPduType(SnmpActionType type) {     if (SnmpActionType.GET_NEXT == type) {         return PDU.GETNEXT.     } else {         return PDU.GET.     } }
