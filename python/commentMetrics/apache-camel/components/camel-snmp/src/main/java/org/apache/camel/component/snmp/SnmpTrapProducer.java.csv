commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;18;;@Override protected void doStart() throws Exception {     super.doStart().     this.targetAddress = GenericAddress.parse(this.endpoint.getAddress()).     log.debug("targetAddress: {}", targetAddress).     this.usm = new USM(SecurityProtocols.getInstance(), new OctetString(MPv3.createLocalEngineID()), 0).     SecurityModels.getInstance().addSecurityModel(this.usm).     // setting up target     this.target = new CommunityTarget().     this.target.setCommunity(new OctetString(endpoint.getSnmpCommunity())).     this.target.setAddress(this.targetAddress).     this.target.setRetries(this.endpoint.getRetries()).     this.target.setTimeout(this.endpoint.getTimeout()).     this.target.setVersion(this.endpoint.getSnmpVersion()). }
false;protected;0;12;;@Override protected void doStop() throws Exception {     super.doStop().     try {         SecurityModels.getInstance().removeSecurityModel(new Integer32(this.usm.getID())).     } finally {         this.targetAddress = null.         this.usm = null.         this.target = null.     } }
false;public;1;44;;@Override public void process(final Exchange exchange) throws Exception {     // load connection data only if the endpoint is enabled     Snmp snmp = null.     TransportMapping<? extends Address> transport = null.     try {         log.debug("Starting SNMP Trap producer on {}", this.endpoint.getAddress()).         // either tcp or udp         if ("tcp".equals(this.endpoint.getProtocol())) {             transport = new DefaultTcpTransportMapping().         } else if ("udp".equals(this.endpoint.getProtocol())) {             transport = new DefaultUdpTransportMapping().         } else {             throw new IllegalArgumentException("Unknown protocol: " + this.endpoint.getProtocol()).         }         snmp = new Snmp(transport).         log.debug("SnmpTrap: getting pdu from body").         PDU trap = exchange.getIn().getBody(PDU.class).         trap.setErrorIndex(0).         trap.setErrorStatus(0).         trap.setMaxRepetitions(0).         if (this.endpoint.getSnmpVersion() == SnmpConstants.version1) {             trap.setType(PDU.V1TRAP).         } else {             trap.setType(PDU.TRAP).         }         log.debug("SnmpTrap: sending").         snmp.send(trap, this.target).         log.debug("SnmpTrap: sent").     } finally {         try {             transport.close().         } catch (Exception e) {         }         try {             snmp.close().         } catch (Exception e) {         }     } }
