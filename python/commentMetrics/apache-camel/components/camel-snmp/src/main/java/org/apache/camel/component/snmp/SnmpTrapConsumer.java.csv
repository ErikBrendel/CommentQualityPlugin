commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;32;;@Override protected void doStart() throws Exception {     super.doStart().     // load connection data only if the endpoint is enabled     if (log.isInfoEnabled()) {         log.info("Starting trap consumer on {}", this.endpoint.getAddress()).     }     this.listenGenericAddress = GenericAddress.parse(this.endpoint.getAddress()).     // either tcp or udp     if ("tcp".equals(endpoint.getProtocol())) {         this.transport = new DefaultTcpTransportMapping((TcpAddress) this.listenGenericAddress).     } else if ("udp".equals(endpoint.getProtocol())) {         this.transport = new DefaultUdpTransportMapping((UdpAddress) this.listenGenericAddress).     } else {         throw new IllegalArgumentException("Unknown protocol: " + endpoint.getProtocol()).     }     this.snmp = new Snmp(transport).     this.snmp.addCommandResponder(this).     // listen to the transport     if (log.isDebugEnabled()) {         log.debug("Starting trap consumer on {} using {} protocol", endpoint.getAddress(), endpoint.getProtocol()).     }     this.transport.listen().     if (log.isInfoEnabled()) {         log.info("Started trap consumer on {} using {} protocol", endpoint.getAddress(), endpoint.getProtocol()).     } }
false;protected;0;13;;@Override protected void doStop() throws Exception {     // stop listening to the transport     if (this.transport != null && this.transport.isListening()) {         if (log.isDebugEnabled()) {             log.debug("Stopping trap consumer on {}", this.endpoint.getAddress()).         }         this.transport.close().         log.info("Stopped trap consumer on {}", this.endpoint.getAddress()).     }     super.doStop(). }
false;public;1;34;;public void processPdu(CommandResponderEvent event) {     PDU pdu = event.getPDU().     // check PDU not null     if (pdu != null) {         // code take from the book "Essential SNMP"         if ((pdu.getType() != PDU.TRAP) && (pdu.getType() != PDU.V1TRAP) && (pdu.getType() != PDU.REPORT) && (pdu.getType() != PDU.RESPONSE)) {             // first response the inform-message and then process the             // message             pdu.setErrorIndex(0).             pdu.setErrorStatus(0).             pdu.setType(PDU.RESPONSE).             StatusInformation statusInformation = new StatusInformation().             StateReference ref = event.getStateReference().             try {                 event.getMessageDispatcher().returnResponsePdu(event.getMessageProcessingModel(), event.getSecurityModel(), event.getSecurityName(), event.getSecurityLevel(), pdu, event.getMaxSizeResponsePDU(), ref, statusInformation).                 if (log.isDebugEnabled()) {                     log.debug("response to INFORM sent").                 }             } catch (MessageException ex) {                 getExceptionHandler().handleException(ex).             }         }         processPDU(pdu, event).     } else {         log.debug("Received invalid trap PDU").     } }
false;public;2;14;;public void processPDU(PDU pdu, CommandResponderEvent event) {     if (log.isDebugEnabled()) {         log.debug("Received trap event for {} : {}", this.endpoint.getAddress(), pdu).     }     Exchange exchange = endpoint.createExchange(pdu, event).     try {         getProcessor().process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     if (exchange.getException() != null) {         getExceptionHandler().handleException(exchange.getException()).     } }
