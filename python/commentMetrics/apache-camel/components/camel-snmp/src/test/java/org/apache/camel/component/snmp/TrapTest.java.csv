commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testStartRoute() throws Exception { // do nothing here , just make sure the camel route can started. }
false;public;0;44;;@Test public void testSendReceiveTraps() throws Exception {     // Create a trap PDU     PDU trap = new PDU().     trap.setType(PDU.TRAP).     OID oid = new OID("1.2.3.4.5").     trap.add(new VariableBinding(SnmpConstants.snmpTrapOID, oid)).     // put your uptime here     trap.add(new VariableBinding(SnmpConstants.sysUpTime, new TimeTicks(5000))).     trap.add(new VariableBinding(SnmpConstants.sysDescr, new OctetString("System Description"))).     // Add Payload     Variable var = new OctetString("some string").     trap.add(new VariableBinding(oid, var)).     // Send it     LOG.info("Sending pdu " + trap).     Endpoint endpoint = context.getEndpoint("direct:snmptrap").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody(trap).     Producer producer = endpoint.createProducer().     producer.process(exchange).     synchronized (this) {         Thread.sleep(1000).     }     // If all goes right it should come here     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.assertIsSatisfied().     List<Exchange> exchanges = mock.getExchanges().     SnmpMessage msg = (SnmpMessage) exchanges.get(0).getIn().     PDU receivedTrap = msg.getSnmpMessage().     Assert.assertEquals(trap, receivedTrap).     if (LOG.isInfoEnabled()) {         LOG.info("Received SNMP TRAP:").         Vector<? extends VariableBinding> variableBindings = receivedTrap.getVariableBindings().         for (VariableBinding vb : variableBindings) {             LOG.info("  " + vb.toString()).         }     } }
false;public;0;5;;public void configure() {     from("direct:snmptrap").log(LoggingLevel.INFO, "Sending Trap pdu ${body}").to("snmp:127.0.0.1:1662?protocol=udp&type=TRAP&snmpVersion=" + SnmpConstants.version2c). }
false;public;0;5;;public void configure() {     from("snmp:0.0.0.0:1662?protocol=udp&type=TRAP&snmpVersion=" + SnmpConstants.version2c).id("SnmpTrapConsumer").to("mock:result"). }
true;protected;0;18;/**  * RouteBuilders for the SNMP TRAP producer and consumer  */ ;/**  * RouteBuilders for the SNMP TRAP producer and consumer  */ protected RoutesBuilder[] createRouteBuilders() {     return new RoutesBuilder[] { new RouteBuilder() {          public void configure() {             from("direct:snmptrap").log(LoggingLevel.INFO, "Sending Trap pdu ${body}").to("snmp:127.0.0.1:1662?protocol=udp&type=TRAP&snmpVersion=" + SnmpConstants.version2c).         }     }, new RouteBuilder() {          public void configure() {             from("snmp:0.0.0.0:1662?protocol=udp&type=TRAP&snmpVersion=" + SnmpConstants.version2c).id("SnmpTrapConsumer").to("mock:result").         }     } }. }
