commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Optional<CamelClusterMember> getLeader() {     return currentLeader. }
false;public;0;4;;@Override public CamelClusterMember getLocalMember() {     return localMember. }
false;public;0;4;;@Override public List<CamelClusterMember> getMembers() {     return currentMembers. }
false;protected;0;36;;@Override protected void doStart() throws Exception {     if (controller == null) {         this.kubernetesClient = KubernetesHelper.getKubernetesClient(configuration).         controller = new KubernetesLeadershipController(camelContext, kubernetesClient, this.lockConfiguration, event -> {             if (event instanceof KubernetesClusterEvent.KubernetesClusterLeaderChangedEvent) {                 // New leader                 Optional<String> leader = KubernetesClusterEvent.KubernetesClusterLeaderChangedEvent.class.cast(event).getData().                 currentLeader = leader.map(this::toMember).                 fireLeadershipChangedEvent(currentLeader).             } else if (event instanceof KubernetesClusterEvent.KubernetesClusterMemberListChangedEvent) {                 Set<String> members = KubernetesClusterEvent.KubernetesClusterMemberListChangedEvent.class.cast(event).getData().                 Set<String> oldMembers = currentMembers.stream().map(CamelClusterMember::getId).collect(Collectors.toSet()).                 currentMembers = members.stream().map(this::toMember).collect(Collectors.toList()).                 // Computing differences                 Set<String> added = new HashSet<>(members).                 added.removeAll(oldMembers).                 Set<String> removed = new HashSet<>(oldMembers).                 removed.removeAll(members).                 for (String id : added) {                     fireMemberAddedEvent(toMember(id)).                 }                 for (String id : removed) {                     fireMemberRemovedEvent(toMember(id)).                 }             }         }).         controller.start().     } }
false;protected;0;9;;@Override protected void doStop() throws Exception {     if (controller != null) {         controller.stop().         controller = null.         kubernetesClient.close().         kubernetesClient = null.     } }
false;protected;1;6;;protected KubernetesClusterMember toMember(String name) {     if (name.equals(localMember.getId())) {         return localMember.     }     return memberCache.computeIfAbsent(name, KubernetesClusterMember::new). }
false;public;0;4;;@Override public boolean isLeader() {     return currentLeader.isPresent() && currentLeader.get().getId().equals(podName). }
false;public;0;4;;@Override public boolean isLocal() {     return ObjectHelper.equal(lockConfiguration.getPodName(), podName). }
false;public;0;4;;@Override public String getId() {     return podName. }
false;public;0;7;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("KubernetesClusterMember{").     sb.append("podName='").append(podName).append('\'').     sb.append('}').     return sb.toString(). }
