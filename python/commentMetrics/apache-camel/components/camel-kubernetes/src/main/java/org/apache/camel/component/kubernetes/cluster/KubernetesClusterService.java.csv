commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected KubernetesClusterView createView(String namespace) throws Exception {     KubernetesLockConfiguration lockConfig = lockConfigWithGroupNameAndDefaults(namespace).     KubernetesConfiguration config = setConfigDefaults(this.configuration.copy(), lockConfig).     return new KubernetesClusterView(getCamelContext(), this, config, lockConfig). }
false;protected;2;11;;protected KubernetesConfiguration setConfigDefaults(KubernetesConfiguration configuration, KubernetesLockConfiguration lockConfiguration) {     if (configuration.getConnectionTimeout() == null) {         // Set the connection timeout to be much lower than the renewal deadline,         // to avoid losing the leadership in case of stale connections         int timeout = (int) (lockConfiguration.getRenewDeadlineMillis() / 3).         timeout = Math.max(timeout, 3000).         timeout = Math.min(timeout, 30000).         configuration.setConnectionTimeout(timeout).     }     return configuration. }
false;protected;1;43;;protected KubernetesLockConfiguration lockConfigWithGroupNameAndDefaults(String groupName) {     KubernetesLockConfiguration config = this.lockConfiguration.copy().     config.setGroupName(ObjectHelper.notNull(groupName, "groupName")).     // Determine the pod name if not provided     if (config.getPodName() == null) {         config.setPodName(System.getenv("HOSTNAME")).         if (config.getPodName() == null) {             try {                 config.setPodName(InetAddress.getLocalHost().getHostName()).             } catch (Exception e) {                 throw new RuntimeCamelException("Unable to determine pod name", e).             }         }     }     ObjectHelper.notNull(config.getConfigMapName(), "configMapName").     ObjectHelper.notNull(config.getClusterLabels(), "clusterLabels").     if (config.getJitterFactor() < 1) {         throw new IllegalStateException("jitterFactor must be >= 1 (found: " + config.getJitterFactor() + ")").     }     if (config.getRetryPeriodMillis() <= 0) {         throw new IllegalStateException("retryPeriodMillis must be > 0 (found: " + config.getRetryPeriodMillis() + ")").     }     if (config.getRenewDeadlineMillis() <= 0) {         throw new IllegalStateException("renewDeadlineMillis must be > 0 (found: " + config.getRenewDeadlineMillis() + ")").     }     if (config.getLeaseDurationMillis() <= 0) {         throw new IllegalStateException("leaseDurationMillis must be > 0 (found: " + config.getLeaseDurationMillis() + ")").     }     if (config.getLeaseDurationMillis() <= config.getRenewDeadlineMillis()) {         throw new IllegalStateException("leaseDurationMillis must be greater than renewDeadlineMillis " + "(" + config.getLeaseDurationMillis() + " is not greater than " + config.getRenewDeadlineMillis() + ")").     }     if (config.getRenewDeadlineMillis() <= config.getJitterFactor() * config.getRetryPeriodMillis()) {         throw new IllegalStateException("renewDeadlineMillis must be greater than jitterFactor*retryPeriodMillis " + "(" + config.getRenewDeadlineMillis() + " is not greater than " + config.getJitterFactor() + "*" + config.getRetryPeriodMillis() + ")").     }     return config. }
false;public;0;3;;public String getMasterUrl() {     return configuration.getMasterUrl(). }
true;public;1;3;/**  * Set the URL of the Kubernetes master (read from Kubernetes client properties by default).  */ ;/**  * Set the URL of the Kubernetes master (read from Kubernetes client properties by default).  */ public void setMasterUrl(String masterUrl) {     configuration.setMasterUrl(masterUrl). }
false;public;0;3;;public Integer getConnectionTimeoutMillis() {     return configuration.getConnectionTimeout(). }
true;public;1;3;/**  * Connection timeout in milliseconds to use when making requests to the Kubernetes API server.  */ ;/**  * Connection timeout in milliseconds to use when making requests to the Kubernetes API server.  */ public void setConnectionTimeoutMillis(Integer connectionTimeout) {     configuration.setConnectionTimeout(connectionTimeout). }
false;public;0;3;;public String getKubernetesNamespace() {     return this.lockConfiguration.getKubernetesResourcesNamespace(). }
true;public;1;3;/**  * Set the name of the Kubernetes namespace containing the pods and the configmap (autodetected by default)  */ ;/**  * Set the name of the Kubernetes namespace containing the pods and the configmap (autodetected by default)  */ public void setKubernetesNamespace(String kubernetesNamespace) {     this.lockConfiguration.setKubernetesResourcesNamespace(kubernetesNamespace). }
false;public;0;3;;public String getConfigMapName() {     return this.lockConfiguration.getConfigMapName(). }
true;public;1;3;/**  * Set the name of the ConfigMap used to do optimistic locking (defaults to 'leaders').  */ ;/**  * Set the name of the ConfigMap used to do optimistic locking (defaults to 'leaders').  */ public void setConfigMapName(String configMapName) {     this.lockConfiguration.setConfigMapName(configMapName). }
false;public;0;3;;public String getPodName() {     return this.lockConfiguration.getPodName(). }
true;public;1;3;/**  * Set the name of the current pod (autodetected from container host name by default).  */ ;/**  * Set the name of the current pod (autodetected from container host name by default).  */ public void setPodName(String podName) {     this.lockConfiguration.setPodName(podName). }
false;public;0;3;;public Map<String, String> getClusterLabels() {     return lockConfiguration.getClusterLabels(). }
true;public;1;3;/**  * Set the labels used to identify the pods composing the cluster.  */ ;/**  * Set the labels used to identify the pods composing the cluster.  */ public void setClusterLabels(Map<String, String> clusterLabels) {     lockConfiguration.setClusterLabels(clusterLabels). }
false;public;2;3;;public void addToClusterLabels(String key, String value) {     lockConfiguration.addToClusterLabels(key, value). }
false;public;0;3;;public double getJitterFactor() {     return lockConfiguration.getJitterFactor(). }
true;public;1;3;/**  * A jitter factor to apply in order to prevent all pods to call Kubernetes APIs in the same instant.  */ ;/**  * A jitter factor to apply in order to prevent all pods to call Kubernetes APIs in the same instant.  */ public void setJitterFactor(double jitterFactor) {     lockConfiguration.setJitterFactor(jitterFactor). }
false;public;0;3;;public long getLeaseDurationMillis() {     return lockConfiguration.getLeaseDurationMillis(). }
true;public;1;3;/**  * The default duration of the lease for the current leader.  */ ;/**  * The default duration of the lease for the current leader.  */ public void setLeaseDurationMillis(long leaseDurationMillis) {     lockConfiguration.setLeaseDurationMillis(leaseDurationMillis). }
false;public;0;3;;public long getRenewDeadlineMillis() {     return lockConfiguration.getRenewDeadlineMillis(). }
true;public;1;3;/**  * The deadline after which the leader must stop its services because it may have lost the leadership.  */ ;/**  * The deadline after which the leader must stop its services because it may have lost the leadership.  */ public void setRenewDeadlineMillis(long renewDeadlineMillis) {     lockConfiguration.setRenewDeadlineMillis(renewDeadlineMillis). }
false;public;0;3;;public long getRetryPeriodMillis() {     return lockConfiguration.getRetryPeriodMillis(). }
true;public;1;3;/**  * The time between two subsequent attempts to check and acquire the leadership.  * It is randomized using the jitter factor.  */ ;/**  * The time between two subsequent attempts to check and acquire the leadership.  * It is randomized using the jitter factor.  */ public void setRetryPeriodMillis(long retryPeriodMillis) {     lockConfiguration.setRetryPeriodMillis(retryPeriodMillis). }
