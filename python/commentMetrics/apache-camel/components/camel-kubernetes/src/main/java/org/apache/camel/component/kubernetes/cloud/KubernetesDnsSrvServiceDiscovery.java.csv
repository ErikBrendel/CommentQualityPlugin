commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;10;/**  * Compute the query string to lookup SRV records.  *  * https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#supported-dns-schema  * https://github.com/kubernetes/dns/blob/master/docs/specification.md  *  * @param serviceName the service name  * @return the query  */ ;/**  * Compute the query string to lookup SRV records.  *  * https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#supported-dns-schema  * https://github.com/kubernetes/dns/blob/master/docs/specification.md  *  * @param serviceName the service name  * @return the query  */ protected String computeQueryString(String serviceName) {     // _<port_name>._<port_proto>.<serviceName>.<namespace>.svc.<zone>.     return String.format("_%s._%s.%s.%s.svc.%s", this.portName, this.portProtocol, serviceName, this.namespace, this.zone). }
false;public;1;39;;@Override public List<ServiceDefinition> getServices(String name) {     try {         final String query = cache.computeIfAbsent(name, this::computeQueryString).         final DirContext ctx = new InitialDirContext(ENV).         final NamingEnumeration<?> resolved = ctx.getAttributes(query, ATTRIBUTE_IDS).get("srv").getAll().         if (resolved.hasMore()) {             List<ServiceDefinition> servers = new LinkedList<>().             while (resolved.hasMore()) {                 String record = (String) resolved.next().                 String[] items = record.split(" ", -1).                 String host = items[3].trim().                 String port = items[2].trim().                 if (ObjectHelper.isEmpty(host) || ObjectHelper.isEmpty(port)) {                     continue.                 }                 if (LOGGER.isDebugEnabled()) {                     LOGGER.debug("Found service address {}:{} for query: {}", host, port, query).                 }                 if (!"0".equals(port)) {                     servers.add(new DefaultServiceDefinition(name, host, Integer.parseInt(port))).                 }             }             return servers.         } else {             LOGGER.warn("Could not find any service for name={}, query={}", name, query).         }     } catch (Exception e) {         throw new RuntimeException("Could not resolve services via DNSSRV", e).     }     return Collections.emptyList(). }
false;public;0;9;;@Override public String toString() {     return "KubernetesDnsSrvServiceDiscovery{" + "namespace='" + namespace + '\'' + ", portName='" + portName + '\'' + ", portProtocol='" + portProtocol + '\'' + ", zone='" + zone + '\'' + '}'. }
