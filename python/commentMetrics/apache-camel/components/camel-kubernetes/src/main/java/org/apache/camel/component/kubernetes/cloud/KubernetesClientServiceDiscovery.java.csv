commented;modifiers;parameterAmount;loc;comment;code
false;public;1;30;;@Override public List<ServiceDefinition> getServices(String name) {     LOG.debug("Discovering endpoints from namespace: {} with name: {}", this.namespace, name).     Endpoints endpoints = client.endpoints().inNamespace(this.namespace).withName(name).get().     List<ServiceDefinition> result = new ArrayList<>().     if (endpoints != null) {         if (LOG.isDebugEnabled()) {             LOG.debug("Found {} endpoints in namespace: {} for name: {} and portName: {}", endpoints.getSubsets().size(), this.namespace, name, this.portName).         }         for (EndpointSubset subset : endpoints.getSubsets()) {             if (subset.getPorts().size() == 1) {                 addServers(name, result, subset.getPorts().get(0), subset).             } else {                 final List<EndpointPort> ports = subset.getPorts().                 final int portSize = ports.size().                 EndpointPort port.                 for (int p = 0. p < portSize. p++) {                     port = ports.get(p).                     if (ObjectHelper.isEmpty(this.portName) || this.portName.endsWith(port.getName())) {                         addServers(name, result, port, subset).                     }                 }             }         }     }     return result. }
false;protected;4;8;;protected void addServers(String name, List<ServiceDefinition> servers, EndpointPort port, EndpointSubset subset) {     final List<EndpointAddress> addresses = subset.getAddresses().     final int size = addresses.size().     for (int i = 0. i < size. i++) {         servers.add(new DefaultServiceDefinition(name, addresses.get(i).getIp(), port.getPort())).     } }
false;protected;0;52;;@Override protected void doStart() throws Exception {     if (client != null) {         return.     }     final KubernetesConfiguration configuration = getConfiguration().     ConfigBuilder builder = new ConfigBuilder().     builder.withMasterUrl(configuration.getMasterUrl()).     if ((ObjectHelper.isNotEmpty(configuration.getUsername()) && ObjectHelper.isNotEmpty(configuration.getPassword())) && ObjectHelper.isEmpty(configuration.getOauthToken())) {         builder.withUsername(configuration.getUsername()).         builder.withPassword(configuration.getPassword()).     } else {         builder.withOauthToken(configuration.getOauthToken()).     }     if (ObjectHelper.isNotEmpty(configuration.getCaCertData())) {         builder.withCaCertData(configuration.getCaCertData()).     }     if (ObjectHelper.isNotEmpty(configuration.getCaCertFile())) {         builder.withCaCertFile(configuration.getCaCertFile()).     }     if (ObjectHelper.isNotEmpty(configuration.getClientCertData())) {         builder.withClientCertData(configuration.getClientCertData()).     }     if (ObjectHelper.isNotEmpty(configuration.getClientCertFile())) {         builder.withClientCertFile(configuration.getClientCertFile()).     }     if (ObjectHelper.isNotEmpty(configuration.getApiVersion())) {         builder.withApiVersion(configuration.getApiVersion()).     }     if (ObjectHelper.isNotEmpty(configuration.getClientKeyAlgo())) {         builder.withClientKeyAlgo(configuration.getClientKeyAlgo()).     }     if (ObjectHelper.isNotEmpty(configuration.getClientKeyData())) {         builder.withClientKeyData(configuration.getClientKeyData()).     }     if (ObjectHelper.isNotEmpty(configuration.getClientKeyFile())) {         builder.withClientKeyFile(configuration.getClientKeyFile()).     }     if (ObjectHelper.isNotEmpty(configuration.getClientKeyPassphrase())) {         builder.withClientKeyPassphrase(configuration.getClientKeyPassphrase()).     }     if (ObjectHelper.isNotEmpty(configuration.getTrustCerts())) {         builder.withTrustCerts(configuration.getTrustCerts()).     }     client = new AutoAdaptableKubernetesClient(builder.build()). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (client != null) {         IOHelper.close(client).         client = null.     } }
false;public;0;7;;@Override public String toString() {     return "KubernetesClientServiceDiscovery{" + "namespace='" + namespace + '\'' + ", portName='" + portName + '\'' + '}'. }
