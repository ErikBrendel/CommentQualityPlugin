commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public String getKubernetesResourcesNamespaceOrDefault(KubernetesClient kubernetesClient) {     if (kubernetesResourcesNamespace != null) {         return kubernetesResourcesNamespace.     }     return kubernetesClient.getNamespace(). }
false;public;0;3;;public String getKubernetesResourcesNamespace() {     return kubernetesResourcesNamespace. }
false;public;1;3;;public void setKubernetesResourcesNamespace(String kubernetesResourcesNamespace) {     this.kubernetesResourcesNamespace = kubernetesResourcesNamespace. }
false;public;0;3;;public String getConfigMapName() {     return configMapName. }
false;public;1;3;;public void setConfigMapName(String configMapName) {     this.configMapName = configMapName. }
false;public;0;3;;public String getGroupName() {     return groupName. }
false;public;1;3;;public void setGroupName(String groupName) {     this.groupName = groupName. }
false;public;0;3;;public String getPodName() {     return podName. }
false;public;1;3;;public void setPodName(String podName) {     this.podName = podName. }
false;public;0;3;;public Map<String, String> getClusterLabels() {     return clusterLabels. }
false;public;2;3;;public void addToClusterLabels(String key, String value) {     this.clusterLabels.put(key, value). }
false;public;1;3;;public void setClusterLabels(Map<String, String> clusterLabels) {     this.clusterLabels = clusterLabels. }
false;public;0;3;;public double getJitterFactor() {     return jitterFactor. }
false;public;1;3;;public void setJitterFactor(double jitterFactor) {     this.jitterFactor = jitterFactor. }
false;public;0;3;;public long getLeaseDurationMillis() {     return leaseDurationMillis. }
false;public;1;3;;public void setLeaseDurationMillis(long leaseDurationMillis) {     this.leaseDurationMillis = leaseDurationMillis. }
false;public;0;3;;public long getRenewDeadlineMillis() {     return renewDeadlineMillis. }
false;public;1;3;;public void setRenewDeadlineMillis(long renewDeadlineMillis) {     this.renewDeadlineMillis = renewDeadlineMillis. }
false;public;0;3;;public long getRetryPeriodMillis() {     return retryPeriodMillis. }
false;public;1;3;;public void setRetryPeriodMillis(long retryPeriodMillis) {     this.retryPeriodMillis = retryPeriodMillis. }
false;public;0;8;;public KubernetesLockConfiguration copy() {     try {         KubernetesLockConfiguration copy = (KubernetesLockConfiguration) this.clone().         return copy.     } catch (CloneNotSupportedException e) {         throw new IllegalStateException("Cannot clone", e).     } }
false;public;0;15;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("KubernetesLockConfiguration{").     sb.append("kubernetesResourcesNamespace='").append(kubernetesResourcesNamespace).append('\'').     sb.append(", configMapName='").append(configMapName).append('\'').     sb.append(", groupName='").append(groupName).append('\'').     sb.append(", podName='").append(podName).append('\'').     sb.append(", clusterLabels=").append(clusterLabels).     sb.append(", jitterFactor=").append(jitterFactor).     sb.append(", leaseDurationMillis=").append(leaseDurationMillis).     sb.append(", renewDeadlineMillis=").append(renewDeadlineMillis).     sb.append(", retryPeriodMillis=").append(retryPeriodMillis).     sb.append('}').     return sb.toString(). }
