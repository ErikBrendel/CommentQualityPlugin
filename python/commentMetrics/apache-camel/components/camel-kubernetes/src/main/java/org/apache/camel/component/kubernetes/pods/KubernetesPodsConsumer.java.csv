commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AbstractKubernetesEndpoint getEndpoint() {     return (AbstractKubernetesEndpoint) super.getEndpoint(). }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     executor = getEndpoint().createExecutor().     podsWatcher = new PodsConsumerTask().     executor.submit(podsWatcher). }
false;protected;0;20;;@Override protected void doStop() throws Exception {     super.doStop().     log.debug("Stopping Kubernetes Pods Consumer").     if (executor != null) {         if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {             if (podsWatcher != null) {                 podsWatcher.getWatch().close().             }             getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor).         } else {             if (podsWatcher != null) {                 podsWatcher.getWatch().close().             }             executor.shutdownNow().         }     }     executor = null. }
false;public;2;14;;@Override public void eventReceived(io.fabric8.kubernetes.client.Watcher.Action action, Pod resource) {     PodEvent pe = new PodEvent(action, resource).     Exchange exchange = getEndpoint().createExchange().     exchange.getIn().setBody(pe.getPod()).     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION, pe.getAction()).     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_TIMESTAMP, System.currentTimeMillis()).     try {         processor.process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException("Error during processing", exchange, e).     } }
false;public;1;7;;@Override public void onClose(KubernetesClientException cause) {     if (cause != null) {         log.error(cause.getMessage(), cause).     } }
false;public;0;39;;@Override public void run() {     MixedOperation<Pod, PodList, DoneablePod, PodResource<Pod, DoneablePod>> w = getEndpoint().getKubernetesClient().pods().     if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {         w.inNamespace(getEndpoint().getKubernetesConfiguration().getNamespace()).     }     if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getLabelKey()) && ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getLabelValue())) {         w.withLabel(getEndpoint().getKubernetesConfiguration().getLabelKey(), getEndpoint().getKubernetesConfiguration().getLabelValue()).     }     if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getResourceName())) {         w.withName(getEndpoint().getKubernetesConfiguration().getResourceName()).     }     watch = w.watch(new Watcher<Pod>() {          @Override         public void eventReceived(io.fabric8.kubernetes.client.Watcher.Action action, Pod resource) {             PodEvent pe = new PodEvent(action, resource).             Exchange exchange = getEndpoint().createExchange().             exchange.getIn().setBody(pe.getPod()).             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION, pe.getAction()).             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_TIMESTAMP, System.currentTimeMillis()).             try {                 processor.process(exchange).             } catch (Exception e) {                 getExceptionHandler().handleException("Error during processing", exchange, e).             }         }          @Override         public void onClose(KubernetesClientException cause) {             if (cause != null) {                 log.error(cause.getMessage(), cause).             }         }     }). }
false;public;0;3;;public Watch getWatch() {     return watch. }
false;public;1;3;;public void setWatch(Watch watch) {     this.watch = watch. }
