commented;modifiers;parameterAmount;loc;comment;code
false;public;1;30;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "default").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_NAME, "test").     Map<String, String> labels = new HashMap<>().     labels.put("this", "rocks").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PODS_LABELS, labels).     PodSpec podSpec = new PodSpec().     podSpec.setHostname("localhost").     Container cont = new Container().     cont.setImage("docker.io/jboss/wildfly:latest").     cont.setName("pippo").     List<ContainerPort> containerPort = new ArrayList<>().     ContainerPort port = new ContainerPort().     port.setHostIP("0.0.0.0").     port.setHostPort(8080).     port.setContainerPort(8080).     containerPort.add(port).     cont.setPorts(containerPort).     List<Container> list = new ArrayList<>().     list.add(cont).     podSpec.setContainers(list).     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_SPEC, podSpec). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "default").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_NAME, "test"). }
false;public;0;59;;@Test public void createAndDeletePod() throws Exception {     if (ObjectHelper.isEmpty(authToken)) {         return.     }     mockResultEndpoint.expectedMessageCount(1).     mockResultEndpoint.expectedHeaderValuesReceivedInAnyOrder(KubernetesConstants.KUBERNETES_EVENT_ACTION, "MODIFIED").     Exchange ex = template.request("direct:createPod", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "default").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_NAME, "test").             Map<String, String> labels = new HashMap<>().             labels.put("this", "rocks").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PODS_LABELS, labels).             PodSpec podSpec = new PodSpec().             podSpec.setHostname("localhost").             Container cont = new Container().             cont.setImage("docker.io/jboss/wildfly:latest").             cont.setName("pippo").             List<ContainerPort> containerPort = new ArrayList<>().             ContainerPort port = new ContainerPort().             port.setHostIP("0.0.0.0").             port.setHostPort(8080).             port.setContainerPort(8080).             containerPort.add(port).             cont.setPorts(containerPort).             List<Container> list = new ArrayList<>().             list.add(cont).             podSpec.setContainers(list).             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_SPEC, podSpec).         }     }).     ex = template.request("direct:deletePod", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "default").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_POD_NAME, "test").         }     }).     boolean podDeleted = ex.getOut().getBody(Boolean.class).     assertTrue(podDeleted).     Thread.sleep(3000).     mockResultEndpoint.assertIsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:list").toF("kubernetes-pods://%s?oauthToken=%s&operation=listPods", host, authToken).     from("direct:listByLabels").toF("kubernetes-pods://%s?oauthToken=%s&operation=listPodsByLabels", host, authToken).     from("direct:getPod").toF("kubernetes-pods://%s?oauthToken=%s&operation=getPod", host, authToken).     from("direct:createPod").toF("kubernetes-pods://%s?oauthToken=%s&operation=createPod", host, authToken).     from("direct:deletePod").toF("kubernetes-pods://%s?oauthToken=%s&operation=deletePod", host, authToken).     fromF("kubernetes-nodes://%s?oauthToken=%s&resourceName=minikube", host, authToken).process(new KubernertesProcessor()).to(mockResultEndpoint). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:list").toF("kubernetes-pods://%s?oauthToken=%s&operation=listPods", host, authToken).             from("direct:listByLabels").toF("kubernetes-pods://%s?oauthToken=%s&operation=listPodsByLabels", host, authToken).             from("direct:getPod").toF("kubernetes-pods://%s?oauthToken=%s&operation=getPod", host, authToken).             from("direct:createPod").toF("kubernetes-pods://%s?oauthToken=%s&operation=createPod", host, authToken).             from("direct:deletePod").toF("kubernetes-pods://%s?oauthToken=%s&operation=deletePod", host, authToken).             fromF("kubernetes-nodes://%s?oauthToken=%s&resourceName=minikube", host, authToken).process(new KubernertesProcessor()).to(mockResultEndpoint).         }     }. }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     Node node = exchange.getIn().getBody(Node.class).     log.info("Got event with node name: " + node.getMetadata().getName() + " and action " + in.getHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION)). }
