commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("kubernetesClient", server.getClient()).     return registry. }
false;public;0;8;;@Test public void listTest() throws Exception {     server.expect().withPath("/apis/autoscaling/v2beta1/namespaces/test/horizontalpodautoscalers").andReturn(200, new HorizontalPodAutoscalerListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once().     List<HorizontalPodAutoscaler> result = template.requestBody("direct:list", "", List.class).     assertEquals(3, result.size()). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     Map<String, String> labels = new HashMap<>().     labels.put("key1", "value1").     labels.put("key2", "value2").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PODS_LABELS, labels). }
false;public;0;19;;@Test public void listByLabelsTest() throws Exception {     server.expect().withPath("/apis/autoscaling/v2beta1/namespaces/test/horizontalpodautoscalers?labelSelector=" + toUrlEncoded("key1=value1,key2=value2")).andReturn(200, new PodListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once().     Exchange ex = template.request("direct:listByLabels", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Map<String, String> labels = new HashMap<>().             labels.put("key1", "value1").             labels.put("key2", "value2").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PODS_LABELS, labels).         }     }).     List<HorizontalPodAutoscaler> result = ex.getOut().getBody(List.class).     assertEquals(3, result.size()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_HPA_NAME, "hpa1"). }
false;public;0;20;;@Test public void getHPATest() throws Exception {     HorizontalPodAutoscaler hpa1 = new HorizontalPodAutoscalerBuilder().withNewMetadata().withName("hpa1").withNamespace("test").and().build().     HorizontalPodAutoscaler hpa2 = new HorizontalPodAutoscalerBuilder().withNewMetadata().withName("hpa2").withNamespace("ns1").and().build().     server.expect().withPath("/apis/autoscaling/v2beta1/namespaces/test/horizontalpodautoscalers/hpa1").andReturn(200, hpa1).once().     server.expect().withPath("/apis/autoscaling/v2beta1/namespaces/ns1/horizontalpodautoscalers/hpa2").andReturn(200, hpa2).once().     Exchange ex = template.request("direct:getHPA", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_HPA_NAME, "hpa1").         }     }).     HorizontalPodAutoscaler result = ex.getOut().getBody(HorizontalPodAutoscaler.class).     assertEquals("hpa1", result.getMetadata().getName()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_HPA_NAME, "hpa1"). }
false;public;0;18;;@Test public void deleteHPATest() throws Exception {     HorizontalPodAutoscaler hpa1 = new HorizontalPodAutoscalerBuilder().withNewMetadata().withName("hpa1").withNamespace("test").and().build().     server.expect().withPath("/apis/autoscaling/v2beta1/namespaces/test/horizontalpodautoscalers/hpa1").andReturn(200, hpa1).once().     Exchange ex = template.request("direct:deleteHPA", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_HPA_NAME, "hpa1").         }     }).     boolean podDeleted = ex.getOut().getBody(Boolean.class).     assertTrue(podDeleted). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:list").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=listHPA").     from("direct:listByLabels").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=listHPAByLabels").     from("direct:getHPA").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=getHPA").     from("direct:deleteHPA").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=deleteHPA"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:list").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=listHPA").             from("direct:listByLabels").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=listHPAByLabels").             from("direct:getHPA").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=getHPA").             from("direct:deleteHPA").to("kubernetes-hpa:///?kubernetesClient=#kubernetesClient&operation=deleteHPA").         }     }. }
