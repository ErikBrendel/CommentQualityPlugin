commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("kubernetesClient", server.getClient()).     return registry. }
false;public;0;8;;@Test public void listTest() throws Exception {     server.expect().withPath("/api/v1/namespaces/test/persistentvolumeclaims").andReturn(200, new PersistentVolumeClaimListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once().     List<PersistentVolumeClaim> result = template.requestBody("direct:list", "", List.class).     assertEquals(3, result.size()). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").     Map<String, String> labels = new HashMap<>().     labels.put("key1", "value1").     labels.put("key2", "value2").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PERSISTENT_VOLUMES_CLAIMS_LABELS, labels). }
false;public;0;18;;@Test public void listByLabelsTest() throws Exception {     server.expect().withPath("/api/v1/namespaces/test/persistentvolumeclaims?labelSelector=" + toUrlEncoded("key1=value1,key2=value2")).andReturn(200, new PersistentVolumeClaimListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once().     Exchange ex = template.request("direct:listByLabels", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").             Map<String, String> labels = new HashMap<>().             labels.put("key1", "value1").             labels.put("key2", "value2").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PERSISTENT_VOLUMES_CLAIMS_LABELS, labels).         }     }).     List<PersistentVolume> result = ex.getOut().getBody(List.class).     assertEquals(3, result.size()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, "pvc1"). }
false;public;0;18;;@Test public void createListAndDeletePersistentVolumeClaim() throws Exception {     ObjectMeta meta = new ObjectMeta().     meta.setName("pvc1").     server.expect().withPath("/api/v1/namespaces/test/persistentvolumeclaims/pvc1").andReturn(200, new PersistentVolumeClaimBuilder().withMetadata(meta).build()).once().     Exchange ex = template.request("direct:delete", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_PERSISTENT_VOLUME_CLAIM_NAME, "pvc1").         }     }).     boolean pvcDeleted = ex.getOut().getBody(Boolean.class).     assertTrue(pvcDeleted). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:list").to("kubernetes-persistent-volumes-claims:///?kubernetesClient=#kubernetesClient&operation=listPersistentVolumesClaims").     from("direct:listByLabels").to("kubernetes-persistent-volumes-claims:///?kubernetesClient=#kubernetesClient&operation=listPersistentVolumesClaimsByLabels").     from("direct:delete").to("kubernetes-persistent-volumes-claims:///?kubernetesClient=#kubernetesClient&operation=deletePersistentVolumeClaim"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:list").to("kubernetes-persistent-volumes-claims:///?kubernetesClient=#kubernetesClient&operation=listPersistentVolumesClaims").             from("direct:listByLabels").to("kubernetes-persistent-volumes-claims:///?kubernetesClient=#kubernetesClient&operation=listPersistentVolumesClaimsByLabels").             from("direct:delete").to("kubernetes-persistent-volumes-claims:///?kubernetesClient=#kubernetesClient&operation=deletePersistentVolumeClaim").         }     }. }
