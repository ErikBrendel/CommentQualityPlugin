commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("kubernetesClient", server.getClient()).     return registry. }
false;public;0;8;;@Test public void listTest() throws Exception {     server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments").andReturn(200, new DeploymentListBuilder().addNewItem().and().build()).once().     List<Deployment> result = template.requestBody("direct:list", "", List.class).     assertEquals(1, result.size()). }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     Map<String, String> labels = new HashMap<>().     labels.put("key1", "value1").     labels.put("key2", "value2").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENTS_LABELS, labels). }
false;public;0;22;;@Test public void listByLabelsTest() throws Exception {     server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments?labelSelector=" + toUrlEncoded("key1=value1,key2=value2")).andReturn(200, new DeploymentListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once().     Exchange ex = template.request("direct:listByLabels", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Map<String, String> labels = new HashMap<>().             labels.put("key1", "value1").             labels.put("key2", "value2").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENTS_LABELS, labels).         }     }).     List<Deployment> result = ex.getOut().getBody(List.class).     assertEquals(3, result.size()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, "de1").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test"). }
false;public;0;38;;@Test public void createAndDeleteDeployment() throws Exception {     Deployment de1 = new DeploymentBuilder().withNewMetadata().withNamespace("test").withName("de1").withResourceVersion("1").withGeneration(2L).endMetadata().withNewSpec().withReplicas(0).endSpec().withNewStatus().withReplicas(1).withObservedGeneration(1L).endStatus().build().     server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments/de1").andReturn(200, de1).once().     server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments/de1").andReturn(200, new DeploymentBuilder(de1).editStatus().withReplicas(0).withObservedGeneration(2L).endStatus().build()).times(5).     Exchange ex = template.request("direct:deleteDeployment", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, "de1").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").         }     }).     boolean deDeleted = ex.getOut().getBody(Boolean.class).     assertTrue(deDeleted). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, "de1").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_REPLICAS, 1). }
false;public;0;22;;@Test public void createScaleAndDeleteDeployment() throws Exception {     server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments/de1").andReturn(200, new DeploymentBuilder().withNewMetadata().withName("de1").withResourceVersion("1").endMetadata().withNewSpec().withReplicas(5).endSpec().withNewStatus().withReplicas(1).endStatus().build()).once().     server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments/de1").andReturn(200, new DeploymentBuilder().withNewMetadata().withName("de1").withResourceVersion("1").endMetadata().withNewSpec().withReplicas(5).endSpec().withNewStatus().withReplicas(5).endStatus().build()).always().     Exchange ex = template.request("direct:scaleDeployment", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME, "de1").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_REPLICAS, 1).         }     }).     // Thread.sleep(3000).     int replicas = ex.getOut().getBody(Integer.class).     assertEquals(5, replicas). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:list").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=listDeployments").     from("direct:listByLabels").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=listDeploymentsByLabels").     from("direct:deleteDeployment").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=deleteDeployment").     from("direct:createDeployment").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=createDeployment").     from("direct:scaleDeployment").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=scaleDeployment"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:list").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=listDeployments").             from("direct:listByLabels").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=listDeploymentsByLabels").             from("direct:deleteDeployment").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=deleteDeployment").             from("direct:createDeployment").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=createDeployment").             from("direct:scaleDeployment").toF("kubernetes-deployments:///?kubernetesClient=#kubernetesClient&operation=scaleDeployment").         }     }. }
