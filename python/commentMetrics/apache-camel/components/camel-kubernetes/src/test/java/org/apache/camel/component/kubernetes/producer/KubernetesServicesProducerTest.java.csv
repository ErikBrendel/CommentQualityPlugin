commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("kubernetesClient", server.getClient()).     return registry. }
false;public;0;7;;@Test public void listTest() throws Exception {     server.expect().withPath("/api/v1/services").andReturn(200, new ServiceListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once().     List<Service> result = template.requestBody("direct:list", "", List.class).     assertEquals(3, result.size()). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     Map<String, String> labels = new HashMap<>().     labels.put("key1", "value1").     labels.put("key2", "value2").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_LABELS, labels). }
false;public;0;18;;@Test public void listByLabelsTest() throws Exception {     server.expect().withPath("/api/v1/services?labelSelector=" + toUrlEncoded("key1=value1,key2=value2")).andReturn(200, new PodListBuilder().addNewItem().and().addNewItem().and().addNewItem().and().build()).once().     Exchange ex = template.request("direct:listByLabels", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Map<String, String> labels = new HashMap<>().             labels.put("key1", "value1").             labels.put("key2", "value2").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_LABELS, labels).         }     }).     List<Service> result = ex.getOut().getBody(List.class).     assertEquals(3, result.size()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_NAME, "se1"). }
false;public;0;18;;@Test public void getServiceTest() throws Exception {     Service se1 = new ServiceBuilder().withNewMetadata().withName("se1").withNamespace("test").and().build().     server.expect().withPath("/api/v1/namespaces/test/services/se1").andReturn(200, se1).once().     Exchange ex = template.request("direct:getServices", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_NAME, "se1").         }     }).     Service result = ex.getOut().getBody(Service.class).     assertNotNull(result). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").     exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_NAME, "se1"). }
false;public;0;19;;@Test public void createAndDeleteService() throws Exception {     Service se1 = new ServiceBuilder().withNewMetadata().withName("se1").withNamespace("test").and().build().     server.expect().withPath("/api/v1/namespaces/test/services/se1").andReturn(200, se1).once().     Exchange ex = template.request("direct:deleteService", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, "test").             exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_NAME, "se1").         }     }).     boolean servDeleted = ex.getOut().getBody(Boolean.class).     assertTrue(servDeleted). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:list").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=listServices").     from("direct:listByLabels").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=listServicesByLabels").     from("direct:getServices").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=getService").     from("direct:deleteService").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=deleteService"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:list").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=listServices").             from("direct:listByLabels").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=listServicesByLabels").             from("direct:getServices").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=getService").             from("direct:deleteService").to("kubernetes-services:///?kubernetesClient=#kubernetesClient&operation=deleteService").         }     }. }
