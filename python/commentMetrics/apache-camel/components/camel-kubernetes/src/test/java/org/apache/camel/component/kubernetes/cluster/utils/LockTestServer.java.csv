commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getStatusCode() {     return responseCode.get(). }
false;public;1;17;;@Override public Object getBody(RecordedRequest recordedRequest) {     delayIfNecessary().     if (refuseRequests) {         responseCode.set(500).         return "".     }     ConfigMap map = lockSimulator.getConfigMap().     if (map != null) {         responseCode.set(200).         return map.     } else {         responseCode.set(404).         return "".     } }
false;public;0;4;;@Override public Headers getHeaders() {     return headers. }
false;public;1;4;;@Override public void setHeaders(Headers headers) {     this.headers = headers. }
false;public;0;4;;@Override public int getStatusCode() {     return responseCode.get(). }
false;public;1;22;;@Override public Object getBody(RecordedRequest recordedRequest) {     delayIfNecessary().     if (refuseRequests) {         responseCode.set(500).         return "".     }     ConfigMap map = convert(recordedRequest).     if (map == null || map.getMetadata() == null || !lockSimulator.getConfigMapName().equals(map.getMetadata().getName())) {         throw new IllegalArgumentException("Illegal configMap received").     }     boolean done = lockSimulator.setConfigMap(map, true).     if (done) {         responseCode.set(201).         return lockSimulator.getConfigMap().     } else {         responseCode.set(500).         return "".     } }
false;public;0;4;;@Override public Headers getHeaders() {     return headers. }
false;public;1;4;;@Override public void setHeaders(Headers headers) {     this.headers = headers. }
false;public;0;4;;@Override public int getStatusCode() {     return responseCode.get(). }
false;public;1;19;;@Override public Object getBody(RecordedRequest recordedRequest) {     delayIfNecessary().     if (refuseRequests) {         responseCode.set(500).         return "".     }     ConfigMap map = convert(recordedRequest).     boolean done = lockSimulator.setConfigMap(map, false).     if (done) {         responseCode.set(200).         return lockSimulator.getConfigMap().     } else {         responseCode.set(409).         return "".     } }
false;public;0;4;;@Override public Headers getHeaders() {     return headers. }
false;public;1;4;;@Override public void setHeaders(Headers headers) {     this.headers = headers. }
false;public;0;3;;public boolean isRefuseRequests() {     return refuseRequests. }
false;public;1;3;;public void setRefuseRequests(boolean refuseRequests) {     this.refuseRequests = refuseRequests. }
false;public,synchronized;0;3;;public synchronized Collection<String> getCurrentPods() {     return new TreeSet<>(this.pods). }
false;public,synchronized;1;3;;public synchronized void removePod(String pod) {     this.pods.remove(pod). }
false;public,synchronized;1;3;;public synchronized void addPod(String pod) {     this.pods.add(pod). }
false;public;0;3;;public Long getDelayRequests() {     return delayRequests. }
false;public;1;3;;public void setDelayRequests(Long delayRequests) {     this.delayRequests = delayRequests. }
false;private;0;9;;private void delayIfNecessary() {     if (delayRequests != null) {         try {             Thread.sleep(delayRequests).         } catch (InterruptedException e) {             throw new RuntimeException(e).         }     } }
false;private;1;8;;private ConfigMap convert(RecordedRequest request) {     try {         ObjectMapper mapper = new ObjectMapper().         return mapper.readValue(request.getBody().readByteArray(), ConfigMap.class).     } catch (IOException e) {         throw new IllegalArgumentException("Erroneous data", e).     } }
