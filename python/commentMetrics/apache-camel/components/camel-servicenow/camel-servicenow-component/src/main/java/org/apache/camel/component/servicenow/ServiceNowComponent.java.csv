commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// **************************************** // Properties // **************************************** public String getInstanceName() {     return instanceName. }
true;public;1;3;/**  * The ServiceNow instance name  */ ;/**  * The ServiceNow instance name  */ public void setInstanceName(String instanceName) {     this.instanceName = instanceName. }
false;public;0;3;;public ServiceNowConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * The ServiceNow default configuration  */ ;/**  * The ServiceNow default configuration  */ public void setConfiguration(ServiceNowConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public String getApiUrl() {     return configuration.getApiUrl(). }
true;public;1;3;/**  * The ServiceNow REST API url  */ ;/**  * The ServiceNow REST API url  */ public void setApiUrl(String apiUrl) {     configuration.setApiUrl(apiUrl). }
false;public;0;3;;public String getUserName() {     return configuration.getUserName(). }
true;public;1;4;/**  * ServiceNow user account name  */ ;/**  * ServiceNow user account name  */ @Metadata(label = "security", secret = true) public void setUserName(String userName) {     configuration.setUserName(userName). }
false;public;0;3;;public String getPassword() {     return configuration.getPassword(). }
true;public;1;4;/**  * ServiceNow account password  */ ;/**  * ServiceNow account password  */ @Metadata(label = "security", secret = true) public void setPassword(String password) {     configuration.setPassword(password). }
false;public;0;3;;public String getOauthClientId() {     return configuration.getOauthClientId(). }
true;public;1;4;/**  * OAuth2 ClientID  */ ;/**  * OAuth2 ClientID  */ @Metadata(label = "security", secret = true) public void setOauthClientId(String oauthClientId) {     configuration.setOauthClientId(oauthClientId). }
false;public;0;3;;public String getOauthClientSecret() {     return configuration.getOauthClientSecret(). }
true;public;1;4;/**  * OAuth2 ClientSecret  */ ;/**  * OAuth2 ClientSecret  */ @Metadata(label = "security", secret = true) public void setOauthClientSecret(String oauthClientSecret) {     configuration.setOauthClientSecret(oauthClientSecret). }
false;public;0;3;;public String getOauthTokenUrl() {     return configuration.getOauthTokenUrl(). }
true;public;1;4;/**  * OAuth token Url  */ ;/**  * OAuth token Url  */ @Metadata(label = "security", secret = true) public void setOauthTokenUrl(String oauthTokenUrl) {     configuration.setOauthTokenUrl(oauthTokenUrl). }
false;public;0;3;;public String getProxyHost() {     return configuration.getProxyHost(). }
true;public;1;4;/**  * The proxy host name  * @param proxyHost  */ ;/**  * The proxy host name  * @param proxyHost  */ @Metadata(label = "advanced") public void setProxyHost(String proxyHost) {     configuration.setProxyHost(proxyHost). }
false;public;0;3;;public Integer getProxyPort() {     return configuration.getProxyPort(). }
true;public;1;4;/**  * The proxy port number  * @param proxyPort  */ ;/**  * The proxy port number  * @param proxyPort  */ @Metadata(label = "advanced") public void setProxyPort(Integer proxyPort) {     configuration.setProxyPort(proxyPort). }
false;public;0;3;;public String getProxyUserName() {     return configuration.getProxyUserName(). }
true;public;1;4;/**  * Username for proxy authentication  * @param proxyUserName  */ ;/**  * Username for proxy authentication  * @param proxyUserName  */ @Metadata(label = "advanced,security", secret = true) public void setProxyUserName(String proxyUserName) {     configuration.setProxyUserName(proxyUserName). }
false;public;0;3;;public String getProxyPassword() {     return configuration.getProxyPassword(). }
true;public;1;4;/**  * Password for proxy authentication  * @param proxyPassword  */ ;/**  * Password for proxy authentication  * @param proxyPassword  */ @Metadata(label = "advanced,security", secret = true) public void setProxyPassword(String proxyPassword) {     configuration.setProxyPassword(proxyPassword). }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;public;0;3;;public ComponentVerifierExtension getVerifier() {     return (scope, parameters) -> getExtension(ComponentVerifierExtension.class).orElseThrow(UnsupportedOperationException::new).verify(scope, parameters). }
false;protected;3;48;;// **************************************** // Component impl // **************************************** @Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     final CamelContext context = getCamelContext().     final ServiceNowConfiguration configuration = this.configuration.copy().     Map<String, Object> models = IntrospectionSupport.extractProperties(parameters, "model.").     for (Map.Entry<String, Object> entry : models.entrySet()) {         configuration.addModel(entry.getKey(), EndpointHelper.resolveParameter(context, (String) entry.getValue(), Class.class)).     }     Map<String, Object> requestModels = IntrospectionSupport.extractProperties(parameters, "requestModel.").     for (Map.Entry<String, Object> entry : requestModels.entrySet()) {         configuration.addRequestModel(entry.getKey(), EndpointHelper.resolveParameter(context, (String) entry.getValue(), Class.class)).     }     Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, "responseModel.").     for (Map.Entry<String, Object> entry : responseModels.entrySet()) {         configuration.addResponseModel(entry.getKey(), EndpointHelper.resolveParameter(context, (String) entry.getValue(), Class.class)).     }     setProperties(configuration, parameters).     if (ObjectHelper.isEmpty(remaining)) {         // If an instance is not set on the endpoint uri, use the one set on         // component.         remaining = instanceName.     }     String instanceName = getCamelContext().resolvePropertyPlaceholders(remaining).     if (!configuration.hasApiUrl()) {         configuration.setApiUrl(String.format("https://%s.service-now.com/api", instanceName)).     }     if (!configuration.hasOauthTokenUrl()) {         configuration.setOauthTokenUrl(String.format("https://%s.service-now.com/oauth_token.do", instanceName)).     }     if (configuration.getSslContextParameters() == null) {         configuration.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return new ServiceNowEndpoint(uri, this, configuration, instanceName). }
