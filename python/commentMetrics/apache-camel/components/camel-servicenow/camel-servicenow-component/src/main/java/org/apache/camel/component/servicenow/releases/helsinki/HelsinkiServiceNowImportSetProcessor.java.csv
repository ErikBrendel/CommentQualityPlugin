commented;modifiers;parameterAmount;loc;comment;code
true;private;1;19;/*      * GET      * https://instance.service-now.com/api/now/import/{tableName}/{sys_id}      */ ;/*      * GET      * https://instance.service-now.com/api/now/import/{tableName}/{sys_id}      */ private void retrieveRecord(Exchange exchange) throws Exception {     final Message in = exchange.getIn().     final String tableName = getTableName(in).     final String apiVersion = getApiVersion(in).     final Class<?> responseModel = getResponseModel(in, tableName).     final String sysId = getSysID(in).     Response response = client.reset().types(MediaType.APPLICATION_JSON_TYPE).path("now").path(apiVersion).path("import").path(ObjectHelper.notNull(tableName, "tableName")).path(ObjectHelper.notNull(sysId, "sysId")).query(responseModel).invoke(HttpMethod.GET).     setBodyAndHeaders(in, responseModel, response). }
true;private;1;69;/*      * POST      * https://instance.service-now.com/api/now/import/{tableName}      */ ;/*      * POST      * https://instance.service-now.com/api/now/import/{tableName}      */ private void createRecord(Exchange exchange) throws Exception {     final Message in = exchange.getIn().     final String tableName = getTableName(in).     final String apiVersion = getApiVersion(in).     final Class<?> requestModel = getRequestModel(in, tableName).     final boolean retrieve = in.getHeader(ServiceNowConstants.RETRIEVE_TARGET_RECORD, config::getRetrieveTargetRecordOnImport, Boolean.class).     Class<?> responseModel = getResponseModel(in, tableName).     Response response.     validateBody(in, requestModel).     if (retrieve) {         // If the endpoint is configured to retrieve the target record, the         // import response model is ignored and the response is ImportSetResponse         response = client.reset().types(MediaType.APPLICATION_JSON_TYPE).path("now").path(apiVersion).path("import").path(tableName).invoke(HttpMethod.POST, in.getMandatoryBody()).         if (ObjectHelper.isNotEmpty(response.getHeaderString(HttpHeaders.CONTENT_TYPE))) {             for (ImportSetResult result : response.readEntity(ImportSetResponse.class).getResults()) {                 final String status = result.getStatus().                 final String table = result.getTable().                 final String sysId = result.getSysId().                 if (ObjectHelper.equalIgnoreCase("inserted", status)) {                     // If the endpoint is configured to retrieve the target                     // record, the response model is related to the target                     // table                     responseModel = getResponseModel(in, table).                     // Do get the record                     response = client.reset().types(MediaType.APPLICATION_JSON_TYPE).path("now").path(apiVersion).path("table").path(ObjectHelper.notNull(table, "table")).path(ObjectHelper.notNull(sysId, "sys_id")).query(ServiceNowParams.SYSPARM_DISPLAY_VALUE, in).query(ServiceNowParams.SYSPARM_EXCLUDE_REFERENCE_LINK, in).query(ServiceNowParams.SYSPARM_FIELDS, in).query(ServiceNowParams.SYSPARM_VIEW, in).query(responseModel).invoke(HttpMethod.GET).                     break.                 }             }         }     } else {         response = client.reset().types(MediaType.APPLICATION_JSON_TYPE).path("now").path(apiVersion).path("import").path(tableName).query(responseModel).invoke(HttpMethod.POST, in.getMandatoryBody()).     }     setBodyAndHeaders(in, responseModel, response). }
