commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public ServiceNowClient types(MediaType type) {     return types(type, type). }
false;public;2;5;;public ServiceNowClient types(MediaType accept, MediaType type) {     client.accept(accept).     client.type(type).     return this. }
false;public;1;7;;public ServiceNowClient path(Object path) {     if (ObjectHelper.isNotEmpty(path)) {         client.path(path).     }     return this. }
false;public;1;4;;public ServiceNowClient type(MediaType ct) {     client.type(ct).     return this. }
false;public;1;4;;public ServiceNowClient type(String type) {     client.type(type).     return this. }
false;public;1;4;;public ServiceNowClient accept(MediaType... types) {     client.accept(types).     return this. }
false;public;1;4;;public ServiceNowClient accept(String... types) {     client.accept(types).     return this. }
false;public;2;4;;public ServiceNowClient query(String name, Object... values) {     client.query(name, values).     return this. }
false;public;3;4;;public ServiceNowClient queryF(String name, String format, Object... values) {     client.query(name, String.format(format, values)).     return this. }
false;public;2;8;;public ServiceNowClient query(ServiceNowParam param, Message message) {     Object value = param.getHeaderValue(message, configuration).     if (value != null) {         client.query(param.getId(), value).     }     return this. }
false;public;1;20;;public ServiceNowClient query(Class<?> model) {     if (model != null) {         String name.         String value.         for (ServiceNowSysParm parm : model.getAnnotationsByType(ServiceNowSysParm.class)) {             name = parm.name().             value = parm.value().             // with same name set via Message headers.             if (ObjectHelper.isNotEmpty(name) && ObjectHelper.isNotEmpty(value)) {                 LOGGER.debug("Replace query param {} with value {}", name, value).                 client.replaceQueryParam(name, value).             }         }     }     return this. }
false;public;1;3;;public Response invoke(String httpMethod) throws Exception {     return invoke(client, httpMethod, null). }
false;public;2;3;;public Response invoke(String httpMethod, Object body) throws Exception {     return invoke(client, httpMethod, body). }
false;public;2;3;;public <T> T trasform(String httpMethod, Function<Response, T> function) throws Exception {     return function.apply(invoke(client, httpMethod, null)). }
false;public;3;3;;public <T> T trasform(String httpMethod, Object body, Function<Response, T> function) throws Exception {     return function.apply(invoke(client, httpMethod, body)). }
false;public;0;7;;public ServiceNowClient reset() {     client.back(true).     client.reset().     client.resetQuery().     return this. }
false;private;3;35;;// ******************************* // Helpers // ******************************* private Response invoke(WebClient client, String httpMethod, Object body) throws Exception {     Response response = client.invoke(httpMethod, body).     int code = response.getStatus().     // See http://wiki.servicenow.com/index.php?title=REST_API#REST_Response_HTTP_Status_Codes     switch(code) {         case 200:         case 201:         case 204:             // Success             break.         case 400:         case 401:         case 403:         case 404:         case 405:         case 406:         case 415:             ServiceNowExceptionModel model = response.readEntity(ServiceNowExceptionModel.class).             throw new ServiceNowException(code, model.getStatus(), model.getError().get("message"), model.getError().get("detail")).         default:             throw new ServiceNowException(code, response.readEntity(Map.class)).     }     return response. }
false;private,static;3;7;;private static void configureRequestContext(CamelContext context, ServiceNowConfiguration configuration, WebClient client) {     WebClient.getConfig(client).getRequestContext().put("org.apache.cxf.http.header.split", true). }
false;private,static;3;21;;private static void configureTls(CamelContext camelContext, ServiceNowConfiguration configuration, WebClient client) {     SSLContextParameters sslContextParams = configuration.getSslContextParameters().     if (sslContextParams != null) {         HTTPConduit conduit = WebClient.getConfig(client).getHttpConduit().         TLSClientParameters tlsClientParams = conduit.getTlsClientParameters().         if (tlsClientParams == null) {             tlsClientParams = new TLSClientParameters().         }         try {             SSLContext sslContext = sslContextParams.createSSLContext(camelContext).             tlsClientParams.setSSLSocketFactory(sslContext.getSocketFactory()).             conduit.setTlsClientParameters(tlsClientParams).         } catch (IOException | GeneralSecurityException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     } }
false;private,static;3;19;;private static void configureHttpClientPolicy(CamelContext context, ServiceNowConfiguration configuration, WebClient client) {     HTTPClientPolicy httpPolicy = configuration.getHttpClientPolicy().     if (httpPolicy == null) {         String host = configuration.getProxyHost().         Integer port = configuration.getProxyPort().         if (host != null && port != null) {             httpPolicy = new HTTPClientPolicy().             httpPolicy.setProxyServer(host).             httpPolicy.setProxyServerPort(port).         }     }     if (httpPolicy != null) {         WebClient.getConfig(client).getHttpConduit().setClient(httpPolicy).     } }
false;private,static;3;20;;private static void configureProxyAuthorizationPolicy(CamelContext context, ServiceNowConfiguration configuration, WebClient client) {     ProxyAuthorizationPolicy proxyPolicy = configuration.getProxyAuthorizationPolicy().     if (proxyPolicy == null) {         String username = configuration.getProxyUserName().         String password = configuration.getProxyPassword().         if (username != null && password != null) {             proxyPolicy = new ProxyAuthorizationPolicy().             proxyPolicy.setAuthorizationType("Basic").             proxyPolicy.setUserName(username).             proxyPolicy.setPassword(password).         }     }     if (proxyPolicy != null) {         WebClient.getConfig(client).getHttpConduit().setProxyAuthorization(proxyPolicy).     } }
