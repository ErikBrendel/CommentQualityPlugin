commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;8;;protected AbstractServiceNowProcessor setBodyAndHeaders(Message message, Class<?> responseModel, Response response) throws Exception {     if (response != null) {         setHeaders(message, responseModel, response).         setBody(message, responseModel, response).     }     return this. }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     final ServiceNowDispatcher dispatcher = findDispatcher(exchange).     if (dispatcher != null) {         dispatcher.process(exchange).     } else {         throw new IllegalArgumentException("Unable to process exchange").     } }
false;protected;3;21;;// ********************************* // Header // ********************************* protected AbstractServiceNowProcessor setHeaders(Message message, Class<?> responseModel, Response response) throws Exception {     ServiceNowHelper.findOffsets(response, (k, v) -> message.setHeader(k, v)).     String attachmentMeta = response.getHeaderString(ServiceNowConstants.ATTACHMENT_META_HEADER).     if (ObjectHelper.isNotEmpty(attachmentMeta)) {         message.setHeader(ServiceNowConstants.CONTENT_META, mapper.readValue(attachmentMeta, Map.class)).     }     copyHeader(response, HttpHeaders.CONTENT_TYPE, message, ServiceNowConstants.CONTENT_TYPE).     copyHeader(response, HttpHeaders.CONTENT_ENCODING, message, ServiceNowConstants.CONTENT_ENCODING).     if (responseModel != null) {         message.getHeaders().putIfAbsent(ServiceNowConstants.MODEL, responseModel.getName()).         message.getHeaders().putIfAbsent(ServiceNowConstants.RESPONSE_MODEL, responseModel.getName()).     }     return this. }
false;protected;3;38;;// ********************************* // Body // ********************************* protected AbstractServiceNowProcessor setBody(Message message, Class<?> model, Response response) throws Exception {     if (message != null && response != null) {         if (ObjectHelper.isNotEmpty(response.getHeaderString(HttpHeaders.CONTENT_TYPE))) {             JsonNode root = response.readEntity(JsonNode.class).             Map<String, String> responseAttributes = null.             if (root != null) {                 Iterator<Map.Entry<String, JsonNode>> fields = root.fields().                 while (fields.hasNext()) {                     final Map.Entry<String, JsonNode> entry = fields.next().                     final String key = entry.getKey().                     final JsonNode node = entry.getValue().                     if (ObjectHelper.equal("result", key, true)) {                         Object body = unwrap(node, model).                         if (body != null) {                             message.setHeader(ServiceNowConstants.RESPONSE_TYPE, body.getClass()).                             message.setBody(body).                         }                     } else {                         if (responseAttributes == null) {                             responseAttributes = new HashMap<>().                         }                         responseAttributes.put(key, node.textValue()).                     }                 }                 if (responseAttributes != null) {                     message.setHeader(ServiceNowConstants.RESPONSE_META, responseAttributes).                 }             }         }     }     return this. }
false;protected;2;3;;protected AbstractServiceNowProcessor validateBody(Message message, Class<?> model) {     return validateBody(message.getBody(), model). }
false;protected;2;10;;protected AbstractServiceNowProcessor validateBody(Object body, Class<?> model) {     ObjectHelper.notNull(body, "body").     if (!body.getClass().isAssignableFrom(model)) {         throw new IllegalArgumentException("Body is not compatible with model (body=" + body.getClass() + ", model=" + model).     }     return this. }
false;protected;2;24;;protected Object unwrap(JsonNode node, Class<?> model) throws IOException {     if (model == String.class) {         // a json string         return mapper.writeValueAsString(node).     }     final Object result.     if (node.isArray()) {         if (model.isInstance(Map.class)) {             // If the model is a Map, there's no need to use any             // specific JavaType to instruct Jackson about the             // expected element type             result = mapper.treeToValue(node, List.class).         } else {             result = mapper.readValue(node.traverse(), javaTypeCache.get(model)).         }     } else {         result = mapper.treeToValue(node, model).     }     return result. }
false;protected,final;1;3;;// ********************************* // Helpers // ********************************* protected final void addDispatcher(ServiceNowDispatcher dispatcher) {     this.dispatchers.add(dispatcher). }
false;protected,final;2;3;;protected final void addDispatcher(String action, Processor processor) {     addDispatcher(ServiceNowDispatcher.on(action, null, processor)). }
false;protected,final;3;3;;protected final void addDispatcher(String action, String subject, Processor processor) {     addDispatcher(ServiceNowDispatcher.on(action, subject, processor)). }
false;protected,final;1;11;;protected final ServiceNowDispatcher findDispatcher(Exchange exchange) {     ServiceNowDispatcher dispatcher = null.     for (int i = 0. i < dispatchers.size(). i++) {         dispatcher = dispatchers.get(i).         if (dispatcher.match(exchange)) {             return dispatcher.         }     }     return null. }
false;protected;2;7;;// ********************************* // Helpers // ********************************* protected Object getRequestParamFromHeader(ServiceNowParam sysParam, Message message) {     return message.getHeader(sysParam.getHeader(), sysParam.getDefaultValue(config), sysParam.getType()). }
false;protected;2;6;;protected Object getMandatoryRequestParamFromHeader(ServiceNowParam sysParam, Message message) {     return ObjectHelper.notNull(getRequestParamFromHeader(sysParam, message), sysParam.getHeader()). }
false;protected;4;6;;protected void copyHeader(Response from, String fromId, Message to, String toId) {     Object fromValue = from.getHeaders().getFirst(fromId).     if (ObjectHelper.isNotEmpty(fromValue)) {         to.setHeader(toId, fromValue).     } }
false;protected;1;3;;protected Class<?> getRequestModel(Message message) {     return getRequestModel(message, null). }
false;protected;2;14;;protected Class<?> getRequestModel(Message message, String modelName) {     Class<?> model = null.     if (message != null) {         model = message.getHeader(ServiceNowConstants.REQUEST_MODEL, Class.class).         if (model == null) {             model = message.getHeader(ServiceNowConstants.MODEL, Class.class).         }     }     return model != null ? model : ObjectHelper.isEmpty(modelName) ? Map.class : config.getRequestModel(modelName, Map.class). }
false;protected;1;3;;protected Class<?> getResponseModel(Message message) {     return getRequestModel(message, null). }
false;protected;2;14;;protected Class<?> getResponseModel(Message message, String modelName) {     Class<?> model = null.     if (message != null) {         model = message.getHeader(ServiceNowConstants.RESPONSE_MODEL, Class.class).         if (model == null) {             model = message.getHeader(ServiceNowConstants.MODEL, Class.class).         }     }     return model != null ? model : ObjectHelper.isEmpty(modelName) ? Map.class : config.getResponseModel(modelName, Map.class). }
false;protected;1;3;;protected String getApiVersion(Message message) {     return message.getHeader(ServiceNowConstants.API_VERSION, config.getApiVersion(), String.class). }
false;protected;1;3;;protected String getTableName(Message message) {     return message.getHeader(ServiceNowParams.PARAM_TABLE_NAME.getHeader(), config.getTable(), String.class). }
false;protected;1;3;;protected String getSysID(Message message) {     return message.getHeader(ServiceNowParams.PARAM_SYS_ID.getHeader(), String.class). }
false;protected;1;4;;@Override protected JavaType computeValue(Class<?> type) {     return mapper.getTypeFactory().constructCollectionType(List.class, type). }
