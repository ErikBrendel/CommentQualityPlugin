commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;3;;protected ComponentVerifierExtension getVerifier() {     return context().getComponent("servicenow", ServiceNowComponent.class).getVerifier(). }
false;public;0;7;;// ********************************* // Parameters validation // ********************************* @Test public void testParameter() {     Map<String, Object> parameters = getParameters().     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;11;;@Test public void testMissingMandatoryParameter() {     Map<String, Object> parameters = getParameters().     parameters.remove("instanceName").     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER, result.getErrors().get(0).getCode()).     Assert.assertEquals("instanceName", result.getErrors().get(0).getParameterKeys().iterator().next()). }
false;public;0;11;;@Test public void testMissingMandatoryAuthenticationParameter() {     Map<String, Object> parameters = getParameters().     parameters.remove("userName").     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER, result.getErrors().get(0).getCode()).     Assert.assertEquals("userName", result.getErrors().get(0).getParameterKeys().iterator().next()). }
false;public;0;7;;// ********************************* // Connectivity validation // ********************************* @Test public void testConnectivity() {     Map<String, Object> parameters = getParameters().     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;9;;@Test public void testConnectivityOnCustomTable() {     Map<String, Object> parameters = getParameters().     parameters.put("table", "ticket").     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;13;;@Test public void testConnectivityWithWrongInstance() {     Map<String, Object> parameters = getParameters().     parameters.put("instanceName", "unknown-instance").     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION, result.getErrors().get(0).getCode()).     Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE)).     Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof ProcessingException). }
false;public;0;14;;@Test public void testConnectivityWithWrongTable() {     Map<String, Object> parameters = getParameters().     parameters.put("table", "unknown").     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION, result.getErrors().get(0).getCode()).     Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE)).     Assert.assertEquals(400, result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_CODE)).     Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof ServiceNowException). }
false;public;0;20;;@Test public void testConnectivityWithWrongAuthentication() {     Map<String, Object> parameters = getParameters().     parameters.put("userName", "unknown-user").     parameters.remove("oauthClientId").     parameters.remove("oauthClientSecret").     ComponentVerifierExtension.Result result = getVerifier().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.AUTHENTICATION, result.getErrors().get(0).getCode()).     Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE)).     Assert.assertEquals(401, result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_CODE)).     Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof ServiceNowException).     Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("userName")).     Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("password")).     Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("oauthClientId")).     Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("oauthClientSecret")). }
