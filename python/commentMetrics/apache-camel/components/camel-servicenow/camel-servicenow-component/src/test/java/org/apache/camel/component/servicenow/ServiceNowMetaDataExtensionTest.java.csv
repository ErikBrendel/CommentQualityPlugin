commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;3;;protected ServiceNowComponent getComponent() {     return context().getComponent("servicenow", ServiceNowComponent.class). }
false;protected;0;3;;protected MetaDataExtension getExtension() {     return getComponent().getExtension(MetaDataExtension.class).orElseThrow(UnsupportedOperationException::new). }
false;public;0;29;;// ********************************* //  // ********************************* @Test public void testTableMetaData() throws Exception {     Map<String, Object> parameters = getParameters().     parameters.put("objectType", "table").     parameters.put("objectName", "incident").     parameters.put("metaType", "definition").     // parameters.put("object.sys_user.fields", "first_name,last_name").     // parameters.put("object.incident.fields", "caller_id,severity,resolved_at,sys_id").     // parameters.put("object.incident.fields", "^sys_.*$").     // parameters.put("object.task.fields", "").     MetaDataExtension.MetaData result = getExtension().meta(parameters).orElseThrow(RuntimeException::new).     Assert.assertEquals("application/schema+json", result.getAttribute(MetaDataExtension.MetaData.CONTENT_TYPE)).     Assert.assertNotNull(result.getAttribute("date.format")).     Assert.assertNotNull(result.getAttribute("time.format")).     Assert.assertNotNull(result.getAttribute("date-time.format")).     Assert.assertEquals(JsonNode.class, result.getAttribute(MetaDataExtension.MetaData.JAVA_TYPE)).     Assert.assertNotNull(result.getPayload(JsonNode.class)).     Assert.assertNotNull(result.getPayload(JsonNode.class).get("properties")).     Assert.assertNotNull(result.getPayload(JsonNode.class).get("$schema")).     Assert.assertEquals("http://json-schema.org/schema#", result.getPayload(JsonNode.class).get("$schema").asText()).     Assert.assertNotNull(result.getPayload(JsonNode.class).get("id")).     Assert.assertNotNull(result.getPayload(JsonNode.class).get("type")).     LOGGER.debug(new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(result.getPayload())). }
false;public;0;19;;@Test public void testImportMetaData() throws Exception {     Map<String, Object> parameters = getParameters().     parameters.put("objectType", "import").     parameters.put("metaType", "list").     // parameters.put("object.sys_user.fields", "first_name,last_name").     // parameters.put("object.incident.fields", "caller_id,severity,resolved_at,sys_id").     // parameters.put("object.incident.fields", "^sys_.*$").     // parameters.put("object.task.fields", "").     MetaDataExtension.MetaData result = getExtension().meta(parameters).orElseThrow(RuntimeException::new).     Assert.assertEquals("application/json", result.getAttribute(MetaDataExtension.MetaData.CONTENT_TYPE)).     Assert.assertEquals(JsonNode.class, result.getAttribute(MetaDataExtension.MetaData.JAVA_TYPE)).     LOGGER.debug(new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(result.getPayload())). }
false;public;0;8;;@Test(expected = UnsupportedOperationException.class) public void testInvalidObjectType() throws Exception {     Map<String, Object> parameters = getParameters().     parameters.put("objectType", "test").     parameters.put("objectName", "incident").     getExtension().meta(parameters). }
