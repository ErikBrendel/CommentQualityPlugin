commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     embeddedXmppTestServer.bindSSLContextTo(registry).     return registry. }
false;public;0;41;;@Ignore("Since upgrade to smack 4.2.0 the robust connection handling doesn't seem to work, as consumerEndpoint below receives only 5 payloads instead of the expected 9") @Test public void testXmppChatWithRobustConnection() throws Exception {     // does not work well on aix or solaris     if (isPlatform("aix") || isPlatform("sunos")) {         return.     }     MockEndpoint consumerEndpoint = context.getEndpoint("mock:out", MockEndpoint.class).     MockEndpoint errorEndpoint = context.getEndpoint("mock:error", MockEndpoint.class).     // the sleep may not be sufficient so assume around 9 or so messages     consumerEndpoint.setMinimumExpectedMessageCount(9).     errorEndpoint.setExpectedMessageCount(5).     for (int i = 0. i < 5. i++) {         template.sendBody("direct:start", "Test message [ " + i + " ]").     }     consumerEndpoint.assertIsNotSatisfied().     errorEndpoint.assertIsNotSatisfied().     embeddedXmppTestServer.stopXmppEndpoint().     Thread.sleep(2000).     for (int i = 0. i < 5. i++) {         template.sendBody("direct:start", "Test message [ " + i + " ]").     }     errorEndpoint.assertIsSatisfied().     consumerEndpoint.assertIsNotSatisfied().     embeddedXmppTestServer.startXmppEndpoint().     Thread.sleep(2000).     for (int i = 0. i < 5. i++) {         template.sendBody("direct:start", "Test message [ " + i + " ]").     }     consumerEndpoint.assertIsSatisfied(). }
false;public;0;9;;public void configure() {     onException(RuntimeException.class).handled(true).to("mock:error").     from("direct:start").id("direct:start").to(getProducerUri()).     from(getConsumerUri()).to("mock:out"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             onException(RuntimeException.class).handled(true).to("mock:error").             from("direct:start").id("direct:start").to(getProducerUri()).             from(getConsumerUri()).to("mock:out").         }     }. }
false;protected;0;4;;protected String getProducerUri() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_producer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test@conference.apache.camel&user=camel_producer&password=secret&serviceName=apache.camel". }
false;protected;0;5;;protected String getConsumerUri() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_consumer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test@conference.apache.camel&user=camel_consumer&password=secret&serviceName=apache.camel" + "&connectionPollDelay=1". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     embeddedXmppTestServer = new EmbeddedXmppTestServer(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     embeddedXmppTestServer.stop(). }
