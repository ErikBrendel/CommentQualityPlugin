commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static void main(String[] args) {     enabled = true.     if (args.length > 0) {         xmppUrl = args[0].     }     TestRunner.run(XmppRouteTest.class). }
false;public;0;8;;@Test public void testXmppRouteWithTextMessage() throws Exception {     String expectedBody = "Hello there!".     sendExchange(expectedBody).     Object body = assertReceivedValidExchange().     assertEquals("body", expectedBody, body). }
false;public;1;5;;public void process(Exchange exchange) {     // now lets fire in a message     exchange.getIn().setBody(expectedBody).     exchange.getIn().setHeader("cheese", 123). }
false;protected;1;9;;protected void sendExchange(final Object expectedBody) {     client.send(endpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             exchange.getIn().setBody(expectedBody).             exchange.getIn().setHeader("cheese", 123).         }     }). }
false;protected;0;16;;protected Object assertReceivedValidExchange() throws Exception {     // lets wait on the message being received     assertTrue(latch.await(5, TimeUnit.SECONDS)).     assertNotNull(receivedExchange).     XmppMessage receivedMessage = (XmppMessage) receivedExchange.getIn().     assertEquals("cheese header", 123, receivedMessage.getHeader("cheese")).     Object body = receivedMessage.getBody().     XmppRouteTest.LOG.debug("Received body: " + body).     Message xmppMessage = receivedMessage.getXmppMessage().     assertNotNull(xmppMessage).     XmppRouteTest.LOG.debug("Received XMPP message: " + xmppMessage.getBody()).     return body. }
false;public;1;5;;public void process(Exchange e) {     LOG.info("Received exchange: " + e).     receivedExchange = e.     latch.countDown(). }
false;public;0;10;;public void configure() {     from(uri1).to(uri2).     from(uri3).process(new Processor() {          public void process(Exchange e) {             LOG.info("Received exchange: " + e).             receivedExchange = e.             latch.countDown().         }     }). }
false;protected;0;30;;@Override protected void setUp() throws Exception {     client = new DefaultProducerTemplate(context).     String uriPrefix = getUriPrefix().     final String uri1 = uriPrefix + "&resource=camel-test-from&nickname=came-test-from".     final String uri2 = uriPrefix + "&resource=camel-test-to&nickname=came-test-to".     final String uri3 = uriPrefix + "&resource=camel-test-from-processor&nickname=came-test-from-processor".     LOG.info("Using URI " + uri1 + " and " + uri2).     endpoint = context.getEndpoint(uri1).     assertNotNull("No endpoint found!", endpoint).     // lets add some routes     context.addRoutes(new RouteBuilder() {          public void configure() {             from(uri1).to(uri2).             from(uri3).process(new Processor() {                  public void process(Exchange e) {                     LOG.info("Received exchange: " + e).                     receivedExchange = e.                     latch.countDown().                 }             }).         }     }).     context.start().     embeddedXmppTestServer = new EmbeddedXmppTestServer(). }
false;protected;0;3;;protected String getUriPrefix() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel?login=false&room=camel-anon". }
false;protected;0;6;;@Override protected void tearDown() throws Exception {     client.stop().     context.stop().     embeddedXmppTestServer.stop(). }
