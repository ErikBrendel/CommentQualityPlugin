commented;modifiers;parameterAmount;loc;comment;code
false;private;0;41;;private void initializeXmppServer() {     try {         xmppServer = new XMPPServer("apache.camel").         StorageProviderRegistry providerRegistry = new MemoryStorageProviderRegistry().         AccountManagement accountManagement = (AccountManagement) providerRegistry.retrieve(AccountManagement.class).         Entity user = EntityImpl.parseUnchecked("camel_consumer@apache.camel").         accountManagement.addUser(user, "secret").         Entity user2 = EntityImpl.parseUnchecked("camel_producer@apache.camel").         accountManagement.addUser(user2, "secret").         Entity user3 = EntityImpl.parseUnchecked("camel_producer1@apache.camel").         accountManagement.addUser(user3, "secret").         xmppServer.setStorageProviderRegistry(providerRegistry).         endpoint = new TCPEndpoint().         this.port = AvailablePortFinder.getNextAvailable(5222).         endpoint.setPort(port).         xmppServer.addEndpoint(endpoint).         InputStream stream = ObjectHelper.loadResourceAsStream("xmppServer.jks").         xmppServer.setTLSCertificateInfo(stream, "secret").         // allow anonymous logins         xmppServer.setSASLMechanisms(Arrays.asList(new SASLMechanism[] { new Anonymous() })).         xmppServer.start().         // add the multi-user chat module and create a few test rooms         Conference conference = new Conference("test conference").         conference.createRoom(EntityImpl.parseUnchecked("camel-anon@apache.camel"), "camel-anon", RoomType.FullyAnonymous).         conference.createRoom(EntityImpl.parseUnchecked("camel-test@apache.camel"), "camel-test", RoomType.Public).         xmppServer.addModule(new MUCModule("conference", conference)).     } catch (Exception e) {         throw new RuntimeException("An error occurred when initializing the XMPP Test Server.", e).     } }
false;public;0;3;;public void startXmppEndpoint() throws Exception {     endpoint.start(). }
false;public;0;3;;public void stopXmppEndpoint() {     endpoint.stop(). }
false;public;0;3;;public int getXmppPort() {     return port. }
false;public;1;20;;public void bindSSLContextTo(JndiRegistry registry) throws Exception {     KeyStore keyStore = KeyStore.getInstance("JKS").     keyStore.load(ObjectHelper.loadResourceAsStream("xmppServer.jks"), "secret".toCharArray()).     TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).     trustManagerFactory.init(keyStore).     SSLContext sslContext = SSLContext.getInstance("TLS").     sslContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom()).     ConnectionConfiguration connectionConfig = XMPPTCPConnectionConfiguration.builder().setXmppDomain(JidCreate.domainBareFrom("apache.camel")).setHostAddress(InetAddress.getLocalHost()).setPort(getXmppPort()).setCustomSSLContext(sslContext).setHostnameVerifier((hostname, session) -> true).build().     registry.bind("customConnectionConfig", connectionConfig). }
false;public;0;3;;public void stop() {     xmppServer.stop(). }
