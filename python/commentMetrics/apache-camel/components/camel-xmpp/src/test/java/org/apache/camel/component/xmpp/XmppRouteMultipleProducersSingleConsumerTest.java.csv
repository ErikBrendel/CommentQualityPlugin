commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     embeddedXmppTestServer.bindSSLContextTo(registry).     return registry. }
false;public;0;18;;@Test public void testProducerGetsEverything() throws Exception {     goodEndpoint = context.getEndpoint("mock:good", MockEndpoint.class).     badEndpoint = context.getEndpoint("mock:bad", MockEndpoint.class).     goodEndpoint.expectedMessageCount(4).     badEndpoint.expectedMessageCount(0).     template.sendBody("direct:toProducer1", "From producer").     template.sendBody("direct:toProducer1", "From producer").     template.sendBody("direct:toProducer2", "From producer1").     template.sendBody("direct:toProducer2", "From producer1").     goodEndpoint.assertIsSatisfied().     badEndpoint.assertIsSatisfied(). }
false;public;0;18;;public void configure() throws Exception {     from("direct:toProducer1").to(getProducer1Uri()).     from("direct:toProducer2").to(getProducer2Uri()).     from(getConsumerUri()).removeHeader(XmppConstants.TO).to(getConsumerUri()).     from(getProducer1Uri()).to("mock:good").     from(getProducer2Uri()).to("mock:bad"). }
false;protected;0;22;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:toProducer1").to(getProducer1Uri()).             from("direct:toProducer2").to(getProducer2Uri()).             from(getConsumerUri()).removeHeader(XmppConstants.TO).to(getConsumerUri()).             from(getProducer1Uri()).to("mock:good").             from(getProducer2Uri()).to("mock:bad").         }     }. }
false;protected;0;4;;protected String getProducer1Uri() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_consumer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test-room@conference.apache.camel&user=camel_producer&password=secret&serviceName=apache.camel". }
false;protected;0;4;;protected String getProducer2Uri() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_consumer@apache.camel?connectionConfig=#customConnectionConfig&user=camel_producer1&password=secret&serviceName=apache.camel". }
false;protected;0;4;;protected String getConsumerUri() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_producer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test-room@conference.apache.camel&user=camel_consumer&password=secret&serviceName=apache.camel". }
false;public;0;4;;@Override public void doPreSetup() throws Exception {     embeddedXmppTestServer = new EmbeddedXmppTestServer(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     embeddedXmppTestServer.stop(). }
