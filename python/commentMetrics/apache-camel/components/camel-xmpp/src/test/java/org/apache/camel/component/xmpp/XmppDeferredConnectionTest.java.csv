commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;/**  * Ensures that the XMPP server instance is created and 'stopped' before the camel  * routes are initialized  */ ;/**  * Ensures that the XMPP server instance is created and 'stopped' before the camel  * routes are initialized  */ @Override public void doPreSetup() throws Exception {     embeddedXmppTestServer = new EmbeddedXmppTestServer().     embeddedXmppTestServer.stopXmppEndpoint(). }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     embeddedXmppTestServer.bindSSLContextTo(registry).     return registry. }
false;public;0;32;;@Test public void testXmppChatWithDelayedConnection() throws Exception {     MockEndpoint consumerEndpoint = context.getEndpoint("mock:out", MockEndpoint.class).     MockEndpoint simpleEndpoint = context.getEndpoint("mock:simple", MockEndpoint.class).     consumerEndpoint.setExpectedMessageCount(1).     consumerEndpoint.expectedBodiesReceived("Hello again!").     simpleEndpoint.setExpectedMessageCount(1).     MockEndpoint errorEndpoint = context.getEndpoint("mock:error", MockEndpoint.class).     errorEndpoint.setExpectedMessageCount(1).     // this request should fail XMPP delivery because the server is not available     template.sendBody("direct:start", "Hello!").     consumerEndpoint.assertIsNotSatisfied().     errorEndpoint.assertIsSatisfied().     // this request should be received because it is not going through the XMPP endpoints     // verifying that the non-xmpp routes are started     template.sendBody("direct:simple", "Hello simple!").     simpleEndpoint.assertIsSatisfied().     embeddedXmppTestServer.startXmppEndpoint().     // wait for the connection to be established     Thread.sleep(2000).     // this request should succeed now that the server is available     template.sendBody("direct:start", "Hello again!").     consumerEndpoint.assertIsSatisfied(). }
false;public;0;13;;public void configure() {     onException(RuntimeException.class).handled(true).to("mock:error").     from("direct:start").to(getProducerUri()).     from(getConsumerUri()).id("test-consumer").to("mock:out").     from("direct:simple").to("mock:simple"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             onException(RuntimeException.class).handled(true).to("mock:error").             from("direct:start").to(getProducerUri()).             from(getConsumerUri()).id("test-consumer").to("mock:out").             from("direct:simple").to("mock:simple").         }     }. }
false;protected;0;5;;protected String getProducerUri() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_producer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test@conference.apache.camel&user=camel_producer&password=secret&serviceName=apache.camel" + "&testConnectionOnStartup=false". }
false;protected;0;5;;protected String getConsumerUri() {     return "xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "/camel_consumer@apache.camel?connectionConfig=#customConnectionConfig&room=camel-test@conference.apache.camel&user=camel_consumer&password=secret&serviceName=apache.camel" + "&testConnectionOnStartup=false&connectionPollDelay=1". }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     embeddedXmppTestServer.stop(). }
