commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     embeddedXmppTestServer.bindSSLContextTo(registry).     return registry. }
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;4;;public Object call() throws Exception {     template.sendBody("direct:start", "Hello " + index).     return null. }
false;private;2;18;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").assertNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 template.sendBody("direct:start", "Hello " + index).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "?connectionConfig=#customConnectionConfig&user=camel_consumer&password=secret&serviceName=apache.camel").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("xmpp://localhost:" + embeddedXmppTestServer.getXmppPort() + "?connectionConfig=#customConnectionConfig&user=camel_consumer&password=secret&serviceName=apache.camel").to("mock:result").         }     }. }
false;public;0;4;;@Override public void doPreSetup() throws Exception {     embeddedXmppTestServer = new EmbeddedXmppTestServer(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     embeddedXmppTestServer.stop(). }
