commented;modifiers;parameterAmount;loc;comment;code
false;public;1;41;;public void process(Exchange exchange) {     if (connection == null) {         try {             connection = endpoint.createConnection().         } catch (Exception e) {             throw new RuntimeExchangeException("Could not connect to XMPP server.", exchange, e).         }     }     if (chat == null) {         try {             initializeChat().         } catch (Exception e) {             throw new RuntimeExchangeException("Could not initialize XMPP chat.", exchange, e).         }     }     Message message = chat.createMessage().     try {         message.setTo(JidCreate.from(room)).         message.setFrom(JidCreate.from(endpoint.getUser())).         endpoint.getBinding().populateXmppMessage(message, exchange).         // make sure we are connected         if (!connection.isConnected()) {             this.reconnect().         }         if (LOG.isDebugEnabled()) {             LOG.debug("Sending XMPP message: {}", message.getBody()).         }         chat.sendMessage(message).         // must invoke nextMessage to consume the response from the server         // otherwise the client local queue will fill up (CAMEL-1467)         chat.pollMessage().     } catch (Exception e) {         throw new RuntimeExchangeException("Could not send XMPP message: " + message, exchange, e).     } }
false;private,synchronized;0;8;;private synchronized void reconnect() throws InterruptedException, IOException, SmackException, XMPPException {     if (!connection.isConnected()) {         if (LOG.isDebugEnabled()) {             LOG.debug("Reconnecting to: {}", XmppEndpoint.getConnectionMessage(connection)).         }         connection.connect().     } }
false;protected;0;20;;@Override protected void doStart() throws Exception {     if (connection == null) {         try {             connection = endpoint.createConnection().         } catch (SmackException e) {             if (endpoint.isTestConnectionOnStartup()) {                 throw new RuntimeException("Could not connect to XMPP server:  " + endpoint.getConnectionDescription(), e).             } else {                 LOG.warn("Could not connect to XMPP server. {}  Producer will attempt lazy connection when needed.", e.getMessage()).             }         }     }     if (chat == null && connection != null) {         initializeChat().     }     super.doStart(). }
false;protected,synchronized;0;12;;protected synchronized void initializeChat() throws InterruptedException, SmackException, XMPPException, XmppStringprepException {     if (chat == null) {         room = endpoint.resolveRoom(connection).         MultiUserChatManager chatManager = MultiUserChatManager.getInstanceFor(connection).         chat = chatManager.getMultiUserChat(JidCreate.entityBareFrom(room)).         MucEnterConfiguration mucc = chat.getEnterConfigurationBuilder(Resourcepart.from(endpoint.getNickname())).requestNoHistory().build().         chat.join(mucc).         LOG.info("Joined room: {} as: {}", room, endpoint.getNickname()).     } }
false;protected;0;15;;@Override protected void doStop() throws Exception {     if (chat != null) {         LOG.info("Leaving room: {}", room).         chat.leave().     }     chat = null.     if (connection != null && connection.isConnected()) {         connection.disconnect().     }     connection = null.     super.doStop(). }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public String getRoom() {     return room. }
