commented;modifiers;parameterAmount;loc;comment;code
false;public;1;43;;public void process(Exchange exchange) {     // make sure we are connected     try {         if (connection == null) {             connection = endpoint.createConnection().         }         if (!connection.isConnected()) {             this.reconnect().         }     } catch (Exception e) {         throw new RuntimeException("Could not connect to XMPP server.", e).     }     String participant = endpoint.getParticipant().     String thread = endpoint.getChatId().     if (participant == null) {         participant = getParticipant().     } else {         thread = "Chat:" + participant + ":" + endpoint.getUser().     }     Message message = new Message().     try {         message.setTo(JidCreate.from(participant)).         message.setThread(thread).         message.setType(Message.Type.normal).         ChatManager chatManager = ChatManager.getInstanceFor(connection).         Chat chat = getOrCreateChat(chatManager, participant, thread).         endpoint.getBinding().populateXmppMessage(message, exchange).         if (LOG.isDebugEnabled()) {             LOG.debug("Sending XMPP message to {} from {} : {}", participant, endpoint.getUser(), message.getBody()).         }         chat.send(message).     } catch (Exception e) {         throw new RuntimeExchangeException("Could not send XMPP message to " + participant + " from " + endpoint.getUser() + " : " + message + " to: " + XmppEndpoint.getConnectionMessage(connection), exchange, e).     } }
false;private;3;4;;private Chat getOrCreateChat(ChatManager chatManager, final String participant, String thread) throws XmppStringprepException {     // this starts a new chat or retrieves the pre-existing one in a threadsafe manner     return chatManager.chatWith(JidCreate.entityBareFrom(participant + "@" + thread)). }
false;private,synchronized;0;8;;private synchronized void reconnect() throws InterruptedException, IOException, SmackException, XMPPException {     if (!connection.isConnected()) {         if (LOG.isDebugEnabled()) {             LOG.debug("Reconnecting to: {}", XmppEndpoint.getConnectionMessage(connection)).         }         connection.connect().     } }
false;protected;0;15;;@Override protected void doStart() throws Exception {     if (connection == null) {         try {             connection = endpoint.createConnection().         } catch (SmackException e) {             if (endpoint.isTestConnectionOnStartup()) {                 throw new RuntimeException("Could not establish connection to XMPP server: " + endpoint.getConnectionDescription(), e).             } else {                 LOG.warn("Could not connect to XMPP server: {} Producer will attempt lazy connection when needed.", e.getMessage()).             }         }     }     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     if (connection != null && connection.isConnected()) {         connection.disconnect().     }     connection = null.     super.doStop(). }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public String getParticipant() {     return participant. }
