commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;39;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     String cacheKey = extractCacheKeyFromUri(uri).     if (endpointCache.containsKey(cacheKey)) {         log.debug("Using cached endpoint for URI {}", URISupport.sanitizeUri(uri)).         return endpointCache.get(cacheKey).     }     log.debug("Creating new endpoint for URI {}", URISupport.sanitizeUri(uri)).     XmppEndpoint endpoint = new XmppEndpoint(uri, this).     URI u = new URI(uri).     endpoint.setHost(u.getHost()).     endpoint.setPort(u.getPort()).     if (u.getUserInfo() != null) {         String[] parts = u.getUserInfo().split(":").         if (parts.length == 2) {             endpoint.setUser(parts[0]).             endpoint.setPassword(parts[1]).         } else {             endpoint.setUser(u.getUserInfo()).         }     }     String remainingPath = u.getPath().     if (remainingPath != null) {         if (remainingPath.startsWith("/")) {             remainingPath = remainingPath.substring(1).         }         // assume its a participant         if (remainingPath.length() > 0) {             endpoint.setParticipant(remainingPath).         }     }     endpointCache.put(cacheKey, endpoint).     return endpoint. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     super.doStart().     ReconnectionManager.setEnabledPerDefault(true). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(endpointCache.values()).     endpointCache.clear().     super.doStop(). }
false;private;1;5;;private String extractCacheKeyFromUri(String uri) throws URISyntaxException {     URI u = new URI(uri).     String result = u.getScheme() + "://" + u.getHost() + u.getPort() + u.getQuery().     return result. }
