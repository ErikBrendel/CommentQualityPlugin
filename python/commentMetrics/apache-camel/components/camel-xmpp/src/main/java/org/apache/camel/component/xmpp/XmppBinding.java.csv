commented;modifiers;parameterAmount;loc;comment;code
true;public;2;35;/**  * Populates the given XMPP message from the inbound exchange  */ ;/**  * Populates the given XMPP message from the inbound exchange  */ public void populateXmppMessage(Message message, Exchange exchange) {     message.setBody(exchange.getIn().getBody(String.class)).     Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet().     for (Map.Entry<String, Object> entry : entries) {         String name = entry.getKey().         Object value = entry.getValue().         if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {             if ("subject".equalsIgnoreCase(name)) {                 // special for subject                 String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value).                 message.setSubject(subject).             } else if ("language".equalsIgnoreCase(name)) {                 // special for language                 String language = exchange.getContext().getTypeConverter().convertTo(String.class, value).                 message.setLanguage(language).             } else {                 try {                     JivePropertiesManager.addProperty(message, name, value).                     LOG.trace("Added property name: {} value: {}", name, value).                 } catch (IllegalArgumentException iae) {                     if (LOG.isDebugEnabled()) {                         LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae).                     }                 }             }         }     }     String id = exchange.getExchangeId().     if (id != null) {         JivePropertiesManager.addProperty(message, "exchangeId", id).     } }
true;public;2;19;/**  * Populates the given XMPP stanza from the inbound exchange  */ ;/**  * Populates the given XMPP stanza from the inbound exchange  */ public void populateXmppStanza(Stanza stanza, Exchange exchange) {     Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet().     for (Map.Entry<String, Object> entry : entries) {         String name = entry.getKey().         Object value = entry.getValue().         if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {             try {                 JivePropertiesManager.addProperty(stanza, name, value).                 LOG.debug("Added property name: " + name + " value: " + value).             } catch (IllegalArgumentException iae) {                 LOG.debug("Not adding property " + name + " to XMPP message due to " + iae).             }         }     }     String id = exchange.getExchangeId().     if (id != null) {         JivePropertiesManager.addProperty(stanza, "exchangeId", id).     } }
true;public;2;3;/**  * Extracts the body from the XMPP message  */ ;/**  * Extracts the body from the XMPP message  */ public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza) {     return (stanza instanceof Message) ? getMessageBody((Message) stanza) : stanza. }
false;private;1;8;;private Object getMessageBody(Message message) {     String messageBody = message.getBody().     if (messageBody == null) {         // probably a pubsub message         return message.     }     return messageBody. }
false;public;2;27;;public Map<String, Object> extractHeadersFromXmpp(Stanza stanza, Exchange exchange) {     Map<String, Object> answer = new HashMap<>().     ExtensionElement jpe = stanza.getExtension(JivePropertiesExtension.NAMESPACE).     if (jpe instanceof JivePropertiesExtension) {         extractHeadersFrom((JivePropertiesExtension) jpe, exchange, answer).     }     if (jpe instanceof DefaultExtensionElement) {         extractHeadersFrom((DefaultExtensionElement) jpe, exchange, answer).     }     if (stanza instanceof Message) {         Message xmppMessage = (Message) stanza.         answer.put(XmppConstants.MESSAGE_TYPE, xmppMessage.getType()).         answer.put(XmppConstants.SUBJECT, xmppMessage.getSubject()).         answer.put(XmppConstants.THREAD_ID, xmppMessage.getThread()).     } else if (stanza instanceof PubSub) {         PubSub pubsubPacket = (PubSub) stanza.         answer.put(XmppConstants.MESSAGE_TYPE, pubsubPacket.getType()).     }     answer.put(XmppConstants.FROM, stanza.getFrom()).     answer.put(XmppConstants.PACKET_ID, stanza.getStanzaId()).     answer.put(XmppConstants.STANZA_ID, stanza.getStanzaId()).     answer.put(XmppConstants.TO, stanza.getTo()).     return answer. }
false;private;3;8;;private void extractHeadersFrom(JivePropertiesExtension jpe, Exchange exchange, Map<String, Object> answer) {     for (String name : jpe.getPropertyNames()) {         Object value = jpe.getProperty(name).         if (!headerFilterStrategy.applyFilterToExternalHeaders(name, value, exchange)) {             answer.put(name, value).         }     } }
false;private;3;8;;private void extractHeadersFrom(DefaultExtensionElement jpe, Exchange exchange, Map<String, Object> answer) {     for (String name : jpe.getNames()) {         Object value = jpe.getValue(name).         if (!headerFilterStrategy.applyFilterToExternalHeaders(name, value, exchange)) {             answer.put(name, value).         }     } }
