# id;timestamp;commentText;codeText;commentWords;codeWords
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1179416274;Extracts the body from the XMPP message__@param exchange_@param message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message,param,exchange,param,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1186522380;Extracts the body from the XMPP message__@param exchange_@param message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message,param,exchange,param,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1206897402;Extracts the body from the XMPP message__@param exchange_@param message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message,param,exchange,param,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1217876741;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1218125567;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1218226303;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1218276383;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1234432946;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1238035325;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(XmppExchange exchange, Message message);1242714051;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(XmppExchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza);1495051098;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza) {_        return (stanza instanceof Message) ? getMessageBody((Message) stanza) : stanza__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,stanza,stanza,return,stanza,instanceof,message,get,message,body,message,stanza,stanza
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza);1495134891;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza) {_        return (stanza instanceof Message) ? getMessageBody((Message) stanza) : stanza__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,stanza,stanza,return,stanza,instanceof,message,get,message,body,message,stanza,stanza
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza);1513158838;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza) {_        return (stanza instanceof Message) ? getMessageBody((Message) stanza) : stanza__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,stanza,stanza,return,stanza,instanceof,message,get,message,body,message,stanza,stanza
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza);1524063240;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza) {_        return (stanza instanceof Message) ? getMessageBody((Message) stanza) : stanza__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,stanza,stanza,return,stanza,instanceof,message,get,message,body,message,stanza,stanza
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza);1548332772;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza) {_        return (stanza instanceof Message) ? getMessageBody((Message) stanza) : stanza__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,stanza,stanza,return,stanza,instanceof,message,get,message,body,message,stanza,stanza
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza);1548679022;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Stanza stanza) {_        return (stanza instanceof Message) ? getMessageBody((Message) stanza) : stanza__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,stanza,stanza,return,stanza,instanceof,message,get,message,body,message,stanza,stanza
XmppBinding -> public void populateXmppPacket(Packet packet, Exchange exchange);1417678173;Populates the given XMPP packet from the inbound exchange;public void populateXmppPacket(Packet packet, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                    try {_                    	packet.setProperty(name, value)__                        LOG.debug("Added property name: " + name + " value: " + value.toString())__                    } catch (IllegalArgumentException iae) {_                        LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                    }_                }_            }        _        String id = exchange.getExchangeId()__        if (id != null) {_        	packet.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,packet,from,the,inbound,exchange;public,void,populate,xmpp,packet,packet,packet,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,packet,set,property,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,packet,set,property,exchange,id,id
XmppBinding -> public void populateXmppPacket(Packet packet, Exchange exchange);1417678552;Populates the given XMPP packet from the inbound exchange;public void populateXmppPacket(Packet packet, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    packet.setProperty(name, value)__                    LOG.debug("Added property name: " + name + " value: " + value.toString())__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            packet.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,packet,from,the,inbound,exchange;public,void,populate,xmpp,packet,packet,packet,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,packet,set,property,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,packet,set,property,exchange,id,id
XmppBinding -> public void populateXmppPacket(Packet packet, Exchange exchange);1425104432;Populates the given XMPP packet from the inbound exchange;public void populateXmppPacket(Packet packet, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(packet, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value.toString())__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(packet, "exchangeId", id)__        }_    };populates,the,given,xmpp,packet,from,the,inbound,exchange;public,void,populate,xmpp,packet,packet,packet,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,packet,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,packet,exchange,id,id
XmppBinding -> public void populateXmppPacket(Packet packet, Exchange exchange);1444309578;Populates the given XMPP packet from the inbound exchange;public void populateXmppPacket(Packet packet, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(packet, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value.toString())__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(packet, "exchangeId", id)__        }_    };populates,the,given,xmpp,packet,from,the,inbound,exchange;public,void,populate,xmpp,packet,packet,packet,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,packet,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,packet,exchange,id,id
XmppBinding -> public void populateXmppPacket(Packet packet, Exchange exchange);1445070691;Populates the given XMPP packet from the inbound exchange;public void populateXmppPacket(Packet packet, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(packet, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value.toString())__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(packet, "exchangeId", id)__        }_    };populates,the,given,xmpp,packet,from,the,inbound,exchange;public,void,populate,xmpp,packet,packet,packet,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,packet,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,packet,exchange,id,id
XmppBinding -> protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue);1179416274;Strategy to allow filtering of headers which are put on the XMPP message;protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,xmpp,message;protected,boolean,should,output,header,exchange,exchange,string,header,name,object,header,value,return,true
XmppBinding -> protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue);1186522380;Strategy to allow filtering of headers which are put on the XMPP message;protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,xmpp,message;protected,boolean,should,output,header,exchange,exchange,string,header,name,object,header,value,return,true
XmppBinding -> protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue);1206897402;Strategy to allow filtering of headers which are put on the XMPP message;protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,xmpp,message;protected,boolean,should,output,header,exchange,exchange,string,header,name,object,header,value,return,true
XmppBinding -> protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue);1217876741;Strategy to allow filtering of headers which are put on the XMPP message;protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,xmpp,message;protected,boolean,should,output,header,exchange,exchange,string,header,name,object,header,value,return,true
XmppBinding -> protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue);1218125567;Strategy to allow filtering of headers which are put on the XMPP message;protected boolean shouldOutputHeader(Exchange exchange, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,xmpp,message;protected,boolean,should,output,header,exchange,exchange,string,header,name,object,header,value,return,true
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1245905109;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1251159905;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1251282046;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1279082115;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1294476258;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1296546062;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1296567562;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1297975937;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1301257798;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Message message);1376549254;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Message message) {_        return message.getBody()__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,message,message,return,message,get,body
XmppBinding -> public void populateXmppStanza(Stanza stanza, Exchange exchange);1495051098;Populates the given XMPP stanza from the inbound exchange;public void populateXmppStanza(Stanza stanza, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(stanza, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value.toString())__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(stanza, "exchangeId", id)__        }_    };populates,the,given,xmpp,stanza,from,the,inbound,exchange;public,void,populate,xmpp,stanza,stanza,stanza,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,stanza,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,stanza,exchange,id,id
XmppBinding -> public void populateXmppStanza(Stanza stanza, Exchange exchange);1495134891;Populates the given XMPP stanza from the inbound exchange;public void populateXmppStanza(Stanza stanza, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(stanza, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value)__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(stanza, "exchangeId", id)__        }_    };populates,the,given,xmpp,stanza,from,the,inbound,exchange;public,void,populate,xmpp,stanza,stanza,stanza,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,stanza,name,value,log,debug,added,property,name,name,value,value,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,stanza,exchange,id,id
XmppBinding -> public void populateXmppStanza(Stanza stanza, Exchange exchange);1513158838;Populates the given XMPP stanza from the inbound exchange;public void populateXmppStanza(Stanza stanza, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(stanza, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value)__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(stanza, "exchangeId", id)__        }_    };populates,the,given,xmpp,stanza,from,the,inbound,exchange;public,void,populate,xmpp,stanza,stanza,stanza,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,stanza,name,value,log,debug,added,property,name,name,value,value,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,stanza,exchange,id,id
XmppBinding -> public void populateXmppStanza(Stanza stanza, Exchange exchange);1524063240;Populates the given XMPP stanza from the inbound exchange;public void populateXmppStanza(Stanza stanza, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(stanza, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value)__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(stanza, "exchangeId", id)__        }_    };populates,the,given,xmpp,stanza,from,the,inbound,exchange;public,void,populate,xmpp,stanza,stanza,stanza,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,stanza,name,value,log,debug,added,property,name,name,value,value,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,stanza,exchange,id,id
XmppBinding -> public void populateXmppStanza(Stanza stanza, Exchange exchange);1548332772;Populates the given XMPP stanza from the inbound exchange;public void populateXmppStanza(Stanza stanza, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(stanza, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value)__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(stanza, "exchangeId", id)__        }_    };populates,the,given,xmpp,stanza,from,the,inbound,exchange;public,void,populate,xmpp,stanza,stanza,stanza,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,stanza,name,value,log,debug,added,property,name,name,value,value,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,stanza,exchange,id,id
XmppBinding -> public void populateXmppStanza(Stanza stanza, Exchange exchange);1548679022;Populates the given XMPP stanza from the inbound exchange;public void populateXmppStanza(Stanza stanza, Exchange exchange) {_        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                try {_                    JivePropertiesManager.addProperty(stanza, name, value)__                    LOG.debug("Added property name: " + name + " value: " + value)__                } catch (IllegalArgumentException iae) {_                    LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                }_            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(stanza, "exchangeId", id)__        }_    };populates,the,given,xmpp,stanza,from,the,inbound,exchange;public,void,populate,xmpp,stanza,stanza,stanza,exchange,exchange,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,try,jive,properties,manager,add,property,stanza,name,value,log,debug,added,property,name,name,value,value,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,stanza,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1179416274;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (shouldOutputHeader(exchange, name, value)) {_                message.setProperty(name, value)__            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,should,output,header,exchange,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1186522380;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (shouldOutputHeader(exchange, name, value)) {_                message.setProperty(name, value)__            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,should,output,header,exchange,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1206897402;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (shouldOutputHeader(exchange, name, value)) {_                message.setProperty(name, value)__            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,should,output,header,exchange,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1217876741;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (shouldOutputHeader(exchange, name, value)) {_                message.setProperty(name, value)__            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,should,output,header,exchange,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1218125567;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            _            if (value != null && shouldOutputHeader(exchange, name, value)) {_                message.setProperty(name, value)__            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,value,null,should,output,header,exchange,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1218226303;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            _            if (headerFilterStrategy != null _                    && !headerFilterStrategy.applyFilterToCamelHeaders(name, value)) {_                message.setProperty(name, value)__            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1218276383;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            _            if (headerFilterStrategy != null_                    && !headerFilterStrategy.applyFilterToCamelHeaders(name, value)) {_                message.setProperty(name, value)__            }_        }_        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1234432946;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value)) {_                message.setProperty(name, value)__            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1238035325;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {_                message.setProperty(name, value)__            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1242714051;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    message.setProperty(name, value)__                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1245905109;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    message.setProperty(name, value)__                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,message,set,property,name,value,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1251159905;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        LOG.debug("Added property name: " + name + " value: " + value.toString())__                    } catch ( IllegalArgumentException iae ) {_                        LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1251282046;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        LOG.debug("Added property name: " + name + " value: " + value.toString())__                    } catch (IllegalArgumentException iae) {_                        LOG.debug("Not adding property " + name + " to XMPP message due to " + iae)__                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,log,debug,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,log,debug,not,adding,property,name,to,xmpp,message,due,to,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1279082115;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        if (LOG.isTraceEnabled()) {_                            LOG.trace("Added property name: " + name + " value: " + value.toString())__                        }_                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,if,log,is,trace,enabled,log,trace,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1294476258;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        if (LOG.isTraceEnabled()) {_                            LOG.trace("Added property name: " + name + " value: " + value.toString())__                        }_                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,if,log,is,trace,enabled,log,trace,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1296546062;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        if (LOG.isTraceEnabled()) {_                            LOG.trace("Added property name: " + name + " value: " + value.toString())__                        }_                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,if,log,is,trace,enabled,log,trace,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1296567562;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        if (LOG.isTraceEnabled()) {_                            LOG.trace("Added property name: " + name + " value: " + value.toString())__                        }_                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,if,log,is,trace,enabled,log,trace,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1297975937;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        if (LOG.isTraceEnabled()) {_                            LOG.trace("Added property name: " + name + " value: " + value.toString())__                        }_                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,if,log,is,trace,enabled,log,trace,added,property,name,name,value,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1301257798;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1376549254;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1417678173;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }_        _        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1417678552;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        message.setProperty(name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            message.setProperty("exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,message,set,property,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,message,set,property,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1425104432;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1444309578;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1445070691;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1495051098;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value.toString())__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,to,string,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1495134891;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value)__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1513158838;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value)__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1524063240;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value)__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1548332772;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value)__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public void populateXmppMessage(Message message, Exchange exchange);1548679022;Populates the given XMPP message from the inbound exchange;public void populateXmppMessage(Message message, Exchange exchange) {_        message.setBody(exchange.getIn().getBody(String.class))___        Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String name = entry.getKey()__            Object value = entry.getValue()__            if (!headerFilterStrategy.applyFilterToCamelHeaders(name, value, exchange)) {__                if ("subject".equalsIgnoreCase(name)) {_                    _                    String subject = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setSubject(subject)__                } else if ("language".equalsIgnoreCase(name)) {_                    _                    String language = exchange.getContext().getTypeConverter().convertTo(String.class, value)__                    message.setLanguage(language)__                } else {_                    try {_                        JivePropertiesManager.addProperty(message, name, value)__                        LOG.trace("Added property name: {} value: {}", name, value)__                    } catch (IllegalArgumentException iae) {_                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Cannot add property " + name + " to XMPP message due: ", iae)__                        }_                    }_                }_            }_        }__        String id = exchange.getExchangeId()__        if (id != null) {_            JivePropertiesManager.addProperty(message, "exchangeId", id)__        }_    };populates,the,given,xmpp,message,from,the,inbound,exchange;public,void,populate,xmpp,message,message,message,exchange,exchange,message,set,body,exchange,get,in,get,body,string,class,set,map,entry,string,object,entries,exchange,get,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,name,entry,get,key,object,value,entry,get,value,if,header,filter,strategy,apply,filter,to,camel,headers,name,value,exchange,if,subject,equals,ignore,case,name,string,subject,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,subject,subject,else,if,language,equals,ignore,case,name,string,language,exchange,get,context,get,type,converter,convert,to,string,class,value,message,set,language,language,else,try,jive,properties,manager,add,property,message,name,value,log,trace,added,property,name,value,name,value,catch,illegal,argument,exception,iae,if,log,is,debug,enabled,log,debug,cannot,add,property,name,to,xmpp,message,due,iae,string,id,exchange,get,exchange,id,if,id,null,jive,properties,manager,add,property,message,exchange,id,id
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket);1417678173;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket) {_        return (xmppPacket instanceof Message)? GetMessageBody((Message)xmppPacket): xmppPacket__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,packet,xmpp,packet,return,xmpp,packet,instanceof,message,get,message,body,message,xmpp,packet,xmpp,packet
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket);1417678552;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket) {_        return (xmppPacket instanceof Message) ? getMessageBody((Message) xmppPacket) : xmppPacket__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,packet,xmpp,packet,return,xmpp,packet,instanceof,message,get,message,body,message,xmpp,packet,xmpp,packet
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket);1425104432;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket) {_        return (xmppPacket instanceof Message) ? getMessageBody((Message) xmppPacket) : xmppPacket__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,packet,xmpp,packet,return,xmpp,packet,instanceof,message,get,message,body,message,xmpp,packet,xmpp,packet
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket);1444309578;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket) {_        return (xmppPacket instanceof Message) ? getMessageBody((Message) xmppPacket) : xmppPacket__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,packet,xmpp,packet,return,xmpp,packet,instanceof,message,get,message,body,message,xmpp,packet,xmpp,packet
XmppBinding -> public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket);1445070691;Extracts the body from the XMPP message;public Object extractBodyFromXmpp(Exchange exchange, Packet xmppPacket) {_        return (xmppPacket instanceof Message) ? getMessageBody((Message) xmppPacket) : xmppPacket__    };extracts,the,body,from,the,xmpp,message;public,object,extract,body,from,xmpp,exchange,exchange,packet,xmpp,packet,return,xmpp,packet,instanceof,message,get,message,body,message,xmpp,packet,xmpp,packet
