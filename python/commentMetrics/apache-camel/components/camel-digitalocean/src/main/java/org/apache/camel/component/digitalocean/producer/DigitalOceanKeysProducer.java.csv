commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case list:             getKeys(exchange).             break.         case create:             createKey(exchange).             break.         case get:             getKey(exchange).             break.         case update:             updateKey(exchange).             break.         case delete:             deleteKey(exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;15;;private void getKey(Exchange exchange) throws Exception {     Integer keyId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class).     String fingerprint = exchange.getIn().getHeader(DigitalOceanHeaders.KEY_FINGERPRINT, String.class).     Key key.     if (ObjectHelper.isNotEmpty(keyId)) {         key = getEndpoint().getDigitalOceanClient().getKeyInfo(keyId).     } else if (ObjectHelper.isNotEmpty(fingerprint)) {         key = getEndpoint().getDigitalOceanClient().getKeyInfo(fingerprint).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.KEY_FINGERPRINT + " must be specified").     }     LOG.trace("Key [{}] ", key).     exchange.getOut().setBody(key). }
false;private;1;5;;private void getKeys(Exchange exchange) throws Exception {     Keys keys = getEndpoint().getDigitalOceanClient().getAvailableKeys(configuration.getPage()).     LOG.trace("All Keys : page {} [{}] ", configuration.getPage(), keys.getKeys()).     exchange.getOut().setBody(keys.getKeys()). }
false;private;1;16;;private void deleteKey(Exchange exchange) throws Exception {     Integer keyId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class).     String fingerprint = exchange.getIn().getHeader(DigitalOceanHeaders.KEY_FINGERPRINT, String.class).     Delete delete.     if (ObjectHelper.isNotEmpty(keyId)) {         delete = getEndpoint().getDigitalOceanClient().deleteKey(keyId).     } else if (ObjectHelper.isNotEmpty(fingerprint)) {         delete = getEndpoint().getDigitalOceanClient().deleteKey(fingerprint).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.KEY_FINGERPRINT + " must be specified").     }     LOG.trace("Delete Key {}", delete).     exchange.getOut().setBody(delete). }
false;private;1;25;;private void createKey(Exchange exchange) throws Exception {     Key key = new Key().     String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class).     if (ObjectHelper.isEmpty(name)) {         throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified").     } else {         key.setName(name).     }     String publicKey = exchange.getIn().getHeader(DigitalOceanHeaders.KEY_PUBLIC_KEY, String.class).     if (ObjectHelper.isEmpty(publicKey)) {         throw new IllegalArgumentException(DigitalOceanHeaders.KEY_PUBLIC_KEY + " must be specified").     } else {         key.setPublicKey(publicKey).     }     key = getEndpoint().getDigitalOceanClient().createKey(key).     LOG.trace("Key created {}", key).     exchange.getOut().setBody(key). }
false;private;1;22;;private void updateKey(Exchange exchange) throws Exception {     Integer keyId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, Integer.class).     String fingerprint = exchange.getIn().getHeader(DigitalOceanHeaders.KEY_FINGERPRINT, String.class).     Key key.     String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class).     if (ObjectHelper.isEmpty(name)) {         throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified").     }     if (ObjectHelper.isNotEmpty(keyId)) {         key = getEndpoint().getDigitalOceanClient().updateKey(keyId, name).     } else if (ObjectHelper.isNotEmpty(fingerprint)) {         key = getEndpoint().getDigitalOceanClient().updateKey(fingerprint, name).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.KEY_FINGERPRINT + " must be specified").     }     LOG.trace("Update Key [{}] ", key).     exchange.getOut().setBody(key). }
