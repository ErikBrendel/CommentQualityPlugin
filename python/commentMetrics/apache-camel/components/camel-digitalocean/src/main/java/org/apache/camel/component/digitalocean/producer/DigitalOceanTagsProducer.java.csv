commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case list:             getTags(exchange).             break.         case create:             createTag(exchange).             break.         case get:             getTag(exchange).             break.         case delete:             deleteTag(exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;10;;private void createTag(Exchange exchange) throws Exception {     String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class).     if (ObjectHelper.isEmpty(name)) {         throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified").     }     Tag tag = getEndpoint().getDigitalOceanClient().createTag(name).     LOG.trace("Create Tag [{}] ", tag).     exchange.getOut().setBody(tag). }
false;private;1;10;;private void getTag(Exchange exchange) throws Exception {     String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class).     if (ObjectHelper.isEmpty(name)) {         throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified").     }     Tag tag = getEndpoint().getDigitalOceanClient().getTag(name).     LOG.trace("Tag [{}] ", tag).     exchange.getOut().setBody(tag). }
false;private;1;5;;private void getTags(Exchange exchange) throws Exception {     Tags tags = getEndpoint().getDigitalOceanClient().getAvailableTags(configuration.getPage(), configuration.getPerPage()).     LOG.trace("All Tags : page {} / {} per page [{}] ", configuration.getPage(), configuration.getPerPage(), tags.getTags()).     exchange.getOut().setBody(tags.getTags()). }
false;private;1;10;;private void deleteTag(Exchange exchange) throws Exception {     String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class).     if (ObjectHelper.isEmpty(name)) {         throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified").     }     Delete delete = getEndpoint().getDigitalOceanClient().deleteTag(name).     LOG.trace("Delete Tag [{}] ", delete).     exchange.getOut().setBody(delete). }
