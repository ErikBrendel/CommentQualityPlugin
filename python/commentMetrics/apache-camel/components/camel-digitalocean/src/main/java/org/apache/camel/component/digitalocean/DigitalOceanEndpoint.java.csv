commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;public Producer createProducer() throws Exception {     LOG.trace("Resolve producer digitalocean endpoint {{}}", configuration.getResource()).     switch(configuration.getResource()) {         case account:             return new DigitalOceanAccountProducer(this, configuration).         case actions:             return new DigitalOceanActionsProducer(this, configuration).         case blockStorages:             return new DigitalOceanBlockStoragesProducer(this, configuration).         case droplets:             return new DigitalOceanDropletsProducer(this, configuration).         case images:             return new DigitalOceanImagesProducer(this, configuration).         case snapshots:             return new DigitalOceanSnapshotsProducer(this, configuration).         case keys:             return new DigitalOceanKeysProducer(this, configuration).         case regions:             return new DigitalOceanRegionsProducer(this, configuration).         case sizes:             return new DigitalOceanSizesProducer(this, configuration).         case floatingIPs:             return new DigitalOceanFloatingIPsProducer(this, configuration).         case tags:             return new DigitalOceanTagsProducer(this, configuration).         default:             throw new UnsupportedOperationException("Operation specified is not valid for producer").     } }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("You cannot receive messages from this endpoint"). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;27;;@Override public void doStart() throws Exception {     super.doStart().     if (configuration.getDigitalOceanClient() != null) {         digitalOceanClient = configuration.getDigitalOceanClient().     } else if (configuration.getHttpProxyHost() != null && configuration.getHttpProxyPort() != null) {         HttpClientBuilder builder = HttpClients.custom().useSystemProperties().setProxy(new HttpHost(configuration.getHttpProxyHost(), configuration.getHttpProxyPort())).         if (configuration.getHttpProxyUser() != null && configuration.getHttpProxyPassword() != null) {             BasicCredentialsProvider credsProvider = new BasicCredentialsProvider().             credsProvider.setCredentials(new AuthScope(configuration.getHttpProxyHost(), configuration.getHttpProxyPort()), new UsernamePasswordCredentials(configuration.getHttpProxyUser(), configuration.getHttpProxyPassword())).             builder.setDefaultCredentialsProvider(credsProvider).         }         digitalOceanClient = new DigitalOceanClient("v2", configuration.getOAuthToken(), builder.build()).     } else {         digitalOceanClient = new DigitalOceanClient(configuration.getOAuthToken()).     } }
false;public;0;3;;public DigitalOceanConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public DigitalOceanClient getDigitalOceanClient() {     return digitalOceanClient. }
