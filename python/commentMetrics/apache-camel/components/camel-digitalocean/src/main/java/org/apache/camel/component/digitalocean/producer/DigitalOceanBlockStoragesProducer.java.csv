commented;modifiers;parameterAmount;loc;comment;code
false;public;1;35;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case list:             getVolumes(exchange).             break.         case get:             getVolume(exchange).             break.         case listSnapshots:             getVolumeSnapshots(exchange).             break.         case create:             createVolume(exchange).             break.         case delete:             deleteVolume(exchange).             break.         case attach:             attachVolumeToDroplet(exchange).             break.         case detach:             detachVolumeToDroplet(exchange).             break.         case resize:             resizeVolume(exchange).             break.         case listActions:             getVolumeActions(exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;11;;private void getVolumes(Exchange exchange) throws Exception {     String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class).     if (ObjectHelper.isEmpty(region)) {         throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified").     }     Volumes volumes = getEndpoint().getDigitalOceanClient().getAvailableVolumes(region).     LOG.trace("All Volumes for region {} [{}] ", region, volumes.getVolumes()).     exchange.getOut().setBody(volumes.getVolumes()). }
false;private;1;33;;private void createVolume(Exchange exchange) throws Exception {     Message in = exchange.getIn().     Volume volume = new Volume().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.VOLUME_SIZE_GIGABYTES))) {         volume.setSize(in.getHeader(DigitalOceanHeaders.VOLUME_SIZE_GIGABYTES, Double.class)).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.VOLUME_SIZE_GIGABYTES + " must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.NAME))) {         volume.setName(in.getHeader(DigitalOceanHeaders.NAME, String.class)).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.NAME + " must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.REGION))) {         volume.setRegion(new Region(in.getHeader(DigitalOceanHeaders.REGION, String.class))).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(DigitalOceanHeaders.DESCRIPTION))) {         volume.setDescription(in.getHeader(DigitalOceanHeaders.DESCRIPTION, String.class)).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.DESCRIPTION + " must be specified").     }     volume = getEndpoint().getDigitalOceanClient().createVolume(volume).     LOG.trace("Volume created {}", volume).     exchange.getOut().setBody(volume). }
false;private;1;23;;private void getVolume(Exchange exchange) throws Exception {     String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class).     Volume volume = null.     if (ObjectHelper.isEmpty(volumeId)) {         String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class).         String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class).         if (ObjectHelper.isEmpty(name) && ObjectHelper.isEmpty(region)) {             throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.NAME + " and " + DigitalOceanHeaders.REGION + " must be specified").         }         List<Volume> volumes = getEndpoint().getDigitalOceanClient().getVolumeInfo(name, region).getVolumes().         if (volumes.size() > 0) {             volume = volumes.get(1).         }     } else {         volume = getEndpoint().getDigitalOceanClient().getVolumeInfo(volumeId).     }     LOG.trace("Volume [{}] ", volume).     exchange.getOut().setBody(volume). }
false;private;1;10;;private void getVolumeSnapshots(Exchange exchange) throws Exception {     String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class).     if (ObjectHelper.isEmpty(volumeId)) {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified").     }     Snapshots snapshots = getEndpoint().getDigitalOceanClient().getVolumeSnapshots(volumeId, configuration.getPage(), configuration.getPerPage()).     LOG.trace("All Snapshots for volume {} [{}] ", volumeId, snapshots.getSnapshots()).     exchange.getOut().setBody(snapshots.getSnapshots()). }
false;private;1;21;;private void deleteVolume(Exchange exchange) throws Exception {     String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class).     Delete delete.     if (ObjectHelper.isEmpty(volumeId)) {         String name = exchange.getIn().getHeader(DigitalOceanHeaders.NAME, String.class).         String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class).         if (ObjectHelper.isEmpty(name) && ObjectHelper.isEmpty(region)) {             throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.NAME + " and " + DigitalOceanHeaders.REGION + " must be specified").         }         delete = getEndpoint().getDigitalOceanClient().deleteVolume(name, region).     } else {         delete = getEndpoint().getDigitalOceanClient().deleteVolume(volumeId).     }     LOG.trace("Delete Volume [{}] ", delete).     exchange.getOut().setBody(delete). }
false;private;1;28;;private void attachVolumeToDroplet(Exchange exchange) throws Exception {     String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class).     String volumeName = exchange.getIn().getHeader(DigitalOceanHeaders.VOLUME_NAME, String.class).     Integer dropletId = exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_ID, Integer.class).     String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class).     if (ObjectHelper.isEmpty(dropletId)) {         throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " must be specified").     }     if (ObjectHelper.isEmpty(region)) {         throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified").     }     Action action.     if (ObjectHelper.isNotEmpty(volumeName)) {         action = getEndpoint().getDigitalOceanClient().attachVolumeByName(dropletId, volumeName, region).         LOG.trace("Attach Volume {} to Droplet {} [{}] ", volumeName, dropletId, action).     } else if (ObjectHelper.isNotEmpty(volumeId)) {         action = getEndpoint().getDigitalOceanClient().attachVolume(dropletId, volumeId, region).         LOG.trace("Attach Volume {} to Droplet {} [{}] ", volumeId, dropletId, action).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.VOLUME_NAME + " must be specified").     }     exchange.getOut().setBody(action). }
false;private;1;29;;private void detachVolumeToDroplet(Exchange exchange) throws Exception {     String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class).     String volumeName = exchange.getIn().getHeader(DigitalOceanHeaders.VOLUME_NAME, String.class).     Integer dropletId = exchange.getIn().getHeader(DigitalOceanHeaders.DROPLET_ID, Integer.class).     String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class).     if (ObjectHelper.isEmpty(dropletId)) {         throw new IllegalArgumentException(DigitalOceanHeaders.DROPLET_ID + " must be specified").     }     if (ObjectHelper.isEmpty(region)) {         throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified").     }     Action action.     if (ObjectHelper.isNotEmpty(volumeName)) {         action = getEndpoint().getDigitalOceanClient().detachVolumeByName(dropletId, volumeName, region).         LOG.trace("Detach Volume {} to Droplet {} [{}] ", volumeName, dropletId, action).     } else if (ObjectHelper.isNotEmpty(volumeId)) {         action = getEndpoint().getDigitalOceanClient().detachVolume(dropletId, volumeId, region).         LOG.trace("Detach Volume {} to Droplet {} [{}] ", volumeId, dropletId, action).     } else {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " or " + DigitalOceanHeaders.VOLUME_NAME + " must be specified").     }     exchange.getOut().setBody(action). }
false;private;1;22;;private void resizeVolume(Exchange exchange) throws Exception {     String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class).     if (ObjectHelper.isEmpty(volumeId)) {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified").     }     String region = exchange.getIn().getHeader(DigitalOceanHeaders.REGION, String.class).     if (ObjectHelper.isEmpty(region)) {         throw new IllegalArgumentException(DigitalOceanHeaders.REGION + " must be specified").     }     Double size = exchange.getIn().getHeader(DigitalOceanHeaders.VOLUME_SIZE_GIGABYTES, Double.class).     if (ObjectHelper.isEmpty(size)) {         throw new IllegalArgumentException(DigitalOceanHeaders.VOLUME_SIZE_GIGABYTES + " must be specified").     }     Action action = getEndpoint().getDigitalOceanClient().resizeVolume(volumeId, region, size).     LOG.trace("Resize Volume {} [{}] ", volumeId, action). }
false;private;1;11;;private void getVolumeActions(Exchange exchange) throws Exception {     String volumeId = exchange.getIn().getHeader(DigitalOceanHeaders.ID, String.class).     if (ObjectHelper.isEmpty(volumeId)) {         throw new IllegalArgumentException(DigitalOceanHeaders.ID + " must be specified").     }     Actions actions = getEndpoint().getDigitalOceanClient().getAvailableVolumeActions(volumeId).     LOG.trace("Actions for Volume {} [{}] ", volumeId, actions.getActions()).     exchange.getOut().setBody(actions.getActions()). }
