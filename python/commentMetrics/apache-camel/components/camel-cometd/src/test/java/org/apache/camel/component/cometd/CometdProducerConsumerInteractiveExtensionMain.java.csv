commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;public static void main(String[] args) throws Exception {     CometdProducerConsumerInteractiveExtensionMain me = new CometdProducerConsumerInteractiveExtensionMain().     me.testCometdProducerConsumerInteractive(). }
false;public;0;5;;public void testCometdProducerConsumerInteractive() throws Exception {     context = new DefaultCamelContext().     context.addRoutes(createRouteBuilder()).     context.start(). }
false;public;0;15;;public void configure() {     CometdComponent component = (CometdComponent) context.getComponent("cometds").     component.setSslPassword(pwd).     component.setSslKeyPassword(pwd).     CometdComponent component2 = (CometdComponent) context.getComponent("cometd").     Censor bayeuxAuthenticator = new Censor().     component2.addExtension(bayeuxAuthenticator).     File file = new File("./src/test/resources/jsse/localhost.ks").     URI keyStoreUrl = file.toURI().     component.setSslKeystore(keyStoreUrl.getPath()).     from("stream:in").to(URI).to(URIS). }
false;private;0;19;;private RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             CometdComponent component = (CometdComponent) context.getComponent("cometds").             component.setSslPassword(pwd).             component.setSslKeyPassword(pwd).             CometdComponent component2 = (CometdComponent) context.getComponent("cometd").             Censor bayeuxAuthenticator = new Censor().             component2.addExtension(bayeuxAuthenticator).             File file = new File("./src/test/resources/jsse/localhost.ks").             URI keyStoreUrl = file.toURI().             component.setSslKeystore(keyStoreUrl.getPath()).             from("stream:in").to(URI).to(URIS).         }     }. }
false;public;2;3;;public void removed(ServerSession session, boolean timeout) { // called on remove of client }
false;public;2;3;;public boolean rcv(ServerSession from, ServerMessage.Mutable message) {     return true. }
false;public;2;3;;public boolean rcvMeta(ServerSession from, ServerMessage.Mutable message) {     return true. }
false;public;3;7;;public boolean send(ServerSession from, ServerSession to, ServerMessage.Mutable message) {     Object data = message.getData().     if (forbidden.contains(data)) {         message.put("data", "***").     }     return true. }
false;public;2;3;;public boolean sendMeta(ServerSession from, ServerMessage.Mutable message) {     return true. }
