commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;public static void main(String[] args) throws Exception {     CometdProducerConsumerInteractiveAuthenticatedMain me = new CometdProducerConsumerInteractiveAuthenticatedMain().     me.testCometdProducerConsumerInteractive(). }
false;public;0;5;;public void testCometdProducerConsumerInteractive() throws Exception {     context = new DefaultCamelContext().     context.addRoutes(createRouteBuilder()).     context.start(). }
false;public;0;16;;public void configure() {     CometdComponent component = (CometdComponent) context.getComponent("cometds").     component.setSslPassword(pwd).     component.setSslKeyPassword(pwd).     CometdComponent component2 = (CometdComponent) context.getComponent("cometd").     BayeuxAuthenticator bayeuxAuthenticator = new BayeuxAuthenticator().     component2.setSecurityPolicy(bayeuxAuthenticator).     component2.addExtension(bayeuxAuthenticator).     File file = new File("./src/test/resources/jsse/localhost.ks").     URI keyStoreUrl = file.toURI().     component.setSslKeystore(keyStoreUrl.getPath()).     from("stream:in").to(URI).to(URIS). }
false;private;0;20;;private RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             CometdComponent component = (CometdComponent) context.getComponent("cometds").             component.setSslPassword(pwd).             component.setSslKeyPassword(pwd).             CometdComponent component2 = (CometdComponent) context.getComponent("cometd").             BayeuxAuthenticator bayeuxAuthenticator = new BayeuxAuthenticator().             component2.setSecurityPolicy(bayeuxAuthenticator).             component2.addExtension(bayeuxAuthenticator).             File file = new File("./src/test/resources/jsse/localhost.ks").             URI keyStoreUrl = file.toURI().             component.setSslKeystore(keyStoreUrl.getPath()).             from("stream:in").to(URI).to(URIS).         }     }. }
false;public;3;26;;@Override public boolean canHandshake(BayeuxServer server, ServerSession session, ServerMessage message) {     if (session.isLocalSession()) {         return true.     }     Map<String, Object> ext = message.getExt().     if (ext == null) {         return false.     }     @SuppressWarnings("unchecked")     Map<String, Object> authentication = (Map<String, Object>) ext.get("authentication").     if (authentication == null) {         return false.     }     Object authenticationData = verify(authentication).     if (authenticationData == null) {         return false.     }     session.addListener(this).     return true. }
false;private;1;9;;private Object verify(Map<String, Object> authentication) {     if (!user.equals(authentication.get("user"))) {         return null.     }     if (!pwd.equals(authentication.get("credentials"))) {         return null.     }     return "OK". }
false;public;2;15;;public boolean sendMeta(ServerSession to, ServerMessage.Mutable message) {     if (Channel.META_HANDSHAKE.equals(message.getChannel())) {         if (!message.isSuccessful()) {             Map<String, Object> advice = message.getAdvice(true).             advice.put(Message.RECONNECT_FIELD, Message.RECONNECT_HANDSHAKE_VALUE).             Map<String, Object> ext = message.getExt(true).             Map<String, Object> authentication = new HashMap<>().             ext.put("authentication", authentication).             authentication.put("failed", true).             authentication.put("failureReason", "invalid_credentials").         }     }     return true. }
false;public;2;3;;public void removed(ServerSession session, boolean timeout) { // Remove authentication data }
false;public;2;3;;public boolean rcv(ServerSession from, ServerMessage.Mutable message) {     return true. }
false;public;2;3;;public boolean rcvMeta(ServerSession from, ServerMessage.Mutable message) {     return true. }
false;public;3;3;;public boolean send(ServerSession from, ServerSession to, ServerMessage.Mutable message) {     return true. }
