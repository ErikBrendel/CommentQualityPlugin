commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testProducer() throws Exception {     Person person = new Person("David", "Greco").     // act     template.requestBodyAndHeader("direct:input", person, "testHeading", "value").     // assert     MockEndpoint ep = context.getEndpoint("mock:test", MockEndpoint.class).     List<Exchange> exchanges = ep.getReceivedExchanges().     for (Exchange exchange : exchanges) {         Message message = exchange.getIn().         Person person1 = (Person) message.getBody().         assertEquals("David", person1.getName()).         assertEquals("Greco", person1.getSurname()).     } }
false;public;0;19;;@Test public void testHeadersSupported() throws Exception {     // setup     String headerName = "testHeading".     String headerValue = "value".     // act     template.requestBodyAndHeader("direct:input", "message", headerName, headerValue).     // assert     MockEndpoint ep = context.getEndpoint("mock:test", MockEndpoint.class).     List<Exchange> exchanges = ep.getReceivedExchanges().     assertTrue(exchanges.size() > 0).     for (Exchange exchange : exchanges) {         Message message = exchange.getIn().         assertEquals(headerValue, message.getHeader(headerName)).         assertNotNull(message.getHeader(CometdBinding.COMETD_CLIENT_ID_HEADER_NAME)).     } }
false;public;0;17;;@Test public void testSessionHeaderArgumentSet() throws Exception {     // setup     CometdComponent component = context.getComponent("cometd", CometdComponent.class).     // act     Endpoint result = component.createEndpoint("cometd://127.0.0.1:" + port + "/service/testArgs?baseResource=file:./target/test-classes/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&sessionHeadersEnabled=true&logLevel=2").     // assert     assertTrue(result instanceof CometdEndpoint).     CometdEndpoint cometdEndpoint = (CometdEndpoint) result.     assertTrue(cometdEndpoint.isSessionHeadersEnabled()). }
false;public;0;14;;@Test public void testSessionInformationTransferred() throws Exception {     // act     template.sendBody("direct:input", "message").     // assert     MockEndpoint ep = context.getEndpoint("mock:test", MockEndpoint.class).     List<Exchange> exchanges = ep.getReceivedExchanges().     assertTrue(exchanges.size() > 0).     for (Exchange exchange : exchanges) {         Message message = exchange.getIn().         assertTrue((Boolean) message.getHeader(SHOOKHANDS_SESSION_HEADER)).     } }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     port = AvailablePortFinder.getNextAvailable(23500).     uri = "cometd://127.0.0.1:" + port + "/service/test?baseResource=file:./target/test-classes/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&sessionHeadersEnabled=true&logLevel=2".     super.setUp(). }
false;public;0;8;;@Override public void configure() throws Exception {     CometdComponent component = context.getComponent("cometd", CometdComponent.class).     // The security policy is used to set session attributes.     component.setSecurityPolicy(createTestSecurityPolicy()).     from("direct:input").to(uri).     from(uri).to("mock:test"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             CometdComponent component = context.getComponent("cometd", CometdComponent.class).             // The security policy is used to set session attributes.             component.setSecurityPolicy(createTestSecurityPolicy()).             from("direct:input").to(uri).             from(uri).to("mock:test").         }     }. }
false;public;4;6;;@Override public boolean canSubscribe(BayeuxServer server, ServerSession session, ServerChannel channel, ServerMessage message) {     session.setAttribute("Subscribed", true).     return true. }
false;public;4;5;;@Override public boolean canPublish(BayeuxServer server, ServerSession session, ServerChannel channel, ServerMessage message) {     return true. }
false;public;3;5;;@Override public boolean canHandshake(BayeuxServer server, ServerSession session, ServerMessage message) {     session.setAttribute(SHOOKHANDS_SESSION_HEADER, true).     return true. }
false;public;4;5;;@Override public boolean canCreate(BayeuxServer server, ServerSession session, String channelId, ServerMessage message) {     return true. }
false;private;0;29;;private SecurityPolicy createTestSecurityPolicy() {     return new SecurityPolicy() {          @Override         public boolean canSubscribe(BayeuxServer server, ServerSession session, ServerChannel channel, ServerMessage message) {             session.setAttribute("Subscribed", true).             return true.         }          @Override         public boolean canPublish(BayeuxServer server, ServerSession session, ServerChannel channel, ServerMessage message) {             return true.         }          @Override         public boolean canHandshake(BayeuxServer server, ServerSession session, ServerMessage message) {             session.setAttribute(SHOOKHANDS_SESSION_HEADER, true).             return true.         }          @Override         public boolean canCreate(BayeuxServer server, ServerSession session, String channelId, ServerMessage message) {             return true.         }     }. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public String getSurname() {     return surname. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;3;;public void setSurname(String surname) {     this.surname = surname. }
