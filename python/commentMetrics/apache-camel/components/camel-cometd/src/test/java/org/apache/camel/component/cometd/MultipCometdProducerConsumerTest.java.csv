commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testProducer() throws Exception {     Person person = new Person("David", "Greco").     getMockEndpoint("mock:test1").expectedBodiesReceived(person).     getMockEndpoint("mock:test1").expectedBodiesReceived(person).     // act     template.requestBodyAndHeader("direct:input1", person, "testHeading", "value").     template.requestBodyAndHeader("direct:input2", person, "testHeading", "value").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override @Before public void setUp() throws Exception {     port1 = AvailablePortFinder.getNextAvailable(23500).     port2 = AvailablePortFinder.getNextAvailable(23510).     uri1 = "cometd://127.0.0.1:" + port1 + "/service/test?baseResource=file:./target/test-classes/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2".     uri2 = "cometd://127.0.0.1:" + port2 + "/service/test?baseResource=file:./target/test-classes/webapp&" + "timeout=240000&interval=0&maxInterval=30000&multiFrameInterval=1500&jsonCommented=true&logLevel=2".     super.setUp(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:input1").to(uri1).     from(uri1).to("mock:test1").     from("direct:input2").to(uri2).     from(uri2).to("mock:test2"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:input1").to(uri1).             from(uri1).to("mock:test1").             from("direct:input2").to(uri2).             from(uri2).to("mock:test2").         }     }. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public String getSurname() {     return surname. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;3;;public void setSurname(String surname) {     this.surname = surname. }
