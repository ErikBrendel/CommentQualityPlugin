commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void start() throws Exception {     super.start().     // must connect first     endpoint.connect(this).     // should probably look into synchronization for this.     if (service == null) {         service = new ProducerService(getBayeux(), new CometdBinding(bayeux), endpoint.getPath(), this, getEndpoint().isDisconnectLocalSession()).     } }
false;public;0;5;;@Override public void stop() throws Exception {     super.stop().     endpoint.disconnect(this). }
false;public;1;3;;public void process(final Exchange exchange) {     service.process(exchange). }
false;public;0;3;;public CometdEndpoint getEndpoint() {     return endpoint. }
false;public;0;3;;public BayeuxServerImpl getBayeux() {     return bayeux. }
false;protected;0;3;;protected ProducerService getProducerService() {     return service. }
false;public;1;3;;public void setBayeux(BayeuxServerImpl bayeux) {     this.bayeux = bayeux. }
false;public;1;20;;public void process(final Exchange exchange) {     String channelName = producer.getEndpoint().getPath().     BayeuxServerImpl bayeux = producer.getBayeux().     ServerChannel channel = bayeux.getChannel(channelName).     ServerSession serverSession = getServerSession().     try {         if (channel != null) {             logDelivery(exchange, channel).             ServerMessage.Mutable mutable = binding.createCometdMessage(channel, serverSession, exchange.getIn()).             channel.publish(serverSession, mutable).         }     } finally {         if (disconnectLocalSession && serverSession.isLocalSession()) {             LOG.trace("Disconnection local session {}", serverSession).             serverSession.disconnect().         }     } }
false;private;2;6;;private void logDelivery(Exchange exchange, ServerChannel channel) {     if (LOG.isTraceEnabled()) {         LOG.trace(String.format("Delivering to clients %s path: %s exchange: %s", channel.getSubscribers(), channel, exchange)).     } }
