commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int increment() {     return ++refCount. }
false;public;0;3;;public int decrement() {     return --refCount. }
false;protected;3;6;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     CometdEndpoint endpoint = new CometdEndpoint(this, uri, remaining, parameters).     setProperties(endpoint, parameters).     return endpoint. }
true;public;1;52;/**  * Connects the URL specified on the endpoint to the specified processor.  */ ;/**  * Connects the URL specified on the endpoint to the specified processor.  */ public void connect(CometdProducerConsumer prodcon) throws Exception {     Server server = null.     // Make sure that there is a connector for the requested endpoint.     CometdEndpoint endpoint = prodcon.getEndpoint().     String connectorKey = endpoint.getProtocol() + ":" + endpoint.getUri().getHost() + ":" + endpoint.getPort().     synchronized (connectors) {         ConnectorRef connectorRef = connectors.get(connectorKey).         if (connectorRef == null) {             ServerConnector connector.             server = createServer().             if ("cometds".equals(endpoint.getProtocol())) {                 connector = getSslSocketConnector(server).             } else {                 connector = new ServerConnector(server).             }             connector.setPort(endpoint.getPort()).             connector.setHost(endpoint.getUri().getHost()).             if ("localhost".equalsIgnoreCase(endpoint.getUri().getHost())) {                 LOG.warn("You use localhost interface! It means that no external connections will be available." + " Don't you want to use 0.0.0.0 instead (all network interfaces)?").             }             server.addConnector(connector).             CometDServlet servlet = createServletForConnector(server, connector, endpoint).             connectorRef = new ConnectorRef(connector, servlet, server).             server.start().             connectors.put(connectorKey, connectorRef).         } else {             connectorRef.increment().         }         BayeuxServerImpl bayeux = connectorRef.servlet.getBayeux().         if (securityPolicy != null) {             bayeux.setSecurityPolicy(securityPolicy).         }         if (extensions != null) {             for (BayeuxServer.Extension extension : extensions) {                 bayeux.addExtension(extension).             }         }         if (serverListeners != null) {             for (BayeuxServer.BayeuxServerListener serverListener : serverListeners) {                 bayeux.addListener(serverListener).             }         }         prodcon.setBayeux(bayeux).     } }
true;public;1;17;/**  * Disconnects the URL specified on the endpoint from the specified  * processor.  */ ;/**  * Disconnects the URL specified on the endpoint from the specified  * processor.  */ public void disconnect(CometdProducerConsumer prodcon) throws Exception {     CometdEndpoint endpoint = prodcon.getEndpoint().     String connectorKey = endpoint.getProtocol() + ":" + endpoint.getUri().getHost() + ":" + endpoint.getPort().     synchronized (connectors) {         ConnectorRef connectorRef = connectors.get(connectorKey).         if (connectorRef != null) {             if (connectorRef.decrement() == 0) {                 connectorRef.server.removeConnector(connectorRef.connector).                 connectorRef.connector.stop().                 connectorRef.server.stop().                 connectors.remove(connectorKey).             }         }     } }
false;protected;3;41;;protected CometDServlet createServletForConnector(Server server, Connector connector, CometdEndpoint endpoint) throws Exception {     CometDServlet servlet = new CometDServlet().     ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS).     ServletHolder holder = new ServletHolder().     holder.setServlet(servlet).     holder.setAsyncSupported(true).     // pointing to by example classpath:webapp     if (endpoint.getBaseResource() != null) {         String[] resources = endpoint.getBaseResource().split(":").         if (LOG.isDebugEnabled()) {             LOG.debug(">>> Protocol found: " + resources[0] + ", and resource: " + resources[1]).         }         if (resources[0].equals("file")) {             context.setBaseResource(Resource.newResource(resources[1])).         } else if (resources[0].equals("classpath")) {             // Create a URL handler using classpath protocol             URL url = this.getCamelContext().getClassResolver().loadResourceAsURL(resources[1]).             context.setBaseResource(Resource.newResource(url)).         }     }     applyCrossOriginFiltering(endpoint, context).     context.addServlet(holder, "/cometd/*").     context.addServlet("org.eclipse.jetty.servlet.DefaultServlet", "/").     context.setSessionHandler(new SessionHandler()).     holder.setInitParameter("timeout", Integer.toString(endpoint.getTimeout())).     holder.setInitParameter("interval", Integer.toString(endpoint.getInterval())).     holder.setInitParameter("maxInterval", Integer.toString(endpoint.getMaxInterval())).     holder.setInitParameter("multiFrameInterval", Integer.toString(endpoint.getMultiFrameInterval())).     holder.setInitParameter("JSONCommented", Boolean.toString(endpoint.isJsonCommented())).     holder.setInitParameter("logLevel", Integer.toString(endpoint.getLogLevel())).     return servlet. }
false;protected;1;22;;protected ServerConnector getSslSocketConnector(Server server) throws Exception {     ServerConnector sslSocketConnector = null.     SSLContextParameters sslParams = this.sslContextParameters.     if (sslParams == null) {         sslParams = retrieveGlobalSslContextParameters().     }     if (sslParams != null) {         SslContextFactory sslContextFactory = new CometdComponentSslContextFactory().         sslContextFactory.setSslContext(sslParams.createSSLContext(getCamelContext())).         sslSocketConnector = new ServerConnector(server, sslContextFactory).     } else {         SslContextFactory sslContextFactory = new SslContextFactory().         sslContextFactory.setKeyStorePassword(sslKeyPassword).         sslContextFactory.setKeyManagerPassword(sslPassword).         if (sslKeystore != null) {             sslContextFactory.setKeyStorePath(sslKeystore).         }         sslSocketConnector = new ServerConnector(server, sslContextFactory).     }     return sslSocketConnector. }
false;public;0;3;;public String getSslKeyPassword() {     return sslKeyPassword. }
false;public;0;3;;public String getSslPassword() {     return sslPassword. }
false;public;0;3;;public String getSslKeystore() {     return sslKeystore. }
true;public;1;3;/**  * The password for the keystore when using SSL.  */ ;/**  * The password for the keystore when using SSL.  */ public void setSslKeyPassword(String sslKeyPassword) {     this.sslKeyPassword = sslKeyPassword. }
true;public;1;3;/**  * The password when using SSL.  */ ;/**  * The password when using SSL.  */ public void setSslPassword(String sslPassword) {     this.sslPassword = sslPassword. }
true;public;1;3;/**  * The path to the keystore.  */ ;/**  * The path to the keystore.  */ public void setSslKeystore(String sslKeystore) {     this.sslKeystore = sslKeystore. }
true;public;1;3;/**  * To use a custom configured SecurityPolicy to control authorization  */ ;/**  * To use a custom configured SecurityPolicy to control authorization  */ public void setSecurityPolicy(SecurityPolicy securityPolicy) {     this.securityPolicy = securityPolicy. }
false;public;0;3;;public SecurityPolicy getSecurityPolicy() {     return securityPolicy. }
false;public;0;3;;public List<BayeuxServer.Extension> getExtensions() {     return extensions. }
true;public;1;3;/**  * To use a list of custom BayeuxServer.Extension that allows modifying incoming and outgoing requests.  */ ;/**  * To use a list of custom BayeuxServer.Extension that allows modifying incoming and outgoing requests.  */ public void setExtensions(List<BayeuxServer.Extension> extensions) {     this.extensions = extensions. }
false;public;1;6;;public void addExtension(BayeuxServer.Extension extension) {     if (extensions == null) {         extensions = new ArrayList<>().     }     extensions.add(extension). }
false;public;1;6;;public void addServerListener(BayeuxServer.BayeuxServerListener serverListener) {     if (serverListeners == null) {         serverListeners = new ArrayList<>().     }     serverListeners.add(serverListener). }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * To configure security using SSLContextParameters  */ ;/**  * To configure security using SSLContextParameters  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;protected;0;6;;protected Server createServer() throws Exception {     Server server = new Server().     ContextHandlerCollection collection = new ContextHandlerCollection().     server.setHandler(collection).     return server. }
false;protected;0;9;;@Override protected void doStop() throws Exception {     for (ConnectorRef connectorRef : connectors.values()) {         connectorRef.connector.stop().     }     connectors.clear().     super.doStop(). }
false;protected;0;4;;@Override protected void doStart() throws Exception {     super.doStart(). }
false;private;2;9;;private void applyCrossOriginFiltering(CometdEndpoint endpoint, ServletContextHandler context) {     if (endpoint.isCrossOriginFilterOn()) {         FilterHolder filterHolder = new FilterHolder().         CrossOriginFilter filter = new CrossOriginFilter().         filterHolder.setFilter(filter).         filterHolder.setInitParameter("allowedOrigins", endpoint.getAllowedOrigins()).         context.addFilter(filterHolder, endpoint.getFilterPath(), EnumSet.allOf(DispatcherType.class)).     } }
true;public;0;2;// TODO: remove this class when we have upgraded to jetty 9.3 ;// to support jetty 9.2. // TODO: remove this class when we have upgraded to jetty 9.3 public void checkKeyStore() { }
