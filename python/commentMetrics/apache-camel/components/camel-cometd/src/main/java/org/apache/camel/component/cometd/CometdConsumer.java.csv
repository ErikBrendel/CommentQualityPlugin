commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public void start() throws Exception {     super.start().     // must connect first     endpoint.connect(this).     // should probably look into synchronization for this.     if (service == null) {         service = new ConsumerService(endpoint.getPath(), bayeux, this).     } }
false;public;0;5;;@Override public void stop() throws Exception {     endpoint.disconnect(this).     super.stop(). }
false;public;1;3;;public void setBayeux(BayeuxServerImpl bayeux) {     this.bayeux = bayeux. }
false;public;0;3;;public CometdEndpoint getEndpoint() {     return endpoint. }
false;public;0;3;;public ConsumerService getConsumerService() {     return service. }
false;private;1;4;;private CometdBinding createBinding(BayeuxServerImpl bayeux) {     boolean enableSessionHeaders = endpoint == null ? false : endpoint.isSessionHeadersEnabled().     return new CometdBinding(bayeux, enableSessionHeaders). }
false;public;2;18;;public void push(ServerSession remote, ServerMessage cometdMessage) throws Exception {     Object data = null.     Message message = binding.createCamelMessage(endpoint.getCamelContext(), remote, cometdMessage, data).     Exchange exchange = endpoint.createExchange().     exchange.setIn(message).     consumer.getProcessor().process(exchange).     if (ExchangeHelper.isOutCapable(exchange)) {         ServerChannel channel = getBayeux().getChannel(channelName).         ServerSession serverSession = getServerSession().         ServerMessage.Mutable outMessage = binding.createCometdMessage(channel, serverSession, exchange.getOut()).         remote.deliver(serverSession, outMessage).     } }
