commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String isMockEndpoints() {     return "seda*". }
false;public;0;16;;@Test public void testmakeAsyncApiCall() {     try {         getMockEndpoint("mock:seda:start").expectedHeaderReceived("username", "admin123").         getMockEndpoint("mock:seda:start").expectedBodiesReceived("Hello").         DefaultExchange dfex = new DefaultExchange(context).         dfex.getIn().setHeader("username", "admin123").         dfex.getIn().setHeader("password", "admin").         dfex.getIn().setBody("Hello").         template.asyncSend("seda:start", dfex).         assertMockEndpointsSatisfied().     } catch (Exception e) {         e.printStackTrace().         assertTrue("Failed to make async call to api", false).     } }
