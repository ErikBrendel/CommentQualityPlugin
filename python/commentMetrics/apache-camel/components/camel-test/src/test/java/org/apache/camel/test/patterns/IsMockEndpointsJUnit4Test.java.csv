commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public String isMockEndpoints() {     // use * to indicate all     return "*". }
false;public;0;22;;@Test public void testMockAllEndpoints() throws Exception {     // notice we have automatic mocked all endpoints and the name of the endpoints is "mock:uri"     getMockEndpoint("mock:direct:start").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:direct:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:log:foo").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // additional test to ensure correct endpoints in registry     assertNotNull(context.hasEndpoint("direct:start")).     assertNotNull(context.hasEndpoint("direct:foo")).     assertNotNull(context.hasEndpoint("log:foo")).     assertNotNull(context.hasEndpoint("mock:result")).     // all the endpoints was mocked     assertNotNull(context.hasEndpoint("mock:direct:start")).     assertNotNull(context.hasEndpoint("mock:direct:foo")).     assertNotNull(context.hasEndpoint("mock:log:foo")). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("direct:foo").to("log:foo").to("mock:result").     from("direct:foo").transform(constant("Bye World")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("direct:foo").to("log:foo").to("mock:result").             from("direct:foo").transform(constant("Bye World")).         }     }. }
