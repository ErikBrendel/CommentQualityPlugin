commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public String isMockEndpointsAndSkip() {     // and skip sending to the original endpoint.     return "direct:foo". }
false;public;0;14;;@Test public void testMockEndpointAndSkip() throws Exception {     // notice we have automatic mocked the direct:foo endpoints and the name of the endpoints is "mock:uri"     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:direct:foo").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // the message was not send to the direct:foo route and thus not sent to the seda endpoint     SedaEndpoint seda = context.getEndpoint("seda:foo", SedaEndpoint.class).     assertEquals(0, seda.getCurrentQueueSize()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("direct:foo").to("mock:result").     from("direct:foo").transform(constant("Bye World")).to("seda:foo"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("direct:foo").to("mock:result").             from("direct:foo").transform(constant("Bye World")).to("seda:foo").         }     }. }
