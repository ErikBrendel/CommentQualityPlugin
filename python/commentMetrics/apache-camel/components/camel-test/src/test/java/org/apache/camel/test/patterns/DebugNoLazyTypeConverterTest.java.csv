commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean isLazyLoadingTypeConverter() {     return false. }
true;public;0;5;// START SNIPPET: e1 ;// START SNIPPET: e1 @Override public boolean isUseDebugger() {     // must enable debugger     return true. }
false;protected;5;7;;@Override protected void debugBefore(Exchange exchange, Processor processor, ProcessorDefinition<?> definition, String id, String shortName) {     // this method is invoked before we are about to enter the given processor     // from your Java editor you can just add a breakpoint in the code line below     log.info("Before " + definition + " with body " + exchange.getIn().getBody()). }
false;public;0;12;;// END SNIPPET: e1 @Test public void testDebugger() throws Exception {     // set mock expectations     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     // send a message     template.sendBody("direct:start", "World").     // assert mocks     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testTwo() throws Exception {     // set mock expectations     getMockEndpoint("mock:a").expectedMessageCount(2).     getMockEndpoint("mock:b").expectedMessageCount(2).     // send a message     template.sendBody("direct:start", "World").     template.sendBody("direct:start", "Camel").     // assert mocks     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     // this is the route we want to debug     from("direct:start").to("mock:a").transform(body().prepend("Hello ")).to("mock:b"). }
true;protected;0;13;// START SNIPPET: e2 ;// START SNIPPET: e2 @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // this is the route we want to debug             from("direct:start").to("mock:a").transform(body().prepend("Hello ")).to("mock:b").         }     }. }
