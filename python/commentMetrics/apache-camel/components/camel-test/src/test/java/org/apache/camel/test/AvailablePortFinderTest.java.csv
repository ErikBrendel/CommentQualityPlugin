commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void getNextAvailablePort() throws Exception {     int p1 = AvailablePortFinder.getNextAvailable().     int p2 = AvailablePortFinder.getNextAvailable().     Assert.assertFalse("Port " + p1 + " Port2 " + p2, p1 == p2). }
false;public;0;7;;@Test public void testGetNextAvailablePortInt() throws Exception {     int p1 = AvailablePortFinder.getNextAvailable(9123).     int p2 = AvailablePortFinder.getNextAvailable(9123).     // these calls only check availability but don't mark the port as in use.     Assert.assertEquals(p1, p2). }
false;public;0;8;;@Test public void testNotAvailablePort() throws Exception {     int p1 = AvailablePortFinder.getNextAvailable(11000).     ServerSocket socket = new ServerSocket(p1).     int p2 = AvailablePortFinder.getNextAvailable(p1).     Assert.assertFalse("Port " + p1 + " Port2 " + p2, p1 == p2).     socket.close(). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void getMinOutOfRangePort() throws Exception {     AvailablePortFinder.getNextAvailable(AvailablePortFinder.MIN_PORT_NUMBER - 1). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void getMaxOutOfRangePort() throws Exception {     AvailablePortFinder.getNextAvailable(AvailablePortFinder.MAX_PORT_NUMBER + 1). }
