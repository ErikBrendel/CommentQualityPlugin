commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/input").     deleteDirectory("target/messages").     super.setUp(). }
false;public;0;5;;@Override public String isMockEndpoints() {     // override this method and return the pattern for which endpoints to mock.     return "file:target*". }
false;public;0;14;;@Test public void testMockFileEndpoints() throws Exception {     // notice we have automatic mocked all endpoints and the name of the endpoints is "mock:uri"     MockEndpoint camel = getMockEndpoint("mock:file:target/messages/camel").     camel.expectedMessageCount(1).     MockEndpoint other = getMockEndpoint("mock:file:target/messages/others").     other.expectedMessageCount(1).     template.sendBodyAndHeader("file:target/input", "Hello Camel", Exchange.FILE_NAME, "camel.txt").     template.sendBodyAndHeader("file:target/input", "Hello World", Exchange.FILE_NAME, "world.txt").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file:target/input").choice().when(bodyAs(String.class).contains("Camel")).to("file:target/messages/camel").otherwise().to("file:target/messages/others"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/input").choice().when(bodyAs(String.class).contains("Camel")).to("file:target/messages/camel").otherwise().to("file:target/messages/others").         }     }. }
