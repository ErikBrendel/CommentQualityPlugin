# id;timestamp;commentText;codeText;commentWords;codeWords
AvailablePortFinder -> private AvailablePortFinder();1296986894;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> private AvailablePortFinder();1303144629;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> private AvailablePortFinder();1307811217;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> private AvailablePortFinder();1308568421;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> private AvailablePortFinder();1311943568;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> private AvailablePortFinder();1326870166;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> private AvailablePortFinder();1326870304;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> private AvailablePortFinder();1381655581;Creates a new instance.;private AvailablePortFinder() {_        _    };creates,a,new,instance;private,available,port,finder
AvailablePortFinder -> public static int getNextAvailable();1296986894;Gets the next available port starting at the lowest port number.__@throws NoSuchElementException if there are no ports available;public static int getNextAvailable() {_        return getNextAvailable(MIN_PORT_NUMBER)__    };gets,the,next,available,port,starting,at,the,lowest,port,number,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,int,get,next,available,return,get,next,available
AvailablePortFinder -> public static int getNextAvailable();1303144629;Gets the next available currentMinPort starting at the lowest currentMinPort number. This is the preferred_method to use. The port return is immediately marked in use and doesn't rely on the caller actually opening_the port.__@throws NoSuchElementException if there are no ports available;public static int getNextAvailable() {_        int next = getNextAvailable(currentMinPort.get())__        currentMinPort.set(next + 1)__        return next__    };gets,the,next,available,current,min,port,starting,at,the,lowest,current,min,port,number,this,is,the,preferred,method,to,use,the,port,return,is,immediately,marked,in,use,and,doesn,t,rely,on,the,caller,actually,opening,the,port,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,int,get,next,available,int,next,get,next,available,current,min,port,get,current,min,port,set,next,1,return,next
AvailablePortFinder -> public static int getNextAvailable(int fromPort);1296986894;Gets the next available port starting at a port.__@param fromPort the port to scan for availability_@throws NoSuchElementException if there are no ports available;public static int getNextAvailable(int fromPort) {_        if (fromPort < MIN_PORT_NUMBER || fromPort > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start port: " + fromPort)__        }__        for (int i = fromPort_ i <= MAX_PORT_NUMBER_ i++) {_            if (available(i)) {_                return i__            }_        }__        throw new NoSuchElementException("Could not find an available port above " + fromPort)__    };gets,the,next,available,port,starting,at,a,port,param,from,port,the,port,to,scan,for,availability,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,int,get,next,available,int,from,port,if,from,port,from,port,throw,new,illegal,argument,exception,invalid,start,port,from,port,for,int,i,from,port,i,i,if,available,i,return,i,throw,new,no,such,element,exception,could,not,find,an,available,port,above,from,port
AvailablePortFinder -> public static int getNextAvailable(int fromPort);1303144629;Gets the next available currentMinPort starting at a currentMinPort.__@param fromPort the currentMinPort to scan for availability_@throws NoSuchElementException if there are no ports available;public static int getNextAvailable(int fromPort) {_        if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + fromPort)__        }__        for (int i = fromPort_ i <= MAX_PORT_NUMBER_ i++) {_            if (available(i)) {_                return i__            }_        }__        throw new NoSuchElementException("Could not find an available currentMinPort above " + fromPort)__    };gets,the,next,available,current,min,port,starting,at,a,current,min,port,param,from,port,the,current,min,port,to,scan,for,availability,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,int,get,next,available,int,from,port,if,from,port,current,min,port,get,from,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,from,port,for,int,i,from,port,i,i,if,available,i,return,i,throw,new,no,such,element,exception,could,not,find,an,available,current,min,port,above,from,port
AvailablePortFinder -> public static boolean available(int port);1296986894;Checks to see if a specific port is available.__@param port the port to check for availability;public static boolean available(int port) {_        if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start port: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,port,is,available,param,port,the,port,to,check,for,availability;public,static,boolean,available,int,port,if,port,port,throw,new,illegal,argument,exception,invalid,start,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
AvailablePortFinder -> public static boolean available(int port);1303144629;Checks to see if a specific currentMinPort is available.__@param port the currentMinPort to check for availability;public static boolean available(int port) {_        if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,current,min,port,is,available,param,port,the,current,min,port,to,check,for,availability;public,static,boolean,available,int,port,if,port,current,min,port,get,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
AvailablePortFinder -> public static boolean available(int port);1307811217;Checks to see if a specific currentMinPort is available.__@param port the currentMinPort to check for availability;public static boolean available(int port) {_        if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,current,min,port,is,available,param,port,the,current,min,port,to,check,for,availability;public,static,boolean,available,int,port,if,port,current,min,port,get,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
AvailablePortFinder -> public static boolean available(int port);1308568421;Checks to see if a specific currentMinPort is available.__@param port the currentMinPort to check for availability;public static boolean available(int port) {_        if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,current,min,port,is,available,param,port,the,current,min,port,to,check,for,availability;public,static,boolean,available,int,port,if,port,current,min,port,get,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
AvailablePortFinder -> public static boolean available(int port);1311943568;Checks to see if a specific currentMinPort is available.__@param port the currentMinPort to check for availability;public static boolean available(int port) {_        if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,current,min,port,is,available,param,port,the,current,min,port,to,check,for,availability;public,static,boolean,available,int,port,if,port,current,min,port,get,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
AvailablePortFinder -> public static synchronized int getNextAvailable();1308568421;Gets the next available currentMinPort starting at the lowest currentMinPort number. This is the preferred_method to use. The port return is immediately marked in use and doesn't rely on the caller actually opening_the port.__@throws NoSuchElementException if there are no ports available;public static synchronized int getNextAvailable() {_        int next = getNextAvailable(currentMinPort.get())__        currentMinPort.set(next + 1)__        return next__    };gets,the,next,available,current,min,port,starting,at,the,lowest,current,min,port,number,this,is,the,preferred,method,to,use,the,port,return,is,immediately,marked,in,use,and,doesn,t,rely,on,the,caller,actually,opening,the,port,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,synchronized,int,get,next,available,int,next,get,next,available,current,min,port,get,current,min,port,set,next,1,return,next
AvailablePortFinder -> public static synchronized int getNextAvailable();1311943568;Gets the next available currentMinPort starting at the lowest currentMinPort number. This is the preferred_method to use. The port return is immediately marked in use and doesn't rely on the caller actually opening_the port.__@throws NoSuchElementException if there are no ports available;public static synchronized int getNextAvailable() {_        int next = getNextAvailable(currentMinPort.get())__        currentMinPort.set(next + 1)__        return next__    };gets,the,next,available,current,min,port,starting,at,the,lowest,current,min,port,number,this,is,the,preferred,method,to,use,the,port,return,is,immediately,marked,in,use,and,doesn,t,rely,on,the,caller,actually,opening,the,port,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,synchronized,int,get,next,available,int,next,get,next,available,current,min,port,get,current,min,port,set,next,1,return,next
AvailablePortFinder -> public static synchronized int getNextAvailable();1326870166;Gets the next available port starting at the lowest number. This is the preferred_method to use. The port return is immediately marked in use and doesn't rely on the caller actually opening_the port.__@throws IllegalArgumentException is thrown if the port number is out of range_@throws NoSuchElementException if there are no ports available_@return the available port;public static synchronized int getNextAvailable() {_        int next = getNextAvailable(currentMinPort.get())__        currentMinPort.set(next + 1)__        return next__    };gets,the,next,available,port,starting,at,the,lowest,number,this,is,the,preferred,method,to,use,the,port,return,is,immediately,marked,in,use,and,doesn,t,rely,on,the,caller,actually,opening,the,port,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range,throws,no,such,element,exception,if,there,are,no,ports,available,return,the,available,port;public,static,synchronized,int,get,next,available,int,next,get,next,available,current,min,port,get,current,min,port,set,next,1,return,next
AvailablePortFinder -> public static synchronized int getNextAvailable();1326870304;Gets the next available port starting at the lowest number. This is the preferred_method to use. The port return is immediately marked in use and doesn't rely on the caller actually opening_the port.__@throws IllegalArgumentException is thrown if the port number is out of range_@throws NoSuchElementException if there are no ports available_@return the available port;public static synchronized int getNextAvailable() {_        int next = getNextAvailable(currentMinPort.get())__        currentMinPort.set(next + 1)__        return next__    };gets,the,next,available,port,starting,at,the,lowest,number,this,is,the,preferred,method,to,use,the,port,return,is,immediately,marked,in,use,and,doesn,t,rely,on,the,caller,actually,opening,the,port,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range,throws,no,such,element,exception,if,there,are,no,ports,available,return,the,available,port;public,static,synchronized,int,get,next,available,int,next,get,next,available,current,min,port,get,current,min,port,set,next,1,return,next
AvailablePortFinder -> public static synchronized int getNextAvailable();1381655581;Gets the next available port starting at the lowest number. This is the preferred_method to use. The port return is immediately marked in use and doesn't rely on the caller actually opening_the port.__@throws IllegalArgumentException is thrown if the port number is out of range_@throws NoSuchElementException if there are no ports available_@return the available port;public static synchronized int getNextAvailable() {_        int next = getNextAvailable(currentMinPort.get())__        currentMinPort.set(next + 1)__        return next__    };gets,the,next,available,port,starting,at,the,lowest,number,this,is,the,preferred,method,to,use,the,port,return,is,immediately,marked,in,use,and,doesn,t,rely,on,the,caller,actually,opening,the,port,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range,throws,no,such,element,exception,if,there,are,no,ports,available,return,the,available,port;public,static,synchronized,int,get,next,available,int,next,get,next,available,current,min,port,get,current,min,port,set,next,1,return,next
AvailablePortFinder -> public static synchronized int getNextAvailable(int fromPort);1308568421;Gets the next available currentMinPort starting at a currentMinPort.__@param fromPort the currentMinPort to scan for availability_@throws NoSuchElementException if there are no ports available;public static synchronized int getNextAvailable(int fromPort) {_        if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + fromPort)__        }__        for (int i = fromPort_ i <= MAX_PORT_NUMBER_ i++) {_            if (available(i)) {_                return i__            }_        }__        throw new NoSuchElementException("Could not find an available currentMinPort above " + fromPort)__    };gets,the,next,available,current,min,port,starting,at,a,current,min,port,param,from,port,the,current,min,port,to,scan,for,availability,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,synchronized,int,get,next,available,int,from,port,if,from,port,current,min,port,get,from,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,from,port,for,int,i,from,port,i,i,if,available,i,return,i,throw,new,no,such,element,exception,could,not,find,an,available,current,min,port,above,from,port
AvailablePortFinder -> public static synchronized int getNextAvailable(int fromPort);1311943568;Gets the next available currentMinPort starting at a currentMinPort.__@param fromPort the currentMinPort to scan for availability_@throws NoSuchElementException if there are no ports available;public static synchronized int getNextAvailable(int fromPort) {_        if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + fromPort)__        }__        for (int i = fromPort_ i <= MAX_PORT_NUMBER_ i++) {_            if (available(i)) {_                return i__            }_        }__        throw new NoSuchElementException("Could not find an available currentMinPort above " + fromPort)__    };gets,the,next,available,current,min,port,starting,at,a,current,min,port,param,from,port,the,current,min,port,to,scan,for,availability,throws,no,such,element,exception,if,there,are,no,ports,available;public,static,synchronized,int,get,next,available,int,from,port,if,from,port,current,min,port,get,from,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,from,port,for,int,i,from,port,i,i,if,available,i,return,i,throw,new,no,such,element,exception,could,not,find,an,available,current,min,port,above,from,port
AvailablePortFinder -> public static synchronized int getNextAvailable(int fromPort);1326870166;Gets the next available port starting at a given from port.__@param fromPort the from port to scan for availability_@throws IllegalArgumentException is thrown if the port number is out of range_@throws NoSuchElementException if there are no ports available_@return the available port;public static synchronized int getNextAvailable(int fromPort) {_        if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("From port number not in valid range: " + fromPort)__        }__        for (int i = fromPort_ i <= MAX_PORT_NUMBER_ i++) {_            if (available(i)) {_                LOG.info("getNextAvailable({}) -> {}", fromPort, i)__                return i__            }_        }__        throw new NoSuchElementException("Could not find an available port above " + fromPort)__    };gets,the,next,available,port,starting,at,a,given,from,port,param,from,port,the,from,port,to,scan,for,availability,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range,throws,no,such,element,exception,if,there,are,no,ports,available,return,the,available,port;public,static,synchronized,int,get,next,available,int,from,port,if,from,port,current,min,port,get,from,port,throw,new,illegal,argument,exception,from,port,number,not,in,valid,range,from,port,for,int,i,from,port,i,i,if,available,i,log,info,get,next,available,from,port,i,return,i,throw,new,no,such,element,exception,could,not,find,an,available,port,above,from,port
AvailablePortFinder -> public static synchronized int getNextAvailable(int fromPort);1326870304;Gets the next available port starting at a given from port.__@param fromPort the from port to scan for availability_@throws IllegalArgumentException is thrown if the port number is out of range_@throws NoSuchElementException if there are no ports available_@return the available port;public static synchronized int getNextAvailable(int fromPort) {_        if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("From port number not in valid range: " + fromPort)__        }__        for (int i = fromPort_ i <= MAX_PORT_NUMBER_ i++) {_            if (available(i)) {_                LOG.info("getNextAvailable({}) -> {}", fromPort, i)__                return i__            }_        }__        throw new NoSuchElementException("Could not find an available port above " + fromPort)__    };gets,the,next,available,port,starting,at,a,given,from,port,param,from,port,the,from,port,to,scan,for,availability,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range,throws,no,such,element,exception,if,there,are,no,ports,available,return,the,available,port;public,static,synchronized,int,get,next,available,int,from,port,if,from,port,current,min,port,get,from,port,throw,new,illegal,argument,exception,from,port,number,not,in,valid,range,from,port,for,int,i,from,port,i,i,if,available,i,log,info,get,next,available,from,port,i,return,i,throw,new,no,such,element,exception,could,not,find,an,available,port,above,from,port
AvailablePortFinder -> public static synchronized int getNextAvailable(int fromPort);1381655581;Gets the next available port starting at a given from port.__@param fromPort the from port to scan for availability_@throws IllegalArgumentException is thrown if the port number is out of range_@throws NoSuchElementException if there are no ports available_@return the available port;public static synchronized int getNextAvailable(int fromPort) {_        if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("From port number not in valid range: " + fromPort)__        }__        for (int i = fromPort_ i <= MAX_PORT_NUMBER_ i++) {_            if (available(i)) {_                LOG.info("getNextAvailable({}) -> {}", fromPort, i)__                return i__            }_        }__        throw new NoSuchElementException("Could not find an available port above " + fromPort)__    };gets,the,next,available,port,starting,at,a,given,from,port,param,from,port,the,from,port,to,scan,for,availability,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range,throws,no,such,element,exception,if,there,are,no,ports,available,return,the,available,port;public,static,synchronized,int,get,next,available,int,from,port,if,from,port,current,min,port,get,from,port,throw,new,illegal,argument,exception,from,port,number,not,in,valid,range,from,port,for,int,i,from,port,i,i,if,available,i,log,info,get,next,available,from,port,i,return,i,throw,new,no,such,element,exception,could,not,find,an,available,port,above,from,port
AvailablePortFinder -> public static boolean available(int port) throws IllegalArgumentException;1326870166;Checks to see if a specific port is available.__@param port the port number to check for availability_@return <tt>true</tt> if the port is available, or <tt>false</tt> if not_@throws IllegalArgumentException is thrown if the port number is out of range;public static boolean available(int port) throws IllegalArgumentException {_        if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,port,is,available,param,port,the,port,number,to,check,for,availability,return,tt,true,tt,if,the,port,is,available,or,tt,false,tt,if,not,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range;public,static,boolean,available,int,port,throws,illegal,argument,exception,if,port,current,min,port,get,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
AvailablePortFinder -> public static boolean available(int port) throws IllegalArgumentException;1326870304;Checks to see if a specific port is available.__@param port the port number to check for availability_@return <tt>true</tt> if the port is available, or <tt>false</tt> if not_@throws IllegalArgumentException is thrown if the port number is out of range;public static boolean available(int port) throws IllegalArgumentException {_        if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,port,is,available,param,port,the,port,number,to,check,for,availability,return,tt,true,tt,if,the,port,is,available,or,tt,false,tt,if,not,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range;public,static,boolean,available,int,port,throws,illegal,argument,exception,if,port,current,min,port,get,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
AvailablePortFinder -> public static boolean available(int port) throws IllegalArgumentException;1381655581;Checks to see if a specific port is available.__@param port the port number to check for availability_@return <tt>true</tt> if the port is available, or <tt>false</tt> if not_@throws IllegalArgumentException is thrown if the port number is out of range;public static boolean available(int port) throws IllegalArgumentException {_        if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) {_            throw new IllegalArgumentException("Invalid start currentMinPort: " + port)__        }__        ServerSocket ss = null__        DatagramSocket ds = null__        try {_            ss = new ServerSocket(port)__            ss.setReuseAddress(true)__            ds = new DatagramSocket(port)__            ds.setReuseAddress(true)__            return true__        } catch (IOException e) {_            _        } finally {_            if (ds != null) {_                ds.close()__            }__            if (ss != null) {_                try {_                    ss.close()__                } catch (IOException e) {_                    _                }_            }_        }__        return false__    };checks,to,see,if,a,specific,port,is,available,param,port,the,port,number,to,check,for,availability,return,tt,true,tt,if,the,port,is,available,or,tt,false,tt,if,not,throws,illegal,argument,exception,is,thrown,if,the,port,number,is,out,of,range;public,static,boolean,available,int,port,throws,illegal,argument,exception,if,port,current,min,port,get,port,throw,new,illegal,argument,exception,invalid,start,current,min,port,port,server,socket,ss,null,datagram,socket,ds,null,try,ss,new,server,socket,port,ss,set,reuse,address,true,ds,new,datagram,socket,port,ds,set,reuse,address,true,return,true,catch,ioexception,e,finally,if,ds,null,ds,close,if,ss,null,try,ss,close,catch,ioexception,e,return,false
