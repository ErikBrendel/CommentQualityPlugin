# id;timestamp;commentText;codeText;commentWords;codeWords
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException;1536393251;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model_@throws ClassNotFoundException;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model,throws,class,not,found,exception;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,throws,class,not,found,exception,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException;1538927970;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model_@throws ClassNotFoundException;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model,throws,class,not,found,exception;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,throws,class,not,found,exception,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException;1540108163;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model_@throws ClassNotFoundException;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (org.apache.camel.util.ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model,throws,class,not,found,exception;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,throws,class,not,found,exception,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,org,apache,camel,util,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException;1545405838;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model_@throws ClassNotFoundException;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (org.apache.camel.util.ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model,throws,class,not,found,exception;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,throws,class,not,found,exception,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,org,apache,camel,util,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585773;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585773;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585773;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585773;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585774;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585774;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585774;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442585774;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1442994878;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1444888816;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1446220129;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1450949380;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1450950471;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1453798129;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1454084556;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1456386899;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1456392060;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1456401899;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1457095917;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1457981430;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1457981437;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1457983023;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {_            swagger.model(entry.getKey(), entry.getValue())__        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1458575756;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                oldExt = swagger.getDefinitions().get(entry.getKey()).getVendorExtensions().get("x-className") == null__            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,old,ext,swagger,get,definitions,get,entry,get,key,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1458576020;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") == null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1459581568;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") == null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1477121778;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") == null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1477121778;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") == null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1477122423;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") == null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1481729379;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") == null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1483692222;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1489778342;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1509177273;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1509178242;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1509560949;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1509700106;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1509712802;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1518352442;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1522928519;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1529310674;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1529310674;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1529310674;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1536393251;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1538927970;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1540108163;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> private void appendModels(Class clazz, Swagger swagger);1545405838;If the class is annotated with swagger annotations its parsed into a Swagger model representation_which is added to swagger__@param clazz   the class such as pojo with swagger annotation_@param swagger the swagger model;private void appendModels(Class clazz, Swagger swagger) {_        RestModelConverters converters = new RestModelConverters()__        final Map<String, Model> models = converters.readClass(clazz)__        for (Map.Entry<String, Model> entry : models.entrySet()) {__            _            boolean oldExt = false__            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {_                Model oldModel = swagger.getDefinitions().get(entry.getKey())__                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {_                    oldExt = oldModel.getVendorExtensions().get("x-className") != null__                }_            }__            if (!oldExt) {_                swagger.model(entry.getKey(), entry.getValue())__            }_        }_    };if,the,class,is,annotated,with,swagger,annotations,its,parsed,into,a,swagger,model,representation,which,is,added,to,swagger,param,clazz,the,class,such,as,pojo,with,swagger,annotation,param,swagger,the,swagger,model;private,void,append,models,class,clazz,swagger,swagger,rest,model,converters,converters,new,rest,model,converters,final,map,string,model,models,converters,read,class,clazz,for,map,entry,string,model,entry,models,entry,set,boolean,old,ext,false,if,swagger,get,definitions,null,swagger,get,definitions,get,entry,get,key,null,model,old,model,swagger,get,definitions,get,entry,get,key,if,old,model,get,vendor,extensions,null,old,model,get,vendor,extensions,is,empty,old,ext,old,model,get,vendor,extensions,get,x,class,name,null,if,old,ext,swagger,model,entry,get,key,entry,get,value
RestSwaggerReader -> public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver);1442585773;Read the REST-DSL definition and parse that as a Swagger model representation__@param rest              the rest-dsl_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()__        config.configure(swagger)___        List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs())__        _        Collections.sort(verbs, new VerbOrdering())___        _        Set<String> types = new LinkedHashSet<>()__        for (VerbDefinition verb : verbs) {_            String type = verb.getType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_            type = verb.getOutType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_        }__        _        for (String type : types) {_            Class<?> clazz = classResolver.resolveClass(type)__            appendModels(clazz, swagger)__        }__        _        List<Path> paths = new ArrayList<>()___        String basePath = rest.getPath()___        for (VerbDefinition verb : verbs) {__            _            String method = verb.asVerb().toLowerCase(Locale.US)__            _            String opPath = SwaggerHelper.buildUrl(basePath, verb.getUri())___            Operation op = new Operation()___            Path path = swagger.getPath(opPath)__            if (path == null) {_                path = new Path()__                paths.add(path)__            }_            path = path.set(method, op)___            String consumes = verb.getConsumes() != null ? verb.getConsumes() : rest.getConsumes()__            if (consumes != null) {_                String[] parts = consumes.split(",")__                for (String part : parts) {_                    op.addConsumes(part)__                }_            }__            String produces = verb.getProduces() != null ? verb.getProduces() : rest.getProduces()__            if (produces != null) {_                String[] parts = produces.split(",")__                for (String part : parts) {_                    op.addProduces(part)__                }_            }__            if (verb.getDescriptionText() != null) {_                op.summary(verb.getDescriptionText())__            }__            for (RestOperationParamDefinition param : verb.getParams()) {_                Parameter parameter = null__                if (param.getType().equals(RestParamType.body)) {_                    parameter = new BodyParameter()__                } else if (param.getType().equals(RestParamType.form)) {_                    parameter = new FormParameter()__                } else if (param.getType().equals(RestParamType.header)) {_                    parameter = new HeaderParameter()__                } else if (param.getType().equals(RestParamType.path)) {_                    parameter = new PathParameter()__                } else if (param.getType().equals(RestParamType.query)) {_                    parameter = new QueryParameter()__                }__                if (parameter != null) {_                    parameter.setName(param.getName())__                    parameter.setAccess(param.getAccess())__                    parameter.setDescription(param.getDescription())__                    parameter.setRequired(param.getRequired())___                    if (parameter instanceof SerializableParameter) {_                        SerializableParameter sp = (SerializableParameter) parameter___                        _                        if (param.getDataType() != null) {_                            sp.setType(param.getDataType())__                        } else if (verb.getType() != null) {_                            boolean array = verb.getType().endsWith("[]")__                            if (array) {_                                sp.setType("array")__                            } else {_                                sp.setType(verb.getType())__                            }_                        }_                    }__                    op.addParameter(parameter)__                }_            }__            if (verb.getOutType() != null) {_                Response response = new Response()__                boolean array = verb.getOutType().endsWith("[]")__                String type = array ? verb.getOutType().substring(0, verb.getOutType().length() - 2) : verb.getOutType()__                __                for (Model model : swagger.getDefinitions().values()) {_                    StringProperty modelType = (StringProperty) model.getVendorExtensions().get("x-className")__                    if (modelType != null && type.equals(modelType.getFormat())) {_                        type = ((ModelImpl) model).getName()__                        break__                    }_                }__                if (array) {_                    response.setSchema(new ArrayProperty(new RefProperty(type)))__                } else {_                    response.setSchema(new RefProperty(type))__                }_                response.setDescription("Output type")__                op.addResponse("200", response)__            }__            for (RestOperationResponseMsgDefinition msg : verb.getResponseMsgs()) {_                Response response = new Response()__                response.setDescription(msg.getMessage())__                op.addResponse("" + msg.getCode(), response)__            }__            _            swagger.path(opPath, path)___        }__        return swagger__    };read,the,rest,dsl,definition,and,parse,that,as,a,swagger,model,representation,param,rest,the,rest,dsl,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,rest,definition,rest,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,config,configure,swagger,list,verb,definition,verbs,new,array,list,rest,get,verbs,collections,sort,verbs,new,verb,ordering,set,string,types,new,linked,hash,set,for,verb,definition,verb,verbs,string,type,verb,get,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,type,verb,get,out,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,for,string,type,types,class,clazz,class,resolver,resolve,class,type,append,models,clazz,swagger,list,path,paths,new,array,list,string,base,path,rest,get,path,for,verb,definition,verb,verbs,string,method,verb,as,verb,to,lower,case,locale,us,string,op,path,swagger,helper,build,url,base,path,verb,get,uri,operation,op,new,operation,path,path,swagger,get,path,op,path,if,path,null,path,new,path,paths,add,path,path,path,set,method,op,string,consumes,verb,get,consumes,null,verb,get,consumes,rest,get,consumes,if,consumes,null,string,parts,consumes,split,for,string,part,parts,op,add,consumes,part,string,produces,verb,get,produces,null,verb,get,produces,rest,get,produces,if,produces,null,string,parts,produces,split,for,string,part,parts,op,add,produces,part,if,verb,get,description,text,null,op,summary,verb,get,description,text,for,rest,operation,param,definition,param,verb,get,params,parameter,parameter,null,if,param,get,type,equals,rest,param,type,body,parameter,new,body,parameter,else,if,param,get,type,equals,rest,param,type,form,parameter,new,form,parameter,else,if,param,get,type,equals,rest,param,type,header,parameter,new,header,parameter,else,if,param,get,type,equals,rest,param,type,path,parameter,new,path,parameter,else,if,param,get,type,equals,rest,param,type,query,parameter,new,query,parameter,if,parameter,null,parameter,set,name,param,get,name,parameter,set,access,param,get,access,parameter,set,description,param,get,description,parameter,set,required,param,get,required,if,parameter,instanceof,serializable,parameter,serializable,parameter,sp,serializable,parameter,parameter,if,param,get,data,type,null,sp,set,type,param,get,data,type,else,if,verb,get,type,null,boolean,array,verb,get,type,ends,with,if,array,sp,set,type,array,else,sp,set,type,verb,get,type,op,add,parameter,parameter,if,verb,get,out,type,null,response,response,new,response,boolean,array,verb,get,out,type,ends,with,string,type,array,verb,get,out,type,substring,0,verb,get,out,type,length,2,verb,get,out,type,for,model,model,swagger,get,definitions,values,string,property,model,type,string,property,model,get,vendor,extensions,get,x,class,name,if,model,type,null,type,equals,model,type,get,format,type,model,impl,model,get,name,break,if,array,response,set,schema,new,array,property,new,ref,property,type,else,response,set,schema,new,ref,property,type,response,set,description,output,type,op,add,response,200,response,for,rest,operation,response,msg,definition,msg,verb,get,response,msgs,response,response,new,response,response,set,description,msg,get,message,op,add,response,msg,get,code,response,swagger,path,op,path,path,return,swagger
RestSwaggerReader -> public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver);1442585773;Read the REST-DSL definition and parse that as a Swagger model representation__@param rest              the rest-dsl_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()__        config.configure(swagger)___        List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs())__        _        Collections.sort(verbs, new VerbOrdering())___        _        Set<String> types = new LinkedHashSet<>()__        for (VerbDefinition verb : verbs) {_            String type = verb.getType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_            type = verb.getOutType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_        }__        _        for (String type : types) {_            Class<?> clazz = classResolver.resolveClass(type)__            appendModels(clazz, swagger)__        }__        _        List<Path> paths = new ArrayList<>()___        String basePath = rest.getPath()___        for (VerbDefinition verb : verbs) {__            _            String method = verb.asVerb().toLowerCase(Locale.US)__            _            String opPath = SwaggerHelper.buildUrl(basePath, verb.getUri())___            Operation op = new Operation()___            Path path = swagger.getPath(opPath)__            if (path == null) {_                path = new Path()__                paths.add(path)__            }_            path = path.set(method, op)___            String consumes = verb.getConsumes() != null ? verb.getConsumes() : rest.getConsumes()__            if (consumes != null) {_                String[] parts = consumes.split(",")__                for (String part : parts) {_                    op.addConsumes(part)__                }_            }__            String produces = verb.getProduces() != null ? verb.getProduces() : rest.getProduces()__            if (produces != null) {_                String[] parts = produces.split(",")__                for (String part : parts) {_                    op.addProduces(part)__                }_            }__            if (verb.getDescriptionText() != null) {_                op.summary(verb.getDescriptionText())__            }__            for (RestOperationParamDefinition param : verb.getParams()) {_                Parameter parameter = null__                if (param.getType().equals(RestParamType.body)) {_                    parameter = new BodyParameter()__                } else if (param.getType().equals(RestParamType.form)) {_                    parameter = new FormParameter()__                } else if (param.getType().equals(RestParamType.header)) {_                    parameter = new HeaderParameter()__                } else if (param.getType().equals(RestParamType.path)) {_                    parameter = new PathParameter()__                } else if (param.getType().equals(RestParamType.query)) {_                    parameter = new QueryParameter()__                }__                if (parameter != null) {_                    parameter.setName(param.getName())__                    parameter.setAccess(param.getAccess())__                    parameter.setDescription(param.getDescription())__                    parameter.setRequired(param.getRequired())___                    if (parameter instanceof SerializableParameter) {_                        SerializableParameter sp = (SerializableParameter) parameter___                        if (param.getDataType() != null) {_                            sp.setType(param.getDataType())__                        }_                    }__                    if (parameter instanceof BodyParameter) {_                        BodyParameter bp = (BodyParameter) parameter___                        if (verb.getType() != null) {_                            String ref = modelTypeAsRef(verb.getType(), swagger)__                            if (ref != null) {_                                bp.setSchema(new RefModel(ref))__                            }_                        }_                    }__                    op.addParameter(parameter)__                }_            }__            if (verb.getOutType() != null) {_                Response response = new Response()__                Property prop = modelTypeAsProperty(verb.getOutType(), swagger)__                response.setSchema(prop)__                response.setDescription("Output type")__                op.addResponse("200", response)__            }__            for (RestOperationResponseMsgDefinition msg : verb.getResponseMsgs()) {_                Response response = new Response()__                response.setDescription(msg.getMessage())__                op.addResponse("" + msg.getCode(), response)__            }__            _            swagger.path(opPath, path)__        }__        return swagger__    };read,the,rest,dsl,definition,and,parse,that,as,a,swagger,model,representation,param,rest,the,rest,dsl,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,rest,definition,rest,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,config,configure,swagger,list,verb,definition,verbs,new,array,list,rest,get,verbs,collections,sort,verbs,new,verb,ordering,set,string,types,new,linked,hash,set,for,verb,definition,verb,verbs,string,type,verb,get,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,type,verb,get,out,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,for,string,type,types,class,clazz,class,resolver,resolve,class,type,append,models,clazz,swagger,list,path,paths,new,array,list,string,base,path,rest,get,path,for,verb,definition,verb,verbs,string,method,verb,as,verb,to,lower,case,locale,us,string,op,path,swagger,helper,build,url,base,path,verb,get,uri,operation,op,new,operation,path,path,swagger,get,path,op,path,if,path,null,path,new,path,paths,add,path,path,path,set,method,op,string,consumes,verb,get,consumes,null,verb,get,consumes,rest,get,consumes,if,consumes,null,string,parts,consumes,split,for,string,part,parts,op,add,consumes,part,string,produces,verb,get,produces,null,verb,get,produces,rest,get,produces,if,produces,null,string,parts,produces,split,for,string,part,parts,op,add,produces,part,if,verb,get,description,text,null,op,summary,verb,get,description,text,for,rest,operation,param,definition,param,verb,get,params,parameter,parameter,null,if,param,get,type,equals,rest,param,type,body,parameter,new,body,parameter,else,if,param,get,type,equals,rest,param,type,form,parameter,new,form,parameter,else,if,param,get,type,equals,rest,param,type,header,parameter,new,header,parameter,else,if,param,get,type,equals,rest,param,type,path,parameter,new,path,parameter,else,if,param,get,type,equals,rest,param,type,query,parameter,new,query,parameter,if,parameter,null,parameter,set,name,param,get,name,parameter,set,access,param,get,access,parameter,set,description,param,get,description,parameter,set,required,param,get,required,if,parameter,instanceof,serializable,parameter,serializable,parameter,sp,serializable,parameter,parameter,if,param,get,data,type,null,sp,set,type,param,get,data,type,if,parameter,instanceof,body,parameter,body,parameter,bp,body,parameter,parameter,if,verb,get,type,null,string,ref,model,type,as,ref,verb,get,type,swagger,if,ref,null,bp,set,schema,new,ref,model,ref,op,add,parameter,parameter,if,verb,get,out,type,null,response,response,new,response,property,prop,model,type,as,property,verb,get,out,type,swagger,response,set,schema,prop,response,set,description,output,type,op,add,response,200,response,for,rest,operation,response,msg,definition,msg,verb,get,response,msgs,response,response,new,response,response,set,description,msg,get,message,op,add,response,msg,get,code,response,swagger,path,op,path,path,return,swagger
RestSwaggerReader -> public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver);1442585773;Read the REST-DSL definition and parse that as a Swagger model representation__@param rest              the rest-dsl_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()__        config.configure(swagger)___        List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs())__        _        Collections.sort(verbs, new VerbOrdering())___        _        Set<String> types = new LinkedHashSet<>()__        for (VerbDefinition verb : verbs) {_            String type = verb.getType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_            type = verb.getOutType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_        }__        _        for (String type : types) {_            Class<?> clazz = classResolver.resolveClass(type)__            appendModels(clazz, swagger)__        }__        _        List<Path> paths = new ArrayList<>()___        String basePath = rest.getPath()___        for (VerbDefinition verb : verbs) {__            _            String method = verb.asVerb().toLowerCase(Locale.US)__            _            String opPath = SwaggerHelper.buildUrl(basePath, verb.getUri())___            Operation op = new Operation()___            Path path = swagger.getPath(opPath)__            if (path == null) {_                path = new Path()__                paths.add(path)__            }_            path = path.set(method, op)___            String consumes = verb.getConsumes() != null ? verb.getConsumes() : rest.getConsumes()__            if (consumes != null) {_                String[] parts = consumes.split(",")__                for (String part : parts) {_                    op.addConsumes(part)__                }_            }__            String produces = verb.getProduces() != null ? verb.getProduces() : rest.getProduces()__            if (produces != null) {_                String[] parts = produces.split(",")__                for (String part : parts) {_                    op.addProduces(part)__                }_            }__            if (verb.getDescriptionText() != null) {_                op.summary(verb.getDescriptionText())__            }__            for (RestOperationParamDefinition param : verb.getParams()) {_                Parameter parameter = null__                if (param.getType().equals(RestParamType.body)) {_                    parameter = new BodyParameter()__                } else if (param.getType().equals(RestParamType.form)) {_                    parameter = new FormParameter()__                } else if (param.getType().equals(RestParamType.header)) {_                    parameter = new HeaderParameter()__                } else if (param.getType().equals(RestParamType.path)) {_                    parameter = new PathParameter()__                } else if (param.getType().equals(RestParamType.query)) {_                    parameter = new QueryParameter()__                }__                if (parameter != null) {_                    parameter.setName(param.getName())__                    parameter.setAccess(param.getAccess())__                    parameter.setDescription(param.getDescription())__                    parameter.setRequired(param.getRequired())___                    if (parameter instanceof SerializableParameter) {_                        SerializableParameter sp = (SerializableParameter) parameter___                        if (param.getDataType() != null) {_                            sp.setType(param.getDataType())__                        }_                    }__                    if (parameter instanceof BodyParameter) {_                        BodyParameter bp = (BodyParameter) parameter___                        if (verb.getType() != null) {_                            String ref = modelTypeAsRef(verb.getType(), swagger)__                            if (ref != null) {_                                bp.setSchema(new RefModel(ref))__                            }_                        }_                    }__                    op.addParameter(parameter)__                }_            }__            if (verb.getOutType() != null) {_                Response response = new Response()__                Property prop = modelTypeAsProperty(verb.getOutType(), swagger)__                response.setSchema(prop)__                response.setDescription("Output type")__                op.addResponse("200", response)__            }__            for (RestOperationResponseMsgDefinition msg : verb.getResponseMsgs()) {_                Response response = op.getResponses().get("" + msg.getCode())__                if (response == null) {_                    response = new Response()__                }_                response.setDescription(msg.getMessage())__                op.addResponse("" + msg.getCode(), response)__            }__            _            swagger.path(opPath, path)__        }__        return swagger__    };read,the,rest,dsl,definition,and,parse,that,as,a,swagger,model,representation,param,rest,the,rest,dsl,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,rest,definition,rest,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,config,configure,swagger,list,verb,definition,verbs,new,array,list,rest,get,verbs,collections,sort,verbs,new,verb,ordering,set,string,types,new,linked,hash,set,for,verb,definition,verb,verbs,string,type,verb,get,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,type,verb,get,out,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,for,string,type,types,class,clazz,class,resolver,resolve,class,type,append,models,clazz,swagger,list,path,paths,new,array,list,string,base,path,rest,get,path,for,verb,definition,verb,verbs,string,method,verb,as,verb,to,lower,case,locale,us,string,op,path,swagger,helper,build,url,base,path,verb,get,uri,operation,op,new,operation,path,path,swagger,get,path,op,path,if,path,null,path,new,path,paths,add,path,path,path,set,method,op,string,consumes,verb,get,consumes,null,verb,get,consumes,rest,get,consumes,if,consumes,null,string,parts,consumes,split,for,string,part,parts,op,add,consumes,part,string,produces,verb,get,produces,null,verb,get,produces,rest,get,produces,if,produces,null,string,parts,produces,split,for,string,part,parts,op,add,produces,part,if,verb,get,description,text,null,op,summary,verb,get,description,text,for,rest,operation,param,definition,param,verb,get,params,parameter,parameter,null,if,param,get,type,equals,rest,param,type,body,parameter,new,body,parameter,else,if,param,get,type,equals,rest,param,type,form,parameter,new,form,parameter,else,if,param,get,type,equals,rest,param,type,header,parameter,new,header,parameter,else,if,param,get,type,equals,rest,param,type,path,parameter,new,path,parameter,else,if,param,get,type,equals,rest,param,type,query,parameter,new,query,parameter,if,parameter,null,parameter,set,name,param,get,name,parameter,set,access,param,get,access,parameter,set,description,param,get,description,parameter,set,required,param,get,required,if,parameter,instanceof,serializable,parameter,serializable,parameter,sp,serializable,parameter,parameter,if,param,get,data,type,null,sp,set,type,param,get,data,type,if,parameter,instanceof,body,parameter,body,parameter,bp,body,parameter,parameter,if,verb,get,type,null,string,ref,model,type,as,ref,verb,get,type,swagger,if,ref,null,bp,set,schema,new,ref,model,ref,op,add,parameter,parameter,if,verb,get,out,type,null,response,response,new,response,property,prop,model,type,as,property,verb,get,out,type,swagger,response,set,schema,prop,response,set,description,output,type,op,add,response,200,response,for,rest,operation,response,msg,definition,msg,verb,get,response,msgs,response,response,op,get,responses,get,msg,get,code,if,response,null,response,new,response,response,set,description,msg,get,message,op,add,response,msg,get,code,response,swagger,path,op,path,path,return,swagger
RestSwaggerReader -> public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver);1442585773;Read the REST-DSL definition and parse that as a Swagger model representation__@param rest              the rest-dsl_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()__        config.configure(swagger)___        List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs())__        _        Collections.sort(verbs, new VerbOrdering())___        _        Set<String> types = new LinkedHashSet<>()__        for (VerbDefinition verb : verbs) {_            String type = verb.getType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_            type = verb.getOutType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_        }__        _        for (String type : types) {_            Class<?> clazz = classResolver.resolveClass(type)__            appendModels(clazz, swagger)__        }__        _        List<Path> paths = new ArrayList<>()___        String basePath = rest.getPath()___        for (VerbDefinition verb : verbs) {__            _            String method = verb.asVerb().toLowerCase(Locale.US)__            _            String opPath = SwaggerHelper.buildUrl(basePath, verb.getUri())___            Operation op = new Operation()___            Path path = swagger.getPath(opPath)__            if (path == null) {_                path = new Path()__                paths.add(path)__            }_            path = path.set(method, op)___            String consumes = verb.getConsumes() != null ? verb.getConsumes() : rest.getConsumes()__            if (consumes != null) {_                String[] parts = consumes.split(",")__                for (String part : parts) {_                    op.addConsumes(part)__                }_            }__            String produces = verb.getProduces() != null ? verb.getProduces() : rest.getProduces()__            if (produces != null) {_                String[] parts = produces.split(",")__                for (String part : parts) {_                    op.addProduces(part)__                }_            }__            if (verb.getDescriptionText() != null) {_                op.summary(verb.getDescriptionText())__            }__            for (RestOperationParamDefinition param : verb.getParams()) {_                Parameter parameter = null__                if (param.getType().equals(RestParamType.body)) {_                    parameter = new BodyParameter()__                } else if (param.getType().equals(RestParamType.form)) {_                    parameter = new FormParameter()__                } else if (param.getType().equals(RestParamType.header)) {_                    parameter = new HeaderParameter()__                } else if (param.getType().equals(RestParamType.path)) {_                    parameter = new PathParameter()__                } else if (param.getType().equals(RestParamType.query)) {_                    parameter = new QueryParameter()__                }__                if (parameter != null) {_                    parameter.setName(param.getName())__                    parameter.setAccess(param.getAccess())__                    parameter.setDescription(param.getDescription())__                    parameter.setRequired(param.getRequired())___                    _                    if (parameter instanceof SerializableParameter) {_                        SerializableParameter sp = (SerializableParameter) parameter___                        if (param.getDataType() != null) {_                            sp.setType(param.getDataType())__                        }_                    }__                    _                    if (parameter instanceof BodyParameter) {_                        BodyParameter bp = (BodyParameter) parameter___                        if (verb.getType() != null) {_                            String ref = modelTypeAsRef(verb.getType(), swagger)__                            if (ref != null) {_                                bp.setSchema(new RefModel(ref))__                            }_                        }_                    }__                    op.addParameter(parameter)__                }_            }__            _            if (verb.getOutType() != null) {_                Response response = new Response()__                Property prop = modelTypeAsProperty(verb.getOutType(), swagger)__                response.setSchema(prop)__                response.setDescription("Output type")__                op.addResponse("200", response)__            }__            _            for (RestOperationResponseMsgDefinition msg : verb.getResponseMsgs()) {_                Response response = null__                if (op.getResponses() != null) {_                    response = op.getResponses().get(msg.getCode())__                }_                if (response == null) {_                    response = new Response()__                }_                response.setDescription(msg.getMessage())__                op.addResponse(msg.getCode(), response)__            }__            _            swagger.path(opPath, path)__        }__        return swagger__    };read,the,rest,dsl,definition,and,parse,that,as,a,swagger,model,representation,param,rest,the,rest,dsl,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,rest,definition,rest,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,config,configure,swagger,list,verb,definition,verbs,new,array,list,rest,get,verbs,collections,sort,verbs,new,verb,ordering,set,string,types,new,linked,hash,set,for,verb,definition,verb,verbs,string,type,verb,get,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,type,verb,get,out,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,for,string,type,types,class,clazz,class,resolver,resolve,class,type,append,models,clazz,swagger,list,path,paths,new,array,list,string,base,path,rest,get,path,for,verb,definition,verb,verbs,string,method,verb,as,verb,to,lower,case,locale,us,string,op,path,swagger,helper,build,url,base,path,verb,get,uri,operation,op,new,operation,path,path,swagger,get,path,op,path,if,path,null,path,new,path,paths,add,path,path,path,set,method,op,string,consumes,verb,get,consumes,null,verb,get,consumes,rest,get,consumes,if,consumes,null,string,parts,consumes,split,for,string,part,parts,op,add,consumes,part,string,produces,verb,get,produces,null,verb,get,produces,rest,get,produces,if,produces,null,string,parts,produces,split,for,string,part,parts,op,add,produces,part,if,verb,get,description,text,null,op,summary,verb,get,description,text,for,rest,operation,param,definition,param,verb,get,params,parameter,parameter,null,if,param,get,type,equals,rest,param,type,body,parameter,new,body,parameter,else,if,param,get,type,equals,rest,param,type,form,parameter,new,form,parameter,else,if,param,get,type,equals,rest,param,type,header,parameter,new,header,parameter,else,if,param,get,type,equals,rest,param,type,path,parameter,new,path,parameter,else,if,param,get,type,equals,rest,param,type,query,parameter,new,query,parameter,if,parameter,null,parameter,set,name,param,get,name,parameter,set,access,param,get,access,parameter,set,description,param,get,description,parameter,set,required,param,get,required,if,parameter,instanceof,serializable,parameter,serializable,parameter,sp,serializable,parameter,parameter,if,param,get,data,type,null,sp,set,type,param,get,data,type,if,parameter,instanceof,body,parameter,body,parameter,bp,body,parameter,parameter,if,verb,get,type,null,string,ref,model,type,as,ref,verb,get,type,swagger,if,ref,null,bp,set,schema,new,ref,model,ref,op,add,parameter,parameter,if,verb,get,out,type,null,response,response,new,response,property,prop,model,type,as,property,verb,get,out,type,swagger,response,set,schema,prop,response,set,description,output,type,op,add,response,200,response,for,rest,operation,response,msg,definition,msg,verb,get,response,msgs,response,response,null,if,op,get,responses,null,response,op,get,responses,get,msg,get,code,if,response,null,response,new,response,response,set,description,msg,get,message,op,add,response,msg,get,code,response,swagger,path,op,path,path,return,swagger
RestSwaggerReader -> public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver);1442585774;Read the REST-DSL definition and parse that as a Swagger model representation__@param rest              the rest-dsl_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(RestDefinition rest, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs())__        _        Collections.sort(verbs, new VerbOrdering())___        _        Set<String> types = new LinkedHashSet<>()__        for (VerbDefinition verb : verbs) {_            String type = verb.getType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_            type = verb.getOutType()__            if (type != null) {_                if (type.endsWith("[]")) {_                    type = type.substring(0, type.length() - 2)__                }_                types.add(type)__            }_        }__        _        for (String type : types) {_            Class<?> clazz = classResolver.resolveClass(type)__            appendModels(clazz, swagger)__        }__        _        List<Path> paths = new ArrayList<>()___        String basePath = rest.getPath()___        for (VerbDefinition verb : verbs) {__            _            String method = verb.asVerb().toLowerCase(Locale.US)__            _            String opPath = SwaggerHelper.buildUrl(basePath, verb.getUri())___            Operation op = new Operation()___            Path path = swagger.getPath(opPath)__            if (path == null) {_                path = new Path()__                paths.add(path)__            }_            path = path.set(method, op)___            String consumes = verb.getConsumes() != null ? verb.getConsumes() : rest.getConsumes()__            if (consumes != null) {_                String[] parts = consumes.split(",")__                for (String part : parts) {_                    op.addConsumes(part)__                }_            }__            String produces = verb.getProduces() != null ? verb.getProduces() : rest.getProduces()__            if (produces != null) {_                String[] parts = produces.split(",")__                for (String part : parts) {_                    op.addProduces(part)__                }_            }__            if (verb.getDescriptionText() != null) {_                op.summary(verb.getDescriptionText())__            }__            for (RestOperationParamDefinition param : verb.getParams()) {_                Parameter parameter = null__                if (param.getType().equals(RestParamType.body)) {_                    parameter = new BodyParameter()__                } else if (param.getType().equals(RestParamType.form)) {_                    parameter = new FormParameter()__                } else if (param.getType().equals(RestParamType.header)) {_                    parameter = new HeaderParameter()__                } else if (param.getType().equals(RestParamType.path)) {_                    parameter = new PathParameter()__                } else if (param.getType().equals(RestParamType.query)) {_                    parameter = new QueryParameter()__                }__                if (parameter != null) {_                    parameter.setName(param.getName())__                    parameter.setAccess(param.getAccess())__                    parameter.setDescription(param.getDescription())__                    parameter.setRequired(param.getRequired())___                    _                    if (parameter instanceof SerializableParameter) {_                        SerializableParameter sp = (SerializableParameter) parameter___                        if (param.getDataType() != null) {_                            sp.setType(param.getDataType())__                        }_                    }__                    _                    if (parameter instanceof BodyParameter) {_                        BodyParameter bp = (BodyParameter) parameter___                        if (verb.getType() != null) {_                            String ref = modelTypeAsRef(verb.getType(), swagger)__                            if (ref != null) {_                                bp.setSchema(new RefModel(ref))__                            }_                        }_                    }__                    op.addParameter(parameter)__                }_            }__            _            if (verb.getOutType() != null) {_                Response response = new Response()__                Property prop = modelTypeAsProperty(verb.getOutType(), swagger)__                response.setSchema(prop)__                response.setDescription("Output type")__                op.addResponse("200", response)__            }__            _            for (RestOperationResponseMsgDefinition msg : verb.getResponseMsgs()) {_                Response response = null__                if (op.getResponses() != null) {_                    response = op.getResponses().get(msg.getCode())__                }_                if (response == null) {_                    response = new Response()__                }_                response.setDescription(msg.getMessage())__                op.addResponse(msg.getCode(), response)__            }__            _            swagger.path(opPath, path)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,and,parse,that,as,a,swagger,model,representation,param,rest,the,rest,dsl,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,rest,definition,rest,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,list,verb,definition,verbs,new,array,list,rest,get,verbs,collections,sort,verbs,new,verb,ordering,set,string,types,new,linked,hash,set,for,verb,definition,verb,verbs,string,type,verb,get,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,type,verb,get,out,type,if,type,null,if,type,ends,with,type,type,substring,0,type,length,2,types,add,type,for,string,type,types,class,clazz,class,resolver,resolve,class,type,append,models,clazz,swagger,list,path,paths,new,array,list,string,base,path,rest,get,path,for,verb,definition,verb,verbs,string,method,verb,as,verb,to,lower,case,locale,us,string,op,path,swagger,helper,build,url,base,path,verb,get,uri,operation,op,new,operation,path,path,swagger,get,path,op,path,if,path,null,path,new,path,paths,add,path,path,path,set,method,op,string,consumes,verb,get,consumes,null,verb,get,consumes,rest,get,consumes,if,consumes,null,string,parts,consumes,split,for,string,part,parts,op,add,consumes,part,string,produces,verb,get,produces,null,verb,get,produces,rest,get,produces,if,produces,null,string,parts,produces,split,for,string,part,parts,op,add,produces,part,if,verb,get,description,text,null,op,summary,verb,get,description,text,for,rest,operation,param,definition,param,verb,get,params,parameter,parameter,null,if,param,get,type,equals,rest,param,type,body,parameter,new,body,parameter,else,if,param,get,type,equals,rest,param,type,form,parameter,new,form,parameter,else,if,param,get,type,equals,rest,param,type,header,parameter,new,header,parameter,else,if,param,get,type,equals,rest,param,type,path,parameter,new,path,parameter,else,if,param,get,type,equals,rest,param,type,query,parameter,new,query,parameter,if,parameter,null,parameter,set,name,param,get,name,parameter,set,access,param,get,access,parameter,set,description,param,get,description,parameter,set,required,param,get,required,if,parameter,instanceof,serializable,parameter,serializable,parameter,sp,serializable,parameter,parameter,if,param,get,data,type,null,sp,set,type,param,get,data,type,if,parameter,instanceof,body,parameter,body,parameter,bp,body,parameter,parameter,if,verb,get,type,null,string,ref,model,type,as,ref,verb,get,type,swagger,if,ref,null,bp,set,schema,new,ref,model,ref,op,add,parameter,parameter,if,verb,get,out,type,null,response,response,new,response,property,prop,model,type,as,property,verb,get,out,type,swagger,response,set,schema,prop,response,set,description,output,type,op,add,response,200,response,for,rest,operation,response,msg,definition,msg,verb,get,response,msgs,response,response,null,if,op,get,responses,null,response,op,get,responses,get,msg,get,code,if,response,null,response,new,response,response,set,description,msg,get,message,op,add,response,msg,get,code,response,swagger,path,op,path,path,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, ClassResolver classResolver);1442585774;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, ClassResolver classResolver);1442585774;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, ClassResolver classResolver);1442585774;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1442994878;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1444888816;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1446220129;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1450949380;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1450950471;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1453798129;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1454084556;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1456386899;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1456392060;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1456401899;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1457095917;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1457981430;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1457981437;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1457983023;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1458575756;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1458576020;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1459581568;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1477121778;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1477121778;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1477122423;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1481729379;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1483692222;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1489778342;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1509177273;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1509178242;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1509560949;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1509700106;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1509712802;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1518352442;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1522928519;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1529310674;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1529310674;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
RestSwaggerReader -> public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver);1529310674;Read the REST-DSL definition's and parse that as a Swagger model representation__@param rests             the rest-dsl_@param route             optional route path to filter the rest-dsl to only include from the chose route_@param config            the swagger configuration_@param classResolver     class resolver to use_@return the swagger model;public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {_        Swagger swagger = new Swagger()___        for (RestDefinition rest : rests) {__            if (ObjectHelper.isNotEmpty(route) && !route.equals("/")) {_                _                if (!rest.getPath().equals(route)) {_                    continue__                }_            }__            parse(swagger, rest, camelContextId, classResolver)__        }__        _        swagger = config.configure(swagger)__        return swagger__    };read,the,rest,dsl,definition,s,and,parse,that,as,a,swagger,model,representation,param,rests,the,rest,dsl,param,route,optional,route,path,to,filter,the,rest,dsl,to,only,include,from,the,chose,route,param,config,the,swagger,configuration,param,class,resolver,class,resolver,to,use,return,the,swagger,model;public,swagger,read,list,rest,definition,rests,string,route,bean,config,config,string,camel,context,id,class,resolver,class,resolver,swagger,swagger,new,swagger,for,rest,definition,rest,rests,if,object,helper,is,not,empty,route,route,equals,if,rest,get,path,equals,route,continue,parse,swagger,rest,camel,context,id,class,resolver,swagger,config,configure,swagger,return,swagger
