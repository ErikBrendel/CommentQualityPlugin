commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;public <T> ParameterAssert hasArrayEnumSpecifiedWith(@SuppressWarnings("unchecked") final T... values) {     isSerializable().     final SerializableParameter serializableParameter = (SerializableParameter) actual.     final Property items = serializableParameter.getItems().     final List<T> arrayItems = fetchEnums(items).     Assertions.assertThat(arrayItems).containsOnly(values).     return this. }
false;public;1;10;;public ParameterAssert hasEnumSpecifiedWith(final String... values) {     isSerializable().     final SerializableParameter serializableParameter = (SerializableParameter) actual.     final List<String> actualEnum = serializableParameter.getEnum().     Assertions.assertThat(actualEnum).containsOnly(values).     return this. }
false;public;1;6;;public ParameterAssert hasName(final String name) {     final String actualName = actual.getName().     Assertions.assertThat(actualName).as("Parameter name should equal %s, but it's %s", name, actualName).     return this. }
false;public;1;7;;public ParameterAssert isGivenIn(final String in) {     final String actualIn = actual.getIn().     Assertions.assertThat(actualIn).as("Parameter should be specified in %s, but it's in %s", in, actualIn).isEqualTo(in).     return this. }
false;public;1;12;;public ParameterAssert isOfArrayType(final String type) {     isSerializable().     final SerializableParameter serializableParameter = (SerializableParameter) actual.     final Property items = serializableParameter.getItems().     Assertions.assertThat(items).isNotNull().     final String actualArrayType = items.getType().     Assertions.assertThat(actualArrayType).as("Parameter array should be of %s type, but it's of %s", type, actualArrayType).     return this. }
false;public;1;9;;public ParameterAssert isOfType(final String type) {     isSerializable().     final SerializableParameter serializableParameter = (SerializableParameter) actual.     final String actualType = serializableParameter.getType().     Assertions.assertThat(actualType).as("Parameter should be of %s type, but it's of %s", type, actualType).     return this. }
false;public;0;5;;public ParameterAssert isSerializable() {     isInstanceOf(SerializableParameter.class).     return this. }
false;public,static;1;3;;public static ParameterAssert assertThat(final Parameter actual) {     return new ParameterAssert(actual). }
false;private,static;1;7;;private static <T> List<T> fetchEnums(final Property items) {     try {         return (List<T>) publicLookup().bind(items, "getEnum", MethodType.methodType(List.class)).invoke().     } catch (final Throwable e) {         throw new AssertionError(e).     } }
