commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("dummy-rest", new DummyRestConsumerFactory()).     return jndi. }
false;public;0;17;;@Override public void configure() throws Exception {     // this user REST service is json only     rest("/day").tag("dude").description("Day service").consumes("application/json").produces("application/json").get("/week").description("Day of week").param().name("day").type(RestParamType.query).description("Day of week").defaultValue("friday").dataType("string").allowableValues("monday", "tuesday", "wednesday", "thursday", "friday").endParam().responseMessage().code(200).responseModel(DayResponse.class).header("X-Rate-Limit-Limit").description("The number of allowed requests in the current period").dataType("integer").endHeader().endResponseMessage().to("log:week"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // this user REST service is json only             rest("/day").tag("dude").description("Day service").consumes("application/json").produces("application/json").get("/week").description("Day of week").param().name("day").type(RestParamType.query).description("Day of week").defaultValue("friday").dataType("string").allowableValues("monday", "tuesday", "wednesday", "thursday", "friday").endParam().responseMessage().code(200).responseModel(DayResponse.class).header("X-Rate-Limit-Limit").description("The number of allowed requests in the current period").dataType("integer").endHeader().endResponseMessage().to("log:week").         }     }. }
false;public;0;31;;@Test public void testReaderRead() throws Exception {     BeanConfig config = new BeanConfig().     config.setHost("localhost:8080").     config.setSchemes(new String[] { "http" }).     config.setBasePath("/api").     config.setTitle("Day").     config.setLicense("Apache 2.0").     config.setLicenseUrl("http://www.apache.org/licenses/LICENSE-2.0.html").     RestSwaggerReader reader = new RestSwaggerReader().     Swagger swagger = reader.read(context.getRestDefinitions(), null, config, context.getName(), new DefaultClassResolver()).     assertNotNull(swagger).     ObjectMapper mapper = new ObjectMapper().     mapper.enable(SerializationFeature.INDENT_OUTPUT).     mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL).     String json = mapper.writeValueAsString(swagger).     log.info(json).     assertTrue(json.contains("\"host\" : \"localhost:8080\"")).     assertTrue(json.contains("\"default\" : \"friday\"")).     assertTrue(json.contains("\"enum\" : [ \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\" ]")).     assertTrue(json.contains("\"$ref\" : \"#/definitions/DayResponse\"")).     assertTrue(json.contains("\"format\" : \"org.apache.camel.swagger.DayResponse\"")).     assertTrue(json.contains("\"X-Rate-Limit-Limit\" : {")).     assertTrue(json.contains("\"description\" : \"The number of allowed requests in the current period\"")).     context.stop(). }
