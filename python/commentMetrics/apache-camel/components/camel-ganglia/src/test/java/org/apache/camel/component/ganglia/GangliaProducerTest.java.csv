commented;modifiers;parameterAmount;loc;comment;code
false;public;0;37;;@Before public void setup() {     when(mockEndpoint.getConfiguration()).thenReturn(mockConf).     when(mockConf.getPrefix()).thenReturn(null).     when(mockConf.getGroupName()).thenReturn(CONF_GROUP_NAME).     when(mockConf.getMetricName()).thenReturn(CONF_METRIC_NAME).     when(mockConf.getType()).thenReturn(CONF_TYPE).     when(mockConf.getSlope()).thenReturn(CONF_SLOPE).     when(mockConf.getUnits()).thenReturn(CONF_UNITS).     when(mockConf.getTmax()).thenReturn(CONF_T_MAX).     when(mockConf.getDmax()).thenReturn(CONF_D_MAX).     when(mockExchange.getIn()).thenReturn(mockMessage).     mockHeaders = new HashMap<>().     mockHeaders.put(GangliaConstants.GROUP_NAME, GROUP_NAME).     mockHeaders.put(GangliaConstants.METRIC_NAME, METRIC_NAME).     mockHeaders.put(GangliaConstants.METRIC_TYPE, TYPE).     mockHeaders.put(GangliaConstants.METRIC_SLOPE, SLOPE).     mockHeaders.put(GangliaConstants.METRIC_UNITS, UNITS).     mockHeaders.put(GangliaConstants.METRIC_TMAX, T_MAX).     mockHeaders.put(GangliaConstants.METRIC_DMAX, D_MAX).     when(mockMessage.getBody(String.class)).thenReturn(BODY).     when(mockMessage.getHeaders()).thenReturn(mockHeaders).     when(mockMessage.getHeader(GangliaConstants.GROUP_NAME, String.class)).thenReturn(GROUP_NAME).     when(mockMessage.getHeader(GangliaConstants.METRIC_NAME, String.class)).thenReturn(METRIC_NAME).     when(mockMessage.getHeader(GangliaConstants.METRIC_TYPE, GMetricType.class)).thenReturn(TYPE).     when(mockMessage.getHeader(GangliaConstants.METRIC_SLOPE, GMetricSlope.class)).thenReturn(SLOPE).     when(mockMessage.getHeader(GangliaConstants.METRIC_UNITS, String.class)).thenReturn(UNITS).     when(mockMessage.getHeader(GangliaConstants.METRIC_TMAX, Integer.class)).thenReturn(T_MAX).     when(mockMessage.getHeader(GangliaConstants.METRIC_DMAX, Integer.class)).thenReturn(D_MAX).     gangliaProducer = new GangliaProducer(mockEndpoint, mockPublisher). }
false;public;0;5;;@Test public void processMessageHeadersShouldSucceed() throws Exception {     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, METRIC_NAME, BODY, TYPE, SLOPE, T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processEmptyDoubleShouldPublishNan() throws Exception {     when(mockMessage.getBody(String.class)).thenReturn("").     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, METRIC_NAME, "NaN", TYPE, SLOPE, T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processWithPrefixShouldPublishPrefix() throws Exception {     when(mockConf.getPrefix()).thenReturn(PREFIX).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, PREFIX + "_" + METRIC_NAME, BODY, TYPE, SLOPE, T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processMessageWithoutGroupNameShouldPublishEndpointLevelConfiguration() throws Exception {     mockHeaders.remove(GangliaConstants.GROUP_NAME).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(CONF_GROUP_NAME, METRIC_NAME, BODY, TYPE, SLOPE, T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processMessageWithoutMetricNameShouldPublishEndpointLevelConfiguration() throws Exception {     mockHeaders.remove(GangliaConstants.METRIC_NAME).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, CONF_METRIC_NAME, BODY, TYPE, SLOPE, T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processMessageWithoutMetricTypeShouldPublishEndpointLevelConfiguration() throws Exception {     mockHeaders.remove(GangliaConstants.METRIC_TYPE).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, METRIC_NAME, BODY, CONF_TYPE, SLOPE, T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processMessageWithoutMetricSlopeShouldPublishEndpointLevelConfiguration() throws Exception {     mockHeaders.remove(GangliaConstants.METRIC_SLOPE).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, METRIC_NAME, BODY, TYPE, CONF_SLOPE, T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processMessageWithoutMetricUnitsShouldPublishEndpointLevelConfiguration() throws Exception {     mockHeaders.remove(GangliaConstants.METRIC_UNITS).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, METRIC_NAME, BODY, TYPE, SLOPE, T_MAX, D_MAX, CONF_UNITS). }
false;public;0;6;;@Test public void processMessageWithoutMetricTMaxShouldPublishEndpointLevelConfiguration() throws Exception {     mockHeaders.remove(GangliaConstants.METRIC_TMAX).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, METRIC_NAME, BODY, TYPE, SLOPE, CONF_T_MAX, D_MAX, UNITS). }
false;public;0;6;;@Test public void processMessageWithoutMetricDMaxShouldPublishEndpointLevelConfiguration() throws Exception {     mockHeaders.remove(GangliaConstants.METRIC_DMAX).     gangliaProducer.process(mockExchange).     verify(mockPublisher).publish(GROUP_NAME, METRIC_NAME, BODY, TYPE, SLOPE, T_MAX, CONF_D_MAX, UNITS). }
