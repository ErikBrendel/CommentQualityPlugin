commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getTestUri() {     return "ganglia:localhost:" + getTestPort() + "?mode=UNICAST&wireFormat31x=false". }
false;public;1;12;;@Override public void process(Exchange exchange) throws Exception {     Ganglia_message gangliaMessage = exchange.getIn().getBody(Ganglia_message.class).     assertNotNull("The gmond mock should only receive a non-null ganglia message", gangliaMessage).     assertEquals(DEFAULT_METRIC_NAME, gangliaMessage.gmetric.name).     assertEquals(DEFAULT_TYPE.getGangliaType(), gangliaMessage.gmetric.type).     assertEquals(DEFAULT_SLOPE.getGangliaSlope(), gangliaMessage.gmetric.slope).     assertEquals(DEFAULT_UNITS, gangliaMessage.gmetric.units).     assertEquals(DEFAULT_TMAX, gangliaMessage.gmetric.tmax).     assertEquals(DEFAULT_DMAX, gangliaMessage.gmetric.dmax).     assertEquals("28.0", gangliaMessage.gmetric.value). }
false;public;0;24;;@Test public void sendDefaultConfigurationShouldSucceed() throws Exception {     mockGmond.setMinimumExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     mockGmond.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Ganglia_message gangliaMessage = exchange.getIn().getBody(Ganglia_message.class).             assertNotNull("The gmond mock should only receive a non-null ganglia message", gangliaMessage).             assertEquals(DEFAULT_METRIC_NAME, gangliaMessage.gmetric.name).             assertEquals(DEFAULT_TYPE.getGangliaType(), gangliaMessage.gmetric.type).             assertEquals(DEFAULT_SLOPE.getGangliaSlope(), gangliaMessage.gmetric.slope).             assertEquals(DEFAULT_UNITS, gangliaMessage.gmetric.units).             assertEquals(DEFAULT_TMAX, gangliaMessage.gmetric.tmax).             assertEquals(DEFAULT_DMAX, gangliaMessage.gmetric.dmax).             assertEquals("28.0", gangliaMessage.gmetric.value).         }     }).     template.sendBody(getTestUri(), "28.0").     mockGmond.assertIsSatisfied(). }
false;public;1;12;;@Override public void process(Exchange exchange) throws Exception {     Ganglia_message gangliaMessage = exchange.getIn().getBody(Ganglia_message.class).     assertNotNull("The gmond mock should only receive a non-null ganglia message", gangliaMessage).     assertEquals("depth", gangliaMessage.gmetric.name).     assertEquals("float", gangliaMessage.gmetric.type).     assertEquals(2, gangliaMessage.gmetric.slope).     assertEquals("cm", gangliaMessage.gmetric.units).     assertEquals(100, gangliaMessage.gmetric.tmax).     assertEquals(10, gangliaMessage.gmetric.dmax).     assertEquals("-3.0", gangliaMessage.gmetric.value). }
false;public;0;32;;@Test public void sendMessageHeadersShouldOverrideDefaultConfiguration() throws Exception {     mockGmond.setMinimumExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     mockGmond.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Ganglia_message gangliaMessage = exchange.getIn().getBody(Ganglia_message.class).             assertNotNull("The gmond mock should only receive a non-null ganglia message", gangliaMessage).             assertEquals("depth", gangliaMessage.gmetric.name).             assertEquals("float", gangliaMessage.gmetric.type).             assertEquals(2, gangliaMessage.gmetric.slope).             assertEquals("cm", gangliaMessage.gmetric.units).             assertEquals(100, gangliaMessage.gmetric.tmax).             assertEquals(10, gangliaMessage.gmetric.dmax).             assertEquals("-3.0", gangliaMessage.gmetric.value).         }     }).     Map<String, Object> headers = new HashMap<>().     headers.put(GROUP_NAME, "sea-mesure").     headers.put(METRIC_NAME, "depth").     headers.put(METRIC_TYPE, FLOAT).     headers.put(METRIC_SLOPE, NEGATIVE).     headers.put(METRIC_UNITS, "cm").     headers.put(METRIC_TMAX, 100).     headers.put(METRIC_DMAX, 10).     template.sendBodyAndHeaders(getTestUri(), -3.0f, headers).     mockGmond.assertIsSatisfied(). }
false;public;0;6;;@Override public JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("protocolV30Decoder", new ProtocolV30Decoder()).     return jndi. }
false;public;0;3;;public void configure() {     from("netty4:udp://localhost:" + getTestPort() + "/?decoders=#protocolV30Decoder").to(mockGmond). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("netty4:udp://localhost:" + getTestPort() + "/?decoders=#protocolV30Decoder").to(mockGmond).         }     }. }
false;protected;3;13;;@Override protected void decode(ChannelHandlerContext ctx, DatagramPacket packet, List<Object> out) throws OncRpcException, IOException {     byte[] bytes = new byte[packet.content().readableBytes()].     packet.content().readBytes(bytes).     // Unmarshall the incoming datagram     XdrBufferDecodingStream xbds = new XdrBufferDecodingStream(bytes).     Ganglia_message outMsg = new Ganglia_message().     xbds.beginDecoding().     outMsg.xdrDecode(xbds).     xbds.endDecoding().     out.add(outMsg). }
