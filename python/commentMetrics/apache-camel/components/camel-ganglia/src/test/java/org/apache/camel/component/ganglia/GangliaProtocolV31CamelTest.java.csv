commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getTestUri() {     return "ganglia:localhost:" + getTestPort() + "?mode=UNICAST". }
false;public;1;20;;@Override public void process(Exchange exchange) throws Exception {     Ganglia_metadata_msg metadataMessage = exchange.getIn().getBody(Ganglia_metadata_msg.class).     if (metadataMessage != null) {         assertEquals(DEFAULT_METRIC_NAME, metadataMessage.gfull.metric.name).         assertEquals(DEFAULT_TYPE.getGangliaType(), metadataMessage.gfull.metric.type).         assertEquals(DEFAULT_SLOPE.getGangliaSlope(), metadataMessage.gfull.metric.slope).         assertEquals(DEFAULT_UNITS, metadataMessage.gfull.metric.units).         assertEquals(DEFAULT_TMAX, metadataMessage.gfull.metric.tmax).         assertEquals(DEFAULT_DMAX, metadataMessage.gfull.metric.dmax).     } else {         Ganglia_value_msg valueMessage = exchange.getIn().getBody(Ganglia_value_msg.class).         if (valueMessage != null) {             assertEquals("28.0", valueMessage.gstr.str).             assertEquals("%s", valueMessage.gstr.fmt).         } else {             fail("The gmond mock should only receive non-null metadata or value messages").         }     } }
false;public;0;32;;@Test public void sendDefaultConfigurationShouldSucceed() throws Exception {     mockGmond.setMinimumExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     mockGmond.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Ganglia_metadata_msg metadataMessage = exchange.getIn().getBody(Ganglia_metadata_msg.class).             if (metadataMessage != null) {                 assertEquals(DEFAULT_METRIC_NAME, metadataMessage.gfull.metric.name).                 assertEquals(DEFAULT_TYPE.getGangliaType(), metadataMessage.gfull.metric.type).                 assertEquals(DEFAULT_SLOPE.getGangliaSlope(), metadataMessage.gfull.metric.slope).                 assertEquals(DEFAULT_UNITS, metadataMessage.gfull.metric.units).                 assertEquals(DEFAULT_TMAX, metadataMessage.gfull.metric.tmax).                 assertEquals(DEFAULT_DMAX, metadataMessage.gfull.metric.dmax).             } else {                 Ganglia_value_msg valueMessage = exchange.getIn().getBody(Ganglia_value_msg.class).                 if (valueMessage != null) {                     assertEquals("28.0", valueMessage.gstr.str).                     assertEquals("%s", valueMessage.gstr.fmt).                 } else {                     fail("The gmond mock should only receive non-null metadata or value messages").                 }             }         }     }).     template.sendBody(getTestUri(), "28.0").     mockGmond.assertIsSatisfied(). }
false;public;1;20;;@Override public void process(Exchange exchange) throws Exception {     Ganglia_metadata_msg metadataMessage = exchange.getIn().getBody(Ganglia_metadata_msg.class).     if (metadataMessage != null) {         assertEquals("depth", metadataMessage.gfull.metric.name).         assertEquals(FLOAT.getGangliaType(), metadataMessage.gfull.metric.type).         assertEquals(NEGATIVE.getGangliaSlope(), metadataMessage.gfull.metric.slope).         assertEquals("cm", metadataMessage.gfull.metric.units).         assertEquals(100, metadataMessage.gfull.metric.tmax).         assertEquals(10, metadataMessage.gfull.metric.dmax).     } else {         Ganglia_value_msg valueMessage = exchange.getIn().getBody(Ganglia_value_msg.class).         if (valueMessage != null) {             assertEquals("-3.0", valueMessage.gstr.str).             assertEquals("%s", valueMessage.gstr.fmt).         } else {             fail("The gmond mock should only receive non-null metadata or value messages").         }     } }
false;public;0;40;;@Test public void sendMessageHeadersShouldOverrideDefaultConfiguration() throws Exception {     mockGmond.setMinimumExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     mockGmond.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Ganglia_metadata_msg metadataMessage = exchange.getIn().getBody(Ganglia_metadata_msg.class).             if (metadataMessage != null) {                 assertEquals("depth", metadataMessage.gfull.metric.name).                 assertEquals(FLOAT.getGangliaType(), metadataMessage.gfull.metric.type).                 assertEquals(NEGATIVE.getGangliaSlope(), metadataMessage.gfull.metric.slope).                 assertEquals("cm", metadataMessage.gfull.metric.units).                 assertEquals(100, metadataMessage.gfull.metric.tmax).                 assertEquals(10, metadataMessage.gfull.metric.dmax).             } else {                 Ganglia_value_msg valueMessage = exchange.getIn().getBody(Ganglia_value_msg.class).                 if (valueMessage != null) {                     assertEquals("-3.0", valueMessage.gstr.str).                     assertEquals("%s", valueMessage.gstr.fmt).                 } else {                     fail("The gmond mock should only receive non-null metadata or value messages").                 }             }         }     }).     Map<String, Object> headers = new HashMap<>().     headers.put(GROUP_NAME, "sea-mesure").     headers.put(METRIC_NAME, "depth").     headers.put(METRIC_TYPE, FLOAT).     headers.put(METRIC_SLOPE, NEGATIVE).     headers.put(METRIC_UNITS, "cm").     headers.put(METRIC_TMAX, 100).     headers.put(METRIC_DMAX, 10).     template.sendBodyAndHeaders(getTestUri(), -3.0f, headers).     mockGmond.assertIsSatisfied(). }
false;public;0;10;;@Test public void sendWrongMetricTypeShouldThrow() throws Exception {     thrown.expect(CamelExecutionException.class).     mockGmond.setExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     template.sendBodyAndHeader(getTestUri(), "28.0", METRIC_TYPE, "NotAGMetricType").     mockGmond.assertIsSatisfied(). }
false;public;0;10;;@Test public void sendWrongMetricSlopeShouldThrow() throws Exception {     thrown.expect(CamelExecutionException.class).     mockGmond.setExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     template.sendBodyAndHeader(getTestUri(), "28.0", METRIC_SLOPE, "NotAGMetricSlope").     mockGmond.assertIsSatisfied(). }
false;public;0;10;;@Test public void sendWrongMetricTMaxShouldThrow() throws Exception {     thrown.expect(CamelExecutionException.class).     mockGmond.setExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     template.sendBodyAndHeader(getTestUri(), "28.0", METRIC_TMAX, new Object()).     mockGmond.assertIsSatisfied(). }
false;public;0;10;;@Test public void sendWrongMetricDMaxShouldThrow() throws Exception {     thrown.expect(CamelExecutionException.class).     mockGmond.setExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     template.sendBodyAndHeader(getTestUri(), "28.0", METRIC_DMAX, new Object()).     mockGmond.assertIsSatisfied(). }
false;public;0;10;;@Test public void sendWithWrongTypeShouldThrow() throws Exception {     thrown.expect(ResolveEndpointFailedException.class).     mockGmond.setExpectedMessageCount(0).     mockGmond.setAssertPeriod(100L).     template.sendBody(getTestUri() + "&type=wrong", "").     mockGmond.assertIsSatisfied(). }
false;public;0;6;;@Override public JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("protocolV31Decoder", new ProtocolV31Decoder()).     return jndi. }
false;public;0;3;;public void configure() {     from("netty4:udp://localhost:" + getTestPort() + "/?decoders=#protocolV31Decoder").to(mockGmond). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("netty4:udp://localhost:" + getTestPort() + "/?decoders=#protocolV31Decoder").to(mockGmond).         }     }. }
false;protected;3;26;;@Override protected void decode(ChannelHandlerContext ctx, DatagramPacket packet, List<Object> out) throws OncRpcException, IOException {     byte[] bytes = new byte[packet.content().readableBytes()].     packet.content().readBytes(bytes).     // Determine what kind of object the datagram is handling     XdrBufferDecodingStream xbds = new XdrBufferDecodingStream(bytes).     xbds.beginDecoding().     int id = xbds.xdrDecodeInt() & 0xbf.     xbds.endDecoding().     XdrAble outMsg = null.     if (id == gmetadata_full) {         outMsg = new Ganglia_metadata_msg().     } else if (id == gmetric_string) {         outMsg = new Ganglia_value_msg().     } else {         fail("During those tests, the gmond mock should only receive metadata or string messages").     }     // Unmarshall the incoming datagram     xbds = new XdrBufferDecodingStream(bytes).     xbds.beginDecoding().     outMsg.xdrDecode(xbds).     xbds.endDecoding().     out.add(outMsg). }
