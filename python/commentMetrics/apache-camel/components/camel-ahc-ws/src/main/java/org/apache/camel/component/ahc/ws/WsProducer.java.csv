commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public WsEndpoint getEndpoint() {     return (WsEndpoint) super.getEndpoint(). }
false;public;1;18;;@Override public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     Object message = in.getBody().     if (message != null) {         log.debug("Sending out {}", message).         if (message instanceof String) {             sendMessage(getWebSocket(), (String) message, getEndpoint().isUseStreaming()).         } else if (message instanceof byte[]) {             sendMessage(getWebSocket(), (byte[]) message, getEndpoint().isUseStreaming()).         } else if (message instanceof InputStream) {             sendStreamMessage(getWebSocket(), (InputStream) message).         } else {             // TODO provide other binding option, for now use the converted string             getWebSocket().sendTextFrame(in.getMandatoryBody(String.class)).         }     } }
false;private;3;16;;private void sendMessage(WebSocket webSocket, String msg, boolean streaming) {     if (streaming) {         int p = 0.         while (p < msg.length()) {             if (msg.length() - p < streamBufferSize) {                 webSocket.sendTextFrame(msg.substring(p), true, 0).                 p = msg.length().             } else {                 webSocket.sendTextFrame(msg.substring(p, streamBufferSize), false, 0).                 p += streamBufferSize.             }         }     } else {         webSocket.sendTextFrame(msg).     } }
false;private;3;28;;private void sendMessage(WebSocket webSocket, byte[] msg, boolean streaming) {     if (streaming) {         int p = 0.         byte[] writebuf = new byte[streamBufferSize].         while (p < msg.length) {             if (msg.length - p < streamBufferSize) {                 int rest = msg.length - p.                 // bug in grizzly? we need to create a byte array with the exact length                 // webSocket.stream(msg, p, rest, true).                 System.arraycopy(msg, p, writebuf, 0, rest).                 byte[] tmpbuf = new byte[rest].                 System.arraycopy(writebuf, 0, tmpbuf, 0, rest).                 webSocket.sendBinaryFrame(tmpbuf, true, 0).                 // ends                 p = msg.length.             } else {                 // bug in grizzly? we need to create a byte array with the exact length                 // webSocket.stream(msg, p, streamBufferSize, false).                 System.arraycopy(msg, p, writebuf, 0, streamBufferSize).                 webSocket.sendBinaryFrame(writebuf, false, 0).                 // ends                 p += streamBufferSize.             }         }     } else {         webSocket.sendBinaryFrame(msg).     } }
false;private;2;24;;private void sendStreamMessage(WebSocket webSocket, InputStream in) throws IOException {     byte[] readbuf = new byte[streamBufferSize].     byte[] writebuf = new byte[streamBufferSize].     int rn = 0.     int wn = 0.     try {         while ((rn = in.read(readbuf, 0, readbuf.length)) != -1) {             if (wn > 0) {                 webSocket.sendBinaryFrame(writebuf, false, 0).             }             System.arraycopy(readbuf, 0, writebuf, 0, rn).             wn = rn.         }         // a bug in grizzly? we need to create a byte array with the exact length         if (wn < writebuf.length) {             byte[] tmpbuf = writebuf.             writebuf = new byte[wn].             System.arraycopy(tmpbuf, 0, writebuf, 0, wn).         }         // ends         webSocket.sendBinaryFrame(writebuf, true, 0).     } finally {         in.close().     } }
false;private;0;3;;private WebSocket getWebSocket() throws Exception {     return getEndpoint().getWebSocket(). }
