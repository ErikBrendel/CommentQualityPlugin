commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public WsComponent getComponent() {     return (WsComponent) super.getComponent(). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new WsProducer(this). }
false;public;1;6;;@Override public Consumer createConsumer(Processor processor) throws Exception {     WsConsumer consumer = new WsConsumer(this, processor).     configureConsumer(consumer).     return consumer. }
false;;0;7;;WebSocket getWebSocket() throws Exception {     synchronized (this) {         // ensure we are connected         reConnect().     }     return websocket. }
false;;1;3;;void setWebSocket(WebSocket websocket) {     this.websocket = websocket. }
false;public;0;3;;public boolean isUseStreaming() {     return useStreaming. }
true;public;1;3;/**  * To enable streaming to send data as multiple text fragments.  */ ;/**  * To enable streaming to send data as multiple text fragments.  */ public void setUseStreaming(boolean useStreaming) {     this.useStreaming = useStreaming. }
false;public;0;3;;public boolean isSendMessageOnError() {     return sendMessageOnError. }
true;public;1;3;/**  * Whether to send an message if the web-socket listener received an error.  */ ;/**  * Whether to send an message if the web-socket listener received an error.  */ public void setSendMessageOnError(boolean sendMessageOnError) {     this.sendMessageOnError = sendMessageOnError. }
false;protected;1;11;;@Override protected AsyncHttpClient createClient(AsyncHttpClientConfig config) {     AsyncHttpClient client.     if (config == null) {         config = new DefaultAsyncHttpClientConfig.Builder().build().         client = new DefaultAsyncHttpClient(config).     } else {         client = new DefaultAsyncHttpClient(config).     }     return client. }
false;public;0;8;;public void connect() throws Exception {     String uri = getHttpUri().toASCIIString().     log.debug("Connecting to {}", uri).     websocket = getClient().prepareGet(uri).execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(listener).build()).get(). }
false;protected;0;12;;@Override protected void doStop() throws Exception {     if (websocket != null && websocket.isOpen()) {         if (log.isDebugEnabled()) {             log.debug("Disconnecting from {}", getHttpUri().toASCIIString()).         }         websocket.removeWebSocketListener(listener).         websocket.sendCloseFrame().         websocket = null.     }     super.doStop(). }
false;;1;4;;void connect(WsConsumer wsConsumer) throws Exception {     consumers.add(wsConsumer).     reConnect(). }
false;;1;3;;void disconnect(WsConsumer wsConsumer) {     consumers.remove(wsConsumer). }
false;;0;7;;void reConnect() throws Exception {     if (websocket == null || !websocket.isOpen()) {         String uri = getHttpUri().toASCIIString().         log.info("Reconnecting websocket: {}", uri).         connect().     } }
false;public;1;4;;@Override public void onOpen(WebSocket websocket) {     log.debug("Websocket opened"). }
false;public;3;13;;@Override public void onClose(WebSocket websocket, int code, String reason) {     log.debug("websocket closed - reconnecting").     try {         reConnect().     } catch (Exception e) {         log.warn("Error re-connecting to websocket", e).         ExceptionHandler exceptionHandler = getExceptionHandler().         if (exceptionHandler != null) {             exceptionHandler.handleException("Error re-connecting to websocket", e).         }     } }
false;public;1;9;;@Override public void onError(Throwable t) {     log.debug("websocket on error", t).     if (isSendMessageOnError()) {         for (WsConsumer consumer : consumers) {             consumer.sendMessage(t).         }     } }
false;public;3;7;;@Override public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {     log.debug("Received message --> {}", message).     for (WsConsumer consumer : consumers) {         consumer.sendMessage(message).     } }
false;public;3;7;;@Override public void onTextFrame(String message, boolean finalFragment, int rsv) {     log.debug("Received message --> {}", message).     for (WsConsumer consumer : consumers) {         consumer.sendMessage(message).     } }
false;public;1;4;;public void onPingFrame(byte[] payload) {     log.debug("Received ping --> {}", payload).     websocket.sendPongFrame(payload). }
