commented;modifiers;parameterAmount;loc;comment;code
false;protected;5;16;;protected void checkImage(MockEndpoint mock, int height, int width, String type, BarcodeFormat format) throws IOException {     Exchange ex = mock.getReceivedExchanges().get(0).     File in = ex.getIn().getBody(File.class).     FileInputStream fis = new FileInputStream(in).     // check image     BufferedImage i = ImageIO.read(fis).     IOHelper.close(fis).     assertTrue(height >= i.getHeight()).     assertTrue(width >= i.getWidth()).     this.checkType(in, type).     this.checkFormat(in, format).     FileUtil.deleteFile(in). }
false;protected;3;8;;protected void checkImage(MockEndpoint mock, String type, BarcodeFormat format) throws IOException {     Exchange ex = mock.getReceivedExchanges().get(0).     File in = ex.getIn().getBody(File.class).     this.checkType(in, type).     this.checkFormat(in, format).     FileUtil.deleteFile(in). }
false;private;2;12;;private void checkFormat(File file, BarcodeFormat format) throws IOException {     Reader reader = new MultiFormatReader().     BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(ImageIO.read(file)))).     Result result.     try {         result = reader.decode(bitmap).     } catch (ReaderException ex) {         throw new IOException(ex).     }     assertEquals(format, result.getBarcodeFormat()). }
false;private;2;8;;private void checkType(File file, String type) throws IOException {     ImageInputStream iis = ImageIO.createImageInputStream(file).     ImageReader reader = ImageIO.getImageReaders(iis).next().     IOHelper.close(iis).     String format = reader.getFormatName().     assertEquals(type, format.toUpperCase()). }
