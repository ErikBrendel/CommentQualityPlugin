commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;5;/**  * Test default constructor.  */ ;/**  * Test default constructor.  */ @Test public final void testDefaultConstructor() {     BarcodeDataFormat barcodeDataFormat = new BarcodeDataFormat().     this.checkParams(BarcodeParameters.IMAGE_TYPE, BarcodeParameters.WIDTH, BarcodeParameters.HEIGHT, BarcodeParameters.FORMAT, barcodeDataFormat.getParams()). }
true;public,final;0;6;/**  * Test constructor with barcode format.  */ ;/**  * Test constructor with barcode format.  */ @Test public final void testConstructorWithBarcodeFormat() {     BarcodeDataFormat barcodeDataFormat = new BarcodeDataFormat(BarcodeFormat.AZTEC).     this.checkParams(BarcodeParameters.IMAGE_TYPE, BarcodeParameters.WIDTH, BarcodeParameters.HEIGHT, BarcodeFormat.AZTEC, barcodeDataFormat.getParams()). }
true;public,final;0;6;/**  * Test constructor with size.  */ ;/**  * Test constructor with size.  */ @Test public final void testConstructorWithSize() {     BarcodeDataFormat barcodeDataFormat = new BarcodeDataFormat(200, 250).     this.checkParams(BarcodeParameters.IMAGE_TYPE, 200, 250, BarcodeParameters.FORMAT, barcodeDataFormat.getParams()). }
true;public,final;0;6;/**  * Test constructor with image type.  */ ;/**  * Test constructor with image type.  */ @Test public final void testConstructorWithImageType() {     BarcodeDataFormat barcodeDataFormat = new BarcodeDataFormat(BarcodeImageType.JPG).     this.checkParams(BarcodeImageType.JPG, BarcodeParameters.WIDTH, BarcodeParameters.HEIGHT, BarcodeParameters.FORMAT, barcodeDataFormat.getParams()). }
true;public,final;0;6;/**  * Test constructor with all.  */ ;/**  * Test constructor with all.  */ @Test public final void testConstructorWithAll() {     BarcodeDataFormat barcodeDataFormat = new BarcodeDataFormat(200, 250, BarcodeImageType.JPG, BarcodeFormat.AZTEC).     this.checkParams(BarcodeImageType.JPG, 200, 250, BarcodeFormat.AZTEC, barcodeDataFormat.getParams()). }
true;public,final;0;8;/**  * Test of optimizeHints method, of class BarcodeDataFormat.  */ ;/**  * Test of optimizeHints method, of class BarcodeDataFormat.  */ @Test public final void testOptimizeHints() {     BarcodeDataFormat instance = new BarcodeDataFormat().     assertTrue(instance.getWriterHintMap().containsKey(EncodeHintType.ERROR_CORRECTION)).     assertTrue(instance.getReaderHintMap().containsKey(DecodeHintType.TRY_HARDER)). }
true;public,final;0;10;/**  * Test optimized hints for data matrix.  */ ;/**  * Test optimized hints for data matrix.  */ @Test public final void testOptimizieHintsForDataMatrix() {     BarcodeDataFormat instance = new BarcodeDataFormat(BarcodeFormat.DATA_MATRIX).     assertTrue("data matrix shape hint incorrect.", instance.getWriterHintMap().containsKey(EncodeHintType.DATA_MATRIX_SHAPE)).     assertTrue("try harder hint incorrect.", instance.getReaderHintMap().containsKey(DecodeHintType.TRY_HARDER)). }
true;public,final;0;16;/**  * Test re-optimize hints.  */ ;/**  * Test re-optimize hints.  */ @Test public final void testReOptimizeHints() {     // DATA-MATRIX     BarcodeDataFormat instance = new BarcodeDataFormat(BarcodeFormat.DATA_MATRIX).     assertTrue(instance.getWriterHintMap().containsKey(EncodeHintType.DATA_MATRIX_SHAPE)).     assertTrue(instance.getReaderHintMap().containsKey(DecodeHintType.TRY_HARDER)).     // -> QR-CODE     instance.setBarcodeFormat(BarcodeFormat.QR_CODE).     assertFalse(instance.getWriterHintMap().containsKey(EncodeHintType.DATA_MATRIX_SHAPE)).     assertTrue(instance.getReaderHintMap().containsKey(DecodeHintType.TRY_HARDER)). }
true;public,final;0;9;/**  * Test of addToHintMap method, of class BarcodeDataFormat.  */ ;/**  * Test of addToHintMap method, of class BarcodeDataFormat.  */ @Test public final void testAddToHintMapEncodeHintTypeObject() {     EncodeHintType hintType = EncodeHintType.MARGIN.     Object value = 10.     BarcodeDataFormat instance = new BarcodeDataFormat().     instance.addToHintMap(hintType, value).     assertTrue(instance.getWriterHintMap().containsKey(hintType)).     assertEquals(instance.getWriterHintMap().get(hintType), value). }
true;public,final;0;9;/**  * Test of addToHintMap method, of class BarcodeDataFormat.  */ ;/**  * Test of addToHintMap method, of class BarcodeDataFormat.  */ @Test public final void testAddToHintMapDecodeHintTypeObject() {     DecodeHintType hintType = DecodeHintType.CHARACTER_SET.     Object value = "UTF-8".     BarcodeDataFormat instance = new BarcodeDataFormat().     instance.addToHintMap(hintType, value).     assertTrue(instance.getReaderHintMap().containsKey(hintType)).     assertEquals(instance.getReaderHintMap().get(hintType), value). }
true;public,final;0;7;/**  * Test of removeFromHintMap method, of class BarcodeDataFormat.  */ ;/**  * Test of removeFromHintMap method, of class BarcodeDataFormat.  */ @Test public final void testRemoveFromHintMapEncodeHintType() {     EncodeHintType hintType = EncodeHintType.ERROR_CORRECTION.     BarcodeDataFormat instance = new BarcodeDataFormat().     instance.removeFromHintMap(hintType).     assertFalse(instance.getWriterHintMap().containsKey(hintType)). }
true;public,final;0;7;/**  * Test of removeFromHintMap method, of class BarcodeDataFormat.  */ ;/**  * Test of removeFromHintMap method, of class BarcodeDataFormat.  */ @Test public final void testRemoveFromHintMapDecodeHintType() {     DecodeHintType hintType = DecodeHintType.TRY_HARDER.     BarcodeDataFormat instance = new BarcodeDataFormat().     instance.removeFromHintMap(hintType).     assertFalse(instance.getReaderHintMap().containsKey(hintType)). }
true;public,final;0;6;/**  * Test of getParams method, of class BarcodeDataFormat.  */ ;/**  * Test of getParams method, of class BarcodeDataFormat.  */ @Test public final void testGetParams() {     BarcodeDataFormat instance = new BarcodeDataFormat().     BarcodeParameters result = instance.getParams().     assertNotNull(result). }
true;public,final;0;6;/**  * Test of getWriterHintMap method, of class BarcodeDataFormat.  */ ;/**  * Test of getWriterHintMap method, of class BarcodeDataFormat.  */ @Test public final void testGetWriterHintMap() {     BarcodeDataFormat instance = new BarcodeDataFormat().     Map<EncodeHintType, Object> result = instance.getWriterHintMap().     assertNotNull(result). }
true;public,final;0;6;/**  * Test of getReaderHintMap method, of class BarcodeDataFormat.  */ ;/**  * Test of getReaderHintMap method, of class BarcodeDataFormat.  */ @Test public final void testGetReaderHintMap() {     BarcodeDataFormat instance = new BarcodeDataFormat().     Map<DecodeHintType, Object> result = instance.getReaderHintMap().     assertNotNull(result). }
true;private;5;6;/**  * Helper to check the saved parameters.  */ ;/**  * Helper to check the saved parameters.  */ private void checkParams(BarcodeImageType imageType, int width, int height, BarcodeFormat format, BarcodeParameters params) {     assertEquals(params.getType(), imageType).     assertTrue(params.getWidth() == width).     assertTrue(params.getHeight() == height).     assertEquals(params.getFormat(), format). }
