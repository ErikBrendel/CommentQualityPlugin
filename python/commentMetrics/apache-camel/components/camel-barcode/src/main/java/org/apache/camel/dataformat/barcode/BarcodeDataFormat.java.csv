commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "barcode". }
true;public;3;4;/**  * Marshall a {@link String} payload to a code image.  */ ;/**  * Marshall a {@link String} payload to a code image.  */ @Override public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {     this.printImage(exchange, graph, stream). }
true;public;2;4;/**  * Unmarshall a code image to a {@link String} payload.  */ ;/**  * Unmarshall a code image to a {@link String} payload.  */ @Override public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {     return this.readImage(exchange, stream). }
true;protected,final;0;3;/**  * Sets the default parameters.  */ ;/**  * Sets the default parameters.  */ protected final void setDefaultParameters() {     this.params = new BarcodeParameters(). }
true;protected,final;0;20;/**  * Sets hints optimized for different barcode types.  */ ;/**  * Sets hints optimized for different barcode types.  */ protected final void optimizeHints() {     // clear hints for re-optimization     this.writerHintMap.clear().     this.readerHintMap.clear().     // writer hints     String format = this.params.getFormat().toString().     // only for QR code. AZTEC uses zxing's default error correction 33%.     if (format.equals(BarcodeFormat.QR_CODE.toString())) {         this.writerHintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H).     }     if (format.equals(BarcodeFormat.DATA_MATRIX.toString())) {         this.writerHintMap.put(EncodeHintType.DATA_MATRIX_SHAPE, SymbolShapeHint.FORCE_SQUARE).     }     // reader hints     this.readerHintMap.put(DecodeHintType.TRY_HARDER, Boolean.TRUE). }
true;private;3;19;/**  * Writes the image file to the output stream.  *  * @param graph    the object graph  * @param exchange the camel exchange  * @param stream   the output stream  */ ;/**  * Writes the image file to the output stream.  *  * @param graph    the object graph  * @param exchange the camel exchange  * @param stream   the output stream  */ private void printImage(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {     final String payload = ExchangeHelper.convertToMandatoryType(exchange, String.class, graph).     final MultiFormatWriter writer = new MultiFormatWriter().     // set values     final String type = this.params.getType().toString().     // create code image     final BitMatrix matrix = writer.encode(payload, this.params.getFormat(), this.params.getWidth(), this.params.getHeight(), writerHintMap).     // write image back to stream     MatrixToImageWriter.writeToStream(matrix, type, stream). }
true;private;2;13;/**  * Reads the message from a code.  */ ;/**  * Reads the message from a code.  */ private String readImage(final Exchange exchange, final InputStream stream) throws Exception {     final MultiFormatReader reader = new MultiFormatReader().     final BufferedInputStream in = exchange.getContext().getTypeConverter().mandatoryConvertTo(BufferedInputStream.class, stream).     final BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(ImageIO.read(in)))).     final Result result = reader.decode(bitmap, readerHintMap).     // write the found barcode format into the header     exchange.getOut().setHeader(Barcode.BARCODE_FORMAT, result.getBarcodeFormat()).     return result.getText(). }
true;public,final;2;4;/**  * Adds a new hint value to writer (encode) hint map.  */ ;/**  * Adds a new hint value to writer (encode) hint map.  */ public final void addToHintMap(final EncodeHintType hintType, final Object value) {     this.writerHintMap.put(hintType, value).     log.info(String.format("Added '%s' with value '%s' to writer hint map.", hintType.toString(), value.toString())). }
true;public,final;2;3;/**  * Adds a new hint value to reader (decode) hint map.  */ ;/**  * Adds a new hint value to reader (decode) hint map.  */ public final void addToHintMap(final DecodeHintType hintType, final Object value) {     this.readerHintMap.put(hintType, value). }
true;public,final;1;8;/**  * Removes a hint from writer (encode) hint map.  */ ;/**  * Removes a hint from writer (encode) hint map.  */ public final void removeFromHintMap(final EncodeHintType hintType) {     if (this.writerHintMap.containsKey(hintType)) {         this.writerHintMap.remove(hintType).         log.info(String.format("Removed '%s' from writer hint map.", hintType.toString())).     } else {         log.warn(String.format("Could not find encode hint type '%s' in writer hint map.", hintType.toString())).     } }
true;public,final;1;8;/**  * Removes a hint from reader (decode) hint map.  */ ;/**  * Removes a hint from reader (decode) hint map.  */ public final void removeFromHintMap(final DecodeHintType hintType) {     if (this.readerHintMap.containsKey(hintType)) {         this.readerHintMap.remove(hintType).         log.info(String.format("Removed '%s' from reader hint map.", hintType.toString())).     } else {         log.warn(String.format("Could not find decode hint type '%s' in reader hint map.", hintType.toString())).     } }
true;public,final;0;3;/**  * The (default) parameters.  */ ;/**  * The (default) parameters.  */ public final BarcodeParameters getParams() {     return params. }
true;public,final;0;3;/**  * The writer (encode) hint map.  */ ;/**  * The writer (encode) hint map.  */ public final Map<EncodeHintType, Object> getWriterHintMap() {     return writerHintMap. }
true;public,final;0;3;/**  * The reader (decode) hint map.  */ ;/**  * The reader (decode) hint map.  */ public final Map<DecodeHintType, Object> getReaderHintMap() {     return readerHintMap. }
true;public;1;4;// these set method is used for BarcodeDataFormat XML DSL ;// these set method is used for BarcodeDataFormat XML DSL public void setBarcodeImageType(BarcodeImageType type) {     this.params.setType(type).     this.optimizeHints(). }
false;public;1;4;;public void setBarcodeFormat(BarcodeFormat format) {     this.params.setFormat(format).     this.optimizeHints(). }
false;public;1;3;;public void setWidth(Integer width) {     this.params.setWidth(width). }
false;public;1;3;;public void setHeight(Integer height) {     this.params.setHeight(height). }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
