commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean test(String type) {     return predicates.stream().anyMatch(p -> p.test(type)). }
false;public;1;4;;@Override public boolean test(String type) {     return this.values.contains(type). }
false;public,static;1;10;;// *************************** // Helpers // *************************** public static Optional<TypeFilter> valueOf(String definition) {     String type = StringHelper.before(definition, ":").     if (type == null || "type".equals(type)) {         return StringHelper.after(definition, ":", TypeName::new).     } else if ("regexp".equals(type)) {         return StringHelper.after(definition, ":", RegExp::new).     }     return Optional.empty(). }
false;public,static;1;3;;public static TypeFilter regexp(String... patterns) {     return new RegExp(Arrays.asList(patterns)). }
false;public,static;1;3;;public static TypeFilter regexp(Collection<String> patterns) {     return new RegExp(patterns). }
false;public,static;1;3;;public static TypeFilter typeNames(Collection<String> values) {     return new TypeName(values). }
false;public,static;1;3;;public static TypeFilter typeNames(String... values) {     return typeNames(Arrays.asList(values)). }
false;public,static;1;3;;public static TypeFilter types(Collection<Class<?>> values) {     return new TypeName(values.stream().map(c -> c.getName()).collect(Collectors.toList())). }
false;public,static;1;3;;public static TypeFilter types(Class<?>... values) {     return types(Arrays.asList(values)). }
false;public,static;0;3;;public static TypeFilter allowAll() {     return s -> true. }
false;public,static;0;3;;public static TypeFilter allowNone() {     return s -> false. }
