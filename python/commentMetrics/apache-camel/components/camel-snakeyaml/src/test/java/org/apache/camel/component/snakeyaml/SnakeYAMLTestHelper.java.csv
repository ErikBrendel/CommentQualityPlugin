commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static TestPojo createTestPojo() {     return new TestPojo("Camel"). }
false;public,static;0;6;;public static Map<String, String> createTestMap() {     Map<String, String> map = new HashMap<>().     map.put("name", "Camel").     return map. }
false;public,static;1;8;;public static SnakeYAMLDataFormat createDataFormat(final Class<?> type) {     SnakeYAMLDataFormat format = new SnakeYAMLDataFormat().     if (type != null) {         format.setUnmarshalType(type).     }     return format. }
false;public,static;2;6;;public static SnakeYAMLDataFormat createPrettyFlowDataFormat(Class<?> type, boolean prettyFlow) {     SnakeYAMLDataFormat format = createDataFormat(type).     format.setPrettyFlow(prettyFlow).     return format. }
false;public,static;2;6;;public static SnakeYAMLDataFormat createClassTagDataFormat(Class<?> type, Tag tag) {     SnakeYAMLDataFormat format = createDataFormat(type).     format.addTag(type, tag).     return format. }
false;public,static;6;20;;public static void marshalAndUnmarshal(CamelContext context, Object body, String mockName, String directIn, String directBack, String expected) throws Exception {     MockEndpoint mock = context.getEndpoint(mockName, MockEndpoint.class).     assertNotNull(mock).     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(body.getClass()).     mock.message(0).body().isEqualTo(body).     ProducerTemplate template = context.createProducerTemplate().     String result = template.requestBody(directIn, body, String.class).     assertNotNull(result).     assertEquals(expected, result.trim()).     template.sendBody(directBack, result).     mock.assertIsSatisfied(). }
