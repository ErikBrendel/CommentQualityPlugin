commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case listClusters:             listClusters(getEndpoint().getEcsClient(), exchange).             break.         case describeCluster:             describeCluster(getEndpoint().getEcsClient(), exchange).             break.         case createCluster:             createCluster(getEndpoint().getEcsClient(), exchange).             break.         case deleteCluster:             deleteCluster(getEndpoint().getEcsClient(), exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;7;;private ECSOperations determineOperation(Exchange exchange) {     ECSOperations operation = exchange.getIn().getHeader(ECSConstants.OPERATION, ECSOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected ECSConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (ecsProducerToString == null) {         ecsProducerToString = "ECSProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return ecsProducerToString. }
false;public;0;4;;@Override public ECSEndpoint getEndpoint() {     return (ECSEndpoint) super.getEndpoint(). }
false;private;2;16;;private void listClusters(AmazonECS ecsClient, Exchange exchange) {     ListClustersRequest request = new ListClustersRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(ECSConstants.MAX_RESULTS))) {         int maxRes = exchange.getIn().getHeader(ECSConstants.MAX_RESULTS, Integer.class).         request.withMaxResults(maxRes).     }     ListClustersResult result.     try {         result = ecsClient.listClusters().     } catch (AmazonServiceException ase) {         log.trace("List Clusters command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;16;;private void createCluster(AmazonECS ecsClient, Exchange exchange) {     CreateClusterRequest request = new CreateClusterRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(ECSConstants.CLUSTER_NAME))) {         String name = exchange.getIn().getHeader(ECSConstants.CLUSTER_NAME, String.class).         request.withClusterName(name).     }     CreateClusterResult result.     try {         result = ecsClient.createCluster(request).     } catch (AmazonServiceException ase) {         log.trace("Create Cluster command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;16;;private void describeCluster(AmazonECS ecsClient, Exchange exchange) {     DescribeClustersRequest request = new DescribeClustersRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(ECSConstants.CLUSTER_NAME))) {         String clusterName = exchange.getIn().getHeader(ECSConstants.CLUSTER_NAME, String.class).         request.withClusters(clusterName).     }     DescribeClustersResult result.     try {         result = ecsClient.describeClusters(request).     } catch (AmazonServiceException ase) {         log.trace("Describe Clusters command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void deleteCluster(AmazonECS ecsClient, Exchange exchange) {     DeleteClusterRequest request = new DeleteClusterRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(ECSConstants.CLUSTER_NAME))) {         String name = exchange.getIn().getHeader(ECSConstants.CLUSTER_NAME, String.class).         request.withCluster(name).     } else {         throw new IllegalArgumentException("Cluster name must be specified").     }     DeleteClusterResult result.     try {         result = ecsClient.deleteCluster(request).     } catch (AmazonServiceException ase) {         log.trace("Delete Cluster command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
