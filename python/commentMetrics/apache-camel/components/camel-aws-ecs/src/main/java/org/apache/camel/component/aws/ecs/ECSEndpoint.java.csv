commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("You cannot receive messages from this endpoint"). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new ECSProducer(this). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;6;;@Override public void doStart() throws Exception {     super.doStart().     ecsClient = configuration.getEcsClient() != null ? configuration.getEcsClient() : createECSClient(). }
false;public;0;9;;@Override public void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getEcsClient())) {         if (ecsClient != null) {             ecsClient.shutdown().         }     }     super.doStop(). }
false;public;0;3;;public ECSConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public AmazonECS getEcsClient() {     return ecsClient. }
false;;0;32;;AmazonECS createECSClient() {     AmazonECS client = null.     ClientConfiguration clientConfiguration = null.     AmazonECSClientBuilder clientBuilder = null.     boolean isClientConfigFound = false.     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         isClientConfigFound = true.     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (isClientConfigFound) {             clientBuilder = AmazonECSClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else {             clientBuilder = AmazonECSClientBuilder.standard().withCredentials(credentialsProvider).         }     } else {         if (isClientConfigFound) {             clientBuilder = AmazonECSClientBuilder.standard().         } else {             clientBuilder = AmazonECSClientBuilder.standard().withClientConfiguration(clientConfiguration).         }     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         clientBuilder = clientBuilder.withRegion(configuration.getRegion()).     }     client = clientBuilder.build().     return client. }
