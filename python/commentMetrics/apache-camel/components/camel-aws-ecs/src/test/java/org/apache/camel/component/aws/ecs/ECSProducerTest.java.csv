commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.listClusters). }
false;public;0;17;;@Test public void kmsListClustersTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:listClusters", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.listClusters).         }     }).     assertMockEndpointsSatisfied().     ListClustersResult resultGet = (ListClustersResult) exchange.getIn().getBody().     assertEquals(1, resultGet.getClusterArns().size()).     assertEquals("Test", resultGet.getClusterArns().get(0)). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.createCluster).     exchange.getIn().setHeader(ECSConstants.CLUSTER_NAME, "Test"). }
false;public;0;17;;@Test public void ecsCreateClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:createCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.createCluster).             exchange.getIn().setHeader(ECSConstants.CLUSTER_NAME, "Test").         }     }).     assertMockEndpointsSatisfied().     CreateClusterResult resultGet = (CreateClusterResult) exchange.getIn().getBody().     assertEquals("Test", resultGet.getCluster().getClusterName()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.describeCluster).     exchange.getIn().setHeader(ECSConstants.CLUSTER_NAME, "Test"). }
false;public;0;17;;@Test public void eksDescribeClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:describeCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.describeCluster).             exchange.getIn().setHeader(ECSConstants.CLUSTER_NAME, "Test").         }     }).     assertMockEndpointsSatisfied().     DescribeClustersResult resultGet = exchange.getIn().getBody(DescribeClustersResult.class).     assertEquals("Test", resultGet.getClusters().get(0).getClusterName()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.deleteCluster).     exchange.getIn().setHeader(ECSConstants.CLUSTER_NAME, "Test"). }
false;public;0;17;;@Test public void eksDeleteClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:deleteCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(ECSConstants.OPERATION, ECSOperations.deleteCluster).             exchange.getIn().setHeader(ECSConstants.CLUSTER_NAME, "Test").         }     }).     assertMockEndpointsSatisfied().     DeleteClusterResult resultGet = exchange.getIn().getBody(DeleteClusterResult.class).     assertEquals("Test", resultGet.getCluster().getClusterName()). }
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     AmazonECSClientMock clientMock = new AmazonECSClientMock().     registry.bind("amazonEcsClient", clientMock).     return registry. }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:listClusters").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=listClusters").to("mock:result").     from("direct:createCluster").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=createCluster").to("mock:result").     from("direct:deleteCluster").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=deleteCluster").to("mock:result").     from("direct:describeCluster").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=describeCluster").to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:listClusters").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=listClusters").to("mock:result").             from("direct:createCluster").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=createCluster").to("mock:result").             from("direct:deleteCluster").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=deleteCluster").to("mock:result").             from("direct:describeCluster").to("aws-ecs://test?ecsClient=#amazonEcsClient&operation=describeCluster").to("mock:result").         }     }. }
