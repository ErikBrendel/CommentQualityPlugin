# id;timestamp;commentText;codeText;commentWords;codeWords
CamelEventHandler -> @Subscribe     public void eventReceived(Object event) throws Exception;1340013683;Guava callback when an event was received_@param event the event_@throws Exception is thrown if error processing the even;@Subscribe_    public void eventReceived(Object event) throws Exception {_        LOG.trace("Received event: {}")__        if (eventClass == null || eventClass.isAssignableFrom(event.getClass())) {_            LOG.debug("Processing event: {}", event)__            consumerProcessor.process(eventBusEndpoint.createExchange(event))__        } else {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Cannot process event: {} as its class type: {} is not assignable with: {}",_                        new Object[]{event, event.getClass().getName(), eventClass.getName()})__            }_        }_    };guava,callback,when,an,event,was,received,param,event,the,event,throws,exception,is,thrown,if,error,processing,the,even;subscribe,public,void,event,received,object,event,throws,exception,log,trace,received,event,if,event,class,null,event,class,is,assignable,from,event,get,class,log,debug,processing,event,event,consumer,processor,process,event,bus,endpoint,create,exchange,event,else,if,log,is,debug,enabled,log,debug,cannot,process,event,as,its,class,type,is,not,assignable,with,new,object,event,event,get,class,get,name,event,class,get,name
CamelEventHandler -> @Subscribe     public void eventReceived(Object event) throws Exception;1340080514;Guava callback when an event was received_@param event the event_@throws Exception is thrown if error processing the even;@Subscribe_    public void eventReceived(Object event) throws Exception {_        LOG.trace("Received event: {}")__        if (eventClass == null || eventClass.isAssignableFrom(event.getClass())) {_            final Exchange exchange = eventBusEndpoint.createExchange(event)__            LOG.debug("Processing event: {}", event)__            _            processor.process(exchange, new AsyncCallback() {_                @Override_                public void done(boolean doneSync) {_                    _                }_            })__        } else {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Cannot process event: {} as its class type: {} is not assignable with: {}",_                        new Object[]{event, event.getClass().getName(), eventClass.getName()})__            }_        }_    };guava,callback,when,an,event,was,received,param,event,the,event,throws,exception,is,thrown,if,error,processing,the,even;subscribe,public,void,event,received,object,event,throws,exception,log,trace,received,event,if,event,class,null,event,class,is,assignable,from,event,get,class,final,exchange,exchange,event,bus,endpoint,create,exchange,event,log,debug,processing,event,event,processor,process,exchange,new,async,callback,override,public,void,done,boolean,done,sync,else,if,log,is,debug,enabled,log,debug,cannot,process,event,as,its,class,type,is,not,assignable,with,new,object,event,event,get,class,get,name,event,class,get,name
CamelEventHandler -> public void doEventReceived(Object event);1364420573;Callback executed to propagate event from Guava listener to Camel route.__@param event the event received by Guava EventBus.;public void doEventReceived(Object event) {_        log.trace("Received event: {}")__        final Exchange exchange = eventBusEndpoint.createExchange(event)__        log.debug("Processing event: {}", event)__        _        processor.process(exchange, new AsyncCallback() {_            @Override_            public void done(boolean doneSync) {_                _            }_        })__    };callback,executed,to,propagate,event,from,guava,listener,to,camel,route,param,event,the,event,received,by,guava,event,bus;public,void,do,event,received,object,event,log,trace,received,event,final,exchange,exchange,event,bus,endpoint,create,exchange,event,log,debug,processing,event,event,processor,process,exchange,new,async,callback,override,public,void,done,boolean,done,sync
CamelEventHandler -> public void doEventReceived(Object event);1376558158;Callback executed to propagate event from Guava listener to Camel route.__@param event the event received by Guava EventBus.;public void doEventReceived(Object event) {_        log.trace("Received event: {}")__        final Exchange exchange = eventBusEndpoint.createExchange(event)__        log.debug("Processing event: {}", event)__        _        processor.process(exchange, new AsyncCallback() {_            @Override_            public void done(boolean doneSync) {_                _            }_        })__    };callback,executed,to,propagate,event,from,guava,listener,to,camel,route,param,event,the,event,received,by,guava,event,bus;public,void,do,event,received,object,event,log,trace,received,event,final,exchange,exchange,event,bus,endpoint,create,exchange,event,log,debug,processing,event,event,processor,process,exchange,new,async,callback,override,public,void,done,boolean,done,sync
CamelEventHandler -> public void doEventReceived(Object event);1540108163;Callback executed to propagate event from Guava listener to Camel route.__@param event the event received by Guava EventBus.;public void doEventReceived(Object event) {_        log.trace("Received event: {}")__        final Exchange exchange = eventBusEndpoint.createExchange(event)__        log.debug("Processing event: {}", event)__        _        processor.process(exchange, new AsyncCallback() {_            @Override_            public void done(boolean doneSync) {_                _            }_        })__    };callback,executed,to,propagate,event,from,guava,listener,to,camel,route,param,event,the,event,received,by,guava,event,bus;public,void,do,event,received,object,event,log,trace,received,event,final,exchange,exchange,event,bus,endpoint,create,exchange,event,log,debug,processing,event,event,processor,process,exchange,new,async,callback,override,public,void,done,boolean,done,sync
CamelEventHandler -> public void doEventReceived(Object event) throws Exception;1364159144;Callback executed to propagate event from Guava listener to Camel route.__@param event the event received by Guava_@throws Exception is thrown if error processing the event;public void doEventReceived(Object event) throws Exception {_        log.trace("Received event: {}")__        final Exchange exchange = eventBusEndpoint.createExchange(event)__        log.debug("Processing event: {}", event)__        _        processor.process(exchange, new AsyncCallback() {_            @Override_            public void done(boolean doneSync) {_                _            }_        })__    };callback,executed,to,propagate,event,from,guava,listener,to,camel,route,param,event,the,event,received,by,guava,throws,exception,is,thrown,if,error,processing,the,event;public,void,do,event,received,object,event,throws,exception,log,trace,received,event,final,exchange,exchange,event,bus,endpoint,create,exchange,event,log,debug,processing,event,event,processor,process,exchange,new,async,callback,override,public,void,done,boolean,done,sync
CamelEventHandler -> public void doEventReceived(Object event) throws Exception;1364420213;Callback executed to propagate event from Guava listener to Camel route.__@param event the event received by Guava EventBus._@throws Exception is thrown if error processing the event;public void doEventReceived(Object event) throws Exception {_        log.trace("Received event: {}")__        final Exchange exchange = eventBusEndpoint.createExchange(event)__        log.debug("Processing event: {}", event)__        _        processor.process(exchange, new AsyncCallback() {_            @Override_            public void done(boolean doneSync) {_                _            }_        })__    };callback,executed,to,propagate,event,from,guava,listener,to,camel,route,param,event,the,event,received,by,guava,event,bus,throws,exception,is,thrown,if,error,processing,the,event;public,void,do,event,received,object,event,throws,exception,log,trace,received,event,final,exchange,exchange,event,bus,endpoint,create,exchange,event,log,debug,processing,event,event,processor,process,exchange,new,async,callback,override,public,void,done,boolean,done,sync
