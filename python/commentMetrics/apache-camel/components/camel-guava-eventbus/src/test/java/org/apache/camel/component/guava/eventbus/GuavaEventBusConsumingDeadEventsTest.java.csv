commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void configure() throws Exception {     from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomListener").to("mock:customListenerEvents").     from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.DeadEventListener").to("mock:deadEvents"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomListener").to("mock:customListenerEvents").             from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.DeadEventListener").to("mock:deadEvents").         }     }. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("eventBus", eventBus).     return registry. }
false;public;0;15;;@Test public void shouldForwardMessageToCamel() throws InterruptedException {     // Given     Date message = new Date().     // When     eventBus.post(message).     // Then     getMockEndpoint("mock:customListenerEvents").setExpectedMessageCount(0).     assertMockEndpointsSatisfied().     getMockEndpoint("mock:deadEvents").setExpectedMessageCount(1).     assertMockEndpointsSatisfied().     assertEquals(message, getMockEndpoint("mock:deadEvents").getExchanges().get(0).getIn().getBody(DeadEvent.class).getEvent()). }
