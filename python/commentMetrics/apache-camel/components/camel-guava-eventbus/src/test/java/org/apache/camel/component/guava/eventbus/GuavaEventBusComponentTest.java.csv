commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("myGuavaEventBus:eventBus").to("mock:test"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("myGuavaEventBus:eventBus").to("mock:test").         }     }. }
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     GuavaEventBusComponent busComponent = new GuavaEventBusComponent().     busComponent.setEventBus(eventBus).     camelContext.addComponent("myGuavaEventBus", busComponent).     return camelContext. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("eventBus", eventBus).     return registry. }
false;public;0;13;;@Test public void shouldForwardMessageToCustomComponent() throws InterruptedException {     // Given     String message = "message".     // When     eventBus.post(message).     // Then     getMockEndpoint("mock:test").setExpectedMessageCount(1).     assertMockEndpointsSatisfied().     assertEquals(message, getMockEndpoint("mock:test").getExchanges().get(0).getIn().getBody()). }
