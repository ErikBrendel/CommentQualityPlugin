commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public void configure() throws Exception {     from("guava-eventbus:eventBus").to("mock:allEvents").     from("guava-eventbus:eventBus").to("mock:multipliedConsumer").     from("guava-eventbus:eventBus?eventClass=org.apache.camel.component.guava.eventbus.MessageWrapper").to("mock:wrapperEvents").     from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomListener").to("mock:customListenerEvents").     from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomMultiEventListener").to("mock:customMultiEventListenerEvents"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("guava-eventbus:eventBus").to("mock:allEvents").             from("guava-eventbus:eventBus").to("mock:multipliedConsumer").             from("guava-eventbus:eventBus?eventClass=org.apache.camel.component.guava.eventbus.MessageWrapper").to("mock:wrapperEvents").             from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomListener").to("mock:customListenerEvents").             from("guava-eventbus:eventBus?listenerInterface=org.apache.camel.component.guava.eventbus.CustomMultiEventListener").to("mock:customMultiEventListenerEvents").         }     }. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("eventBus", eventBus).     return registry. }
false;public;0;13;;@Test public void shouldForwardMessageToCamel() throws InterruptedException {     // Given     String message = "message".     // When     eventBus.post(message).     // Then     getMockEndpoint("mock:allEvents").setExpectedMessageCount(1).     assertMockEndpointsSatisfied().     assertEquals(message, getMockEndpoint("mock:allEvents").getExchanges().get(0).getIn().getBody()). }
false;public;0;15;;@Test public void shouldForwardMessageToMultipleConsumers() throws InterruptedException {     // Given     String message = "message".     // When     eventBus.post(message).     // Then     getMockEndpoint("mock:allEvents").setExpectedMessageCount(1).     getMockEndpoint("mock:multipliedConsumer").setExpectedMessageCount(1).     assertMockEndpointsSatisfied().     assertEquals(message, getMockEndpoint("mock:allEvents").getExchanges().get(0).getIn().getBody()).     assertEquals(message, getMockEndpoint("mock:multipliedConsumer").getExchanges().get(0).getIn().getBody()). }
false;public;0;14;;@Test public void shouldFilterForwardedMessages() throws InterruptedException {     // Given     MessageWrapper wrappedMessage = new MessageWrapper("message").     // When     eventBus.post(wrappedMessage).     eventBus.post("String message.").     // Then     getMockEndpoint("mock:wrapperEvents").setExpectedMessageCount(1).     assertMockEndpointsSatisfied().     assertEquals(wrappedMessage, getMockEndpoint("mock:wrapperEvents").getExchanges().get(0).getIn().getBody()). }
false;public;0;14;;@Test public void shouldUseCustomListener() throws InterruptedException {     // Given     MessageWrapper wrappedMessage = new MessageWrapper("message").     // When     eventBus.post(wrappedMessage).     eventBus.post("String message.").     // Then     getMockEndpoint("mock:customListenerEvents").setExpectedMessageCount(1).     assertMockEndpointsSatisfied().     assertEquals(wrappedMessage, getMockEndpoint("mock:customListenerEvents").getExchanges().get(0).getIn().getBody()). }
false;public;0;16;;@Test public void shouldSupportMultiEventCustomListener() throws InterruptedException {     // Given     String stringEvent = "stringEvent".     Date dateEvent = new Date().     // When     eventBus.post(stringEvent).     eventBus.post(dateEvent).     // Then     getMockEndpoint("mock:customMultiEventListenerEvents").setExpectedMessageCount(2).     assertMockEndpointsSatisfied().     assertEquals(stringEvent, getMockEndpoint("mock:customMultiEventListenerEvents").getExchanges().get(0).getIn().getBody()).     assertEquals(dateEvent, getMockEndpoint("mock:customMultiEventListenerEvents").getExchanges().get(1).getIn().getBody()). }
