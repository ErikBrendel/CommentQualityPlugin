commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("DrillConsumer is not supported!"). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new DrillProducer(this). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;13;;public String toJDBCUri() {     String url = "jdbc:drill:" + mode.name().toLowerCase() + "=" + host + ":" + port.     if (mode.equals(DrillConnectionMode.ZK)) {         if (StringUtils.isNotBlank(directory)) {             url += "/" + directory.         }         if (StringUtils.isNotBlank(clusterId)) {             url += "/" + clusterId.         }     }     return url. }
false;public;1;6;;public List<?> queryForList(ResultSet rs) throws SQLException {     ColumnMapRowMapper rowMapper = new ColumnMapRowMapper().     RowMapperResultSetExtractor<Map<String, Object>> mapper = new RowMapperResultSetExtractor<>(rowMapper).     List<Map<String, Object>> data = mapper.extractData(rs).     return data. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * ZooKeeper host name or IP address. Use local instead of a host name or IP  * address to connect to the local Drillbit  *  * @param host  */ ;/**  * ZooKeeper host name or IP address. Use local instead of a host name or IP  * address to connect to the local Drillbit  *  * @param host  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public Integer getPort() {     return port. }
true;public;1;3;/**  * ZooKeeper port number  *  * @param port  */ ;/**  * ZooKeeper port number  *  * @param port  */ public void setPort(Integer port) {     this.port = port. }
false;public;0;3;;public String getDirectory() {     return directory. }
true;public;1;3;/**  * Drill directory in ZooKeeper  *  * @param directory  */ ;/**  * Drill directory in ZooKeeper  *  * @param directory  */ public void setDirectory(String directory) {     this.directory = directory. }
false;public;0;3;;public String getClusterId() {     return clusterId. }
true;public;1;3;/**  * Cluster ID  * https://drill.apache.org/docs/using-the-jdbc-driver/#determining-the-cluster-id  *  * @param clusterId  */ ;/**  * Cluster ID  * https://drill.apache.org/docs/using-the-jdbc-driver/#determining-the-cluster-id  *  * @param clusterId  */ public void setClusterId(String clusterId) {     this.clusterId = clusterId. }
true;public;0;3;/**  * Connection mode: zk: Zookeeper drillbit: Drillbit direct connection  * https://drill.apache.org/docs/using-the-jdbc-driver/  *  * @return  */ ;/**  * Connection mode: zk: Zookeeper drillbit: Drillbit direct connection  * https://drill.apache.org/docs/using-the-jdbc-driver/  *  * @return  */ public DrillConnectionMode getMode() {     return mode. }
false;public;1;3;;public void setMode(DrillConnectionMode mode) {     this.mode = mode. }
