commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new IgniteCacheProducer(this, obtainCache()). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return new IgniteCacheContinuousQueryConsumer(this, processor, obtainCache()). }
false;private;0;11;;private IgniteCache<Object, Object> obtainCache() throws CamelException {     IgniteCache<Object, Object> cache = ignite().cache(cacheName).     if (cache == null) {         if (failIfInexistentCache) {             throw new CamelException(String.format("Ignite cache %s doesn't exist, and failIfInexistentCache is true", cacheName)).         }         cache = ignite().createCache(cacheName).     }     return cache. }
true;public;0;3;/**  * Gets the cache name.  *  * @return  */ ;/**  * Gets the cache name.  *  * @return  */ public String getCacheName() {     return cacheName. }
true;public;1;3;/**  * The cache name.  *  * @param cacheName cache name  */ ;/**  * The cache name.  *  * @param cacheName cache name  */ public void setCacheName(String cacheName) {     this.cacheName = cacheName. }
true;public;0;3;/**  * Gets the cache operation to invoke.  *  * @return cache name  */ ;/**  * Gets the cache operation to invoke.  *  * @return cache name  */ public IgniteCacheOperation getOperation() {     return operation. }
true;public;1;3;/**  * The cache operation to invoke.  * <p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>  *  * @param operation  */ ;/**  * The cache operation to invoke.  * <p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>  *  * @param operation  */ public void setOperation(IgniteCacheOperation operation) {     this.operation = operation. }
true;public;0;3;/**  * Whether to fail the initialization if the cache doesn't exist.  *  * @return  */ ;/**  * Whether to fail the initialization if the cache doesn't exist.  *  * @return  */ public boolean isFailIfInexistentCache() {     return failIfInexistentCache. }
true;public;1;3;/**  * Whether to fail the initialization if the cache doesn't exist.  *  * @param failIfInexistentCache  */ ;/**  * Whether to fail the initialization if the cache doesn't exist.  *  * @param failIfInexistentCache  */ public void setFailIfInexistentCache(boolean failIfInexistentCache) {     this.failIfInexistentCache = failIfInexistentCache. }
true;public;0;3;/**  * Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).  *  * @return  */ ;/**  * Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).  *  * @return  */ public CachePeekMode getCachePeekMode() {     return cachePeekMode. }
true;public;1;3;/**  * The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).  *  * @param cachePeekMode  */ ;/**  * The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).  *  * @param cachePeekMode  */ public void setCachePeekMode(CachePeekMode cachePeekMode) {     this.cachePeekMode = cachePeekMode. }
true;public;0;3;/**  * Gets the query to execute, only needed for operations that require it,  * and for the Continuous Query Consumer.  *  * @return  */ ;/**  * Gets the query to execute, only needed for operations that require it,  * and for the Continuous Query Consumer.  *  * @return  */ public Query<Entry<Object, Object>> getQuery() {     return query. }
true;public;1;3;/**  * The {@link Query} to execute, only needed for operations that require it,  * and for the Continuous Query Consumer.  *  * @param query  */ ;/**  * The {@link Query} to execute, only needed for operations that require it,  * and for the Continuous Query Consumer.  *  * @param query  */ public void setQuery(Query<Entry<Object, Object>> query) {     this.query = query. }
true;public;0;3;/**  * Gets the remote filter, only used by the Continuous Query Consumer.  *  * @return  */ ;/**  * Gets the remote filter, only used by the Continuous Query Consumer.  *  * @return  */ public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {     return remoteFilter. }
true;public;1;3;/**  * The remote filter, only used by the Continuous Query Consumer.  *  * @param remoteFilter  */ ;/**  * The remote filter, only used by the Continuous Query Consumer.  *  * @param remoteFilter  */ public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {     this.remoteFilter = remoteFilter. }
true;public;0;3;/**  * Gets whether to pack each update in an individual Exchange, even if multiple updates are  * received in one batch. Only used by the Continuous Query Consumer.  *  * @return  */ ;/**  * Gets whether to pack each update in an individual Exchange, even if multiple updates are  * received in one batch. Only used by the Continuous Query Consumer.  *  * @return  */ public boolean isOneExchangePerUpdate() {     return oneExchangePerUpdate. }
true;public;1;3;/**  * Whether to pack each update in an individual Exchange, even if multiple updates are  * received in one batch. Only used by the Continuous Query Consumer.  *  * @param oneExchangePerUpdate  */ ;/**  * Whether to pack each update in an individual Exchange, even if multiple updates are  * received in one batch. Only used by the Continuous Query Consumer.  *  * @param oneExchangePerUpdate  */ public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {     this.oneExchangePerUpdate = oneExchangePerUpdate. }
true;public;0;3;/**  * Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.  *  * @return  */ ;/**  * Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.  *  * @return  */ public boolean isAutoUnsubscribe() {     return autoUnsubscribe. }
true;public;1;3;/**  * Whether auto unsubscribe is enabled in the Continuous Query Consumer.  *  * @param autoUnsubscribe  */ ;/**  * Whether auto unsubscribe is enabled in the Continuous Query Consumer.  *  * @param autoUnsubscribe  */ public void setAutoUnsubscribe(boolean autoUnsubscribe) {     this.autoUnsubscribe = autoUnsubscribe. }
true;public;0;3;/**  * Gets the page size. Only used by the Continuous Query Consumer.  *  * @return  */ ;/**  * Gets the page size. Only used by the Continuous Query Consumer.  *  * @return  */ public int getPageSize() {     return pageSize. }
true;public;1;3;/**  * The page size. Only used by the Continuous Query Consumer.  *  * @param pageSize  */ ;/**  * The page size. Only used by the Continuous Query Consumer.  *  * @param pageSize  */ public void setPageSize(int pageSize) {     this.pageSize = pageSize. }
true;public;0;3;/**  * Gets whether to process existing results that match the query. Used on initialization of  * the Continuous Query Consumer.  *  * @return  */ ;/**  * Gets whether to process existing results that match the query. Used on initialization of  * the Continuous Query Consumer.  *  * @return  */ public boolean isFireExistingQueryResults() {     return fireExistingQueryResults. }
true;public;1;3;/**  * Whether to process existing results that match the query. Used on initialization of  * the Continuous Query Consumer.  *  * @param fireExistingQueryResults  */ ;/**  * Whether to process existing results that match the query. Used on initialization of  * the Continuous Query Consumer.  *  * @param fireExistingQueryResults  */ public void setFireExistingQueryResults(boolean fireExistingQueryResults) {     this.fireExistingQueryResults = fireExistingQueryResults. }
true;public;0;3;/**  * Gets the time interval for the Continuous Query Consumer.  *  * @return  */ ;/**  * Gets the time interval for the Continuous Query Consumer.  *  * @return  */ public long getTimeInterval() {     return timeInterval. }
true;public;1;3;/**  * The time interval for the Continuous Query Consumer.  *  * @param timeInterval  */ ;/**  * The time interval for the Continuous Query Consumer.  *  * @param timeInterval  */ public void setTimeInterval(long timeInterval) {     this.timeInterval = timeInterval. }
