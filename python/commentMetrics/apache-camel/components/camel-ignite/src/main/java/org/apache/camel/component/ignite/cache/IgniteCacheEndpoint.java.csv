# id;timestamp;commentText;codeText;commentWords;codeWords
IgniteCacheEndpoint -> public int getPageSize();1450886210;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1453292975;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1492766412;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1492766412;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1499717928;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1521541903;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1547240981;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1547241310;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public int getPageSize();1547480087;Gets the page size. Only used by the Continuous Query Consumer.__@return;public int getPageSize() {_        return pageSize__    };gets,the,page,size,only,used,by,the,continuous,query,consumer,return;public,int,get,page,size,return,page,size
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1450886210;Sets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };sets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1453292975;Sets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };sets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1492766412;Whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1492766412;Whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1499717928;Whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1521541903;Whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1547240981;Whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1547241310;Whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setAutoUnsubscribe(boolean autoUnsubscribe);1547480087;Whether auto unsubscribe is enabled in the Continuous Query Consumer.__@param autoUnsubscribe;public void setAutoUnsubscribe(boolean autoUnsubscribe) {_        this.autoUnsubscribe = autoUnsubscribe__    };whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,param,auto,unsubscribe;public,void,set,auto,unsubscribe,boolean,auto,unsubscribe,this,auto,unsubscribe,auto,unsubscribe
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1450886210;Sets the cache name.__@param cacheName;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };sets,the,cache,name,param,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1453292975;Sets the cache name.__@param cacheName;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };sets,the,cache,name,param,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1492766412;The cache name.__@param cacheName cache name;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };the,cache,name,param,cache,name,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1492766412;The cache name.__@param cacheName cache name;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };the,cache,name,param,cache,name,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1499717928;The cache name.__@param cacheName cache name;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };the,cache,name,param,cache,name,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1521541903;The cache name.__@param cacheName cache name;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };the,cache,name,param,cache,name,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1547240981;The cache name.__@param cacheName cache name;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };the,cache,name,param,cache,name,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1547241310;The cache name.__@param cacheName cache name;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };the,cache,name,param,cache,name,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setCacheName(String cacheName);1547480087;The cache name.__@param cacheName cache name;public void setCacheName(String cacheName) {_        this.cacheName = cacheName__    };the,cache,name,param,cache,name,cache,name;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1450886210;Sets the time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };sets,the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1453292975;Sets the time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };sets,the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1492766412;The time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1492766412;The time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1499717928;The time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1521541903;The time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1547240981;The time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1547241310;The time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public void setTimeInterval(long timeInterval);1547480087;The time interval for the Continuous Query Consumer.__@param timeInterval;public void setTimeInterval(long timeInterval) {_        this.timeInterval = timeInterval__    };the,time,interval,for,the,continuous,query,consumer,param,time,interval;public,void,set,time,interval,long,time,interval,this,time,interval,time,interval
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1450886210;Gets the cache operation to invoke.__@return;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1453292975;Gets the cache operation to invoke.__@return;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1492766412;Gets the cache operation to invoke.__@return cache name;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return,cache,name;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1492766412;Gets the cache operation to invoke.__@return cache name;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return,cache,name;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1499717928;Gets the cache operation to invoke.__@return cache name;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return,cache,name;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1521541903;Gets the cache operation to invoke.__@return cache name;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return,cache,name;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1547240981;Gets the cache operation to invoke.__@return cache name;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return,cache,name;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1547241310;Gets the cache operation to invoke.__@return cache name;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return,cache,name;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public IgniteCacheOperation getOperation();1547480087;Gets the cache operation to invoke.__@return cache name;public IgniteCacheOperation getOperation() {_        return operation__    };gets,the,cache,operation,to,invoke,return,cache,name;public,ignite,cache,operation,get,operation,return,operation
IgniteCacheEndpoint -> public long getTimeInterval();1450886210;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1453292975;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1492766412;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1492766412;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1499717928;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1521541903;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1547240981;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1547241310;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public long getTimeInterval();1547480087;Gets the time interval for the Continuous Query Consumer.__@return;public long getTimeInterval() {_        return timeInterval__    };gets,the,time,interval,for,the,continuous,query,consumer,return;public,long,get,time,interval,return,time,interval
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1450886210;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1453292975;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1492766412;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1492766412;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1499717928;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1521541903;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1547240981;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1547241310;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public CachePeekMode getCachePeekMode();1547480087;Gets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@return;public CachePeekMode getCachePeekMode() {_        return cachePeekMode__    };gets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,return;public,cache,peek,mode,get,cache,peek,mode,return,cache,peek,mode
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1450886210;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1453292975;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1492766412;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1492766412;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1499717928;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1521541903;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1547240981;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1547241310;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public boolean isOneExchangePerUpdate();1547480087;Gets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@return;public boolean isOneExchangePerUpdate() {_        return oneExchangePerUpdate__    };gets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,return;public,boolean,is,one,exchange,per,update,return,one,exchange,per,update
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1450886210;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1453292975;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1492766412;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1492766412;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1499717928;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1521541903;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1547240981;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1547241310;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter();1547480087;Gets the remote filter, only used by the Continuous Query Consumer.__@return;public CacheEntryEventSerializableFilter<Object, Object> getRemoteFilter() {_        return remoteFilter__    };gets,the,remote,filter,only,used,by,the,continuous,query,consumer,return;public,cache,entry,event,serializable,filter,object,object,get,remote,filter,return,remote,filter
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1450886210;Sets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };sets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1453292975;Sets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };sets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1492766412;The {@link Query} to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };the,link,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1492766412;The {@link Query} to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };the,link,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1499717928;The {@link Query} to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };the,link,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1521541903;The {@link Query} to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };the,link,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1547240981;The {@link Query} to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };the,link,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1547241310;The {@link Query} to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };the,link,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public void setQuery(Query<Entry<Object, Object>> query);1547480087;The {@link Query} to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@param query;public void setQuery(Query<Entry<Object, Object>> query) {_        this.query = query__    };the,link,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,param,query;public,void,set,query,query,entry,object,object,query,this,query,query
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1450886210;Gets whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };gets,whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1453292975;Gets whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };gets,whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1492766412;Whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1492766412;Whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1499717928;Whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1521541903;Whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1547240981;Whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1547241310;Whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFailIfInexistentCache();1547480087;Whether to fail the initialization if the cache doesn't exist.__@return;public boolean isFailIfInexistentCache() {_        return failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,return;public,boolean,is,fail,if,inexistent,cache,return,fail,if,inexistent,cache
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1450886210;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1453292975;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1492766412;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1492766412;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1499717928;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1521541903;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1547240981;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1547241310;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isFireExistingQueryResults();1547480087;Gets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@return;public boolean isFireExistingQueryResults() {_        return fireExistingQueryResults__    };gets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,return;public,boolean,is,fire,existing,query,results,return,fire,existing,query,results
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1450886210;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1453292975;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1492766412;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1492766412;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1499717928;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1521541903;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1547240981;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1547241310;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public boolean isAutoUnsubscribe();1547480087;Gets whether auto unsubscribe is enabled in the Continuous Query Consumer.__@return;public boolean isAutoUnsubscribe() {_        return autoUnsubscribe__    };gets,whether,auto,unsubscribe,is,enabled,in,the,continuous,query,consumer,return;public,boolean,is,auto,unsubscribe,return,auto,unsubscribe
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1450886210;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1453292975;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1492766412;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1492766412;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1499717928;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1521541903;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1547240981;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1547241310;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public Query<Entry<Object, Object>> getQuery();1547480087;Gets the query to execute, only needed for operations that require it,_and for the Continuous Query Consumer.__@return;public Query<Entry<Object, Object>> getQuery() {_        return query__    };gets,the,query,to,execute,only,needed,for,operations,that,require,it,and,for,the,continuous,query,consumer,return;public,query,entry,object,object,get,query,return,query
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1450886210;Sets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };sets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1453292975;Sets whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };sets,whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1492766412;Whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1492766412;Whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1499717928;Whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1521541903;Whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1547240981;Whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1547241310;Whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFireExistingQueryResults(boolean fireExistingQueryResults);1547480087;Whether to process existing results that match the query. Used on initialization of_the Continuous Query Consumer.__@param fireExistingQueryResults;public void setFireExistingQueryResults(boolean fireExistingQueryResults) {_        this.fireExistingQueryResults = fireExistingQueryResults__    };whether,to,process,existing,results,that,match,the,query,used,on,initialization,of,the,continuous,query,consumer,param,fire,existing,query,results;public,void,set,fire,existing,query,results,boolean,fire,existing,query,results,this,fire,existing,query,results,fire,existing,query,results
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1450886210;Sets whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };sets,whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1453292975;Sets whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };sets,whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1492766412;Whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1492766412;Whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1499717928;Whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1521541903;Whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1547240981;Whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1547241310;Whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setFailIfInexistentCache(boolean failIfInexistentCache);1547480087;Whether to fail the initialization if the cache doesn't exist.__@param failIfInexistentCache;public void setFailIfInexistentCache(boolean failIfInexistentCache) {_        this.failIfInexistentCache = failIfInexistentCache__    };whether,to,fail,the,initialization,if,the,cache,doesn,t,exist,param,fail,if,inexistent,cache;public,void,set,fail,if,inexistent,cache,boolean,fail,if,inexistent,cache,this,fail,if,inexistent,cache,fail,if,inexistent,cache
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1450886210;Sets the page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };sets,the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1453292975;Sets the page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };sets,the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1492766412;The page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1492766412;The page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1499717928;The page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1521541903;The page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1547240981;The page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1547241310;The page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public void setPageSize(int pageSize);1547480087;The page size. Only used by the Continuous Query Consumer.__@param pageSize;public void setPageSize(int pageSize) {_        this.pageSize = pageSize__    };the,page,size,only,used,by,the,continuous,query,consumer,param,page,size;public,void,set,page,size,int,page,size,this,page,size,page,size
IgniteCacheEndpoint -> public String getCacheName();1450886210;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1453292975;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1492766412;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1492766412;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1499717928;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1521541903;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1547240981;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1547241310;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public String getCacheName();1547480087;Gets the cache name.__@return;public String getCacheName() {_        return cacheName__    };gets,the,cache,name,return;public,string,get,cache,name,return,cache,name
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1450886210;Sets the remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };sets,the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1453292975;Sets the remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };sets,the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1492766412;The remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1492766412;The remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1499717928;The remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1521541903;The remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1547240981;The remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1547241310;The remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter);1547480087;The remote filter, only used by the Continuous Query Consumer.__@param remoteFilter;public void setRemoteFilter(CacheEntryEventSerializableFilter<Object, Object> remoteFilter) {_        this.remoteFilter = remoteFilter__    };the,remote,filter,only,used,by,the,continuous,query,consumer,param,remote,filter;public,void,set,remote,filter,cache,entry,event,serializable,filter,object,object,remote,filter,this,remote,filter,remote,filter
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1450886210;Sets the cache operation to invoke.__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };sets,the,cache,operation,to,invoke,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1453292975;Sets the cache operation to invoke.__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };sets,the,cache,operation,to,invoke,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1492766412;The cache operation to invoke._<p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };the,cache,operation,to,invoke,p,possible,values,get,put,remove,size,rebalance,query,clear,p,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1492766412;The cache operation to invoke._<p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };the,cache,operation,to,invoke,p,possible,values,get,put,remove,size,rebalance,query,clear,p,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1499717928;The cache operation to invoke._<p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };the,cache,operation,to,invoke,p,possible,values,get,put,remove,size,rebalance,query,clear,p,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1521541903;The cache operation to invoke._<p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };the,cache,operation,to,invoke,p,possible,values,get,put,remove,size,rebalance,query,clear,p,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1547240981;The cache operation to invoke._<p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };the,cache,operation,to,invoke,p,possible,values,get,put,remove,size,rebalance,query,clear,p,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1547241310;The cache operation to invoke._<p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };the,cache,operation,to,invoke,p,possible,values,get,put,remove,size,rebalance,query,clear,p,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setOperation(IgniteCacheOperation operation);1547480087;The cache operation to invoke._<p>Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR.</p>__@param operation;public void setOperation(IgniteCacheOperation operation) {_        this.operation = operation__    };the,cache,operation,to,invoke,p,possible,values,get,put,remove,size,rebalance,query,clear,p,param,operation;public,void,set,operation,ignite,cache,operation,operation,this,operation,operation
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1450886210;Sets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };sets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1453292975;Sets the {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };sets,the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1492766412;The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1492766412;The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1499717928;The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1521541903;The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1547240981;The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1547241310;The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setCachePeekMode(CachePeekMode cachePeekMode);1547480087;The {@link CachePeekMode}, only needed for operations that require it ({@link IgniteCacheOperation#SIZE}).__@param cachePeekMode;public void setCachePeekMode(CachePeekMode cachePeekMode) {_        this.cachePeekMode = cachePeekMode__    };the,link,cache,peek,mode,only,needed,for,operations,that,require,it,link,ignite,cache,operation,size,param,cache,peek,mode;public,void,set,cache,peek,mode,cache,peek,mode,cache,peek,mode,this,cache,peek,mode,cache,peek,mode
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1450886210;Sets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };sets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1453292975;Sets whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };sets,whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1492766412;Whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1492766412;Whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1499717928;Whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1521541903;Whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1547240981;Whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1547241310;Whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
IgniteCacheEndpoint -> public void setOneExchangePerUpdate(boolean oneExchangePerUpdate);1547480087;Whether to pack each update in an individual Exchange, even if multiple updates are_received in one batch. Only used by the Continuous Query Consumer.__@param oneExchangePerUpdate;public void setOneExchangePerUpdate(boolean oneExchangePerUpdate) {_        this.oneExchangePerUpdate = oneExchangePerUpdate__    };whether,to,pack,each,update,in,an,individual,exchange,even,if,multiple,updates,are,received,in,one,batch,only,used,by,the,continuous,query,consumer,param,one,exchange,per,update;public,void,set,one,exchange,per,update,boolean,one,exchange,per,update,this,one,exchange,per,update,one,exchange,per,update
