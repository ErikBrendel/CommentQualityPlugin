commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new IgniteComputeProducer(this). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("The Ignite Compute endpoint does not support consumers."). }
false;public;0;14;;public IgniteCompute createIgniteCompute() {     Ignite ignite = ignite().     IgniteCompute compute = clusterGroupExpression == null ? ignite.compute() : ignite.compute(clusterGroupExpression.getClusterGroup(ignite)).     if (computeName != null) {         compute = compute.withName(computeName).     }     if (timeoutMillis != null) {         compute = compute.withTimeout(timeoutMillis).     }     return compute. }
true;public;0;3;/**  * Gets the endpoint ID.  *  * @return endpoint ID (not used)  */ ;/**  * Gets the endpoint ID.  *  * @return endpoint ID (not used)  */ public String getEndpointId() {     return endpointId. }
true;public;1;3;/**  * The endpoint ID (not used).  *  * @param endpointId endpoint ID (not used)  */ ;/**  * The endpoint ID (not used).  *  * @param endpointId endpoint ID (not used)  */ public void setEndpointId(String endpointId) {     this.endpointId = endpointId. }
true;public;0;3;/**  * Gets the cluster group expression.  *  * @return cluster group expression  */ ;/**  * Gets the cluster group expression.  *  * @return cluster group expression  */ public ClusterGroupExpression getClusterGroupExpression() {     return clusterGroupExpression. }
true;public;1;3;/**  * An expression that returns the Cluster Group for the IgniteCompute instance.  *  * @param clusterGroupExpression cluster group expression  */ ;/**  * An expression that returns the Cluster Group for the IgniteCompute instance.  *  * @param clusterGroupExpression cluster group expression  */ public void setClusterGroupExpression(ClusterGroupExpression clusterGroupExpression) {     this.clusterGroupExpression = clusterGroupExpression. }
true;public;0;3;/**  * Gets the execution type of this producer.  *  * @return  */ ;/**  * Gets the execution type of this producer.  *  * @return  */ public IgniteComputeExecutionType getExecutionType() {     return executionType. }
true;public;1;3;/**  * The compute operation to perform. Possible values: CALL, BROADCAST, APPLY,  *  EXECUTE, RUN, AFFINITY_CALL, AFFINITY_RUN.  * The component expects different payload types depending on the operation.  *  * @param executionType  */ ;/**  * The compute operation to perform. Possible values: CALL, BROADCAST, APPLY,  *  EXECUTE, RUN, AFFINITY_CALL, AFFINITY_RUN.  * The component expects different payload types depending on the operation.  *  * @param executionType  */ public void setExecutionType(IgniteComputeExecutionType executionType) {     this.executionType = executionType. }
true;public;0;3;/**  * Gets the task name, only applicable if using the {@link IgniteComputeExecutionType#EXECUTE} execution type.  *  * @return  */ ;/**  * Gets the task name, only applicable if using the {@link IgniteComputeExecutionType#EXECUTE} execution type.  *  * @return  */ public String getTaskName() {     return taskName. }
true;public;1;3;/**  * The task name, only applicable if using the {@link IgniteComputeExecutionType#EXECUTE} execution type.  *  * @param taskName  */ ;/**  * The task name, only applicable if using the {@link IgniteComputeExecutionType#EXECUTE} execution type.  *  * @param taskName  */ public void setTaskName(String taskName) {     this.taskName = taskName. }
true;public;0;3;/**  * Gets the name of the compute job, which will be set via {@link IgniteCompute#withName(String)}.  *  * @return  */ ;/**  * Gets the name of the compute job, which will be set via {@link IgniteCompute#withName(String)}.  *  * @return  */ public String getComputeName() {     return computeName. }
true;public;1;3;/**  * The name of the compute job, which will be set via {@link IgniteCompute#withName(String)}.  *  * @param computeName  */ ;/**  * The name of the compute job, which will be set via {@link IgniteCompute#withName(String)}.  *  * @param computeName  */ public void setComputeName(String computeName) {     this.computeName = computeName. }
true;public;0;3;/**  * Gets the timeout interval for triggered jobs, in milliseconds, which will be set via {@link IgniteCompute#withTimeout(long)}.  *  * @return  */ ;/**  * Gets the timeout interval for triggered jobs, in milliseconds, which will be set via {@link IgniteCompute#withTimeout(long)}.  *  * @return  */ public Long getTimeoutMillis() {     return timeoutMillis. }
true;public;1;3;/**  * The timeout interval for triggered jobs, in milliseconds, which will be set via {@link IgniteCompute#withTimeout(long)}.  *  * @param timeoutMillis  */ ;/**  * The timeout interval for triggered jobs, in milliseconds, which will be set via {@link IgniteCompute#withTimeout(long)}.  *  * @param timeoutMillis  */ public void setTimeoutMillis(Long timeoutMillis) {     this.timeoutMillis = timeoutMillis. }
