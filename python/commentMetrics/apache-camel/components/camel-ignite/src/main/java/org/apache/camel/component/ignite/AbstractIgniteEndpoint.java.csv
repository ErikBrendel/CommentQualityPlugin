commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;protected;0;6;;protected AbstractIgniteComponent igniteComponent() {     if (component == null) {         component = (AbstractIgniteComponent) getComponent().     }     return component. }
false;protected;0;3;;protected Ignite ignite() {     return igniteComponent().getIgnite(). }
true;public;0;3;/**  * Gets whether to propagate the incoming body if the return type of the underlying  * Ignite operation is void.  *  * @return  */ ;/**  * Gets whether to propagate the incoming body if the return type of the underlying  * Ignite operation is void.  *  * @return  */ public boolean isPropagateIncomingBodyIfNoReturnValue() {     return propagateIncomingBodyIfNoReturnValue. }
true;public;1;3;/**  * Sets whether to propagate the incoming body if the return type of the underlying  * Ignite operation is void.  *  * @param propagateIncomingBodyIfNoReturnValue  */ ;/**  * Sets whether to propagate the incoming body if the return type of the underlying  * Ignite operation is void.  *  * @param propagateIncomingBodyIfNoReturnValue  */ public void setPropagateIncomingBodyIfNoReturnValue(boolean propagateIncomingBodyIfNoReturnValue) {     this.propagateIncomingBodyIfNoReturnValue = propagateIncomingBodyIfNoReturnValue. }
true;public;0;3;/**  * Gets whether to treat Collections as cache objects or as Collections of items to  * insert/update/compute, etc.  *  * @return  */ ;/**  * Gets whether to treat Collections as cache objects or as Collections of items to  * insert/update/compute, etc.  *  * @return  */ public boolean isTreatCollectionsAsCacheObjects() {     return treatCollectionsAsCacheObjects. }
true;public;1;3;/**  * Sets whether to treat Collections as cache objects or as Collections of items to  * insert/update/compute, etc.  *  * @param treatCollectionsAsCacheObjects  */ ;/**  * Sets whether to treat Collections as cache objects or as Collections of items to  * insert/update/compute, etc.  *  * @param treatCollectionsAsCacheObjects  */ public void setTreatCollectionsAsCacheObjects(boolean treatCollectionsAsCacheObjects) {     this.treatCollectionsAsCacheObjects = treatCollectionsAsCacheObjects. }
