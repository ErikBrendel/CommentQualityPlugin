commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("The Ignite Events endpoint does not support producers."). }
false;public;1;11;;@Override public Consumer createConsumer(Processor processor) throws Exception {     // Initialize the Consumer.     IgniteEvents events = createIgniteEvents().     IgniteEventsConsumer consumer = new IgniteEventsConsumer(this, processor, events).     configureConsumer(consumer).     log.info("Created Ignite Events consumer for event types: {}.", events).     return consumer. }
false;private;0;13;;private IgniteEvents createIgniteEvents() {     Ignite ignite = ignite().     IgniteEvents events.     if (clusterGroupExpression == null) {         log.info("Ignite Events endpoint for event types {} using no Cluster Group.", this.events).         events = ignite.events().     } else {         ClusterGroup group = clusterGroupExpression.getClusterGroup(ignite).         log.info("Ignite Events endpoint for event types {} using Cluster Group: {}.", this.events, group).         events = ignite.events(group).     }     return events. }
true;public;0;3;/**  * Gets the endpoint ID (not used).  *  * @return endpoint ID (not used)  */ ;/**  * Gets the endpoint ID (not used).  *  * @return endpoint ID (not used)  */ public String getEndpointId() {     return endpointId. }
true;public;1;3;/**  * The endpoint ID (not used).  *  * @param endpointId endpoint ID (not used)  */ ;/**  * The endpoint ID (not used).  *  * @param endpointId endpoint ID (not used)  */ public void setEndpointId(String endpointId) {     this.endpointId = endpointId. }
true;public;0;3;/**  * Gets the event types to subscribe to.  *  * @return  */ ;/**  * Gets the event types to subscribe to.  *  * @return  */ public Set<Integer> getEvents() {     return events. }
true;public;1;3;/**  * The event IDs to subscribe to as a Set<Integer> directly where  * the IDs are the different constants in org.apache.ignite.events.EventType.  *  * @param events  */ ;/**  * The event IDs to subscribe to as a Set<Integer> directly where  * the IDs are the different constants in org.apache.ignite.events.EventType.  *  * @param events  */ public void setEvents(Set<Integer> events) {     this.events = events. }
true;public;1;15;/**  * The event types to subscribe to as a comma-separated string of event constants as defined in {@link EventType}.  * <p>  * For example: EVT_CACHE_ENTRY_CREATED,EVT_CACHE_OBJECT_REMOVED,EVT_IGFS_DIR_CREATED.  *  * @param events  */ ;/**  * The event types to subscribe to as a comma-separated string of event constants as defined in {@link EventType}.  * <p>  * For example: EVT_CACHE_ENTRY_CREATED,EVT_CACHE_OBJECT_REMOVED,EVT_IGFS_DIR_CREATED.  *  * @param events  */ public void setEvents(String events) {     this.events = new HashSet<>().     Set<String> requestedEvents = new HashSet<>(Arrays.asList(events.toUpperCase().split(","))).     Field[] fields = EventType.class.getDeclaredFields().     for (Field field : fields) {         if (!requestedEvents.contains(field.getName())) {             continue.         }         try {             this.events.add(field.getInt(null)).         } catch (Exception e) {             throw new IllegalArgumentException("Problem while resolving event type. See stacktrace.", e).         }     } }
true;public;0;3;/**  * Gets the cluster group expression.  *  * @return cluster group expression  */ ;/**  * Gets the cluster group expression.  *  * @return cluster group expression  */ public ClusterGroupExpression getClusterGroupExpression() {     return clusterGroupExpression. }
true;public;1;3;/**  * The cluster group expression.  *  * @param clusterGroupExpression cluster group expression  */ ;/**  * The cluster group expression.  *  * @param clusterGroupExpression cluster group expression  */ public void setClusterGroupExpression(ClusterGroupExpression clusterGroupExpression) {     this.clusterGroupExpression = clusterGroupExpression. }
