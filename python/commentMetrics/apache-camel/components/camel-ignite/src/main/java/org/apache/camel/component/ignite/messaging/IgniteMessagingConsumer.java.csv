commented;modifiers;parameterAmount;loc;comment;code
false;public;2;17;;@Override public boolean apply(UUID uuid, Object payload) {     Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly).     Message in = exchange.getIn().     in.setBody(payload).     in.setHeader(IgniteConstants.IGNITE_MESSAGING_TOPIC, endpoint.getTopic()).     in.setHeader(IgniteConstants.IGNITE_MESSAGING_UUID, uuid).     try {         if (log.isTraceEnabled()) {             log.trace("Processing Ignite message for subscription {} with payload {}.", uuid, payload).         }         getProcessor().process(exchange).     } catch (Exception e) {         log.error(String.format("Exception while processing Ignite Message from topic %s", endpoint.getTopic()), e).     }     return true. }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     messaging.localListen(endpoint.getTopic(), predicate).     log.info("Started Ignite Messaging consumer for topic {}.", endpoint.getTopic()). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     super.doStop().     messaging.stopLocalListen(endpoint.getTopic(), predicate).     log.info("Stopped Ignite Messaging consumer for topic {}.", endpoint.getTopic()). }
