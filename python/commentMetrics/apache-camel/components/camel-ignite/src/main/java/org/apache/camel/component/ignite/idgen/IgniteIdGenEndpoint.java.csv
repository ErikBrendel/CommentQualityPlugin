commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public Producer createProducer() throws Exception {     IgniteAtomicSequence atomicSeq = ignite().atomicSequence(name, initialValue, false).     if (atomicSeq == null) {         atomicSeq = ignite().atomicSequence(name, initialValue, true).         log.info("Created AtomicSequence of ID Generator with name {}.", name).     }     if (batchSize != null) {         atomicSeq.batchSize(batchSize).     }     return new IgniteIdGenProducer(this, atomicSeq). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("The Ignite Id Generator endpoint doesn't support consumers."). }
true;public;0;3;/**  * Gets the name.  *  * @return name  */ ;/**  * Gets the name.  *  * @return name  */ public String getName() {     return name. }
true;public;1;3;/**  * The sequence name.  *  * @param name name  */ ;/**  * The sequence name.  *  * @param name name  */ public void setName(String name) {     this.name = name. }
true;public;0;3;/**  * Gets the initial value.  *  * @return initial value  */ ;/**  * Gets the initial value.  *  * @return initial value  */ public Long getInitialValue() {     return initialValue. }
true;public;1;3;/**  * The initial value.  *  * @param initialValue initial value  */ ;/**  * The initial value.  *  * @param initialValue initial value  */ public void setInitialValue(Long initialValue) {     this.initialValue = initialValue. }
true;public;0;3;/**  * Gets the operation.  *  * @return operation  */ ;/**  * Gets the operation.  *  * @return operation  */ public IgniteIdGenOperation getOperation() {     return operation. }
true;public;1;3;/**  * The operation to invoke on the Ignite ID Generator.  * Superseded by the IgniteConstants.IGNITE_IDGEN_OPERATION header in the IN message.  * Possible values: ADD_AND_GET, GET, GET_AND_ADD, GET_AND_INCREMENT, INCREMENT_AND_GET.  *  * @param operation operation  */ ;/**  * The operation to invoke on the Ignite ID Generator.  * Superseded by the IgniteConstants.IGNITE_IDGEN_OPERATION header in the IN message.  * Possible values: ADD_AND_GET, GET, GET_AND_ADD, GET_AND_INCREMENT, INCREMENT_AND_GET.  *  * @param operation operation  */ public void setOperation(IgniteIdGenOperation operation) {     this.operation = operation. }
true;public;0;3;/**  * Gets the batch size.  *  * @return batch size  */ ;/**  * Gets the batch size.  *  * @return batch size  */ public Integer getBatchSize() {     return batchSize. }
true;public;1;3;/**  * The batch size.  *  * @param batchSize batch size  */ ;/**  * The batch size.  *  * @param batchSize batch size  */ public void setBatchSize(Integer batchSize) {     this.batchSize = batchSize. }
