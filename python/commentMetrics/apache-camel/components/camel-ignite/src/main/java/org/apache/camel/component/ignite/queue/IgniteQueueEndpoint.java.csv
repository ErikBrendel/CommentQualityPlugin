commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public Producer createProducer() throws Exception {     IgniteQueue<Object> queue = ignite().queue(name, capacity, configuration).     return new IgniteQueueProducer(this, queue). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("The Ignite Queue endpoint doesn't support consumers."). }
true;public;0;3;/**  * Gets the queue name.  *  * @return  */ ;/**  * Gets the queue name.  *  * @return  */ public String getName() {     return name. }
true;public;1;3;/**  * The queue name.  *  * @param name  */ ;/**  * The queue name.  *  * @param name  */ public void setName(String name) {     this.name = name. }
true;public;0;3;/**  * Gets the queue operation to perform.  *  * @return  */ ;/**  * Gets the queue operation to perform.  *  * @return  */ public IgniteQueueOperation getOperation() {     return operation. }
true;public;1;3;/**  * The operation to invoke on the Ignite Queue.  * Superseded by the IgniteConstants.IGNITE_QUEUE_OPERATION header in the IN message.  * Possible values: CONTAINS, ADD, SIZE, REMOVE, ITERATOR, CLEAR, RETAIN_ALL, ARRAY, DRAIN, ELEMENT, PEEK, OFFER, POLL, TAKE, PUT.  *  * @param operation  */ ;/**  * The operation to invoke on the Ignite Queue.  * Superseded by the IgniteConstants.IGNITE_QUEUE_OPERATION header in the IN message.  * Possible values: CONTAINS, ADD, SIZE, REMOVE, ITERATOR, CLEAR, RETAIN_ALL, ARRAY, DRAIN, ELEMENT, PEEK, OFFER, POLL, TAKE, PUT.  *  * @param operation  */ public void setOperation(IgniteQueueOperation operation) {     this.operation = operation. }
true;public;0;3;/**  * Gets the queue capacity. Default: non-bounded.  *  * @return  */ ;/**  * Gets the queue capacity. Default: non-bounded.  *  * @return  */ public int getCapacity() {     return capacity. }
true;public;1;3;/**  * The queue capacity. Default: non-bounded.  *  * @param capacity  */ ;/**  * The queue capacity. Default: non-bounded.  *  * @param capacity  */ public void setCapacity(int capacity) {     this.capacity = capacity. }
true;public;0;3;/**  * Gets the collection configuration. Default: empty configuration.  *  * @return  */ ;/**  * Gets the collection configuration. Default: empty configuration.  *  * @return  */ public CollectionConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * The collection configuration. Default: empty configuration.  * <p>  * You can also conveniently set inner properties by using <tt>configuration.xyz=123</tt> options.  *  * @param configuration  */ ;/**  * The collection configuration. Default: empty configuration.  * <p>  * You can also conveniently set inner properties by using <tt>configuration.xyz=123</tt> options.  *  * @param configuration  */ public void setConfiguration(CollectionConfiguration configuration) {     this.configuration = configuration. }
true;public;0;3;/**  * Gets the queue timeout in milliseconds. Default: no timeout.  *  * @return  */ ;/**  * Gets the queue timeout in milliseconds. Default: no timeout.  *  * @return  */ public Long getTimeoutMillis() {     return timeoutMillis. }
true;public;1;3;/**  * The queue timeout in milliseconds. Default: no timeout.  *  * @param timeoutMillis  */ ;/**  * The queue timeout in milliseconds. Default: no timeout.  *  * @param timeoutMillis  */ public void setTimeoutMillis(Long timeoutMillis) {     this.timeoutMillis = timeoutMillis. }
