commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public Producer createProducer() throws Exception {     // Validate options.     if (topic == null) {         throw new IllegalStateException("Cannot initialize an Ignite Messaging Producer with a null topic.").     }     if (sendMode == IgniteMessagingSendMode.ORDERED && timeout == null) {         throw new IllegalStateException("Cannot initialize an Ignite Messaging Producer in ORDERED send mode without a timeout.").     }     // Initialize the Producer.     IgniteMessaging messaging = createIgniteMessaging().     return new IgniteMessagingProducer(this, igniteComponent().getIgnite(), messaging). }
false;public;1;13;;@Override public Consumer createConsumer(Processor processor) throws Exception {     // Validate options.     if (topic == null) {         throw new IllegalStateException("Cannot initialize an Ignite Messaging Consumer with a null topic.").     }     // Initialize the Consumer.     IgniteMessaging messaging = createIgniteMessaging().     IgniteMessagingConsumer consumer = new IgniteMessagingConsumer(this, processor, messaging).     configureConsumer(consumer).     return consumer. }
false;private;0;5;;private IgniteMessaging createIgniteMessaging() {     Ignite ignite = ignite().     IgniteMessaging messaging = clusterGroupExpression == null ? ignite.message() : ignite.message(clusterGroupExpression.getClusterGroup(ignite)).     return messaging. }
true;public;0;3;/**  * Gets the topic name.  *  * @return topic name  */ ;/**  * Gets the topic name.  *  * @return topic name  */ public String getTopic() {     return topic. }
true;public;1;3;/**  * The topic name.  *  * @param topic topic name  */ ;/**  * The topic name.  *  * @param topic topic name  */ public void setTopic(String topic) {     this.topic = topic. }
true;public;0;3;/**  * Gets the cluster group expression.  *  * @return cluster group expression  */ ;/**  * Gets the cluster group expression.  *  * @return cluster group expression  */ public ClusterGroupExpression getClusterGroupExpression() {     return clusterGroupExpression. }
true;public;1;3;/**  * The cluster group expression.  *  * @param clusterGroupExpression cluster group expression  */ ;/**  * The cluster group expression.  *  * @param clusterGroupExpression cluster group expression  */ public void setClusterGroupExpression(ClusterGroupExpression clusterGroupExpression) {     this.clusterGroupExpression = clusterGroupExpression. }
true;public;0;3;/**  * Gets the timeout.  *  * @return timeout  */ ;/**  * Gets the timeout.  *  * @return timeout  */ public Long getTimeout() {     return timeout. }
true;public;1;3;/**  * The timeout for the send operation when using ordered messages.  *  * @param timeout timeout  */ ;/**  * The timeout for the send operation when using ordered messages.  *  * @param timeout timeout  */ public void setTimeout(Long timeout) {     this.timeout = timeout. }
true;public;0;3;/**  * Gets the send mode.  *  * @return send mode  */ ;/**  * Gets the send mode.  *  * @return send mode  */ public IgniteMessagingSendMode getSendMode() {     return sendMode. }
true;public;1;3;/**  * The send mode to use.  * Possible values: UNORDERED, ORDERED.  *  * @param sendMode send mode  */ ;/**  * The send mode to use.  * Possible values: UNORDERED, ORDERED.  *  * @param sendMode send mode  */ public void setSendMode(IgniteMessagingSendMode sendMode) {     this.sendMode = sendMode. }
