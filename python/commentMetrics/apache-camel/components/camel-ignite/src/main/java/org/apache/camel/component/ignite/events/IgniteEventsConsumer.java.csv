commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void done(boolean doneSync) { // do nothing }
false;public;1;20;;@Override public boolean apply(Event event) {     Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly).     Message in = exchange.getIn().     in.setBody(event).     try {         if (log.isTraceEnabled()) {             log.trace("Processing Ignite Event: {}.", event).         }         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {             // do nothing             }         }).     } catch (Exception e) {         log.error(String.format("Exception while processing Ignite Event: %s.", event), e).     }     return true. }
false;protected;0;16;;@Override protected void doStart() throws Exception {     super.doStart().     if (endpoint.getEvents() != null && endpoint.getEvents().size() > 0) {         eventTypes = new int[endpoint.getEvents().size()].         int counter = 0.         for (Integer i : endpoint.getEvents()) {             eventTypes[counter++] = i.         }     }     events.localListen(predicate, eventTypes).     log.info("Started local Ignite Events consumer for events: {}.", Arrays.asList(eventTypes)). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     super.doStop().     events.stopLocalListen(predicate, eventTypes).     log.info("Stopped local Ignite Events consumer for events: {}.", Arrays.asList(eventTypes)). }
