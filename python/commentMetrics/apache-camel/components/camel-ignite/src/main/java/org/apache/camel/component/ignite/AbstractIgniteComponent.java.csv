commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;25;;@Override protected void doStart() throws Exception {     super.doStart().     if (lifecycleMode == IgniteLifecycleMode.USER_MANAGED) {         return.     }     // Try to load the configuration from the resource.     if (configurationResource != null) {         if (configurationResource instanceof URL) {             ignite = Ignition.start((URL) configurationResource).         } else if (configurationResource instanceof InputStream) {             ignite = Ignition.start((InputStream) configurationResource).         } else if (configurationResource instanceof String) {             ignite = Ignition.start((String) configurationResource).         } else {             throw new IllegalStateException("An unsupported configuration resource was provided to the Ignite component. " + "Supported types are: URL, InputStream, String.").         }     } else if (igniteConfiguration != null) {         ignite = Ignition.start(igniteConfiguration).     } else {         throw new IllegalStateException("No configuration resource or IgniteConfiguration was provided to the Ignite component.").     } }
false;protected;0;12;;@Override protected void doStop() throws Exception {     super.doStop().     if (lifecycleMode == IgniteLifecycleMode.USER_MANAGED) {         return.     }     if (ignite != null) {         ignite.close().     } }
true;public;0;3;/**  * Returns the {@link Ignite} instance.  */ ;/**  * Returns the {@link Ignite} instance.  */ public Ignite getIgnite() {     return ignite. }
true;public;1;4;/**  * Sets the {@link Ignite} instance.  */ ;/**  * Sets the {@link Ignite} instance.  */ public void setIgnite(Ignite ignite) {     this.ignite = ignite.     lifecycleMode = IgniteLifecycleMode.USER_MANAGED. }
true;public;0;3;/**  * Gets the resource from where to load the configuration. It can be a: {@link URI}, {@link String} (URI)  * or an {@link InputStream}.  */ ;/**  * Gets the resource from where to load the configuration. It can be a: {@link URI}, {@link String} (URI)  * or an {@link InputStream}.  */ public Object getConfigurationResource() {     return configurationResource. }
true;public;1;3;/**  * Sets the resource from where to load the configuration. It can be a: {@link URI}, {@link String} (URI)  * or an {@link InputStream}.  */ ;/**  * Sets the resource from where to load the configuration. It can be a: {@link URI}, {@link String} (URI)  * or an {@link InputStream}.  */ public void setConfigurationResource(Object configurationResource) {     this.configurationResource = configurationResource. }
true;public;0;3;/**  * Gets the {@link IgniteConfiguration} if the user set it explicitly.  */ ;/**  * Gets the {@link IgniteConfiguration} if the user set it explicitly.  */ public IgniteConfiguration getIgniteConfiguration() {     return igniteConfiguration. }
true;public;1;3;/**  * Allows the user to set a programmatic {@link IgniteConfiguration}.  */ ;/**  * Allows the user to set a programmatic {@link IgniteConfiguration}.  */ public void setIgniteConfiguration(IgniteConfiguration igniteConfiguration) {     this.igniteConfiguration = igniteConfiguration. }
