commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getScheme() {     return "ignite-set". }
false;protected;0;4;;@Override protected AbstractIgniteComponent createComponent() {     return IgniteSetComponent.fromConfiguration(createConfiguration()). }
false;public;0;17;;@Test public void testOperations() {     boolean result = template.requestBody("ignite-set:abc?operation=ADD", "hello", boolean.class).     assert_().that(result).isTrue().     assert_().that(ignite().set("abc", new CollectionConfiguration()).contains("hello")).isTrue().     result = template.requestBody("ignite-set:abc?operation=CONTAINS", "hello", boolean.class).     assert_().that(result).isTrue().     assert_().that(ignite().set("abc", new CollectionConfiguration()).contains("hello")).isTrue().     result = template.requestBody("ignite-set:abc?operation=REMOVE", "hello", boolean.class).     assert_().that(result).isTrue().     assert_().that(ignite().set("abc", new CollectionConfiguration()).contains("hello")).isFalse().     result = template.requestBody("ignite-set:abc?operation=CONTAINS", "hello", boolean.class).     assert_().that(result).isFalse(). }
false;public;0;44;;@Test @SuppressWarnings("unchecked") public void testOperations2() {     for (int i = 0. i < 100. i++) {         template.requestBody("ignite-set:abc?operation=ADD", "hello" + i).     }     // SIZE     int size = template.requestBody("ignite-set:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(100).     assert_().that(ignite().set("abc", new CollectionConfiguration()).size()).isEqualTo(100).     List<String> toRetain = Lists.newArrayList().     for (int i = 0. i < 50. i++) {         toRetain.add("hello" + i).     }     // RETAIN_ALL     boolean retained = template.requestBodyAndHeader("ignite-set:abc?operation=CLEAR", toRetain, IgniteConstants.IGNITE_SETS_OPERATION, IgniteSetOperation.RETAIN_ALL, boolean.class).     assert_().that(retained).isTrue().     // SIZE     size = template.requestBody("ignite-set:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(50).     assert_().that(ignite().set("abc", new CollectionConfiguration()).size()).isEqualTo(50).     // ITERATOR     Iterator<String> iterator = template.requestBody("ignite-set:abc?operation=ITERATOR", "hello", Iterator.class).     assert_().that(Iterators.toArray(iterator, String.class)).asList().containsExactlyElementsIn(toRetain).     // ARRAY     String[] array = template.requestBody("ignite-set:abc?operation=ARRAY", "hello", String[].class).     assert_().that(array).asList().containsExactlyElementsIn(toRetain).     // CLEAR     Object result = template.requestBody("ignite-set:abc?operation=CLEAR", "hello", String.class).     assert_().that(result).isEqualTo("hello").     assert_().that(ignite().set("abc", new CollectionConfiguration()).size()).isEqualTo(0).     // SIZE     size = template.requestBody("ignite-set:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(0).     assert_().that(ignite().set("abc", new CollectionConfiguration()).size()).isEqualTo(0). }
false;public;0;14;;@Test public void testRetainSingle() {     // Fill data.     for (int i = 0. i < 100. i++) {         template.requestBody("ignite-set:abc?operation=ADD", "hello" + i).     }     boolean retained = template.requestBody("ignite-set:abc?operation=RETAIN_ALL", "hello10", boolean.class).     assert_().that(retained).isTrue().     // ARRAY     String[] array = template.requestBody("ignite-set:abc?operation=ARRAY", "hello", String[].class).     assert_().that(array).asList().containsExactly("hello10"). }
false;public;0;31;;@Test public void testCollectionsAsCacheObject() {     // Fill data.     for (int i = 0. i < 100. i++) {         template.requestBody("ignite-set:abc?operation=ADD", "hello" + i).     }     // Add the set.     Set<String> toAdd = Sets.newHashSet("hello101", "hello102", "hello103").     template.requestBody("ignite-set:abc?operation=ADD&treatCollectionsAsCacheObjects=true", toAdd).     // Size must be 101, not 103.     int size = template.requestBody("ignite-set:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(101).     assert_().that(ignite().set("abc", new CollectionConfiguration()).size()).isEqualTo(101).     assert_().that(ignite().set("abc", new CollectionConfiguration()).contains(toAdd)).isTrue().     // Check whether the Set contains the Set.     boolean contains = template.requestBody("ignite-set:abc?operation=CONTAINS&treatCollectionsAsCacheObjects=true", toAdd, boolean.class).     assert_().that(contains).isTrue().     // Delete the Set.     template.requestBody("ignite-set:abc?operation=REMOVE&treatCollectionsAsCacheObjects=true", toAdd).     // Size must be 100 again.     size = template.requestBody("ignite-set:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(100).     assert_().that(ignite().set("abc", new CollectionConfiguration()).size()).isEqualTo(100).     assert_().that(ignite().set("abc", new CollectionConfiguration()).contains(toAdd)).isFalse(). }
false;public;0;14;;@Test public void testWithConfiguration() {     CollectionConfiguration configuration = new CollectionConfiguration().     configuration.setCacheMode(CacheMode.PARTITIONED).     context.getRegistry().bind("config", configuration).     IgniteSetEndpoint igniteEndpoint = context.getEndpoint("ignite-" + "set:abc?operation=ADD&configuration=#config", IgniteSetEndpoint.class).     template.requestBody(igniteEndpoint, "hello").     assert_().that(ignite().set("abc", configuration).size()).isEqualTo(1).     assert_().that(igniteEndpoint.getConfiguration()).isEqualTo(configuration). }
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;6;;@After public void deleteSets() {     for (String setName : ImmutableSet.<String>of("abc")) {         ignite().set(setName, new CollectionConfiguration()).close().     } }
