commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getScheme() {     return "ignite-queue". }
false;protected;0;4;;@Override protected AbstractIgniteComponent createComponent() {     return IgniteQueueComponent.fromConfiguration(createConfiguration()). }
false;public;0;17;;@Test public void testOperations() {     boolean result = template.requestBody("ignite-queue:abc?operation=ADD", "hello", boolean.class).     assert_().that(result).isTrue().     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).contains("hello")).isTrue().     result = template.requestBody("ignite-queue:abc?operation=CONTAINS", "hello", boolean.class).     assert_().that(result).isTrue().     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).contains("hello")).isTrue().     result = template.requestBody("ignite-queue:abc?operation=REMOVE", "hello", boolean.class).     assert_().that(result).isTrue().     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).contains("hello")).isFalse().     result = template.requestBody("ignite-queue:abc?operation=CONTAINS", "hello", boolean.class).     assert_().that(result).isFalse(). }
false;public;0;44;;@Test @SuppressWarnings("unchecked") public void testOperations2() {     for (int i = 0. i < 100. i++) {         template.requestBody("ignite-queue:abc?operation=ADD", "hello" + i).     }     // SIZE     int size = template.requestBody("ignite-queue:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(100).     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).size()).isEqualTo(100).     List<String> toRetain = Lists.newArrayList().     for (int i = 0. i < 50. i++) {         toRetain.add("hello" + i).     }     // RETAIN_ALL     boolean retained = template.requestBodyAndHeader("ignite-queue:abc?operation=CLEAR", toRetain, IgniteConstants.IGNITE_QUEUE_OPERATION, IgniteQueueOperation.RETAIN_ALL, boolean.class).     assert_().that(retained).isTrue().     // SIZE     size = template.requestBody("ignite-queue:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(50).     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).size()).isEqualTo(50).     // ITERATOR     Iterator<String> iterator = template.requestBody("ignite-queue:abc?operation=ITERATOR", "hello", Iterator.class).     assert_().that(Iterators.toArray(iterator, String.class)).asList().containsExactlyElementsIn(toRetain).inOrder().     // ARRAY     String[] array = template.requestBody("ignite-queue:abc?operation=ARRAY", "hello", String[].class).     assert_().that(array).asList().containsExactlyElementsIn(toRetain).inOrder().     // CLEAR     Object result = template.requestBody("ignite-queue:abc?operation=CLEAR", "hello", String.class).     assert_().that(result).isEqualTo("hello").     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).size()).isEqualTo(0).     // SIZE     size = template.requestBody("ignite-queue:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(0).     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).size()).isEqualTo(0). }
false;public;0;14;;@Test public void testRetainSingle() {     // Fill data.     for (int i = 0. i < 100. i++) {         template.requestBody("ignite-queue:abc?operation=ADD", "hello" + i).     }     boolean retained = template.requestBody("ignite-queue:abc?operation=RETAIN_ALL", "hello10", boolean.class).     assert_().that(retained).isTrue().     // ARRAY     String[] array = template.requestBody("ignite-queue:abc?operation=ARRAY", "hello", String[].class).     assert_().that(array).asList().containsExactly("hello10"). }
false;public;0;31;;@Test public void testCollectionsAsCacheObject() {     // Fill data.     for (int i = 0. i < 100. i++) {         template.requestBody("ignite-queue:abc?operation=ADD", "hello" + i).     }     // Add the set.     Set<String> toAdd = Sets.newHashSet("hello101", "hello102", "hello103").     template.requestBody("ignite-queue:abc?operation=ADD&treatCollectionsAsCacheObjects=true", toAdd).     // Size must be 101, not 103.     int size = template.requestBody("ignite-queue:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(101).     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).size()).isEqualTo(101).     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).contains(toAdd)).isTrue().     // Check whether the Set contains the Set.     boolean contains = template.requestBody("ignite-queue:abc?operation=CONTAINS&treatCollectionsAsCacheObjects=true", toAdd, boolean.class).     assert_().that(contains).isTrue().     // Delete the Set.     template.requestBody("ignite-queue:abc?operation=REMOVE&treatCollectionsAsCacheObjects=true", toAdd).     // Size must be 100 again.     size = template.requestBody("ignite-queue:abc?operation=SIZE", "hello", int.class).     assert_().that(size).isEqualTo(100).     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).size()).isEqualTo(100).     assert_().that(ignite().queue("abc", 0, new CollectionConfiguration()).contains(toAdd)).isFalse(). }
false;public;0;13;;@Test public void testWithConfiguration() {     CollectionConfiguration configuration = new CollectionConfiguration().     configuration.setCacheMode(CacheMode.PARTITIONED).     context.getRegistry().bind("config", configuration).     IgniteQueueEndpoint igniteEndpoint = context.getEndpoint("ignite-queue:abc?operation=ADD&configuration=#config", IgniteQueueEndpoint.class).     template.requestBody(igniteEndpoint, "hello").     assert_().that(ignite().queue("abc", 0, configuration).size()).isEqualTo(1).     assert_().that(igniteEndpoint.getConfiguration()).isEqualTo(configuration). }
false;public;0;5;;@Override public void run() {     assert_().that(template.requestBody("ignite-queue:def?operation=PUT&capacity=100", "hello101", boolean.class)).isFalse().     latch.countDown(). }
false;public;0;5;;@Override public void run() {     assert_().that(template.requestBody("ignite-queue:def?operation=TAKE&capacity=100", null, String.class)).isEqualTo("hello102").     latch.countDown(). }
false;public;0;6;;@Override public Long call() throws Exception {     Stopwatch sw = Stopwatch.createStarted().     assert_().that(template.requestBody("ignite-queue:def?operation=POLL&timeoutMillis=1000&capacity=100", null, String.class)).isNull().     return sw.elapsed(TimeUnit.MILLISECONDS). }
false;public;0;68;;@Test public void testBoundedQueueAndOtherOperations() throws Exception {     List<String> list = Lists.newArrayList().     // Fill data.     for (int i = 0. i < 100. i++) {         template.requestBody("ignite-queue:def?operation=ADD&capacity=100", "hello" + i).         list.add("hello" + i).     }     // NOTE: Unfortunately the behaviour of IgniteQueue doesn't adhere to the overridden ADD method. It should return an Exception.     assert_().that(template.requestBody("ignite-queue:def?operation=ADD&capacity=100", "hello101", boolean.class)).isFalse().     assert_().that(template.requestBody("ignite-queue:def?operation=OFFER&capacity=100", "hello101", boolean.class)).isFalse().     final CountDownLatch latch = new CountDownLatch(1).     Thread t = new Thread(new Runnable() {          @Override         public void run() {             assert_().that(template.requestBody("ignite-queue:def?operation=PUT&capacity=100", "hello101", boolean.class)).isFalse().             latch.countDown().         }     }).     t.start().     // Wait 2 seconds and check that the thread was blocked.     assert_().that(latch.await(2000, TimeUnit.MILLISECONDS)).isFalse().     t.interrupt().     // PEEK and ELEMENT.     assert_().that(template.requestBody("ignite-queue:def?operation=PEEK&capacity=100", null, String.class)).isEqualTo("hello0").     assert_().that(template.requestBody("ignite-queue:def?operation=ELEMENT&capacity=100", null, String.class)).isEqualTo("hello0").     // TAKE.     assert_().that(template.requestBody("ignite-queue:def?operation=TAKE&capacity=100", null, String.class)).isEqualTo("hello0").     assert_().that(template.requestBody("ignite-queue:def?operation=SIZE&capacity=100", null, int.class)).isEqualTo(99).     // Now drain.     assert_().that(template.requestBody("ignite-queue:def?operation=DRAIN&capacity=100", null, String[].class)).asList().hasSize(99).     assert_().that(template.requestBody("ignite-queue:def?operation=SIZE&capacity=100", null, int.class)).isEqualTo(0).     assert_().that(template.requestBody("ignite-queue:def?operation=POLL&capacity=100", null, String.class)).isNull().     // TAKE.     t = new Thread(new Runnable() {          @Override         public void run() {             assert_().that(template.requestBody("ignite-queue:def?operation=TAKE&capacity=100", null, String.class)).isEqualTo("hello102").             latch.countDown().         }     }).     t.start().     // Element was returned.     assert_().that(template.requestBody("ignite-queue:def?operation=ADD&capacity=100", "hello102", boolean.class)).isTrue().     assert_().that(latch.await(1000, TimeUnit.MILLISECONDS)).isTrue().     // POLL with a timeout.     assert_().that(Executors.newSingleThreadExecutor().submit(new Callable<Long>() {          @Override         public Long call() throws Exception {             Stopwatch sw = Stopwatch.createStarted().             assert_().that(template.requestBody("ignite-queue:def?operation=POLL&timeoutMillis=1000&capacity=100", null, String.class)).isNull().             return sw.elapsed(TimeUnit.MILLISECONDS).         }     }).get()).isAtLeast(1000L). }
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;11;;@After public void deleteQueues() {     for (String queueName : ImmutableSet.<String>of("abc")) {         ignite().queue(queueName, 0, new CollectionConfiguration()).close().     }     // Bounded queues.     for (String queueName : ImmutableSet.<String>of("def")) {         ignite().queue(queueName, 100, new CollectionConfiguration()).close().     } }
