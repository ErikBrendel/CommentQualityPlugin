commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getScheme() {     return "ignite-cache". }
false;protected;0;4;;@Override protected AbstractIgniteComponent createComponent() {     return IgniteCacheComponent.fromConfiguration(createConfiguration()). }
false;public;0;19;;@Test public void testContinuousQueryDoNotFireExistingEntries() throws Exception {     context.getRouteController().startRoute("continuousQuery").     getMockEndpoint("mock:test1").expectedMessageCount(100).     Map<Integer, Person> persons = createPersons(1, 100).     IgniteCache<Integer, Person> cache = ignite().getOrCreateCache("testcontinuous1").     cache.putAll(persons).     assertMockEndpointsSatisfied().     for (Exchange exchange : getMockEndpoint("mock:test1").getExchanges()) {         assert_().that(exchange.getIn().getHeader(IgniteConstants.IGNITE_CACHE_NAME)).isEqualTo("testcontinuous1").         assert_().that(exchange.getIn().getHeader(IgniteConstants.IGNITE_CACHE_EVENT_TYPE)).isEqualTo(EventType.CREATED).         assert_().that(exchange.getIn().getHeader(IgniteConstants.IGNITE_CACHE_KEY)).isIn(persons.keySet()).         assert_().that(exchange.getIn().getBody()).isIn(persons.values()).     } }
false;public;0;21;;@Test public void testContinuousQueryFireExistingEntriesWithQuery() throws Exception {     getMockEndpoint("mock:test2").expectedMessageCount(50).     Map<Integer, Person> persons = createPersons(1, 100).     IgniteCache<Integer, Person> cache = ignite().getOrCreateCache("testcontinuous1").     cache.putAll(persons).     context.getRouteController().startRoute("continuousQuery.fireExistingEntries").     assertMockEndpointsSatisfied().     resetMocks().     getMockEndpoint("mock:test2").expectedMessageCount(100).     persons = createPersons(101, 100).     cache.putAll(persons).     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Test public void testContinuousQueryFireExistingEntriesWithQueryAndRemoteFilter() throws Exception {     getMockEndpoint("mock:test3").expectedMessageCount(50).     Map<Integer, Person> persons = createPersons(1, 100).     IgniteCache<Integer, Person> cache = ignite().getOrCreateCache("testcontinuous1").     cache.putAll(persons).     context.getRouteController().startRoute("remoteFilter").     assertMockEndpointsSatisfied().     resetMocks().     getMockEndpoint("mock:test3").expectedMessageCount(50).     persons = createPersons(101, 100).     cache.putAll(persons).     assertMockEndpointsSatisfied(). }
false;public;0;20;;@Test public void testContinuousQueryGroupedUpdates() throws Exception {     // One hundred Iterables of 1 item each.     getMockEndpoint("mock:test4").expectedMessageCount(100).     context.getRouteController().startRoute("groupedUpdate").     Map<Integer, Person> persons = createPersons(1, 100).     IgniteCache<Integer, Person> cache = ignite().getOrCreateCache("testcontinuous1").     cache.putAll(persons).     assertMockEndpointsSatisfied().     for (Exchange exchange : getMockEndpoint("mock:test4").getExchanges()) {         assert_().that(exchange.getIn().getHeader(IgniteConstants.IGNITE_CACHE_NAME)).isEqualTo("testcontinuous1").         assert_().that(exchange.getIn().getBody()).isInstanceOf(Iterable.class).         assert_().that(Iterators.size(exchange.getIn().getBody(Iterable.class).iterator())).isEqualTo(1).     } }
false;public;0;11;;@Override public void configure() throws Exception {     from("ignite-cache:testcontinuous1?query=#query1").routeId("continuousQuery").noAutoStartup().to("mock:test1").     from("ignite-cache:testcontinuous1?query=#query1&fireExistingQueryResults=true").routeId("continuousQuery.fireExistingEntries").noAutoStartup().to("mock:test2").     from("ignite-cache:testcontinuous1?query=#query1&remoteFilter=#remoteFilter1&fireExistingQueryResults=true").routeId("remoteFilter").noAutoStartup().to("mock:test3").     from("ignite-cache:testcontinuous1?pageSize=10&oneExchangePerUpdate=false").routeId("groupedUpdate").noAutoStartup().to("mock:test4"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("ignite-cache:testcontinuous1?query=#query1").routeId("continuousQuery").noAutoStartup().to("mock:test1").             from("ignite-cache:testcontinuous1?query=#query1&fireExistingQueryResults=true").routeId("continuousQuery.fireExistingEntries").noAutoStartup().to("mock:test2").             from("ignite-cache:testcontinuous1?query=#query1&remoteFilter=#remoteFilter1&fireExistingQueryResults=true").routeId("remoteFilter").noAutoStartup().to("mock:test3").             from("ignite-cache:testcontinuous1?pageSize=10&oneExchangePerUpdate=false").routeId("groupedUpdate").noAutoStartup().to("mock:test4").         }     }. }
false;private;2;8;;private Map<Integer, Person> createPersons(int from, int count) {     Map<Integer, Person> answer = Maps.newHashMap().     int max = from + count.     for (int i = from. i < max. i++) {         answer.put(i, Person.create(i, "name" + i, "surname" + i)).     }     return answer. }
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;10;;@After public void deleteCaches() {     for (String cacheName : ImmutableSet.<String>of("testcontinuous1", "testcontinuous2", "testcontinuous3")) {         IgniteCache<?, ?> cache = ignite().cache(cacheName).         if (cache == null) {             continue.         }         cache.clear().     } }
false;public;0;11;;@After public void stopAllRoutes() throws Exception {     for (Route route : context.getRoutes()) {         if (context.getRouteController().getRouteStatus(route.getId()) != ServiceStatus.Started) {             return.         }         context.getRouteController().stopRoute(route.getId()).     }     resetMocks(). }
false;public;2;4;;@Override public boolean apply(Integer key, Person person) {     return person.getId() > 50. }
false;public;1;4;;@Override public boolean evaluate(CacheEntryEvent<? extends Integer, ? extends Person> event) throws CacheEntryListenerException {     return event.getValue().getId() > 150. }
false;protected;0;27;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry answer = super.createRegistry().     ScanQuery<Integer, Person> scanQuery1 = new ScanQuery<>(new IgniteBiPredicate<Integer, Person>() {          private static final long serialVersionUID = 1L.          @Override         public boolean apply(Integer key, Person person) {             return person.getId() > 50.         }     }).     CacheEntryEventSerializableFilter<Integer, Person> remoteFilter = new CacheEntryEventSerializableFilter<Integer, IgniteCacheContinuousQueryTest.Person>() {          private static final long serialVersionUID = 5624973479995548199L.          @Override         public boolean evaluate(CacheEntryEvent<? extends Integer, ? extends Person> event) throws CacheEntryListenerException {             return event.getValue().getId() > 150.         }     }.     answer.bind("query1", scanQuery1).     answer.bind("remoteFilter1", remoteFilter).     return answer. }
false;public,static;3;7;;public static Person create(Integer id, String name, String surname) {     Person p = new Person().     p.setId(id).     p.setName(name).     p.setSurname(surname).     return p. }
false;public;0;3;;public Integer getId() {     return id. }
false;public;1;3;;public void setId(Integer id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getSurname() {     return surname. }
false;public;1;3;;public void setSurname(String surname) {     this.surname = surname. }
false;public;0;9;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + ((id == null) ? 0 : id.hashCode()).     result = prime * result + ((name == null) ? 0 : name.hashCode()).     result = prime * result + ((surname == null) ? 0 : surname.hashCode()).     return result. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null || !(obj instanceof Person)) {         return false.     }     if (this == obj) {         return true.     }     Person other = (Person) obj.     return Objects.equals(this.id, other.id) && Objects.equals(this.name, other.name) && Objects.equals(this.surname, other.surname). }
