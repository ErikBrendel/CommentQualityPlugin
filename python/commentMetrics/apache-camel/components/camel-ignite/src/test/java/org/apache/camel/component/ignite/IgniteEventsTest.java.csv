commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getScheme() {     return "ignite-events". }
false;protected;0;4;;@Override protected AbstractIgniteComponent createComponent() {     return IgniteEventsComponent.fromConfiguration(createConfiguration()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("ignite-events:abc").to("mock:test1"). }
false;public;0;31;;@Test public void testConsumeAllEvents() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("ignite-events:abc").to("mock:test1").         }     }).     getMockEndpoint("mock:test1").expectedMinimumMessageCount(9).     IgniteCache<String, String> cache = ignite().getOrCreateCache("abc").     // Generate cache activity.     cache.put("abc", "123").     cache.get("abc").     cache.remove("abc").     cache.withExpiryPolicy(CreatedExpiryPolicy.factoryOf(new Duration(TimeUnit.MILLISECONDS, 100)).create()).put("abc", "123").     Thread.sleep(150).     cache.get("abc").     assertMockEndpointsSatisfied().     List<Integer> eventTypes = receivedEventTypes("mock:test1").     assert_().that(eventTypes).containsAllOf(EventType.EVT_CACHE_STARTED, EventType.EVT_CACHE_ENTRY_CREATED, EventType.EVT_CACHE_OBJECT_PUT, EventType.EVT_CACHE_OBJECT_READ, EventType.EVT_CACHE_OBJECT_REMOVED, EventType.EVT_CACHE_OBJECT_PUT, EventType.EVT_CACHE_OBJECT_EXPIRED).inOrder(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("ignite-events:abc?events=#filter").to("mock:test2"). }
false;public;0;28;;@Test public void testConsumeFilteredEventsWithRef() throws Exception {     context.getRegistry().bind("filter", Sets.newHashSet(EventType.EVT_CACHE_OBJECT_PUT)).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("ignite-events:abc?events=#filter").to("mock:test2").         }     }).     getMockEndpoint("mock:test2").expectedMessageCount(2).     IgniteCache<String, String> cache = ignite().getOrCreateCache("abc").     // Generate cache activity.     cache.put("abc", "123").     cache.get("abc").     cache.remove("abc").     cache.get("abc").     cache.put("abc", "123").     assertMockEndpointsSatisfied().     List<Integer> eventTypes = receivedEventTypes("mock:test2").     assert_().that(eventTypes).containsExactly(EventType.EVT_CACHE_OBJECT_PUT, EventType.EVT_CACHE_OBJECT_PUT).inOrder(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("ignite-events:abc?events=EVT_CACHE_OBJECT_PUT").to("mock:test3"). }
false;public;0;27;;@Test public void testConsumeFilteredEventsInline() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("ignite-events:abc?events=EVT_CACHE_OBJECT_PUT").to("mock:test3").         }     }).     getMockEndpoint("mock:test3").expectedMessageCount(2).     IgniteCache<String, String> cache = ignite().getOrCreateCache("abc").     // Generate cache activity.     cache.put("abc", "123").     cache.get("abc").     cache.remove("abc").     cache.get("abc").     cache.put("abc", "123").     assertMockEndpointsSatisfied().     List<Integer> eventTypes = receivedEventTypes("mock:test3").     assert_().that(eventTypes).containsExactly(EventType.EVT_CACHE_OBJECT_PUT, EventType.EVT_CACHE_OBJECT_PUT).inOrder(). }
false;public;1;4;;@Override public Integer apply(Exchange input) {     return input.getIn().getBody(Event.class).type(). }
false;private;1;9;;private List<Integer> receivedEventTypes(String mockEndpoint) {     List<Integer> eventTypes = Lists.newArrayList(Lists.transform(getMockEndpoint(mockEndpoint).getExchanges(), new Function<Exchange, Integer>() {          @Override         public Integer apply(Exchange input) {             return input.getIn().getBody(Event.class).type().         }     })).     return eventTypes. }
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;10;;@After public void stopAllRoutes() throws Exception {     for (Route route : context.getRoutes()) {         if (context.getRouteController().getRouteStatus(route.getId()) != ServiceStatus.Started) {             return.         }         context.getRouteController().stopRoute(route.getId()).     }     resetMocks(). }
false;protected;0;6;;@Override protected IgniteConfiguration createConfiguration() {     IgniteConfiguration config = new IgniteConfiguration().     config.setIncludeEventTypes(EventType.EVTS_ALL_MINUS_METRIC_UPDATE).     return config. }
