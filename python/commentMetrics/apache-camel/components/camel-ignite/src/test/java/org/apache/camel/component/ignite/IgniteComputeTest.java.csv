commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getScheme() {     return "ignite-compute". }
false;protected;0;4;;@Override protected AbstractIgniteComponent createComponent() {     return IgniteComputeComponent.fromConfiguration(createConfiguration()). }
false;public;0;11;;@Test public void testExecuteWithWrongPayload() {     try {         template.requestBody("ignite-compute:abc?executionType=EXECUTE", TestIgniteComputeResources.TEST_CALLABLE, String.class).     } catch (Exception e) {         assert_().that(ObjectHelper.getException(RuntimeCamelException.class, e).getMessage()).startsWith("Ignite Compute endpoint with EXECUTE").         return.     }     fail(). }
false;public;0;23;;@Test @SuppressWarnings("unchecked") public void testCall() {     TestIgniteComputeResources.COUNTER.set(0).     // Single Callable.     String result = template.requestBody("ignite-compute:abc?executionType=CALL", TestIgniteComputeResources.TEST_CALLABLE, String.class).     assert_().that(result).isEqualTo("hello").     // Collection of Callables.     Object[] callables = new Object[5].     Arrays.fill(callables, TestIgniteComputeResources.TEST_CALLABLE).     Collection<String> colResult = template.requestBody("ignite-compute:abc?executionType=CALL", Lists.newArrayList(callables), Collection.class).     assert_().that(colResult).containsExactly("hello", "hello", "hello", "hello", "hello").inOrder().     // Callables with a Reducer.     String reduced = template.requestBodyAndHeader("ignite-compute:abc?executionType=CALL", Lists.newArrayList(callables), IgniteConstants.IGNITE_COMPUTE_REDUCER, TestIgniteComputeResources.STRING_JOIN_REDUCER, String.class).     assert_().that(reduced).isEqualTo("hellohellohellohellohello"). }
false;public;0;16;;@Test public void testRun() {     TestIgniteComputeResources.COUNTER.set(0).     // Single Runnable.     Object result = template.requestBody("ignite-compute:abc?executionType=RUN", TestIgniteComputeResources.TEST_RUNNABLE_COUNTER, Object.class).     assert_().that(result).isNull().     assert_().that(TestIgniteComputeResources.COUNTER.get()).isEqualTo(1).     // Multiple Runnables.     Object[] runnables = new Object[5].     Arrays.fill(runnables, TestIgniteComputeResources.TEST_RUNNABLE_COUNTER).     result = template.requestBody("ignite-compute:abc?executionType=RUN", Lists.newArrayList(runnables), Collection.class).     assert_().that(result).isNull().     assert_().that(TestIgniteComputeResources.COUNTER.get()).isEqualTo(6). }
false;public;0;27;;@Test @SuppressWarnings("unchecked") public void testBroadcast() {     TestIgniteComputeResources.COUNTER.set(0).     startAdditionalGridInstance().     startAdditionalGridInstance().     ignite().events().enableLocal(EventType.EVT_JOB_FINISHED).     LISTENERS.add(ignite().events().remoteListen(null, TestIgniteComputeResources.EVENT_COUNTER, EventType.EVT_JOB_FINISHED)).     // Single Runnable.     Object result = template.requestBody("ignite-compute:abc?executionType=BROADCAST", TestIgniteComputeResources.TEST_RUNNABLE, Object.class).     assert_().that(result).isNull().     assert_().that(TestIgniteComputeResources.COUNTER.get()).isEqualTo(3).     // Single Callable.     Collection<String> colResult = template.requestBody("ignite-compute:abc?executionType=BROADCAST", TestIgniteComputeResources.TEST_CALLABLE, Collection.class).     assert_().that(colResult).isNotNull().     assert_().that(colResult).containsExactly("hello", "hello", "hello").inOrder().     // Single Closure.     colResult = template.requestBodyAndHeader("ignite-compute:abc?executionType=BROADCAST", TestIgniteComputeResources.TEST_CLOSURE, IgniteConstants.IGNITE_COMPUTE_PARAMS, "Camel", Collection.class).     assert_().that(colResult).isNotNull().     assert_().that(colResult).containsExactly("hello Camel", "hello Camel", "hello Camel").inOrder(). }
false;public;0;20;;@Test public void testExecute() {     TestIgniteComputeResources.COUNTER.set(0).     startAdditionalGridInstance().     startAdditionalGridInstance().     ignite().events().enableLocal(EventType.EVT_JOB_RESULTED).     LISTENERS.add(ignite().events().remoteListen(null, TestIgniteComputeResources.EVENT_COUNTER, EventType.EVT_JOB_RESULTED)).     // ComputeTask instance.     String result = template.requestBodyAndHeader("ignite-compute:abc?executionType=EXECUTE", TestIgniteComputeResources.COMPUTE_TASK, IgniteConstants.IGNITE_COMPUTE_PARAMS, 10, String.class).     assert_().that(result).isNotNull().     assert_().that(Splitter.on(",").splitToList(result)).containsAllOf("a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9").     // ComputeTask class.     result = template.requestBodyAndHeader("ignite-compute:abc?executionType=EXECUTE", TestIgniteComputeResources.COMPUTE_TASK.getClass(), IgniteConstants.IGNITE_COMPUTE_PARAMS, 10, String.class).     assert_().that(result).isNotNull().     assert_().that(Splitter.on(",").splitToList(result)).containsAllOf("a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"). }
false;public;0;20;;@Test @SuppressWarnings("unchecked") public void testApply() {     TestIgniteComputeResources.COUNTER.set(0).     // Closure with a single parameter.     String result = template.requestBodyAndHeader("ignite-compute:abc?executionType=APPLY", TestIgniteComputeResources.TEST_CLOSURE, IgniteConstants.IGNITE_COMPUTE_PARAMS, "Camel", String.class).     assert_().that(result).isEqualTo("hello Camel").     // Closure with a Collection of parameters.     Collection<String> colResult = template.requestBodyAndHeader("ignite-compute:abc?executionType=APPLY", TestIgniteComputeResources.TEST_CLOSURE, IgniteConstants.IGNITE_COMPUTE_PARAMS, Lists.newArrayList("Camel1", "Camel2", "Camel3"), Collection.class).     assert_().that(colResult).containsAllOf("hello Camel1", "hello Camel2", "hello Camel3").     // Closure with a Collection of parameters and a Reducer.     Map<String, Object> headers = ImmutableMap.<String, Object>of(IgniteConstants.IGNITE_COMPUTE_PARAMS, Lists.newArrayList("Camel1", "Camel2", "Camel3"), IgniteConstants.IGNITE_COMPUTE_REDUCER, TestIgniteComputeResources.STRING_JOIN_REDUCER).     result = template.requestBodyAndHeaders("ignite-compute:abc?executionType=APPLY", TestIgniteComputeResources.TEST_CLOSURE, headers, String.class).     assert_().that(result).isEqualTo("hello Camel1hello Camel2hello Camel3"). }
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;private;0;3;;private void startAdditionalGridInstance() {     ADDITIONAL_INSTANCES.add(Ignition.start(createConfiguration())). }
false;public;0;7;;@After public void stopAdditionalIgniteInstances() {     for (Ignite ignite : ADDITIONAL_INSTANCES) {         ignite.close().     }     ADDITIONAL_INSTANCES.clear(). }
false;public;0;7;;@After public void stopRemoteListeners() {     for (UUID uuid : LISTENERS) {         ignite().events().stopRemoteListen(uuid).     }     LISTENERS.clear(). }
