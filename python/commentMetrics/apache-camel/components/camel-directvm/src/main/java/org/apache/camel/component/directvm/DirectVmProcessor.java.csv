commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public void done(boolean done) {     try {         // restore TCCL if it was changed during processing         if (chgd) {             log.trace("Restoring Thread ContextClassLoader to {}", current).             Thread.currentThread().setContextClassLoader(current).         }         // make sure to copy results back         ExchangeHelper.copyResults(exchange, copy).     } finally {         // must call callback when we are done         callback.done(done).     } }
false;public;2;42;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     // need to use a copy of the incoming exchange, so we route using this camel context     final Exchange copy = prepareExchange(exchange).     ClassLoader current = Thread.currentThread().getContextClassLoader().     boolean changed = false.     try {         // set TCCL to application context class loader if given         ClassLoader appClassLoader = endpoint.getCamelContext().getApplicationContextClassLoader().         if (appClassLoader != null) {             log.trace("Setting Thread ContextClassLoader to {}", appClassLoader).             Thread.currentThread().setContextClassLoader(appClassLoader).             changed = true.         }         final boolean chgd = changed.         return processor.process(copy, new AsyncCallback() {              @Override             public void done(boolean done) {                 try {                     // restore TCCL if it was changed during processing                     if (chgd) {                         log.trace("Restoring Thread ContextClassLoader to {}", current).                         Thread.currentThread().setContextClassLoader(current).                     }                     // make sure to copy results back                     ExchangeHelper.copyResults(exchange, copy).                 } finally {                     // must call callback when we are done                     callback.done(done).                 }             }         }).     } finally {         // restore TCCL if it was changed during processing         if (changed) {             log.trace("Restoring Thread ContextClassLoader to {}", current).             Thread.currentThread().setContextClassLoader(current).         }     } }
true;protected;1;15;/**  * Strategy to prepare exchange for being processed by this consumer  *  * @param exchange the exchange  * @return the exchange to process by this consumer.  */ ;/**  * Strategy to prepare exchange for being processed by this consumer  *  * @param exchange the exchange  * @return the exchange to process by this consumer.  */ protected Exchange prepareExchange(Exchange exchange) {     // send a new copied exchange with new camel context (do not handover completions)     Exchange newExchange = ExchangeHelper.copyExchangeAndSetCamelContext(exchange, endpoint.getCamelContext(), false).     // set the from endpoint     newExchange.setFromEndpoint(endpoint).     // if it is not already set.     if (newExchange.getProperty(Exchange.STREAM_CACHE_UNIT_OF_WORK) == null) {         newExchange.setProperty(Exchange.STREAM_CACHE_UNIT_OF_WORK, exchange.getUnitOfWork()).     }     return newExchange. }
false;public;0;4;;@Override public String toString() {     return "DirectVm[" + processor + "]". }
