commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     getConsumer(exchange).getProcessor().process(exchange). }
false;public;2;9;;public boolean process(Exchange exchange, AsyncCallback callback) {     try {         return getConsumer(exchange).getAsyncProcessor().process(exchange, callback).     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     } }
false;protected;1;12;;protected DirectVmConsumer getConsumer(Exchange exchange) throws Exception {     DirectVmConsumer answer = endpoint.getConsumer().     if (answer == null) {         // okay then await until we have a consumer or we timed out         answer = awaitConsumer().         if (answer == null) {             throw new DirectVmConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange).         }     }     return answer. }
false;private;0;21;;private DirectVmConsumer awaitConsumer() throws InterruptedException {     DirectVmConsumer answer = null.     StopWatch watch = new StopWatch().     boolean done = false.     while (!done) {         // sleep a bit to give chance for the consumer to be ready         Thread.sleep(500).         if (log.isDebugEnabled()) {             log.debug("Waited {} for consumer to be ready", watch.taken()).         }         answer = endpoint.getConsumer().         if (answer != null) {             return answer.         }         // we are done if we hit the timeout         done = watch.taken() >= endpoint.getTimeout().     }     return answer. }
