commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;7;/**  * Gets all the consumer endpoints.  *  * @return consumer endpoints  */ ;/**  * Gets all the consumer endpoints.  *  * @return consumer endpoints  */ public static Collection<Endpoint> getConsumerEndpoints() {     Collection<Endpoint> endpoints = new ArrayList<>(CONSUMERS.size()).     for (DirectVmConsumer consumer : CONSUMERS.values()) {         endpoints.add(consumer.getEndpoint()).     }     return endpoints. }
false;protected;3;10;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     DirectVmEndpoint answer = new DirectVmEndpoint(uri, this).     answer.setBlock(block).     answer.setTimeout(timeout).     answer.setPropagateProperties(propagateProperties).     answer.configureProperties(parameters).     setProperties(answer, parameters).     return answer. }
false;public;1;4;;public DirectVmConsumer getConsumer(DirectVmEndpoint endpoint) {     String key = getConsumerKey(endpoint.getEndpointUri()).     return CONSUMERS.get(key). }
false;public;2;8;;public void addConsumer(DirectVmEndpoint endpoint, DirectVmConsumer consumer) {     String key = getConsumerKey(endpoint.getEndpointUri()).     DirectVmConsumer existing = CONSUMERS.putIfAbsent(key, consumer).     if (existing != null) {         String contextId = existing.getEndpoint().getCamelContext().getName().         throw new IllegalStateException("A consumer " + existing + " already exists from CamelContext: " + contextId + ". Multiple consumers not supported").     } }
false;public;2;4;;public void removeConsumer(DirectVmEndpoint endpoint, DirectVmConsumer consumer) {     String key = getConsumerKey(endpoint.getEndpointUri()).     CONSUMERS.remove(key). }
false;private,static;1;7;;private static String getConsumerKey(String uri) {     if (uri.contains("?")) {         // strip parameters         uri = uri.substring(0, uri.indexOf('?')).     }     return uri. }
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     START_COUNTER.incrementAndGet(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     if (START_COUNTER.decrementAndGet() <= 0) {         // clear queues when no more direct-vm components in use         CONSUMERS.clear().     }     super.doStop(). }
false;public;0;3;;public boolean isBlock() {     return block. }
true;public;1;3;/**  * If sending a message to a direct endpoint which has no active consumer,  * then we can tell the producer to block and wait for the consumer to become active.  */ ;/**  * If sending a message to a direct endpoint which has no active consumer,  * then we can tell the producer to block and wait for the consumer to become active.  */ public void setBlock(boolean block) {     this.block = block. }
false;public;0;3;;public long getTimeout() {     return timeout. }
true;public;1;3;/**  * The timeout value to use if block is enabled.  */ ;/**  * The timeout value to use if block is enabled.  */ public void setTimeout(long timeout) {     this.timeout = timeout. }
false;public;0;3;;public HeaderFilterStrategy getHeaderFilterStrategy() {     return headerFilterStrategy. }
true;public;1;3;/**  * Sets a {@link HeaderFilterStrategy} that will only be applied on producer endpoints (on both directions: request and response).  * <p>Default value: none.</p>  */ ;/**  * Sets a {@link HeaderFilterStrategy} that will only be applied on producer endpoints (on both directions: request and response).  * <p>Default value: none.</p>  */ public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {     this.headerFilterStrategy = headerFilterStrategy. }
false;public;0;3;;public boolean isPropagateProperties() {     return propagateProperties. }
true;public;1;3;/**  * Whether to propagate or not properties from the producer side to the consumer side, and vice versa.  * <p>Default value: true.</p>  */ ;/**  * Whether to propagate or not properties from the producer side to the consumer side, and vice versa.  * <p>Default value: true.</p>  */ public void setPropagateProperties(boolean propagateProperties) {     this.propagateProperties = propagateProperties. }
