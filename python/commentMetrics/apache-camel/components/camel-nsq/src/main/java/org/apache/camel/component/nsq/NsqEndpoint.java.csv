commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new NsqProducer(this). }
false;public;1;6;;public Consumer createConsumer(Processor processor) throws Exception {     if (ObjectHelper.isEmpty(configuration.getTopic())) {         throw new RuntimeCamelException("Missing required endpoint configuration: topic must be defined for NSQ consumer").     }     return new NsqConsumer(this, processor). }
false;public;0;3;;public ExecutorService createExecutor() {     return getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, "NsqTopic[" + configuration.getTopic() + "]", configuration.getPoolSize()). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public NsqConfiguration getNsqConfiguration() {     return configuration. }
false;public;0;18;;public NSQConfig getNsqConfig() throws GeneralSecurityException, IOException {     NSQConfig nsqConfig = new NSQConfig().     if (getNsqConfiguration().getSslContextParameters() != null && getNsqConfiguration().isSecure()) {         SslContext sslContext = new JdkSslContext(getNsqConfiguration().getSslContextParameters().createSSLContext(getCamelContext()), true, null).         nsqConfig.setSslContext(sslContext).     }     if (configuration.getUserAgent() != null && !configuration.getUserAgent().isEmpty()) {         nsqConfig.setUserAgent(configuration.getUserAgent()).     }     if (configuration.getMessageTimeout() > -1) {         nsqConfig.setMsgTimeout((int) configuration.getMessageTimeout()).     }     return nsqConfig. }
