commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/*      * URL a NSQ lookup server hostname.      */ ;/*      * URL a NSQ lookup server hostname.      */ public String getServers() {     return servers. }
false;public;1;3;;public void setServers(String servers) {     this.servers = servers. }
false;public;0;24;;public Set<ServerAddress> getServerAddresses() {     Set<ServerAddress> serverAddresses = Sets.newConcurrentHashSet().     String[] addresses = servers.split(",").     for (int i = 0. i < addresses.length. i++) {         String[] token = addresses[i].split(":").         String host.         int port.         if (token.length == 2) {             host = token[0].             port = Integer.parseInt(token[1]).         } else if (token.length == 1) {             host = token[0].             port = 0.         } else {             throw new IllegalArgumentException("Invalid address: " + addresses[i]).         }         serverAddresses.add(new ServerAddress(host, port)).     }     return serverAddresses. }
true;public;0;3;/**  * The name of topic we want to use  */ ;/**  * The name of topic we want to use  */ public String getTopic() {     return topic. }
false;public;1;3;;public void setTopic(String topic) {     this.topic = topic. }
true;public;0;3;/**  * The name of channel we want to use  */ ;/**  * The name of channel we want to use  */ public String getChannel() {     return channel. }
false;public;1;3;;public void setChannel(String channel) {     this.channel = channel. }
true;public;0;3;/**  * Consumer pool size  */ ;/**  * Consumer pool size  */ public int getPoolSize() {     return poolSize. }
false;public;1;3;;public void setPoolSize(int poolSize) {     this.poolSize = poolSize. }
true;public;0;3;/**  * The port of the nsqdlookupd server  */ ;/**  * The port of the nsqdlookupd server  */ public int getLookupServerPort() {     return lookupServerPort. }
false;public;1;3;;public void setLookupServerPort(int lookupServerPort) {     this.lookupServerPort = lookupServerPort. }
true;public;0;3;/**  * The port of the nsqd server  */ ;/**  * The port of the nsqd server  */ public int getPort() {     return port. }
false;public;1;3;;public void setPort(int port) {     this.port = port. }
true;public;0;3;/**  * The lookup retry interval  */ ;/**  * The lookup retry interval  */ public long getLookupInterval() {     return lookupInterval. }
false;public;1;3;;public void setLookupInterval(long lookupInterval) {     this.lookupInterval = lookupInterval. }
true;public;0;3;/**  * The requeue interval  */ ;/**  * The requeue interval  */ public long getRequeueInterval() {     return requeueInterval. }
false;public;1;3;;public void setRequeueInterval(long requeueInterval) {     this.requeueInterval = requeueInterval. }
true;public;0;3;/**  * Automatically finish the NSQ message when it is retrieved from the quese and before the Exchange is processed.  */ ;/**  * Automatically finish the NSQ message when it is retrieved from the quese and before the Exchange is processed.  */ public Boolean getAutoFinish() {     return autoFinish. }
false;public;1;3;;public void setAutoFinish(Boolean autoFinish) {     this.autoFinish = autoFinish. }
true;public;0;3;/**  * The NSQ message timeout for a consumer.  */ ;/**  * The NSQ message timeout for a consumer.  */ public long getMessageTimeout() {     return messageTimeout. }
false;public;1;3;;public void setMessageTimeout(long messageTimeout) {     this.messageTimeout = messageTimeout. }
false;public;0;3;;public String getUserAgent() {     return userAgent. }
false;public;1;3;;public void setUserAgent(String userAgent) {     this.userAgent = userAgent. }
true;public;0;3;/**  * Set secure option indicating TLS is required  */ ;/**  * Set secure option indicating TLS is required  */ public boolean isSecure() {     return secure. }
false;public;1;3;;public void setSecure(boolean secure) {     this.secure = secure. }
true;public;0;3;/**  * To configure security using SSLContextParameters  */ ;/**  * To configure security using SSLContextParameters  */ public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
false;public;1;3;;public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;private;0;13;;private String splitServers() {     StringBuilder servers = new StringBuilder().     String[] pieces = getServers().split(",").     for (int i = 0. i < pieces.length. i++) {         if (i < pieces.length - 1) {             servers.append(pieces[i] + ",").         } else {             servers.append(pieces[i]).         }     }     return servers.toString(). }
