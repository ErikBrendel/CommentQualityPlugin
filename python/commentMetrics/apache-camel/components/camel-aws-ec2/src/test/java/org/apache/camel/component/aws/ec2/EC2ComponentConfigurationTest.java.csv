commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void createEndpointWithMinimalConfiguration() throws Exception {     EC2Component component = new EC2Component(context).     EC2Endpoint endpoint = (EC2Endpoint) component.createEndpoint("aws-ec2://TestDomain?amazonEc2Client=#amazonEc2Client&accessKey=xxx&secretKey=yyy").     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNotNull(endpoint.getConfiguration().getAmazonEc2Client()). }
false;public;0;9;;@Test public void createEndpointWithOnlyAccessKeyAndSecretKey() throws Exception {     EC2Component component = new EC2Component(context).     EC2Endpoint endpoint = (EC2Endpoint) component.createEndpoint("aws-ec2://TestDomain?accessKey=xxx&secretKey=yyy").     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNull(endpoint.getConfiguration().getAmazonEc2Client()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutDomainName() throws Exception {     EC2Component component = new EC2Component(context).     component.createEndpoint("aws-ec2:// "). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAmazonSDBClientConfiguration() throws Exception {     EC2Component component = new EC2Component(context).     component.createEndpoint("aws-ec2://TestDomain"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAccessKeyConfiguration() throws Exception {     EC2Component component = new EC2Component(context).     component.createEndpoint("aws-ec2://TestDomain?secretKey=yyy"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutSecretKeyConfiguration() throws Exception {     EC2Component component = new EC2Component(context).     component.createEndpoint("aws-ec2://TestDomain?accessKey=xxx"). }
false;public;0;5;;@Test public void createEndpointWithoutSecretKeyAndAccessKeyConfiguration() throws Exception {     EC2Component component = new EC2Component(context).     component.createEndpoint("aws-ec2://TestDomain?amazonEc2Client=#amazonEc2Client"). }
false;public;0;10;;@Test public void createEndpointWithComponentElements() throws Exception {     EC2Component component = new EC2Component(context).     component.setAccessKey("XXX").     component.setSecretKey("YYY").     EC2Endpoint endpoint = (EC2Endpoint) component.createEndpoint("aws-ec2://testDomain").     assertEquals("XXX", endpoint.getConfiguration().getAccessKey()).     assertEquals("YYY", endpoint.getConfiguration().getSecretKey()). }
false;public;0;12;;@Test public void createEndpointWithComponentAndEndpointElements() throws Exception {     EC2Component component = new EC2Component(context).     component.setAccessKey("XXX").     component.setSecretKey("YYY").     component.setRegion(Regions.US_WEST_1.toString()).     EC2Endpoint endpoint = (EC2Endpoint) component.createEndpoint("aws-ec2://testDomain?accessKey=xxxxxx&secretKey=yyyyy&region=US_EAST_1").     assertEquals("xxxxxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyyyy", endpoint.getConfiguration().getSecretKey()).     assertEquals("US_EAST_1", endpoint.getConfiguration().getRegion()). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("amazonEc2Client", amazonEc2Client).     return registry. }
