commented;modifiers;parameterAmount;loc;comment;code
false;public;1;49;;@Override public RunInstancesResult runInstances(RunInstancesRequest runInstancesRequest) {     RunInstancesResult result = new RunInstancesResult().     if (runInstancesRequest.getImageId().equals("test-1")) {         Reservation res = new Reservation().         res.setOwnerId("1").         res.setRequesterId("user-test").         res.setReservationId("res-1").         Collection<Instance> instances = new ArrayList<>().         Instance ins = new Instance().         ins.setImageId(runInstancesRequest.getImageId()).         ins.setInstanceType(runInstancesRequest.getInstanceType()).         ins.setInstanceId("instance-1").         if (runInstancesRequest.getSecurityGroups() != null) {             if (runInstancesRequest.getSecurityGroups().contains("secgroup-1") && runInstancesRequest.getSecurityGroups().contains("secgroup-2")) {                 GroupIdentifier id1 = new GroupIdentifier().                 id1.setGroupId("id-1").                 id1.setGroupName("secgroup-1").                 GroupIdentifier id2 = new GroupIdentifier().                 id2.setGroupId("id-2").                 id2.setGroupName("secgroup-2").                 Collection<GroupIdentifier> secGroups = new ArrayList<>().                 secGroups.add(id1).                 secGroups.add(id2).                 ins.setSecurityGroups(secGroups).             } else if (ObjectHelper.isNotEmpty(runInstancesRequest.getKeyName())) {                 if (ObjectHelper.isNotEmpty(runInstancesRequest.getKeyName().contains("keypair-1"))) {                     GroupIdentifier id1 = new GroupIdentifier().                     id1.setGroupId("id-3").                     id1.setGroupName("secgroup-3").                     GroupIdentifier id2 = new GroupIdentifier().                     id2.setGroupId("id-4").                     id2.setGroupName("secgroup-4").                     Collection<GroupIdentifier> secGroups = new ArrayList<>().                     secGroups.add(id1).                     secGroups.add(id2).                     ins.setSecurityGroups(secGroups).                 }             }         }         instances.add(ins).         res.setInstances(instances).         result.setReservation(res).     } else {         throw new AmazonServiceException("The image-id doesn't exists").     }     return result. }
false;public;1;22;;@Override public StartInstancesResult startInstances(StartInstancesRequest startInstancesRequest) {     StartInstancesResult result = new StartInstancesResult().     if (startInstancesRequest.getInstanceIds().get(0).equals("test-1")) {         Collection<InstanceStateChange> coll = new ArrayList<>().         InstanceStateChange sc = new InstanceStateChange().         InstanceState previousState = new InstanceState().         previousState.setCode(80).         previousState.setName(InstanceStateName.Stopped).         InstanceState newState = new InstanceState().         newState.setCode(16).         newState.setName(InstanceStateName.Running).         sc.setPreviousState(previousState).         sc.setCurrentState(newState).         sc.setInstanceId("test-1").         coll.add(sc).         result.setStartingInstances(coll).     } else {         throw new AmazonServiceException("The image-id doesn't exists").     }     return result. }
false;public;1;22;;@Override public StopInstancesResult stopInstances(StopInstancesRequest stopInstancesRequest) {     StopInstancesResult result = new StopInstancesResult().     if (stopInstancesRequest.getInstanceIds().get(0).equals("test-1")) {         Collection<InstanceStateChange> coll = new ArrayList<>().         InstanceStateChange sc = new InstanceStateChange().         InstanceState previousState = new InstanceState().         previousState.setCode(80).         previousState.setName(InstanceStateName.Running).         InstanceState newState = new InstanceState().         newState.setCode(16).         newState.setName(InstanceStateName.Stopped).         sc.setPreviousState(previousState).         sc.setCurrentState(newState).         sc.setInstanceId("test-1").         coll.add(sc).         result.setStoppingInstances(coll).     } else {         throw new AmazonServiceException("The image-id doesn't exists").     }     return result. }
false;public;1;22;;@Override public TerminateInstancesResult terminateInstances(TerminateInstancesRequest terminateInstancesRequest) {     TerminateInstancesResult result = new TerminateInstancesResult().     if (terminateInstancesRequest.getInstanceIds().contains("test-1")) {         Collection<InstanceStateChange> coll = new ArrayList<>().         InstanceStateChange sc = new InstanceStateChange().         InstanceState previousState = new InstanceState().         previousState.setCode(80).         previousState.setName(InstanceStateName.Running).         InstanceState newState = new InstanceState().         newState.setCode(16).         newState.setName(InstanceStateName.Terminated).         sc.setPreviousState(previousState).         sc.setCurrentState(newState).         sc.setInstanceId("test-1").         coll.add(sc).         result.setTerminatingInstances(coll).     } else {         throw new AmazonServiceException("The image-id doesn't exists").     }     return result. }
false;public;1;43;;@Override public DescribeInstancesResult describeInstances(DescribeInstancesRequest describeInstancesRequest) {     DescribeInstancesResult result = new DescribeInstancesResult().     if (describeInstancesRequest.getInstanceIds().isEmpty()) {         Collection<Reservation> list = new ArrayList<>().         Reservation res = new Reservation().         res.setOwnerId("1").         res.setRequesterId("user-test").         res.setReservationId("res-1").         Collection<Instance> instances = new ArrayList<>().         Instance ins = new Instance().         ins.setImageId("id-1").         ins.setInstanceType(InstanceType.T2Micro).         ins.setInstanceId("instance-1").         instances.add(ins).         Instance ins1 = new Instance().         ins1.setImageId("id-2").         ins1.setInstanceType(InstanceType.T2Micro).         ins1.setInstanceId("instance-2").         instances.add(ins1).         res.setInstances(instances).         list.add(res).         result.setReservations(list).     } else {         if (describeInstancesRequest.getInstanceIds().contains("instance-1")) {             Collection<Reservation> list = new ArrayList<>().             Reservation res = new Reservation().             res.setOwnerId("1").             res.setRequesterId("user-test").             res.setReservationId("res-1").             Collection<Instance> instances = new ArrayList<>().             Instance ins = new Instance().             ins.setImageId("id-1").             ins.setInstanceType(InstanceType.T2Micro).             ins.setInstanceId("instance-1").             instances.add(ins).             res.setInstances(instances).             list.add(res).             result.setReservations(list).         }     }     return result. }
false;public;1;29;;@Override public DescribeInstanceStatusResult describeInstanceStatus(DescribeInstanceStatusRequest describeInstanceStatusRequest) {     DescribeInstanceStatusResult result = new DescribeInstanceStatusResult().     Collection<InstanceStatus> instanceStatuses = new ArrayList<>().     if (describeInstanceStatusRequest.getInstanceIds().isEmpty()) {         InstanceStatus status = new InstanceStatus().         status.setInstanceId("test-1").         status.setInstanceState(new InstanceState().withName(InstanceStateName.Running)).         instanceStatuses.add(status).         status.setInstanceId("test-2").         status.setInstanceState(new InstanceState().withName(InstanceStateName.Stopped)).         instanceStatuses.add(status).     } else {         if (describeInstanceStatusRequest.getInstanceIds().contains("test-1")) {             InstanceStatus status = new InstanceStatus().             status.setInstanceId("test-1").             status.setInstanceState(new InstanceState().withName(InstanceStateName.Running)).             instanceStatuses.add(status).         }         if (describeInstanceStatusRequest.getInstanceIds().contains("test-2")) {             InstanceStatus status = new InstanceStatus().             status.setInstanceId("test-2").             status.setInstanceState(new InstanceState().withName(InstanceStateName.Stopped)).             instanceStatuses.add(status).         }     }     result.setInstanceStatuses(instanceStatuses).     return result. }
false;public;1;4;;@Override public RebootInstancesResult rebootInstances(RebootInstancesRequest rebootInstancesRequest) {     return new RebootInstancesResult(). }
false;public;1;19;;@Override public MonitorInstancesResult monitorInstances(MonitorInstancesRequest monitorInstancesRequest) {     MonitorInstancesResult result = new MonitorInstancesResult().     if (!monitorInstancesRequest.getInstanceIds().isEmpty()) {         Collection<InstanceMonitoring> coll = new ArrayList<>().         Iterator<String> it = monitorInstancesRequest.getInstanceIds().iterator().         while (it.hasNext()) {             String id = it.next().             InstanceMonitoring mon = new InstanceMonitoring().             mon.setInstanceId(id).             Monitoring monitoring = new Monitoring().             monitoring.setState(MonitoringState.Enabled).             mon.setMonitoring(monitoring).             coll.add(mon).         }         result.setInstanceMonitorings(coll).     }     return result. }
false;public;1;19;;@Override public UnmonitorInstancesResult unmonitorInstances(UnmonitorInstancesRequest unmonitorInstancesRequest) {     UnmonitorInstancesResult result = new UnmonitorInstancesResult().     if (!unmonitorInstancesRequest.getInstanceIds().isEmpty()) {         Collection<InstanceMonitoring> coll = new ArrayList<>().         Iterator<String> it = unmonitorInstancesRequest.getInstanceIds().iterator().         while (it.hasNext()) {             String id = it.next().             InstanceMonitoring mon = new InstanceMonitoring().             mon.setInstanceId(id).             Monitoring monitoring = new Monitoring().             monitoring.setState(MonitoringState.Disabled).             mon.setMonitoring(monitoring).             coll.add(mon).         }         result.setInstanceMonitorings(coll).     }     return result. }
false;public;1;4;;@Override public CreateTagsResult createTags(CreateTagsRequest createTagsRequest) {     return new CreateTagsResult(). }
false;public;1;4;;@Override public DeleteTagsResult deleteTags(DeleteTagsRequest deleteTagsRequest) {     return new DeleteTagsResult(). }
