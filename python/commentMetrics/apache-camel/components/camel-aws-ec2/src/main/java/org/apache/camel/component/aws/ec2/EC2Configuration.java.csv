commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public AmazonEC2Client getAmazonEc2Client() {     return amazonEc2Client. }
true;public;1;3;/**  * To use a existing configured AmazonEC2Client as client  */ ;/**  * To use a existing configured AmazonEC2Client as client  */ public void setAmazonEc2Client(AmazonEC2Client amazonEc2Client) {     this.amazonEc2Client = amazonEc2Client. }
false;public;0;3;;public String getAccessKey() {     return accessKey. }
true;public;1;3;/**  * Amazon AWS Access Key  */ ;/**  * Amazon AWS Access Key  */ public void setAccessKey(String accessKey) {     this.accessKey = accessKey. }
false;public;0;3;;public String getSecretKey() {     return secretKey. }
true;public;1;3;/**  * Amazon AWS Secret Key  */ ;/**  * Amazon AWS Secret Key  */ public void setSecretKey(String secretKey) {     this.secretKey = secretKey. }
false;public;0;3;;public EC2Operations getOperation() {     return operation. }
true;public;1;3;/**  * The operation to perform. It can be createAndRunInstances, startInstances, stopInstances, terminateInstances,  * describeInstances, describeInstancesStatus, rebootInstances, monitorInstances, unmonitorInstances,  * createTags or deleteTags  */ ;/**  * The operation to perform. It can be createAndRunInstances, startInstances, stopInstances, terminateInstances,  * describeInstances, describeInstancesStatus, rebootInstances, monitorInstances, unmonitorInstances,  * createTags or deleteTags  */ public void setOperation(EC2Operations operation) {     this.operation = operation. }
false;public;0;3;;public String getProxyHost() {     return proxyHost. }
true;public;1;3;/**  * To define a proxy host when instantiating the EC2 client  */ ;/**  * To define a proxy host when instantiating the EC2 client  */ public void setProxyHost(String proxyHost) {     this.proxyHost = proxyHost. }
false;public;0;3;;public Integer getProxyPort() {     return proxyPort. }
true;public;1;3;/**  * To define a proxy port when instantiating the EC2 client  */ ;/**  * To define a proxy port when instantiating the EC2 client  */ public void setProxyPort(Integer proxyPort) {     this.proxyPort = proxyPort. }
false;public;0;3;;public String getRegion() {     return region. }
true;public;1;3;/**  * The region in which EC2 client needs to work  */ ;/**  * The region in which EC2 client needs to work  */ public void setRegion(String region) {     this.region = region. }
false;public;0;7;;// ************************************************* //  // ************************************************* public EC2Configuration copy() {     try {         return (EC2Configuration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
