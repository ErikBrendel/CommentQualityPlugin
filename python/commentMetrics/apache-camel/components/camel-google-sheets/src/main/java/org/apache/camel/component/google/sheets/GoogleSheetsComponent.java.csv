commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected GoogleSheetsApiName getApiName(String apiNameStr) throws IllegalArgumentException {     return GoogleSheetsApiName.fromValue(apiNameStr). }
false;public;1;10;;public Sheets getClient(GoogleSheetsConfiguration config) {     if (client == null) {         client = getClientFactory().makeClient(config.getClientId(), config.getClientSecret(), config.getApplicationName(), config.getRefreshToken(), config.getAccessToken()).     }     return client. }
false;public;0;6;;public GoogleSheetsClientFactory getClientFactory() {     if (clientFactory == null) {         clientFactory = new BatchGoogleSheetsClientFactory().     }     return clientFactory. }
true;public;1;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public void setConfiguration(GoogleSheetsConfiguration configuration) {     super.setConfiguration(configuration). }
false;public;0;7;;@Override public GoogleSheetsConfiguration getConfiguration() {     if (configuration == null) {         configuration = new GoogleSheetsConfiguration().     }     return super.getConfiguration(). }
true;public;1;3;/**  * To use the GoogleSheetsClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleSheetsClientFactory}  */ ;/**  * To use the GoogleSheetsClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleSheetsClientFactory}  */ public void setClientFactory(GoogleSheetsClientFactory clientFactory) {     this.clientFactory = clientFactory. }
false;protected;4;7;;@Override protected Endpoint createEndpoint(String uri, String methodName, GoogleSheetsApiName apiName, GoogleSheetsConfiguration endpointConfiguration) {     endpointConfiguration.setApiName(apiName).     endpointConfiguration.setMethodName(methodName).     return new GoogleSheetsEndpoint(uri, this, apiName, methodName, endpointConfiguration). }
