commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new org.apache.camel.component.google.sheets.GoogleSheetsProducer(this). }
false;public;1;11;;@Override public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final GoogleSheetsConsumer consumer = new GoogleSheetsConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<GoogleSheetsConfiguration> getPropertiesHelper() {     return GoogleSheetsPropertiesHelper.getHelper(). }
false;protected;0;4;;@Override protected String getThreadProfileName() {     return GoogleSheetsConstants.THREAD_PROFILE_NAME. }
false;protected;0;13;;@Override protected void afterConfigureProperties() {     switch(apiName) {         case SPREADSHEETS:             apiProxy = getClient().spreadsheets().             break.         case DATA:             apiProxy = getClient().spreadsheets().values().             break.         default:             throw new IllegalArgumentException("Invalid API name " + apiName).     } }
false;public;0;3;;public Sheets getClient() {     return ((GoogleSheetsComponent) getComponent()).getClient(configuration). }
false;public;2;4;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     return apiProxy. }
false;public;0;3;;public GoogleSheetsClientFactory getClientFactory() {     return ((GoogleSheetsComponent) getComponent()).getClientFactory(). }
false;public;1;3;;public void setClientFactory(GoogleSheetsClientFactory clientFactory) {     ((GoogleSheetsComponent) getComponent()).setClientFactory(clientFactory). }
