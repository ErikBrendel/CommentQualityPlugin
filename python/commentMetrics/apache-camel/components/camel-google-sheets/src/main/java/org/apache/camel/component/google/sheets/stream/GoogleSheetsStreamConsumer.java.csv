commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected GoogleSheetsStreamConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;protected;0;3;;protected Sheets getClient() {     return getEndpoint().getClient(). }
false;public;0;4;;@Override public GoogleSheetsStreamEndpoint getEndpoint() {     return (GoogleSheetsStreamEndpoint) super.getEndpoint(). }
false;protected;0;38;;@Override protected int poll() throws Exception {     Queue<Exchange> answer = new ArrayDeque<>().     if (ObjectHelper.isNotEmpty(getConfiguration().getRange())) {         Sheets.Spreadsheets.Values.BatchGet request = getClient().spreadsheets().values().batchGet(getConfiguration().getSpreadsheetId()).         request.setMajorDimension(getConfiguration().getMajorDimension()).         request.setValueRenderOption(getConfiguration().getValueRenderOption()).         if (getConfiguration().getRange().contains(",")) {             request.setRanges(Arrays.stream(getConfiguration().getRange().split(",")).map(String::trim).collect(Collectors.toList())).         } else {             request.setRanges(Collections.singletonList(getConfiguration().getRange())).         }         BatchGetValuesResponse response = request.execute().         if (response.getValueRanges() != null) {             response.getValueRanges().stream().limit(getConfiguration().getMaxResults()).map(valueRange -> getEndpoint().createExchange(valueRange)).forEach(answer::add).         }     } else {         Sheets.Spreadsheets.Get request = getClient().spreadsheets().get(getConfiguration().getSpreadsheetId()).         request.setIncludeGridData(getConfiguration().isIncludeGridData()).         Spreadsheet spreadsheet = request.execute().         answer.add(getEndpoint().createExchange(spreadsheet)).     }     return processBatch(CastUtils.cast(answer)). }
false;public;1;20;;@Override public int processBatch(Queue<Object> exchanges) throws Exception {     int total = exchanges.size().     for (int index = 0. index < total && isBatchAllowed(). index++) {         // only loop if we are started (allowed to run)         final Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll()).         // add current index and total as properties         exchange.setProperty(Exchange.BATCH_INDEX, index).         exchange.setProperty(Exchange.BATCH_SIZE, total).         exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1).         // update pending number of exchanges         pendingExchanges = total - index - 1.         getAsyncProcessor().process(exchange, doneSync -> LOG.trace("Processing exchange done")).     }     return total. }
