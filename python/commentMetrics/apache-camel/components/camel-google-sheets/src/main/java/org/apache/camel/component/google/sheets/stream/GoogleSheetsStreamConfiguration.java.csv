commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getClientId() {     return clientId. }
true;public;1;3;/**  * Client ID of the sheets application  */ ;/**  * Client ID of the sheets application  */ public void setClientId(String clientId) {     this.clientId = clientId. }
false;public;0;3;;public String getClientSecret() {     return clientSecret. }
true;public;1;3;/**  * Client secret of the sheets application  */ ;/**  * Client secret of the sheets application  */ public void setClientSecret(String clientSecret) {     this.clientSecret = clientSecret. }
false;public;0;3;;public String getAccessToken() {     return accessToken. }
true;public;1;3;/**  * OAuth 2 access token. This typically expires after an hour so  * refreshToken is recommended for long term usage.  */ ;/**  * OAuth 2 access token. This typically expires after an hour so  * refreshToken is recommended for long term usage.  */ public void setAccessToken(String accessToken) {     this.accessToken = accessToken. }
false;public;0;3;;public String getRefreshToken() {     return refreshToken. }
true;public;1;3;/**  * OAuth 2 refresh token. Using this, the Google Calendar component can  * obtain a new accessToken whenever the current one expires - a necessity  * if the application is long-lived.  */ ;/**  * OAuth 2 refresh token. Using this, the Google Calendar component can  * obtain a new accessToken whenever the current one expires - a necessity  * if the application is long-lived.  */ public void setRefreshToken(String refreshToken) {     this.refreshToken = refreshToken. }
false;public;0;3;;public String getApplicationName() {     return applicationName. }
true;public;1;3;/**  * Google sheets application name. Example would be "camel-google-sheets/1.0"  */ ;/**  * Google sheets application name. Example would be "camel-google-sheets/1.0"  */ public void setApplicationName(String applicationName) {     this.applicationName = applicationName. }
false;public;0;3;;public List<String> getScopes() {     return scopes. }
true;public;1;3;/**  * Specifies the level of permissions you want a sheets application to have to  * a user account. See https://developers.google.com/identity/protocols/googlescopes  * for more info.  */ ;/**  * Specifies the level of permissions you want a sheets application to have to  * a user account. See https://developers.google.com/identity/protocols/googlescopes  * for more info.  */ public void setScopes(List<String> scopes) {     this.scopes = scopes. }
true;public;0;3;/**  * Gets the apiName.  *  * @return  */ ;/**  * Gets the apiName.  *  * @return  */ public String getApiName() {     return apiName. }
true;public;1;3;/**  * Sets the apiName.  *  * @param apiName  */ ;/**  * Sets the apiName.  *  * @param apiName  */ public void setApiName(String apiName) {     this.apiName = apiName. }
false;public;0;3;;public String getSpreadsheetId() {     return spreadsheetId. }
true;public;1;3;/**  * Specifies the spreadsheet identifier that is used to identify the target to obtain.  *  * @param spreadsheetId  */ ;/**  * Specifies the spreadsheet identifier that is used to identify the target to obtain.  *  * @param spreadsheetId  */ public void setSpreadsheetId(String spreadsheetId) {     this.spreadsheetId = spreadsheetId. }
false;public;0;3;;public int getMaxResults() {     return maxResults. }
true;public;1;3;/**  * Specify the maximum number of returned results. This will limit the number of rows in a returned value range  * data set or the number of returned value ranges in a batch request.  *  * @param maxResults  */ ;/**  * Specify the maximum number of returned results. This will limit the number of rows in a returned value range  * data set or the number of returned value ranges in a batch request.  *  * @param maxResults  */ public void setMaxResults(int maxResults) {     this.maxResults = maxResults. }
false;public;0;3;;public String getRange() {     return range. }
true;public;1;3;/**  * Specifies the range of rows and columns in a sheet to get data from.  *  * @param range  */ ;/**  * Specifies the range of rows and columns in a sheet to get data from.  *  * @param range  */ public void setRange(String range) {     this.range = range. }
false;public;0;3;;public String getMajorDimension() {     return majorDimension. }
true;public;1;3;/**  * Specifies the major dimension that results should use..  *  * @param majorDimension  */ ;/**  * Specifies the major dimension that results should use..  *  * @param majorDimension  */ public void setMajorDimension(String majorDimension) {     this.majorDimension = majorDimension. }
false;public;0;3;;public String getValueRenderOption() {     return valueRenderOption. }
true;public;1;3;/**  * Determines how values should be rendered in the output.  *  * @param valueRenderOption  */ ;/**  * Determines how values should be rendered in the output.  *  * @param valueRenderOption  */ public void setValueRenderOption(String valueRenderOption) {     this.valueRenderOption = valueRenderOption. }
false;public;0;3;;public boolean isIncludeGridData() {     return includeGridData. }
true;public;1;3;/**  * True if grid data should be returned.  *  * @param includeGridData  */ ;/**  * True if grid data should be returned.  *  * @param includeGridData  */ public void setIncludeGridData(boolean includeGridData) {     this.includeGridData = includeGridData. }
false;public;0;7;;// ************************************************* //  // ************************************************* public GoogleSheetsStreamConfiguration copy() {     try {         return (GoogleSheetsStreamConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
