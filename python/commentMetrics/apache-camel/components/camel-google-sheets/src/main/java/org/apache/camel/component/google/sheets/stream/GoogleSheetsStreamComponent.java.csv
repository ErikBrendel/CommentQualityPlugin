commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public Sheets getClient(GoogleSheetsStreamConfiguration endpointConfiguration) {     if (client == null) {         client = getClientFactory().makeClient(endpointConfiguration.getClientId(), endpointConfiguration.getClientSecret(), endpointConfiguration.getApplicationName(), endpointConfiguration.getRefreshToken(), endpointConfiguration.getAccessToken()).     }     return client. }
false;public;0;6;;public GoogleSheetsClientFactory getClientFactory() {     if (clientFactory == null) {         clientFactory = new BatchGoogleSheetsClientFactory().     }     return clientFactory. }
false;public;0;3;;public GoogleSheetsStreamConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ public void setConfiguration(GoogleSheetsStreamConfiguration configuration) {     this.configuration = configuration. }
true;public;1;3;/**  * To use the GoogleSheetsClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleSheetsClientFactory}  */ ;/**  * To use the GoogleSheetsClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleSheetsClientFactory}  */ public void setClientFactory(GoogleSheetsClientFactory clientFactory) {     this.clientFactory = clientFactory. }
false;protected;3;8;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     final GoogleSheetsStreamConfiguration configuration = this.configuration.copy().     setProperties(configuration, parameters).     GoogleSheetsStreamEndpoint endpoint = new GoogleSheetsStreamEndpoint(uri, this, configuration).     setProperties(endpoint, parameters).     return endpoint. }
