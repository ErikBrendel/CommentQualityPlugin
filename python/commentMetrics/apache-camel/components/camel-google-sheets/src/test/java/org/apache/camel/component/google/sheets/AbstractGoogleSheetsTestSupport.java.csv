commented;modifiers;parameterAmount;loc;comment;code
true;private;0;16;/**  * Create test spreadsheet that is used throughout all tests.  */ ;/**  * Create test spreadsheet that is used throughout all tests.  */ private void createTestSpreadsheet() {     Spreadsheet spreadsheet = new Spreadsheet().     SpreadsheetProperties spreadsheetProperties = new SpreadsheetProperties().     spreadsheetProperties.setTitle("camel-sheets-" + Math.abs(new Random().nextInt())).     spreadsheet.setProperties(spreadsheetProperties).     Sheet sheet = new Sheet().     SheetProperties sheetProperties = new SheetProperties().     sheetProperties.setTitle(TEST_SHEET).     sheet.setProperties(sheetProperties).     spreadsheet.setSheets(Collections.singletonList(sheet)).     this.spreadsheet = requestBody("google-sheets://spreadsheets/create?inBody=content", spreadsheet). }
true;private;0;19;/**  * Add some initial test data to test spreadsheet.  */ ;/**  * Add some initial test data to test spreadsheet.  */ private void createTestData() {     if (spreadsheet == null) {         createTestSpreadsheet().     }     ValueRange valueRange = new ValueRange().     valueRange.setValues(Arrays.asList(Arrays.asList("a1", "b1"), Arrays.asList("a2", "b2"))).     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleSheets.spreadsheetId", spreadsheet.getSpreadsheetId()).     // parameter type is String     headers.put("CamelGoogleSheets.range", TEST_SHEET + "!A1:B2").     // parameter type is String     headers.put("CamelGoogleSheets.valueInputOption", "USER_ENTERED").     requestBodyAndHeaders("google-sheets://data/update?inBody=values", valueRange, headers). }
false;protected;0;15;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     final GoogleSheetsConfiguration configuration = new GoogleSheetsConfiguration().     IntrospectionSupport.setProperties(configuration, getTestOptions()).     // add GoogleSheetsComponent to Camel context     final GoogleSheetsComponent component = new GoogleSheetsComponent(context).     component.setConfiguration(configuration).     context.addComponent("google-sheets", component).     return context. }
true;protected;0;15;/**  * Read component configuration from TEST_OPTIONS_PROPERTIES.  * @return Map of component options.  * @throws IOException when TEST_OPTIONS_PROPERTIES could not be loaded.  */ ;/**  * Read component configuration from TEST_OPTIONS_PROPERTIES.  * @return Map of component options.  * @throws IOException when TEST_OPTIONS_PROPERTIES could not be loaded.  */ protected Map<String, Object> getTestOptions() throws IOException {     final Properties properties = new Properties().     try {         properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES)).     } catch (Exception e) {         throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e).     }     Map<String, Object> options = new HashMap<>().     for (Map.Entry<Object, Object> entry : properties.entrySet()) {         options.put(entry.getKey().toString(), entry.getValue()).     }     return options. }
false;public;0;5;;@Override public boolean isCreateCamelContextPerClass() {     // only create the context once for this class     return true. }
false;protected;3;4;;@SuppressWarnings("unchecked") protected <T> T requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws CamelExecutionException {     return (T) template().requestBodyAndHeaders(endpointUri, body, headers). }
false;protected;2;4;;@SuppressWarnings("unchecked") protected <T> T requestBody(String endpoint, Object body) throws CamelExecutionException {     return (T) template().requestBody(endpoint, body). }
false;public;0;6;;public Spreadsheet getSpreadsheet() {     if (spreadsheet == null) {         createTestSpreadsheet().     }     return spreadsheet. }
false;public;0;9;;public Spreadsheet getSpreadsheetWithTestData() {     if (spreadsheet == null) {         createTestSpreadsheet().     }     createTestData().     return spreadsheet. }
false;public;1;3;;public void setSpreadsheet(Spreadsheet sheet) {     this.spreadsheet = sheet. }
