commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testCreate() throws Exception {     String title = "camel-sheets-" + Math.abs(new Random().nextInt()).     Spreadsheet sheetToCreate = new Spreadsheet().     SpreadsheetProperties sheetProperties = new SpreadsheetProperties().     sheetProperties.setTitle(title).     sheetToCreate.setProperties(sheetProperties).     // using com.google.api.services.sheets.v4.model.Spreadsheet message body for single parameter "content"     final Spreadsheet result = requestBody("direct://CREATE", sheetToCreate).     assertNotNull("create result is null", result).     assertEquals(title, result.getProperties().getTitle()).     LOG.debug("create: " + result). }
false;public;0;12;;@Test public void testGet() throws Exception {     Spreadsheet testSheet = getSpreadsheet().     // using String message body for single parameter "spreadsheetId"     final Spreadsheet result = requestBody("direct://GET", testSheet.getSpreadsheetId()).     assertNotNull("get result is null", result).     assertEquals(testSheet.getSpreadsheetId(), result.getSpreadsheetId()).     LOG.debug("get: " + result). }
false;public;0;22;;@Test public void testBatchUpdate() throws Exception {     Spreadsheet testSheet = getSpreadsheet().     String updateTitle = "updated-" + testSheet.getProperties().getTitle().     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleSheets.spreadsheetId", testSheet.getSpreadsheetId()).     // parameter type is com.google.api.services.sheets.v4.model.BatchUpdateSpreadsheetRequest     headers.put("CamelGoogleSheets.batchUpdateSpreadsheetRequest", new BatchUpdateSpreadsheetRequest().setIncludeSpreadsheetInResponse(true).setRequests(Collections.singletonList(new Request().setUpdateSpreadsheetProperties(new UpdateSpreadsheetPropertiesRequest().setProperties(new SpreadsheetProperties().setTitle(updateTitle)).setFields("title"))))).     final BatchUpdateSpreadsheetResponse result = requestBodyAndHeaders("direct://BATCHUPDATE", null, headers).     assertNotNull("batchUpdate result in null", result).     assertEquals(updateTitle, result.getUpdatedSpreadsheet().getProperties().getTitle()).     LOG.debug("batchUpdate: " + result). }
false;public;0;15;;@Override public void configure() {     // test route for batchUpdate     from("direct://BATCHUPDATE").to("google-sheets://" + PATH_PREFIX + "/batchUpdate").     // test route for create     from("direct://CREATE").to("google-sheets://" + PATH_PREFIX + "/create?inBody=content").     // test route for get     from("direct://GET").to("google-sheets://" + PATH_PREFIX + "/get?inBody=spreadsheetId"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             // test route for batchUpdate             from("direct://BATCHUPDATE").to("google-sheets://" + PATH_PREFIX + "/batchUpdate").             // test route for create             from("direct://CREATE").to("google-sheets://" + PATH_PREFIX + "/create?inBody=content").             // test route for get             from("direct://GET").to("google-sheets://" + PATH_PREFIX + "/get?inBody=spreadsheetId").         }     }. }
