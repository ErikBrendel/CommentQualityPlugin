commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected InterceptStrategy getTracingStrategy() {     return new TraceAnnotatedTracingStrategy(). }
false;public;0;13;;@Test public void testRoute() {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(7).create().     template.requestBody(START, "Hello").     assertThat("Not all exchanges were fully processed", notify.matches(10, TimeUnit.SECONDS), is(equalTo(true))).     verify().     assertThat(ProcessingCamelBean.gotInvoked(), is(greaterThan(0))). }
false;public;0;44;;@Override public void configure() {     from(START).routeId("start").log("Starting test").inOnly(DELIVERY).     from(DELIVERY).routeId("delivery").log("Doing some stuff").to(CommonEndpoints.RECEIVED).delay(100).inOnly(IN_QUEUE).     from(IN_QUEUE).routeId("processing").log("Do some more stuff").to(CommonEndpoints.PROCESSING).delay(100).inOnly(PERSISTENCE_QUEUE).     from(PERSISTENCE_QUEUE).routeId("wait-for-persisting").log("Waiting on available persisting instance").to(CommonEndpoints.PERSISTENCE_QUEUE).delay(100).inOnly(PERSISTING).     from(PERSISTING).routeId("persisting").log("Payload ready for usage").to(CommonEndpoints.READY).delay(100).log("done").     from("seda:backingTask").routeId("backingTask").onException(Exception.class).redeliveryDelay(100L).onRedelivery((Exchange exchange) -> System.err.println(">> Retrying due to " + exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).getLocalizedMessage())).logExhausted(true).handled(true).logStackTrace(true).end().log("routing at ${routeId}").bean(ProcessingCamelBean.class).log("processing camel bean invoked"). }
false;protected;0;50;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from(START).routeId("start").log("Starting test").inOnly(DELIVERY).             from(DELIVERY).routeId("delivery").log("Doing some stuff").to(CommonEndpoints.RECEIVED).delay(100).inOnly(IN_QUEUE).             from(IN_QUEUE).routeId("processing").log("Do some more stuff").to(CommonEndpoints.PROCESSING).delay(100).inOnly(PERSISTENCE_QUEUE).             from(PERSISTENCE_QUEUE).routeId("wait-for-persisting").log("Waiting on available persisting instance").to(CommonEndpoints.PERSISTENCE_QUEUE).delay(100).inOnly(PERSISTING).             from(PERSISTING).routeId("persisting").log("Payload ready for usage").to(CommonEndpoints.READY).delay(100).log("done").             from("seda:backingTask").routeId("backingTask").onException(Exception.class).redeliveryDelay(100L).onRedelivery((Exchange exchange) -> System.err.println(">> Retrying due to " + exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).getLocalizedMessage())).logExhausted(true).handled(true).logStackTrace(true).end().log("routing at ${routeId}").bean(ProcessingCamelBean.class).log("processing camel bean invoked").         }     }. }
