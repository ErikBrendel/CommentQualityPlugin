commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected InterceptStrategy getTracingStrategy() {     return new EIPTracingStrategy(). }
false;public;0;18;;@Test public void testRoute() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(2).create().     MockEndpoint mockEndpoint = context.getEndpoint("mock:end", MockEndpoint.class).     mockEndpoint.expectedMessageCount(1).     mockEndpoint.expectedBodiesReceived("HELLO").     mockEndpoint.expectedHeaderReceived("TEST", "done").     template.requestBody("direct:start", "Hello").     assertThat("Not all exchanges were fully processed", notify.matches(5, TimeUnit.SECONDS), is(equalTo(true))).     mockEndpoint.assertIsSatisfied().     verify(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").routeId("start").log("start has been called").bean(TraceBean.class).delay(simple("${random(1000,2000)}")).to("seda:otherRoute").to("mock:end").     from("seda:otherRoute").routeId("otherRoute").log("otherRoute has been called").process(new CustomProcessor()).delay(simple("${random(0,500)}")). }
false;protected;0;19;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("start").log("start has been called").bean(TraceBean.class).delay(simple("${random(1000,2000)}")).to("seda:otherRoute").to("mock:end").             from("seda:otherRoute").routeId("otherRoute").log("otherRoute has been called").process(new CustomProcessor()).delay(simple("${random(0,500)}")).         }     }. }
false;public;1;7;;@Handler public String convertBocyToUpperCase(@Body String body) {     String converted = body.toUpperCase().     AWSXRay.getCurrentSegment().putAnnotation("body", converted).     AWSXRay.getCurrentSegment().putMetadata("originBody", body).     return converted. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader("TEST", "done"). }
