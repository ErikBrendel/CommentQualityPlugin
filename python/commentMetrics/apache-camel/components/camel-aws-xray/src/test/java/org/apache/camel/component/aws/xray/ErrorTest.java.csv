commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Override public void configure() throws Exception {     onException(Exception.class).process(new ExceptionProcessor()).maximumRedeliveries(3).redeliveryDelay(200).useExponentialBackOff().backOffMultiplier(1.5D).onRedelivery(new ExceptionRetryProcessor()).handled(true).log(LoggingLevel.WARN, "Caught error while performing task. Reason: ${exception.message} Stacktrace: ${exception.stacktrace}").end().     from("direct:start").routeId("start").log("start has been called").bean(TraceBean.class).delay(simple("${random(1000,2000)}")).to("seda:otherRoute").to("mock:end").     from("seda:otherRoute").routeId("otherRoute").log("otherRoute has been called").delay(simple("${random(0,500)}")). }
false;protected;0;30;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).process(new ExceptionProcessor()).maximumRedeliveries(3).redeliveryDelay(200).useExponentialBackOff().backOffMultiplier(1.5D).onRedelivery(new ExceptionRetryProcessor()).handled(true).log(LoggingLevel.WARN, "Caught error while performing task. Reason: ${exception.message} Stacktrace: ${exception.stacktrace}").end().             from("direct:start").routeId("start").log("start has been called").bean(TraceBean.class).delay(simple("${random(1000,2000)}")).to("seda:otherRoute").to("mock:end").             from("seda:otherRoute").routeId("otherRoute").log("otherRoute has been called").delay(simple("${random(0,500)}")).         }     }. }
false;protected;0;4;;@Override protected InterceptStrategy getTracingStrategy() {     return new TraceAnnotatedTracingStrategy(). }
false;public;0;11;;@Test public void testRoute() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create().     template.requestBody("direct:start", "Hello").     assertThat("Not all exchanges were fully processed", notify.matches(5, TimeUnit.SECONDS), is(equalTo(true))).     verify(). }
false;public;1;4;;@Handler public String convertBodyToUpperCase(@Body String body) throws Exception {     throw new Exception("test"). }
false;public;0;4;;@Override public String toString() {     return "TraceBean". }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Exception ex = (Exception) exchange.getProperties().get(Exchange.EXCEPTION_CAUGHT).     LOG.debug("Processing caught exception {}", ex.getLocalizedMessage()).     exchange.getIn().getHeaders().put("HandledError", ex.getLocalizedMessage()). }
false;public;0;4;;@Override public String toString() {     return "ExceptionProcessor". }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Exception ex = (Exception) exchange.getProperties().get(Exchange.EXCEPTION_CAUGHT).     LOG.debug(">> Attempting redelivery of handled exception {} with message: {}", ex.getClass().getSimpleName(), ex.getLocalizedMessage()). }
false;public;0;4;;@Override public String toString() {     return "ExceptionRetryProcessor". }
