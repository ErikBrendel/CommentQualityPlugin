commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean newSegment() {     return true. }
false;public;2;5;;@Override public String getOperationName(Exchange exchange, Endpoint endpoint) {     URI uri = URI.create(endpoint.getEndpointUri()).     return uri.getScheme() + ":" + uri.getRawAuthority(). }
false;public;3;5;;@Override public void pre(Entity segment, Exchange exchange, Endpoint endpoint) {     segment.putMetadata("component", CAMEL_COMPONENT + URI.create(endpoint.getEndpointUri()).getScheme()).     segment.putMetadata("camel.uri", URISupport.sanitizeUri(endpoint.getEndpointUri())). }
false;public;3;9;;@Override public void post(Entity segment, Exchange exchange, Endpoint endpoint) {     if (exchange.isFailed()) {         segment.setFault(true).         if (exchange.getException() != null) {             segment.addException(exchange.getException()).         }     } }
true;public,static;1;10;/**  * This method removes the scheme, any leading slash characters and options from the supplied URI. This is intended  * to extract a meaningful name from the URI that can be used in situations, such as the operation name.  *  * @param endpoint The endpoint  * @return The stripped value from the URI  */ ;/**  * This method removes the scheme, any leading slash characters and options from the supplied URI. This is intended  * to extract a meaningful name from the URI that can be used in situations, such as the operation name.  *  * @param endpoint The endpoint  * @return The stripped value from the URI  */ public static String stripSchemeAndOptions(Endpoint endpoint) {     int start = endpoint.getEndpointUri().indexOf(":").     start++.     // Remove any leading '/'     while (endpoint.getEndpointUri().charAt(start) == '/') {         start++.     }     int end = endpoint.getEndpointUri().indexOf("?").     return end == -1 ? endpoint.getEndpointUri().substring(start) : endpoint.getEndpointUri().substring(start, end). }
true;public,static;1;15;/**  * Extracts any parameters passed in the given URI as a key-value representation.  *  * @param uri The URI to extract passed parameters from  * @return A {@link Map} representation of the contained parameters of the provided URI  */ ;/**  * Extracts any parameters passed in the given URI as a key-value representation.  *  * @param uri The URI to extract passed parameters from  * @return A {@link Map} representation of the contained parameters of the provided URI  */ public static Map<String, String> toQueryParameters(String uri) {     int index = uri.indexOf("?").     if (index != -1) {         String queryString = uri.substring(index + 1).         Map<String, String> map = new HashMap<>().         for (String param : queryString.split("&")) {             String[] parts = param.split("=").             if (parts.length == 2) {                 map.put(parts[0], parts[1]).             }         }         return map.     }     return Collections.emptyMap(). }
