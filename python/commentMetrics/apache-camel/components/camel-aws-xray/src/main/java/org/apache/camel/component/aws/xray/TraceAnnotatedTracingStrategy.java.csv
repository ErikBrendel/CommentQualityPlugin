commented;modifiers;parameterAmount;loc;comment;code
false;public;4;61;;@Override public Processor wrapProcessorInInterceptors(CamelContext camelContext, NamedNode processorDefinition, Processor target, Processor nextTarget) throws Exception {     Class<?> processorClass = processorDefinition.getClass().     String shortName = processorDefinition.getShortName().     if (processorDefinition instanceof BeanDefinition) {         BeanProcessor beanProcessor = (BeanProcessor) target.         if (null != beanProcessor && null != beanProcessor.getBean()) {             processorClass = beanProcessor.getBean().getClass().         }     } else if (processorDefinition instanceof ProcessDefinition) {         DelegateSyncProcessor syncProcessor = (DelegateSyncProcessor) target.         if (null != syncProcessor && null != syncProcessor.getProcessor()) {             processorClass = syncProcessor.getProcessor().getClass().         }     }     if (processorClass == null) {         LOG.trace("Could not identify processor class on target processor {}", target).         return new DelegateAsyncProcessor(target).     } else if (!processorClass.isAnnotationPresent(XRayTrace.class)) {         LOG.trace("{} does not contain an @XRayTrace annotation. Skipping interception", processorClass.getSimpleName()).         return new DelegateAsyncProcessor(target).     }     LOG.trace("Wrapping process definition {} of target {} in order for recording its trace", processorDefinition, processorClass).     Annotation annotation = processorClass.getAnnotation(XRayTrace.class).     XRayTrace trace = (XRayTrace) annotation.     String metricName = trace.metricName().     if ("".equals(metricName)) {         metricName = processorClass.getSimpleName().     }     final Class<?> type = processorClass.     final String name = shortName + ":" + metricName.     return new DelegateAsyncProcessor((Exchange exchange) -> {         LOG.trace("Creating new subsegment for {} of type {} - EIP {}", name, type, target).         Subsegment subsegment = AWSXRay.beginSubsegment(sanitizeName(name)).         try {             LOG.trace("Processing EIP {}", target).             target.process(exchange).         } catch (Exception ex) {             LOG.trace("Handling exception thrown by invoked EIP {}", target).             subsegment.addException(ex).             throw ex.         } finally {             LOG.trace("Closing down subsegment for {}", name).             subsegment.close().         }     }). }
