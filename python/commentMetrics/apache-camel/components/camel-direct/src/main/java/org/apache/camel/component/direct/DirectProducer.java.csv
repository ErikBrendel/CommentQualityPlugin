commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     endpoint.addProducer(this). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     endpoint.removeProducer(this).     super.doStop(). }
false;public;1;12;;public void process(Exchange exchange) throws Exception {     DirectConsumer consumer = endpoint.getConsumer().     if (consumer == null) {         if (endpoint.isFailIfNoConsumers()) {             throw new DirectConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange).         } else {             log.debug("message ignored, no consumers available on endpoint: {}", endpoint).         }     } else {         consumer.getProcessor().process(exchange).     } }
false;public;2;20;;public boolean process(Exchange exchange, AsyncCallback callback) {     try {         DirectConsumer consumer = endpoint.getConsumer().         if (consumer == null) {             if (endpoint.isFailIfNoConsumers()) {                 exchange.setException(new DirectConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange)).             } else {                 log.debug("message ignored, no consumers available on endpoint: {}", endpoint).             }             callback.done(true).             return true.         } else {             return consumer.getAsyncProcessor().process(exchange, callback).         }     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     } }
