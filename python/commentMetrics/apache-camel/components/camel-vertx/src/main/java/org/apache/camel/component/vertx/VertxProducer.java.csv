commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public VertxEndpoint getEndpoint() {     return (VertxEndpoint) super.getEndpoint(). }
false;public;2;37;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     EventBus eventBus = getEndpoint().getEventBus().     if (eventBus == null) {         exchange.setException(new IllegalStateException("EventBus is not started or not configured")).         callback.done(true).         return true.     }     String address = getEndpoint().getAddress().     boolean reply = ExchangeHelper.isOutCapable(exchange).     boolean pubSub = getEndpoint().isPubSub().     Object body = getVertxBody(exchange).     if (body != null) {         if (reply) {             log.debug("Sending to: {} with body: {}", address, body).             eventBus.send(address, body, new CamelReplyHandler(exchange, callback)).             return false.         } else {             if (pubSub) {                 log.debug("Publishing to: {} with body: {}", address, body).                 eventBus.publish(address, body).             } else {                 log.debug("Sending to: {} with body: {}", address, body).                 eventBus.send(address, body).             }             callback.done(true).             return true.         }     }     exchange.setException(new InvalidPayloadRuntimeException(exchange, String.class)).     callback.done(true).     return true. }
false;public;1;15;;@Override public void handle(AsyncResult<Message<Object>> event) {     try {         // preserve headers         MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), false).         Throwable e = event.cause().         if (e != null) {             exchange.setException(e).         } else {             exchange.getOut().setBody(event.result().body()).         }     } finally {         callback.done(false).     } }
