commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void handle(Message event) {     onEventBusEvent(event). }
false;public;1;10;;@Override public void done(boolean doneSync) {     if (reply) {         Object body = getVertxBody(exchange).         if (body != null) {             log.debug("Sending reply to: {} with body: {}", event.replyAddress(), body).             event.reply(body).         }     } }
false;protected;1;24;;protected void onEventBusEvent(final Message event) {     log.debug("onEvent {}", event).     final boolean reply = event.replyAddress() != null.     final Exchange exchange = endpoint.createExchange(reply ? ExchangePattern.InOut : ExchangePattern.InOnly).     exchange.getIn().setBody(event.body()).     try {         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 if (reply) {                     Object body = getVertxBody(exchange).                     if (body != null) {                         log.debug("Sending reply to: {} with body: {}", event.replyAddress(), body).                         event.reply(body).                     }                 }             }         }).     } catch (Exception e) {         getExceptionHandler().handleException("Error processing Vertx event: " + event, exchange, e).     } }
false;protected;0;10;;protected void doStart() throws Exception {     if (log.isDebugEnabled()) {         log.debug("Registering EventBus handler on address {}", endpoint.getAddress()).     }     if (endpoint.getEventBus() != null) {         messageConsumer = endpoint.getEventBus().consumer(endpoint.getAddress(), handler).     }     super.doStart(). }
false;protected;0;17;;protected void doStop() throws Exception {     if (log.isDebugEnabled()) {         log.debug("Unregistering EventBus handler on address {}", endpoint.getAddress()).     }     try {         if (messageConsumer != null && messageConsumer.isRegistered()) {             messageConsumer.unregister().             messageConsumer = null.         }     } catch (IllegalStateException e) {         log.warn("EventBus already stopped on address {}", endpoint.getAddress()).     // ignore if already stopped as vertx throws this exception if its already stopped etc.     // unfortunately it does not provide an nicer api to know its state     }     super.doStop(). }
