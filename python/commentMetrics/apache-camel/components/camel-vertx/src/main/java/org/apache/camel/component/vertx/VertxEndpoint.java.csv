commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public VertxComponent getComponent() {     return (VertxComponent) super.getComponent(). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new VertxProducer(this). }
false;public;1;5;;public Consumer createConsumer(Processor processor) throws Exception {     VertxConsumer consumer = new VertxConsumer(this, processor).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public boolean isMultipleConsumersSupported() {     return true. }
false;public;0;7;;public EventBus getEventBus() {     if (getVertx() != null) {         return getVertx().eventBus().     } else {         return null.     } }
false;public;0;3;;public Vertx getVertx() {     return getComponent().getVertx(). }
false;public;0;3;;public String getAddress() {     return address. }
true;public;1;3;/**  * Sets the event bus address used to communicate  */ ;/**  * Sets the event bus address used to communicate  */ public void setAddress(String address) {     this.address = address. }
false;public;0;3;;public boolean isPubSub() {     return pubSub != null && pubSub. }
false;public;0;3;;public Boolean getPubSub() {     return pubSub. }
true;public;1;3;/**  * Whether to use publish/subscribe instead of point to point when sending to a vertx endpoint.  */ ;/**  * Whether to use publish/subscribe instead of point to point when sending to a vertx endpoint.  */ public void setPubSub(Boolean pubSub) {     this.pubSub = pubSub. }
