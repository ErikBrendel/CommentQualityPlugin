commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     String container = endpoint.getContainer().     String locationId = endpoint.getLocationId().     JcloudsBlobStoreHelper.ensureContainerExists(blobStore, container, locationId). }
false;protected;0;32;;@Override protected int poll() throws Exception {     shutdownRunningTask = null.     pendingExchanges = 0.     Queue<Exchange> queue = new LinkedList<>().     String directory = endpoint.getDirectory().     ListContainerOptions opt = new ListContainerOptions().     if (!Strings.isNullOrEmpty(directory)) {         opt = opt.inDirectory(directory).     }     for (StorageMetadata md : blobStore.list(container, opt.maxResults(maxMessagesPerPoll).recursive())) {         String blobName = md.getName().         if (md.getType().equals(StorageType.BLOB)) {             if (!Strings.isNullOrEmpty(blobName)) {                 InputStream body = JcloudsBlobStoreHelper.readBlob(blobStore, container, blobName).                 if (body != null) {                     Exchange exchange = endpoint.createExchange().                     CachedOutputStream cos = new CachedOutputStream(exchange).                     IOHelper.copy(body, cos).                     exchange.getIn().setBody(cos.newStreamCache()).                     exchange.setProperty(JcloudsConstants.BLOB_NAME, blobName).                     queue.add(exchange).                 }             }         }     }     return queue.isEmpty() ? 0 : processBatch(CastUtils.cast(queue)). }
false;public;1;26;;public int processBatch(Queue<Object> exchanges) throws Exception {     int total = exchanges.size().     for (int index = 0. index < total && isBatchAllowed(). index++) {         // only loop if we are started (allowed to run)         Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll()).         // add current index and total as properties         exchange.setProperty(Exchange.BATCH_INDEX, index).         exchange.setProperty(Exchange.BATCH_SIZE, total).         exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1).         // update pending number of exchanges         pendingExchanges = total - index - 1.         log.trace("Processing exchange [{}]...", exchange).         getProcessor().process(exchange).         if (exchange.getException() != null) {             // if we failed then throw exception             throw exchange.getException().         }         blobStore.removeBlob(container, exchange.getProperty(JcloudsConstants.BLOB_NAME, String.class)).     }     return total. }
