commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     String container = endpoint.getContainer().     String locationId = endpoint.getLocationId().     JcloudsBlobStoreHelper.ensureContainerExists(blobStore, container, locationId). }
false;public;1;29;;@Override public void process(Exchange exchange) throws Exception {     String container = getContainerName(exchange).     String blobName = getBlobName(exchange).     String operation = getOperation(exchange).     List blobNames = getBlobNameList(exchange).     if (log.isTraceEnabled()) {         log.trace("Processing {} operation on '{}'", operation, container + "/" + blobName).     }     if (JcloudsConstants.GET.equals(operation)) {         exchange.getOut().setBody(JcloudsBlobStoreHelper.readBlob(blobStore, container, blobName)).     } else if (JcloudsConstants.COUNT_BLOBS.equals(operation)) {         exchange.getOut().setBody(JcloudsBlobStoreHelper.countBlob(blobStore, container)).     } else if (JcloudsConstants.REMOVE_BLOB.equals(operation)) {         JcloudsBlobStoreHelper.removeBlob(blobStore, container, blobName).     } else if (JcloudsConstants.CLEAR_CONTAINER.equals(operation)) {         JcloudsBlobStoreHelper.clearContainer(blobStore, container).     } else if (JcloudsConstants.DELETE_CONTAINER.equals(operation)) {         JcloudsBlobStoreHelper.deleteContainer(blobStore, container).     } else if (JcloudsConstants.CONTAINER_EXISTS.equals(operation)) {         exchange.getOut().setBody(JcloudsBlobStoreHelper.containerExists(blobStore, container)).     } else if (JcloudsConstants.REMOVE_BLOBS.equals(operation)) {         JcloudsBlobStoreHelper.removeBlobs(blobStore, container, blobNames).     } else {         Payload body = exchange.getIn().getBody(Payload.class).         JcloudsBlobStoreHelper.writeBlob(blobStore, container, blobName, body).     } }
true;protected;1;7;/**  * Retrieves the blobName from the URI or from the exchange headers. The header will take precedence over the URI.  */ ;/**  * Retrieves the blobName from the URI or from the exchange headers. The header will take precedence over the URI.  */ protected String getBlobName(Exchange exchange) {     String blobName = ((JcloudsBlobStoreEndpoint) getEndpoint()).getBlobName().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(JcloudsConstants.BLOB_NAME))) {         blobName = exchange.getIn().getHeader(JcloudsConstants.BLOB_NAME, String.class).     }     return blobName. }
true;protected;1;7;/**  * Retrieves the containerName from the URI or from the exchange headers. The header will take precedence over the URI.  */ ;/**  * Retrieves the containerName from the URI or from the exchange headers. The header will take precedence over the URI.  */ protected String getContainerName(Exchange exchange) {     String containerName = ((JcloudsBlobStoreEndpoint) getEndpoint()).getContainer().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(JcloudsConstants.CONTAINER_NAME))) {         containerName = exchange.getIn().getHeader(JcloudsConstants.CONTAINER_NAME, String.class).     }     return containerName. }
true;public;1;8;/**  * Retrieves the operation from the URI or from the exchange headers. The header will take precedence over the URI.  */ ;/**  * Retrieves the operation from the URI or from the exchange headers. The header will take precedence over the URI.  */ public String getOperation(Exchange exchange) {     String operation = ((JcloudsBlobStoreEndpoint) getEndpoint()).getOperation().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(JcloudsConstants.OPERATION))) {         operation = exchange.getIn().getHeader(JcloudsConstants.OPERATION, String.class).     }     return operation. }
true;public;1;8;/**  * Retrieves the locationId from the URI or from the exchange headers. The header will take precedence over the URI.  */ ;/**  * Retrieves the locationId from the URI or from the exchange headers. The header will take precedence over the URI.  */ public String getLocationId(Exchange exchange) {     String operation = ((JcloudsBlobStoreEndpoint) getEndpoint()).getLocationId().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(JcloudsConstants.LOCATION_ID))) {         operation = exchange.getIn().getHeader(JcloudsConstants.LOCATION_ID, String.class).     }     return operation. }
true;public;1;8;/**  * Retrieves the Blob name list from the exchange headers.  */ ;/**  * Retrieves the Blob name list from the exchange headers.  */ public List getBlobNameList(Exchange exchange) {     List blobNames = new ArrayList<>().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(JcloudsConstants.BLOB_NAME_LIST))) {         blobNames = exchange.getIn().getHeader(JcloudsConstants.BLOB_NAME_LIST, List.class).     }     return blobNames. }
