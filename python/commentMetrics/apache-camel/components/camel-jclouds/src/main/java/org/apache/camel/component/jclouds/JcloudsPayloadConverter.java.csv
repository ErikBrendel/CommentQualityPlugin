commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;@Converter public static Payload toPayload(byte[] bytes) {     return new ByteSourcePayload(ByteSource.wrap(bytes)). }
false;public,static;2;4;;@Converter public static Payload toPayload(String str, Exchange ex) throws UnsupportedEncodingException {     return toPayload(str.getBytes(ExchangeHelper.getCharsetName(ex))). }
false;public,static;1;3;;public static Payload toPayload(String str) throws UnsupportedEncodingException {     return toPayload(str, null). }
false;public,static;1;4;;@Converter public static Payload toPayload(File file) {     return new ByteSourcePayload(Files.asByteSource(file)). }
false;protected,static;2;33;;protected static Payload setContentMetadata(Payload payload, Exchange exchange) {     // Just add an NPE check on the payload     if (exchange == null) {         return payload.     }     String contentType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class).     String contentEncoding = exchange.getIn().getHeader(Exchange.CONTENT_ENCODING, String.class).     String contentDisposition = exchange.getIn().getHeader(JcloudsConstants.CONTENT_DISPOSITION, String.class).     String contentLanguage = exchange.getIn().getHeader(JcloudsConstants.CONTENT_LANGUAGE, String.class).     Date payloadExpires = exchange.getIn().getHeader(JcloudsConstants.PAYLOAD_EXPIRES, Date.class).     if (ObjectHelper.isNotEmpty(contentType)) {         payload.getContentMetadata().setContentType(contentType).     }     if (ObjectHelper.isNotEmpty(contentEncoding)) {         payload.getContentMetadata().setContentEncoding(contentEncoding).     }     if (ObjectHelper.isNotEmpty(contentDisposition)) {         payload.getContentMetadata().setContentDisposition(contentDisposition).     }     if (ObjectHelper.isNotEmpty(contentLanguage)) {         payload.getContentMetadata().setContentLanguage(contentLanguage).     }     if (ObjectHelper.isNotEmpty(payloadExpires)) {         payload.getContentMetadata().setExpires(payloadExpires).     }     return payload. }
false;public,static;2;11;;@Converter public static Payload toPayload(final InputStream is, Exchange exchange) throws IOException {     InputStreamPayload payload = new InputStreamPayload(is).     // only set the contentlength if possible     if (is.markSupported()) {         long contentLength = ByteStreams.toByteArray(is).length.         is.reset().         payload.getContentMetadata().setContentLength(contentLength).     }     return payload. }
false;public,static;2;4;;@Converter public static Payload toPayload(StreamSource source, Exchange exchange) throws IOException {     return toPayload(new StreamSourceCache(source, exchange), exchange). }
false;public,static;2;9;;@Converter public static Payload toPayload(final StreamSourceCache cache, Exchange exchange) throws IOException {     long contentLength = ByteStreams.toByteArray(cache.getInputStream()).length.     cache.reset().     InputStreamPayload payload = new InputStreamPayload(cache.getInputStream()).     payload.getContentMetadata().setContentLength(contentLength).     setContentMetadata(payload, exchange).     return payload. }
false;public,static;4;16;;@FallbackConverter @SuppressWarnings("unchecked") public static <T extends Payload> T convertTo(Class<T> type, Exchange exchange, Object value, TypeConverterRegistry registry) throws IOException {     Class<?> sourceType = value.getClass().     if (type == Payload.class && WrappedFile.class.isAssignableFrom(sourceType)) {         // attempt to convert to JClouds Payload from a file         WrappedFile wf = (WrappedFile) value.         if (wf.getFile() != null) {             TypeConverter converter = registry.lookup(Payload.class, wf.getFile().getClass()).             if (converter != null) {                 return (T) converter.tryConvertTo(Payload.class, wf.getFile()).             }         }     }     return null. }
