commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;6;/**  * Creates all directories that are part of the blobName.  */ ;/**  * Creates all directories that are part of the blobName.  */ public static void mkDirs(BlobStore blobStore, String container, String blobName) {     if (blobStore != null && !Strings.isNullOrEmpty(blobName) && blobName.contains("/")) {         String directory = BlobStoreUtils.parseDirectoryFromPath(blobName).         blobStore.createDirectory(container, directory).     } }
true;public,static;3;5;/**  * Checks if container exists and creates one if not.  *  * @param blobStore  The {@link BlobStore} to use.  * @param container  The container name to check against.  * @param locationId The locationId to create the container if not found.  */ ;/**  * Checks if container exists and creates one if not.  *  * @param blobStore  The {@link BlobStore} to use.  * @param container  The container name to check against.  * @param locationId The locationId to create the container if not found.  */ public static void ensureContainerExists(BlobStore blobStore, String container, String locationId) {     if (blobStore != null && !Strings.isNullOrEmpty(container) && !blobStore.containerExists(container)) {         blobStore.createContainerInLocation(getLocationById(blobStore, locationId), container).     } }
true;public,static;2;10;/**  * Returns the {@link Location} that matches the locationId.  */ ;/**  * Returns the {@link Location} that matches the locationId.  */ public static Location getLocationById(BlobStore blobStore, String locationId) {     if (blobStore != null && !Strings.isNullOrEmpty(locationId)) {         for (Location location : blobStore.listAssignableLocations()) {             if (locationId.equals(location.getId())) {                 return location.             }         }     }     return null. }
true;public,static;4;7;/**  * Writes {@link Payload} to the {@link BlobStore}.  */ ;/**  * Writes {@link Payload} to the {@link BlobStore}.  */ public static void writeBlob(BlobStore blobStore, String container, String blobName, Payload payload) {     if (blobName != null && payload != null) {         mkDirs(blobStore, container, blobName).         Blob blob = blobStore.blobBuilder(blobName).payload(payload).contentType(MediaType.APPLICATION_OCTET_STREAM).contentDisposition(blobName).build().         blobStore.putBlob(container, blob, multipart()).     } }
true;public,static;3;10;/**  * Reads from a {@link BlobStore}. It returns an Object.  */ ;/**  * Reads from a {@link BlobStore}. It returns an Object.  */ public static InputStream readBlob(BlobStore blobStore, String container, String blobName) throws IOException {     InputStream is = null.     if (!Strings.isNullOrEmpty(blobName)) {         Blob blob = blobStore.getBlob(container, blobName).         if (blob != null && blob.getPayload() != null) {             is = blobStore.getBlob(container, blobName).getPayload().openStream().         }     }     return is. }
true;public,static;2;4;/**  * Return the count of all the blobs in the container  */ ;/**  * Return the count of all the blobs in the container  */ public static long countBlob(BlobStore blobStore, String container) {     long blobsCount = blobStore.countBlobs(container).     return blobsCount. }
true;public,static;3;5;/**  * Remove a specific blob from a {@link BlobStore}  */ ;/**  * Remove a specific blob from a {@link BlobStore}  */ public static void removeBlob(BlobStore blobStore, String container, String blobName) throws IOException {     if (!Strings.isNullOrEmpty(blobName)) {         blobStore.removeBlob(container, blobName).     } }
true;public,static;2;3;/**  * Clear a {@link BlobStore} specific container  */ ;/**  * Clear a {@link BlobStore} specific container  */ public static void clearContainer(BlobStore blobStore, String container) throws IOException {     blobStore.clearContainer(container). }
true;public,static;2;3;/**  * Delete a {@link BlobStore} specific container  */ ;/**  * Delete a {@link BlobStore} specific container  */ public static void deleteContainer(BlobStore blobStore, String container) throws IOException {     blobStore.deleteContainer(container). }
true;public,static;2;4;/**  * Check if a {@link BlobStore} specific container exists or not  */ ;/**  * Check if a {@link BlobStore} specific container exists or not  */ public static boolean containerExists(BlobStore blobStore, String container) throws IOException {     boolean result = blobStore.containerExists(container).     return result. }
true;public,static;3;3;/**  * Delete a list of {@link BlobStore} blob  */ ;/**  * Delete a list of {@link BlobStore} blob  */ public static void removeBlobs(BlobStore blobStore, String container, List blobNames) throws IOException {     blobStore.removeBlobs(container, blobNames). }
