commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;@BeforeClass public static void setUpClass() throws Exception {     BlobStore blobStore = ContextBuilder.newBuilder("transient").credentials("id", "credential").buildView(BlobStoreContext.class).getBlobStore().     blobStore.createContainerInLocation(null, "foo").     blobStore.createContainerInLocation(null, "bar"). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("classpath:blobstore-test.xml"). }
false;public;0;6;;@Test public void testBlobStorePut() throws InterruptedException {     resultFoo.expectedMessageCount(1).     template.sendBody("direct:start", "Some message").     resultFoo.assertIsSatisfied(). }
false;public;0;6;;@Test public void testBlobStoreGet() throws InterruptedException {     resultFoo.expectedMessageCount(1).     template.sendBody("direct:start", "Some message").     resultFoo.assertIsSatisfied(). }
false;public;0;6;;@Test public void testProduceWithUrlParametes() throws InterruptedException {     resultBar.expectedMessageCount(1).     template.sendBody("direct:start-with-url-parameters", "Some message").     resultBar.assertIsSatisfied(). }
false;public;0;5;;@Test public void testBlobStoreCount() throws InterruptedException {     Long count = template.requestBody("direct:count", "Some message", Long.class).     assertEquals(new Long(1), count). }
false;public;0;5;;@Test public void testBlobStoreRemove() throws InterruptedException {     Long count = template.requestBody("direct:remove", "Some message", Long.class).     assertEquals(new Long(0), count). }
false;public;0;5;;@Test public void testBlobStoreClear() throws InterruptedException {     Long count = template.requestBody("direct:clear", "Some message", Long.class).     assertEquals(new Long(0), count). }
false;public;0;5;;@Test public void testBlobStoreDelete() throws InterruptedException {     Boolean result = template.requestBody("direct:delete", "Some message", Boolean.class).     assertEquals(false, result). }
false;public;0;5;;@Test public void testBlobStoreContainerExists() throws InterruptedException {     Boolean result = template.requestBody("direct:exists", "Some message", Boolean.class).     assertEquals(true, result). }
false;public;0;14;;@Test public void testBlobStoreRemoveBlobs() throws InterruptedException {     Boolean result = template.requestBody("direct:exists", "Some message", Boolean.class).     assertEquals(true, result).     List blobsToRemove = new ArrayList<>().     blobsToRemove.add("testName").     Map<String, Object> headers = new HashMap<>().     headers.put(JcloudsConstants.OPERATION, JcloudsConstants.REMOVE_BLOBS).     headers.put(JcloudsConstants.CONTAINER_NAME, "foo").     headers.put(JcloudsConstants.BLOB_NAME_LIST, blobsToRemove).     template.sendBodyAndHeaders("direct:remove-blobs", null, headers).     Long count = template.requestBody("direct:count-after-remove-blobs", null, Long.class).     assertEquals(new Long(0), count). }
