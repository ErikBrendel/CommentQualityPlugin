commented;modifiers;parameterAmount;loc;comment;code
false;public;1;45;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case listAccessKeys:             listAccessKeys(getEndpoint().getIamClient(), exchange).             break.         case createAccessKey:             createAccessKey(getEndpoint().getIamClient(), exchange).             break.         case deleteAccessKey:             deleteAccessKey(getEndpoint().getIamClient(), exchange).             break.         case updateAccessKey:             updateAccessKey(getEndpoint().getIamClient(), exchange).             break.         case createUser:             createUser(getEndpoint().getIamClient(), exchange).             break.         case deleteUser:             deleteUser(getEndpoint().getIamClient(), exchange).             break.         case getUser:             getUser(getEndpoint().getIamClient(), exchange).             break.         case listUsers:             listUsers(getEndpoint().getIamClient(), exchange).             break.         case createGroup:             createGroup(getEndpoint().getIamClient(), exchange).             break.         case deleteGroup:             deleteGroup(getEndpoint().getIamClient(), exchange).             break.         case listGroups:             listGroups(getEndpoint().getIamClient(), exchange).             break.         case addUserToGroup:             addUserToGroup(getEndpoint().getIamClient(), exchange).             break.         case removeUserFromGroup:             removeUserFromGroup(getEndpoint().getIamClient(), exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;7;;private IAMOperations determineOperation(Exchange exchange) {     IAMOperations operation = exchange.getIn().getHeader(IAMConstants.OPERATION, IAMOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected IAMConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (iamProducerToString == null) {         iamProducerToString = "IAMProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return iamProducerToString. }
false;public;0;4;;@Override public IAMEndpoint getEndpoint() {     return (IAMEndpoint) super.getEndpoint(). }
false;private;2;11;;private void listAccessKeys(AmazonIdentityManagement iamClient, Exchange exchange) {     ListAccessKeysResult result.     try {         result = iamClient.listAccessKeys().     } catch (AmazonServiceException ase) {         log.trace("List Access Keys command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void createUser(AmazonIdentityManagement iamClient, Exchange exchange) {     CreateUserRequest request = new CreateUserRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     } else {         throw new IllegalArgumentException("User Name must be specified").     }     CreateUserResult result.     try {         result = iamClient.createUser(request).     } catch (AmazonServiceException ase) {         log.trace("Create user command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void deleteUser(AmazonIdentityManagement iamClient, Exchange exchange) {     DeleteUserRequest request = new DeleteUserRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     } else {         throw new IllegalArgumentException("User Name must be specified").     }     DeleteUserResult result.     try {         result = iamClient.deleteUser(request).     } catch (AmazonServiceException ase) {         log.trace("Delete user command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void getUser(AmazonIdentityManagement iamClient, Exchange exchange) {     GetUserRequest request = new GetUserRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     } else {         throw new IllegalArgumentException("User Name must be specified").     }     GetUserResult result.     try {         result = iamClient.getUser(request).     } catch (AmazonServiceException ase) {         log.trace("get user command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;11;;private void listUsers(AmazonIdentityManagement iamClient, Exchange exchange) {     ListUsersResult result.     try {         result = iamClient.listUsers().     } catch (AmazonServiceException ase) {         log.trace("List users command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;16;;private void createAccessKey(AmazonIdentityManagement iamClient, Exchange exchange) {     CreateAccessKeyRequest request = new CreateAccessKeyRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     }     CreateAccessKeyResult result.     try {         result = iamClient.createAccessKey(request).     } catch (AmazonServiceException ase) {         log.trace("Create Access Key command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;22;;private void deleteAccessKey(AmazonIdentityManagement iamClient, Exchange exchange) {     DeleteAccessKeyRequest request = new DeleteAccessKeyRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.ACCESS_KEY_ID))) {         String accessKeyId = exchange.getIn().getHeader(IAMConstants.ACCESS_KEY_ID, String.class).         request.withAccessKeyId(accessKeyId).     } else {         throw new IllegalArgumentException("Key Id must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     }     DeleteAccessKeyResult result.     try {         result = iamClient.deleteAccessKey(request).     } catch (AmazonServiceException ase) {         log.trace("Delete Access Key command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;28;;private void updateAccessKey(AmazonIdentityManagement iamClient, Exchange exchange) {     UpdateAccessKeyRequest request = new UpdateAccessKeyRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.ACCESS_KEY_ID))) {         String accessKeyId = exchange.getIn().getHeader(IAMConstants.ACCESS_KEY_ID, String.class).         request.withAccessKeyId(accessKeyId).     } else {         throw new IllegalArgumentException("Key Id must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.ACCESS_KEY_STATUS))) {         String status = exchange.getIn().getHeader(IAMConstants.ACCESS_KEY_STATUS, String.class).         request.withStatus(StatusType.fromValue(status)).     } else {         throw new IllegalArgumentException("Access Key status must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     }     UpdateAccessKeyResult result.     try {         result = iamClient.updateAccessKey(request).     } catch (AmazonServiceException ase) {         log.trace("Update Access Key command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;22;;private void createGroup(AmazonIdentityManagement iamClient, Exchange exchange) {     CreateGroupRequest request = new CreateGroupRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.GROUP_NAME))) {         String groupName = exchange.getIn().getHeader(IAMConstants.GROUP_NAME, String.class).         request.withGroupName(groupName).     } else {         throw new IllegalArgumentException("Group Name must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.GROUP_PATH))) {         String groupPath = exchange.getIn().getHeader(IAMConstants.GROUP_PATH, String.class).         request.withPath(groupPath).     }     CreateGroupResult result.     try {         result = iamClient.createGroup(request).     } catch (AmazonServiceException ase) {         log.trace("Create Group command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void deleteGroup(AmazonIdentityManagement iamClient, Exchange exchange) {     DeleteGroupRequest request = new DeleteGroupRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.GROUP_NAME))) {         String groupName = exchange.getIn().getHeader(IAMConstants.GROUP_NAME, String.class).         request.withGroupName(groupName).     } else {         throw new IllegalArgumentException("Group Name must be specified").     }     DeleteGroupResult result.     try {         result = iamClient.deleteGroup(request).     } catch (AmazonServiceException ase) {         log.trace("Delete Group command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;11;;private void listGroups(AmazonIdentityManagement iamClient, Exchange exchange) {     ListGroupsResult result.     try {         result = iamClient.listGroups().     } catch (AmazonServiceException ase) {         log.trace("List Groups command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;24;;private void addUserToGroup(AmazonIdentityManagement iamClient, Exchange exchange) {     AddUserToGroupRequest request = new AddUserToGroupRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.GROUP_NAME))) {         String groupName = exchange.getIn().getHeader(IAMConstants.GROUP_NAME, String.class).         request.withGroupName(groupName).     } else {         throw new IllegalArgumentException("Group Name must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     } else {         throw new IllegalArgumentException("User Name must be specified").     }     AddUserToGroupResult result.     try {         result = iamClient.addUserToGroup(request).     } catch (AmazonServiceException ase) {         log.trace("Add User To Group command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;24;;private void removeUserFromGroup(AmazonIdentityManagement iamClient, Exchange exchange) {     RemoveUserFromGroupRequest request = new RemoveUserFromGroupRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.GROUP_NAME))) {         String groupName = exchange.getIn().getHeader(IAMConstants.GROUP_NAME, String.class).         request.withGroupName(groupName).     } else {         throw new IllegalArgumentException("Group Name must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(IAMConstants.USERNAME))) {         String userName = exchange.getIn().getHeader(IAMConstants.USERNAME, String.class).         request.withUserName(userName).     } else {         throw new IllegalArgumentException("User Name must be specified").     }     RemoveUserFromGroupResult result.     try {         result = iamClient.removeUserFromGroup(request).     } catch (AmazonServiceException ase) {         log.trace("Remove User From Group command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
