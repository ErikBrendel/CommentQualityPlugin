commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * Returns a copy of this configuration  */ ;/**  * Returns a copy of this configuration  */ public StompConfiguration copy() {     try {         StompConfiguration copy = (StompConfiguration) clone().         return copy.     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public;0;3;;public String getBrokerURL() {     return brokerURL. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * The virtual host name  */ ;/**  * The virtual host name  */ public void setHost(String host) {     this.host = host. }
true;public;1;3;/**  * The URI of the Stomp broker to connect to  */ ;/**  * The URI of the Stomp broker to connect to  */ public void setBrokerURL(String brokerURL) {     this.brokerURL = brokerURL. }
false;public;0;3;;public String getLogin() {     return login. }
true;public;1;3;/**  * The username  */ ;/**  * The username  */ public void setLogin(String login) {     this.login = login. }
false;public;0;3;;public String getPasscode() {     return passcode. }
true;public;1;3;/**  * The password  */ ;/**  * The password  */ public void setPasscode(String passcode) {     this.passcode = passcode. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * To configure security using SSLContextParameters  */ ;/**  * To configure security using SSLContextParameters  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
