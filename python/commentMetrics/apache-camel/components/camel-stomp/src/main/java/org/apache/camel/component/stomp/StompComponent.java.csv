commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// Implementation methods // ------------------------------------------------------------------------- @Override protected void doStart() throws Exception {     super.doStart().     if (getHeaderFilterStrategy() == null) {         setHeaderFilterStrategy(new DefaultHeaderFilterStrategy()).     } }
false;protected;3;21;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // must copy config so we do not have side effects     StompConfiguration config = getConfiguration().copy().     // allow to configure configuration from uri parameters     setProperties(config, parameters).     StompEndpoint endpoint = new StompEndpoint(uri, this, config, remaining).     // set header filter strategy and then call set properties     // if user wants to add CustomHeaderFilterStrategy     endpoint.setHeaderFilterStrategy(getHeaderFilterStrategy()).     setProperties(endpoint, parameters).     if (config.getSslContextParameters() == null) {         config.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return endpoint. }
false;public;0;3;;public StompConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * To use the shared stomp configuration  */ ;/**  * To use the shared stomp configuration  */ public void setConfiguration(StompConfiguration configuration) {     this.configuration = configuration. }
true;public;1;3;/**  * The URI of the Stomp broker to connect to  */ ;/**  * The URI of the Stomp broker to connect to  */ public void setBrokerURL(String brokerURL) {     configuration.setBrokerURL(brokerURL). }
true;public;1;3;/**  * The username  */ ;/**  * The username  */ public void setLogin(String login) {     configuration.setLogin(login). }
true;public;1;3;/**  * The password  */ ;/**  * The password  */ public void setPasscode(String passcode) {     configuration.setPasscode(passcode). }
true;public;1;3;/**  * The virtual host  */ ;/**  * The virtual host  */ public void setHost(String host) {     configuration.setHost(host). }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
