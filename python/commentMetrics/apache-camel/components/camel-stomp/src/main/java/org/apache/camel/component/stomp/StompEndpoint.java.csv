commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new StompProducer(this). }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return new StompConsumer(this, processor). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;1;6;;@Override public void onFailure(Throwable value) {     if (isStarted()) {         connection.close(null).     } }
false;public;1;10;;@Override public void onSuccess(StompFrame value) {     if (!consumers.isEmpty()) {         Exchange exchange = createExchange().         exchange.getIn().setBody(value.content()).         for (StompConsumer consumer : consumers) {             consumer.processExchange(exchange).         }     } }
false;public;0;23;;@Override public void run() {     connection.receive(new Callback<StompFrame>() {          @Override         public void onFailure(Throwable value) {             if (isStarted()) {                 connection.close(null).             }         }          @Override         public void onSuccess(StompFrame value) {             if (!consumers.isEmpty()) {                 Exchange exchange = createExchange().                 exchange.getIn().setBody(value.content()).                 for (StompConsumer consumer : consumers) {                     consumer.processExchange(exchange).                 }             }         }     }).     connection.resume(). }
false;protected;0;43;;@Override protected void doStart() throws Exception {     final Promise<CallbackConnection> promise = new Promise<>().     stomp = new Stomp(configuration.getBrokerURL()).     stomp.setLogin(configuration.getLogin()).     stomp.setPasscode(configuration.getPasscode()).     if (configuration.getSslContextParameters() != null) {         stomp.setSslContext(configuration.getSslContextParameters().createSSLContext(getCamelContext())).     }     stomp.connectCallback(promise).     if (configuration.getHost() != null && !configuration.getHost().isEmpty()) {         stomp.setHost(configuration.getHost()).     }     connection = promise.await().     connection.getDispatchQueue().execute(new Task() {          @Override         public void run() {             connection.receive(new Callback<StompFrame>() {                  @Override                 public void onFailure(Throwable value) {                     if (isStarted()) {                         connection.close(null).                     }                 }                  @Override                 public void onSuccess(StompFrame value) {                     if (!consumers.isEmpty()) {                         Exchange exchange = createExchange().                         exchange.getIn().setBody(value.content()).                         for (StompConsumer consumer : consumers) {                             consumer.processExchange(exchange).                         }                     }                 }             }).             connection.resume().         }     }). }
false;public;0;5;;@Override public void run() {     StompFrame frame = new StompFrame(DISCONNECT).     connection.send(frame, null). }
false;protected;0;11;;@Override protected void doStop() throws Exception {     connection.getDispatchQueue().execute(new Task() {          @Override         public void run() {             StompFrame frame = new StompFrame(DISCONNECT).             connection.send(frame, null).         }     }).     connection.close(null). }
false;public;1;5;;@Override public void onFailure(Throwable e) {     exchange.setException(e).     callback.done(false). }
false;public;1;4;;@Override public void onSuccess(Void v) {     callback.done(false). }
false;public;0;15;;@Override public void run() {     connection.send(frame, new Callback<Void>() {          @Override         public void onFailure(Throwable e) {             exchange.setException(e).             callback.done(false).         }          @Override         public void onSuccess(Void v) {             callback.done(false).         }     }). }
false;protected;2;25;;protected void send(final Exchange exchange, final AsyncCallback callback) {     final StompFrame frame = new StompFrame(SEND).     populateCamelMessageHeadersToStompFrames(exchange, frame).     frame.addHeader(DESTINATION, StompFrame.encodeHeader(destination)).     // Fix for CAMEL-9506 leveraging the camel converter to do the change     frame.content(utf8(exchange.getIn().getBody(String.class))).     connection.getDispatchQueue().execute(new Task() {          @Override         public void run() {             connection.send(frame, new Callback<Void>() {                  @Override                 public void onFailure(Throwable e) {                     exchange.setException(e).                     callback.done(false).                 }                  @Override                 public void onSuccess(Void v) {                     callback.done(false).                 }             }).         }     }). }
false;private;2;13;;private void populateCamelMessageHeadersToStompFrames(final Exchange exchange, final StompFrame frame) {     Set<Map.Entry<String, Object>> entries = exchange.getIn().getHeaders().entrySet().     for (Map.Entry<String, Object> entry : entries) {         String headerName = entry.getKey().         Object headerValue = entry.getValue().         if (!headerName.toLowerCase().startsWith("camel") && !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)) {             if (headerValue != null) {                 frame.addHeader(new AsciiBuffer(headerName), StompFrame.encodeHeader(headerValue.toString())).             }         }     } }
false;public;0;7;;@Override public void run() {     StompFrame frame = new StompFrame(SUBSCRIBE).     frame.addHeader(DESTINATION, StompFrame.encodeHeader(destination)).     frame.addHeader(ID, consumer.id).     connection.send(frame, null). }
false;;1;12;;void addConsumer(final StompConsumer consumer) {     connection.getDispatchQueue().execute(new Task() {          @Override         public void run() {             StompFrame frame = new StompFrame(SUBSCRIBE).             frame.addHeader(DESTINATION, StompFrame.encodeHeader(destination)).             frame.addHeader(ID, consumer.id).             connection.send(frame, null).         }     }).     consumers.add(consumer). }
false;public;0;7;;@Override public void run() {     StompFrame frame = new StompFrame(UNSUBSCRIBE).     frame.addHeader(DESTINATION, StompFrame.encodeHeader(destination)).     frame.addHeader(ID, consumer.id).     connection.send(frame, null). }
false;;1;12;;void removeConsumer(final StompConsumer consumer) {     connection.getDispatchQueue().execute(new Task() {          @Override         public void run() {             StompFrame frame = new StompFrame(UNSUBSCRIBE).             frame.addHeader(DESTINATION, StompFrame.encodeHeader(destination)).             frame.addHeader(ID, consumer.id).             connection.send(frame, null).         }     }).     consumers.remove(consumer). }
false;;0;3;;AsciiBuffer getNextId() {     return connection.nextId(). }
false;public;0;6;;public HeaderFilterStrategy getHeaderFilterStrategy() {     if (headerFilterStrategy == null) {         headerFilterStrategy = new DefaultHeaderFilterStrategy().     }     return headerFilterStrategy. }
true;public;1;3;/**  * To use a custom HeaderFilterStrategy to filter header to and from Camel message.  */ ;/**  * To use a custom HeaderFilterStrategy to filter header to and from Camel message.  */ public void setHeaderFilterStrategy(HeaderFilterStrategy strategy) {     this.headerFilterStrategy = strategy. }
