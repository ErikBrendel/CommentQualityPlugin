commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected int getPort() {     return port. }
true;protected;0;3;/**  * Whether we can test on this box, as not all boxes can be used for reliable CI testing.  */ ;/**  * Whether we can test on this box, as not all boxes can be used for reliable CI testing.  */ protected boolean canTest() {     return canTest. }
false;protected;0;3;;protected boolean isUseSsl() {     return false. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     if (isUseSsl()) {         registry.bind("sslContextParameters", getClientSSLContextParameters()).     }     return registry. }
false;public;0;30;;@Override @Before public void setUp() throws Exception {     port = AvailablePortFinder.getNextAvailable(61613).     try {         brokerService = new BrokerService().         brokerService.setPersistent(false).         brokerService.setAdvisorySupport(false).         if (isUseSsl()) {             SslContext sslContext = new SslContext().             sslContext.setSSLContext(getServerSSLContext()).             brokerService.setSslContext(sslContext).             brokerService.addConnector("stomp+ssl://localhost:" + getPort() + "?trace=true").         } else {             brokerService.addConnector("stomp://localhost:" + getPort() + "?trace=true").         }         brokerService.start().         brokerService.waitUntilStarted().         super.setUp().         canTest = true.     } catch (Exception e) {         System.err.println("Cannot test due " + e.getMessage() + " more details in the log").         log.warn("Cannot test due " + e.getMessage(), e).         canTest = false.     } }
false;public;0;9;;@Override @After public void tearDown() throws Exception {     super.tearDown().     if (brokerService != null) {         brokerService.stop().         brokerService.waitUntilStopped().     } }
false;protected;0;11;;protected Stomp createStompClient() throws Exception {     Stomp stomp.     if (isUseSsl()) {         stomp = new Stomp("ssl://localhost:" + getPort()).         stomp.setSslContext(getClientSSLContext()).     } else {         stomp = new Stomp("tcp://localhost:" + getPort()).     }     return stomp. }
false;protected;0;7;;protected SSLContextParameters getServerSSLContextParameters() {     if (serverSslContextParameters == null) {         serverSslContextParameters = getSSLContextParameters("jsse/server.keystore", "password").     }     return serverSslContextParameters. }
false;protected;0;7;;protected SSLContext getServerSSLContext() throws Exception {     if (serverSslContext == null) {         serverSslContext = getServerSSLContextParameters().createSSLContext(context).     }     return serverSslContext. }
false;protected;0;7;;protected SSLContextParameters getClientSSLContextParameters() {     if (clientSslContextParameters == null) {         clientSslContextParameters = getSSLContextParameters("jsse/client.keystore", "password").     }     return clientSslContextParameters. }
false;protected;0;7;;protected SSLContext getClientSSLContext() throws Exception {     if (clientSslContext == null) {         clientSslContext = getClientSSLContextParameters().createSSLContext(context).     }     return clientSslContext. }
false;private;2;18;;private SSLContextParameters getSSLContextParameters(String path, String password) {     KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource(path).     ksp.setPassword(password).     KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyPassword(password).     kmp.setKeyStore(ksp).     TrustManagersParameters tmp = new TrustManagersParameters().     tmp.setKeyStore(ksp).     SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setKeyManagers(kmp).     sslContextParameters.setTrustManagers(tmp).     return sslContextParameters. }
