commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void run() {     for (int i = 0. i < numberOfMessages. i++) {         try {             StompFrame frame = subscribeConnection.receive().             frame.contentAsString().startsWith("test message ").             assertTrue(frame.contentAsString().startsWith("test message ")).             assertTrue(frame.getHeader(new AsciiBuffer(HEADER)).ascii().toString().startsWith(HEADER_VALUE)).             latch.countDown().         } catch (Exception e) {             e.printStackTrace().             break.         }     } }
false;public;0;49;;@Test public void testProduce() throws Exception {     if (!canTest()) {         return.     }     context.addRoutes(createRouteBuilder()).     context.start().     Stomp stomp = createStompClient().     final BlockingConnection subscribeConnection = stomp.connectBlocking().     StompFrame frame = new StompFrame(SUBSCRIBE).     frame.addHeader(DESTINATION, StompFrame.encodeHeader("test")).     frame.addHeader(ID, subscribeConnection.nextId()).     subscribeConnection.request(frame).     final CountDownLatch latch = new CountDownLatch(numberOfMessages).     Thread thread = new Thread(new Runnable() {          public void run() {             for (int i = 0. i < numberOfMessages. i++) {                 try {                     StompFrame frame = subscribeConnection.receive().                     frame.contentAsString().startsWith("test message ").                     assertTrue(frame.contentAsString().startsWith("test message ")).                     assertTrue(frame.getHeader(new AsciiBuffer(HEADER)).ascii().toString().startsWith(HEADER_VALUE)).                     latch.countDown().                 } catch (Exception e) {                     e.printStackTrace().                     break.                 }             }         }     }).     thread.start().     Endpoint endpoint = context.getEndpoint("direct:foo").     Producer producer = endpoint.createProducer().     for (int i = 0. i < numberOfMessages. i++) {         Exchange exchange = endpoint.createExchange().         exchange.getIn().setBody(("test message " + i).getBytes("UTF-8")).         exchange.getIn().setHeader(HEADER, HEADER_VALUE).         producer.process(exchange).     }     latch.await(20, TimeUnit.SECONDS).     assertTrue("Messages not consumed = " + latch.getCount(), latch.getCount() == 0). }
false;public;0;3;;public void configure() {     from("direct:foo").to("stomp:test"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:foo").to("stomp:test").         }     }. }
