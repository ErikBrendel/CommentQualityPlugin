commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setHostname(String hostname) {     this.hostname = hostname. }
false;public;0;3;;public String getHostname() {     return hostname. }
false;public;1;4;;public void setResolvesTo(List<String> resolvesTo) {     this.resolvesTo = new ArrayList<>().     this.resolvesTo.addAll(resolvesTo). }
false;public;1;4;;public void setResolvesTo(String resolvesTo) {     this.resolvesTo = new ArrayList<>().     this.resolvesTo.add(resolvesTo). }
false;public;0;3;;public List<String> getResolvesTo() {     return resolvesTo. }
false;public;0;54;;public boolean isActive() throws Exception {     if (resolvesTo.isEmpty()) {         try {             resolvesTo.addAll(getLocalIps()).         } catch (Exception e) {             LOG.warn("Failed to get local ips and resolvesTo not specified. Identifying as inactive.", e).             throw e.         }     }     LOG.debug("Resolving {}", hostname).     List<String> hostnames = new ArrayList<>().     hostnames.add(hostname).     List<String> resolved = new ArrayList<>().     while (!hostnames.isEmpty()) {         NamingEnumeration attributeEnumeration = null.         try {             String hostname = hostnames.remove(0).             InetAddress inetAddress = InetAddress.getByName(hostname).             InitialDirContext initialDirContext = new InitialDirContext().             Attributes attributes = initialDirContext.getAttributes("dns:/" + inetAddress.getHostName(), DNS_TYPES).             attributeEnumeration = attributes.getAll().             while (attributeEnumeration.hasMore()) {                 Attribute attribute = (Attribute) attributeEnumeration.next().                 String id = attribute.getID().                 String value = (String) attribute.get().                 if (resolvesTo.contains(value)) {                     LOG.debug(id + " = " + value + " matched. Identifying as active.").                     return true.                 }                 LOG.debug(id + " = " + value).                 if (id.equals("CNAME") && !resolved.contains(value)) {                     hostnames.add(value).                 }                 resolved.add(value).             }         } catch (Exception e) {             LOG.warn(hostname, e).             throw e.         } finally {             if (attributeEnumeration != null) {                 try {                     attributeEnumeration.close().                 } catch (Exception e) {                     LOG.warn("Failed to close attributeEnumeration. Memory leak possible.", e).                 }                 attributeEnumeration = null.             }         }     }     return false. }
false;private;0;17;;private List<String> getLocalIps() throws Exception {     List<String> localIps = new ArrayList<>().     Enumeration<NetworkInterface> networkInterfacesEnumeration = NetworkInterface.getNetworkInterfaces().     while (networkInterfacesEnumeration.hasMoreElements()) {         NetworkInterface networkInterface = networkInterfacesEnumeration.nextElement().         Enumeration<InetAddress> inetAddressesEnumeration = networkInterface.getInetAddresses().         while (inetAddressesEnumeration.hasMoreElements()) {             InetAddress inetAddress = inetAddressesEnumeration.nextElement().             String ip = inetAddress.getHostAddress().             LOG.debug("Local ip: {}", ip).             localIps.add(ip).         }     }     return localIps. }
