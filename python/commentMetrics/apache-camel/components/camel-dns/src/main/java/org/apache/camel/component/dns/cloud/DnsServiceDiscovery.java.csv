commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public List<ServiceDefinition> getServices(String name) {     final Lookup lookup = cache.computeIfAbsent(name, this::createLookup).     final Record[] records = lookup.run().     List<ServiceDefinition> services.     if (Objects.nonNull(records) && lookup.getResult() == Lookup.SUCCESSFUL) {         services = Arrays.stream(records).filter(SRVRecord.class::isInstance).map(SRVRecord.class::cast).sorted(COMPARATOR).map(record -> asService(name, record)).collect(Collectors.toList()).     } else {         services = Collections.emptyList().     }     return services. }
false;private;1;9;;private Lookup createLookup(String name) {     try {         return new Lookup(String.format("%s.%s.%s", name, configuration.getProto(), configuration.getDomain()), Type.SRV).     } catch (TextParseException e) {         throw new RuntimeCamelException(e).     } }
false;private,static;0;6;;private static Comparator<SRVRecord> comparator() {     Comparator<SRVRecord> byPriority = (e1, e2) -> Integer.compare(e2.getPriority(), e1.getPriority()).     Comparator<SRVRecord> byWeight = (e1, e2) -> Integer.compare(e2.getWeight(), e1.getWeight()).     return byPriority.thenComparing(byWeight). }
false;private,static;2;12;;private static ServiceDefinition asService(String serviceName, SRVRecord record) {     Map<String, String> meta = new HashMap<>().     ObjectHelper.ifNotEmpty(record.getPriority(), val -> meta.put("priority", Integer.toString(val))).     ObjectHelper.ifNotEmpty(record.getWeight(), val -> meta.put("weight", Integer.toString(val))).     return new DefaultServiceDefinition(serviceName, record.getTarget().toString(true), record.getPort(), meta). }
