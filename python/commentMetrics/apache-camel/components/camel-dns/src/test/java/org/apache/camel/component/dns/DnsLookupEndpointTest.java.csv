commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("dns:lookup").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("dns:lookup").to("mock:result").         }     }. }
false;public;0;11;;@Test public void testDNSWithNoHeaders() throws Exception {     resultEndpoint.expectedMessageCount(0).     try {         template.sendBody("hello").         fail("Should have thrown exception").     } catch (Throwable t) {         assertTrue(t.getCause() instanceof IllegalArgumentException).     }     resultEndpoint.assertIsSatisfied(). }
false;public;0;11;;@Test public void testDNSWithEmptyNameHeader() throws Exception {     resultEndpoint.expectedMessageCount(0).     try {         template.sendBodyAndHeader("hello", "dns.name", "").         fail("Should have thrown exception").     } catch (Throwable t) {         assertTrue(t.toString(), t.getCause() instanceof IllegalArgumentException).     }     resultEndpoint.assertIsSatisfied(). }
false;public;1;4;;public boolean matches(Exchange exchange) {     Record[] record = (Record[]) exchange.getIn().getBody().     return record[0].getName().toString().equals("www.example.com."). }
false;public;0;15;;@Test @Ignore("Testing behind nat produces timeouts") public void testDNSWithNameHeader() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedMessagesMatches(new Predicate() {          public boolean matches(Exchange exchange) {             Record[] record = (Record[]) exchange.getIn().getBody().             return record[0].getName().toString().equals("www.example.com.").         }     }).     Map<String, Object> headers = new HashMap<>().     headers.put("dns.name", "www.example.com").     template.sendBodyAndHeaders("hello", headers).     resultEndpoint.assertIsSatisfied(). }
false;public;1;4;;public boolean matches(Exchange exchange) {     Record[] record = (Record[]) exchange.getIn().getBody().     return record[0].getName().toString().equals("www.example.com."). }
false;public;0;16;;@Test @Ignore("Testing behind nat produces timeouts") public void testDNSWithNameHeaderAndType() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedMessagesMatches(new Predicate() {          public boolean matches(Exchange exchange) {             Record[] record = (Record[]) exchange.getIn().getBody().             return record[0].getName().toString().equals("www.example.com.").         }     }).     Map<String, Object> headers = new HashMap<>().     headers.put("dns.name", "www.example.com").     headers.put("dns.type", "A").     template.sendBodyAndHeaders("hello", headers).     resultEndpoint.assertIsSatisfied(). }
