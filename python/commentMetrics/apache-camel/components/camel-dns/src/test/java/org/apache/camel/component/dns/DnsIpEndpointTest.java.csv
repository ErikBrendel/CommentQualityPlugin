commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("dns:ip").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("dns:ip").to("mock:result").         }     }. }
false;public;0;11;;@Test public void testNullIPRequests() throws Exception {     resultEndpoint.expectedMessageCount(0).     try {         template.sendBodyAndHeader("hello", "dns.domain", null).         fail("Should have thrown exception").     } catch (Throwable t) {         assertTrue(t.getCause() instanceof IllegalArgumentException).     }     resultEndpoint.assertIsSatisfied(). }
false;public;0;11;;@Test public void testEmptyIPRequests() throws Exception {     resultEndpoint.expectedMessageCount(0).     try {         template.sendBodyAndHeader("hello", "dns.domain", "").         fail("Should have thrown exception").     } catch (Throwable t) {         assertTrue(t.getCause() instanceof IllegalArgumentException).     }     resultEndpoint.assertIsSatisfied(). }
false;public;0;10;;@Test @Ignore("Run manually, performs DNS lookup to remote apache.org server") public void testValidIPRequests() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedBodiesReceived("140.211.11.131").     template.sendBodyAndHeader("hello", "dns.domain", "www.apache.org").     resultEndpoint.assertIsSatisfied(). }
