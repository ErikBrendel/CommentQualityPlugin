commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("dns:wikipedia").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("dns:wikipedia").to("mock:result").         }     }. }
false;public;1;4;;public boolean matches(Exchange exchange) {     String str = (String) exchange.getIn().getBody().     return RESPONSE_MONKEY.equals(str). }
false;public;0;15;;@Test @Ignore("Testing behind nat produces timeouts") public void testWikipediaForMonkey() throws Exception {     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedMessagesMatches(new Predicate() {          public boolean matches(Exchange exchange) {             String str = (String) exchange.getIn().getBody().             return RESPONSE_MONKEY.equals(str).         }     }).     Map<String, Object> headers = new HashMap<>().     headers.put("term", "monkey").     template.sendBodyAndHeaders(null, headers).     resultEndpoint.assertIsSatisfied(). }
