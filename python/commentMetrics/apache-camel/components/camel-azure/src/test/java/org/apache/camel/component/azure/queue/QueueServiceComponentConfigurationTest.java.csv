commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testCreateEndpointWithMinConfigForClientOnly() throws Exception {     CloudQueue client = new CloudQueue(URI.create("https://camelazure.queue.core.windows.net/testqueue/messages"), newAccountKeyCredentials()).     context.getRegistry().bind("azureQueueClient", client).     QueueServiceComponent component = new QueueServiceComponent(context).     QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint("azure-queue://camelazure/testqueue?azureQueueClient=#azureQueueClient").     doTestCreateEndpointWithMinConfig(endpoint, true). }
false;public;0;10;;@Test public void testCreateEndpointWithMinConfigForCredsOnly() throws Exception {     registerCredentials().     QueueServiceComponent component = new QueueServiceComponent(context).     QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint("azure-queue://camelazure/testqueue?credentials=#creds").     doTestCreateEndpointWithMinConfig(endpoint, false). }
false;public;0;11;;@Test public void testCreateEndpointWithMaxConfig() throws Exception {     registerCredentials().     QueueServiceComponent component = new QueueServiceComponent(context).     QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint("azure-queue://camelazure/testqueue?credentials=#creds" + "&operation=addMessage&queuePrefix=prefix&messageTimeToLive=100&messageVisibilityDelay=10").     doTestCreateEndpointWithMaxConfig(endpoint, false). }
false;private;2;18;;private void doTestCreateEndpointWithMinConfig(QueueServiceEndpoint endpoint, boolean clientExpected) throws Exception {     assertEquals("camelazure", endpoint.getConfiguration().getAccountName()).     assertEquals("testqueue", endpoint.getConfiguration().getQueueName()).     if (clientExpected) {         assertNotNull(endpoint.getConfiguration().getAzureQueueClient()).         assertNull(endpoint.getConfiguration().getCredentials()).     } else {         assertNull(endpoint.getConfiguration().getAzureQueueClient()).         assertNotNull(endpoint.getConfiguration().getCredentials()).     }     assertEquals(QueueServiceOperations.listQueues, endpoint.getConfiguration().getOperation()).     assertNull(endpoint.getConfiguration().getQueuePrefix()).     assertEquals(0, endpoint.getConfiguration().getMessageTimeToLive()).     assertEquals(0, endpoint.getConfiguration().getMessageVisibilityDelay()).     createConsumer(endpoint). }
false;private;2;19;;private void doTestCreateEndpointWithMaxConfig(QueueServiceEndpoint endpoint, boolean clientExpected) throws Exception {     assertEquals("camelazure", endpoint.getConfiguration().getAccountName()).     assertEquals("testqueue", endpoint.getConfiguration().getQueueName()).     if (clientExpected) {         assertNotNull(endpoint.getConfiguration().getAzureQueueClient()).         assertNull(endpoint.getConfiguration().getCredentials()).     } else {         assertNull(endpoint.getConfiguration().getAzureQueueClient()).         assertNotNull(endpoint.getConfiguration().getCredentials()).     }     assertEquals(QueueServiceOperations.addMessage, endpoint.getConfiguration().getOperation()).     assertEquals("prefix", endpoint.getConfiguration().getQueuePrefix()).     assertEquals(100, endpoint.getConfiguration().getMessageTimeToLive()).     assertEquals(10, endpoint.getConfiguration().getMessageVisibilityDelay()).     createConsumer(endpoint). }
false;public;0;10;;@Test public void testNoCredentials() throws Exception {     QueueServiceComponent component = new QueueServiceComponent(context).     try {         component.createEndpoint("azure-queue://camelazure/testqueue").         fail().     } catch (IllegalArgumentException ex) {         assertEquals("Credentials must be specified.", ex.getMessage()).     } }
false;public;0;10;;@Test public void testTooManyPathSegments() throws Exception {     QueueServiceComponent component = new QueueServiceComponent(context).     try {         component.createEndpoint("azure-queue://camelazure/testqueue/1").         fail().     } catch (IllegalArgumentException ex) {         assertEquals("Only the account and queue names must be specified.", ex.getMessage()).     } }
false;public;0;10;;@Test public void testTooFewPathSegments() throws Exception {     QueueServiceComponent component = new QueueServiceComponent(context).     try {         component.createEndpoint("azure-queue://camelazure?operation=addMessage").         fail().     } catch (IllegalArgumentException ex) {         assertEquals("The queue name must be specified.", ex.getMessage()).     } }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception { // noop }
false;private,static;1;8;;private static void createConsumer(Endpoint endpoint) throws Exception {     endpoint.createConsumer(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {         // noop         }     }). }
false;private;0;3;;private void registerCredentials() {     context.getRegistry().bind("creds", newAccountKeyCredentials()). }
false;private;0;4;;private StorageCredentials newAccountKeyCredentials() {     return new StorageCredentialsAccountAndKey("camelazure", Base64.encode("key".getBytes())). }
