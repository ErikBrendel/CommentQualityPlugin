commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Block Blob"). }
false;public;0;15;;@Test @Ignore public void testUpdateBlockBlob() throws Exception {     result.expectedMessageCount(1).     template.send("direct:updateBlockBlob", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Block Blob").         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(st). }
false;public;0;15;;@Test @Ignore public void testUploadBlobBlocks() throws Exception {     result.expectedMessageCount(1).     final BlobBlock st = new BlobBlock(new ByteArrayInputStream("Block Blob List".getBytes())).     template.send("direct:uploadBlobBlocks", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(st).         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(os). }
false;public;0;15;;@Test @Ignore public void testGetBlockBlob() throws Exception {     result.expectedMessageCount(1).     OutputStream os = new ByteArrayOutputStream().     template.send("direct:getBlockBlob", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(os).         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Append Blob"). }
false;public;0;15;;@Test @Ignore public void testUpdateAppendBlob() throws Exception {     result.expectedMessageCount(1).     template.send("direct:updateAppendBlob", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Append Blob").         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(new ByteArrayInputStream(data)). }
false;public;0;16;;@Test @Ignore public void testUpdatePageBlob() throws Exception {     result.expectedMessageCount(1).     final byte[] data = new byte[512].     Arrays.fill(data, (byte) 1).     template.send("direct:updatePageBlob", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(new ByteArrayInputStream(data)).         }     }).     assertMockEndpointsSatisfied().     assertResultExchange(result.getExchanges().get(0)). }
false;private;1;2;;private void assertResultExchange(Exchange resultExchange) { }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/azure/blob/BlobServiceProducerSpringTest-context.xml"). }
