commented;modifiers;parameterAmount;loc;comment;code
false;public;1;54;;@Override public void process(final Exchange exchange) throws Exception {     BlobServiceOperations operation = determineOperation(exchange).     if (ObjectHelper.isEmpty(operation)) {         operation = BlobServiceOperations.listBlobs.     } else {         switch(operation) {             case getBlob:                 getBlob(exchange).                 break.             case deleteBlob:                 deleteBlob(exchange).                 break.             case listBlobs:                 listBlobs(exchange).                 break.             case updateBlockBlob:                 updateBlockBlob(exchange).                 break.             case uploadBlobBlocks:                 uploadBlobBlocks(exchange).                 break.             case commitBlobBlockList:                 commitBlobBlockList(exchange).                 break.             case getBlobBlockList:                 getBlobBlockList(exchange).                 break.             case createAppendBlob:                 createAppendBlob(exchange).                 break.             case updateAppendBlob:                 updateAppendBlob(exchange).                 break.             case createPageBlob:                 createPageBlob(exchange).                 break.             case updatePageBlob:                 uploadPageBlob(exchange).                 break.             case resizePageBlob:                 resizePageBlob(exchange).                 break.             case clearPageBlob:                 clearPageBlob(exchange).                 break.             case getPageBlobRanges:                 getPageBlobRanges(exchange).                 break.             default:                 throw new IllegalArgumentException("Unsupported operation").         }     } }
false;private;1;20;;private void listBlobs(Exchange exchange) throws Exception {     CloudBlobContainer client = BlobServiceUtil.createBlobContainerClient(getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     log.trace("Getting the blob list from the container [{}] from exchange [{}]...", getConfiguration().getContainerName(), exchange).     BlobServiceConfiguration cfg = getConfiguration().     EnumSet<BlobListingDetails> details = null.     Object detailsObject = exchange.getIn().getHeader(BlobServiceConstants.BLOB_LISTING_DETAILS).     if (detailsObject instanceof EnumSet) {         @SuppressWarnings("unchecked")         EnumSet<BlobListingDetails> theDetails = (EnumSet<BlobListingDetails>) detailsObject.         details = theDetails.     } else if (detailsObject instanceof BlobListingDetails) {         details = EnumSet.of((BlobListingDetails) detailsObject).     }     Iterable<ListBlobItem> items = client.listBlobs(cfg.getBlobPrefix(), cfg.isUseFlatListing(), details, opts.getRequestOpts(), opts.getOpContext()).     ExchangeUtil.getMessageForResponse(exchange).setBody(items). }
false;private;1;15;;private void updateBlockBlob(Exchange exchange) throws Exception {     CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration()).     configureCloudBlobForWrite(client).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     InputStream inputStream = getInputStreamFromExchange(exchange).     log.trace("Putting a block blob [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     try {         client.upload(inputStream, -1, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     } finally {         closeInputStreamIfNeeded(inputStream).     } }
false;private;1;31;;private void uploadBlobBlocks(Exchange exchange) throws Exception {     Object object = exchange.getIn().getMandatoryBody().     List<BlobBlock> blobBlocks = null.     if (object instanceof List) {         blobBlocks = (List<BlobBlock>) object.     } else if (object instanceof BlobBlock) {         blobBlocks = Collections.singletonList((BlobBlock) object).     }     if (blobBlocks == null || blobBlocks.isEmpty()) {         throw new IllegalArgumentException("Illegal storageBlocks payload").     }     CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration()).     configureCloudBlobForWrite(client).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     log.trace("Putting a blob [{}] from blocks from exchange [{}]...", getConfiguration().getBlobName(), exchange).     List<BlockEntry> blockEntries = new LinkedList<>().     for (BlobBlock blobBlock : blobBlocks) {         blockEntries.add(blobBlock.getBlockEntry()).         client.uploadBlock(blobBlock.getBlockEntry().getId(), blobBlock.getBlockStream(), -1, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     }     Boolean commitBlockListLater = exchange.getIn().getHeader(BlobServiceConstants.COMMIT_BLOCK_LIST_LATER, Boolean.class).     if (Boolean.TRUE != commitBlockListLater) {         client.commitBlockList(blockEntries, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     } }
false;private;1;20;;private void commitBlobBlockList(Exchange exchange) throws Exception {     Object object = exchange.getIn().getMandatoryBody().     List<BlockEntry> blockEntries = null.     if (object instanceof List) {         blockEntries = (List<BlockEntry>) object.     } else if (object instanceof BlockEntry) {         blockEntries = Collections.singletonList((BlockEntry) object).     }     if (blockEntries == null || blockEntries.isEmpty()) {         throw new IllegalArgumentException("Illegal commit block list payload").     }     CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     log.trace("Putting a blob [{}] block list from exchange [{}]...", getConfiguration().getBlobName(), exchange).     client.commitBlockList(blockEntries, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()). }
false;private;1;3;;private void getBlob(Exchange exchange) throws Exception {     BlobServiceUtil.getBlob(exchange, getConfiguration()). }
false;private;1;15;;private void deleteBlob(Exchange exchange) throws Exception {     switch(getConfiguration().getBlobType()) {         case blockblob:             deleteBlockBlob(exchange).             break.         case appendblob:             deleteAppendBlob(exchange).             break.         case pageblob:             deletePageBlob(exchange).             break.         default:             throw new IllegalArgumentException("Unsupported blob type").     } }
false;private;1;12;;private void getBlobBlockList(Exchange exchange) throws Exception {     CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     log.trace("Getting the blob block list [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     BlockListingFilter filter = exchange.getIn().getBody(BlockListingFilter.class).     if (filter == null) {         filter = BlockListingFilter.COMMITTED.     }     List<BlockEntry> blockEntries = client.downloadBlockList(filter, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     ExchangeUtil.getMessageForResponse(exchange).setBody(blockEntries). }
false;private;1;4;;private void deleteBlockBlob(Exchange exchange) throws Exception {     CloudBlockBlob client = BlobServiceUtil.createBlockBlobClient(getConfiguration()).     doDeleteBlock(client, exchange). }
false;private;1;9;;private void createAppendBlob(Exchange exchange) throws Exception {     CloudAppendBlob client = BlobServiceUtil.createAppendBlobClient(getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     if (opts.getAccessCond() == null) {         // Default: do not reset the blob content if the blob already exists         opts.setAccessCond(AccessCondition.generateIfNotExistsCondition()).     }     doCreateAppendBlob(client, opts, exchange). }
false;private;3;13;;private void doCreateAppendBlob(CloudAppendBlob client, BlobServiceRequestOptions opts, Exchange exchange) throws Exception {     log.trace("Creating an append blob [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     try {         client.createOrReplace(opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     } catch (StorageException ex) {         if (ex.getHttpStatusCode() != 409) {             throw ex.         }     }     ExchangeUtil.getMessageForResponse(exchange).setHeader(BlobServiceConstants.APPEND_BLOCK_CREATED, Boolean.TRUE). }
false;private;1;23;;private void updateAppendBlob(Exchange exchange) throws Exception {     CloudAppendBlob client = BlobServiceUtil.createAppendBlobClient(getConfiguration()).     configureCloudBlobForWrite(client).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     if (opts.getAccessCond() == null) {         // Default: do not reset the blob content if the blob already exists         opts.setAccessCond(AccessCondition.generateIfNotExistsCondition()).     }     Boolean appendBlobCreated = exchange.getIn().getHeader(BlobServiceConstants.APPEND_BLOCK_CREATED, Boolean.class).     if (Boolean.TRUE != appendBlobCreated) {         doCreateAppendBlob(client, opts, exchange).     }     InputStream inputStream = getInputStreamFromExchange(exchange).     try {         client.appendBlock(inputStream, -1, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     } finally {         closeInputStreamIfNeeded(inputStream).     } }
false;private;1;4;;private void deleteAppendBlob(Exchange exchange) throws Exception {     CloudAppendBlob client = BlobServiceUtil.createAppendBlobClient(getConfiguration()).     doDeleteBlock(client, exchange). }
false;private;1;9;;private void createPageBlob(Exchange exchange) throws Exception {     CloudPageBlob client = BlobServiceUtil.createPageBlobClient(getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     if (opts.getAccessCond() == null) {         // Default: do not reset the blob content if the blob already exists         opts.setAccessCond(AccessCondition.generateIfNotExistsCondition()).     }     doCreatePageBlob(client, opts, exchange). }
false;private;3;16;;private void doCreatePageBlob(CloudPageBlob client, BlobServiceRequestOptions opts, Exchange exchange) throws Exception {     log.trace("Creating a page blob [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     Long pageSize = getPageBlobSize(exchange).     try {         client.create(pageSize, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     } catch (StorageException ex) {         if (ex.getHttpStatusCode() != 409) {             throw ex.         }     }     ExchangeUtil.getMessageForResponse(exchange).setHeader(BlobServiceConstants.PAGE_BLOCK_CREATED, Boolean.TRUE). }
false;private;1;20;;private void uploadPageBlob(Exchange exchange) throws Exception {     log.trace("Updating a page blob [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     CloudPageBlob client = BlobServiceUtil.createPageBlobClient(getConfiguration()).     configureCloudBlobForWrite(client).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     if (opts.getAccessCond() == null) {         // Default: do not reset the blob content if the blob already exists         opts.setAccessCond(AccessCondition.generateIfNotExistsCondition()).     }     Boolean pageBlobCreated = exchange.getIn().getHeader(BlobServiceConstants.PAGE_BLOCK_CREATED, Boolean.class).     if (Boolean.TRUE != pageBlobCreated) {         doCreatePageBlob(client, opts, exchange).     }     InputStream inputStream = getInputStreamFromExchange(exchange).     doUpdatePageBlob(client, inputStream, opts, exchange). }
false;private;1;8;;private void resizePageBlob(Exchange exchange) throws Exception {     log.trace("Resizing a page blob [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     CloudPageBlob client = BlobServiceUtil.createPageBlobClient(getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     Long pageSize = getPageBlobSize(exchange).     client.resize(pageSize, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()). }
false;private;1;19;;private void clearPageBlob(Exchange exchange) throws Exception {     log.trace("Clearing a page blob [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     CloudPageBlob client = BlobServiceUtil.createPageBlobClient(getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     Long blobOffset = getConfiguration().getBlobOffset().     Long blobDataLength = getConfiguration().getDataLength().     PageRange range = exchange.getIn().getHeader(BlobServiceConstants.PAGE_BLOB_RANGE, PageRange.class).     if (range != null) {         blobOffset = range.getStartOffset().         blobDataLength = range.getEndOffset() - range.getStartOffset().     }     if (blobDataLength == null) {         blobDataLength = blobOffset == 0 ? getPageBlobSize(exchange) : 512L.     }     client.clearPages(blobOffset, blobDataLength, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()). }
false;private;4;21;;private void doUpdatePageBlob(CloudPageBlob client, InputStream is, BlobServiceRequestOptions opts, Exchange exchange) throws Exception {     Long blobOffset = getConfiguration().getBlobOffset().     Long blobDataLength = getConfiguration().getDataLength().     PageRange range = exchange.getIn().getHeader(BlobServiceConstants.PAGE_BLOB_RANGE, PageRange.class).     if (range != null) {         blobOffset = range.getStartOffset().         blobDataLength = range.getEndOffset() - range.getStartOffset().     }     if (blobDataLength == null) {         blobDataLength = (long) is.available().     }     try {         client.uploadPages(is, blobOffset, blobDataLength, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     } finally {         closeInputStreamIfNeeded(is).     } }
false;private;1;9;;private void getPageBlobRanges(Exchange exchange) throws Exception {     CloudPageBlob client = BlobServiceUtil.createPageBlobClient(getConfiguration()).     BlobServiceUtil.configureCloudBlobForRead(client, getConfiguration()).     BlobServiceRequestOptions opts = BlobServiceUtil.getRequestOptions(exchange).     log.trace("Getting the page blob ranges [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     List<PageRange> ranges = client.downloadPageRanges(opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).     ExchangeUtil.getMessageForResponse(exchange).setBody(ranges). }
false;private;1;4;;private void deletePageBlob(Exchange exchange) throws Exception {     CloudPageBlob client = BlobServiceUtil.createPageBlobClient(getConfiguration()).     doDeleteBlock(client, exchange). }
false;private;1;7;;private Long getPageBlobSize(Exchange exchange) {     Long pageSize = exchange.getIn().getHeader(BlobServiceConstants.PAGE_BLOB_SIZE, Long.class).     if (pageSize == null) {         pageSize = 512L.     }     return pageSize. }
false;private;2;4;;private void doDeleteBlock(CloudBlob client, Exchange exchange) throws Exception {     log.trace("Deleting a blob [{}] from exchange [{}]...", getConfiguration().getBlobName(), exchange).     client.delete(). }
false;private;1;4;;private String getCharsetName(Exchange exchange) {     String charset = exchange.getIn().getHeader(Exchange.CHARSET_NAME, String.class).     return charset == null ? "UTF-8" : charset. }
false;private;1;8;;private void configureCloudBlobForWrite(CloudBlob client) {     if (getConfiguration().getStreamWriteSize() > 0) {         client.setStreamWriteSizeInBytes(getConfiguration().getStreamWriteSize()).     }     if (getConfiguration().getBlobMetadata() != null) {         client.setMetadata(new HashMap<>(getConfiguration().getBlobMetadata())).     } }
false;private;1;7;;private BlobServiceOperations determineOperation(Exchange exchange) {     BlobServiceOperations operation = exchange.getIn().getHeader(BlobServiceConstants.OPERATION, BlobServiceOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected BlobServiceConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;4;;@Override public String toString() {     return "StorageBlobProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]". }
false;public;0;4;;@Override public BlobServiceEndpoint getEndpoint() {     return (BlobServiceEndpoint) super.getEndpoint(). }
false;private;1;27;;private InputStream getInputStreamFromExchange(Exchange exchange) throws Exception {     Object body = exchange.getIn().getBody().     if (body instanceof WrappedFile) {         // unwrap file         body = ((WrappedFile) body).getFile().     }     InputStream is.     if (body instanceof InputStream) {         is = (InputStream) body.     } else if (body instanceof File) {         is = new FileInputStream((File) body).     } else if (body instanceof byte[]) {         is = new ByteArrayInputStream((byte[]) body).     } else {         // try as input stream         is = exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, exchange, body).     }     if (is == null) {         // fallback to string based         throw new IllegalArgumentException("Unsupported blob type:" + body.getClass().getName()).     }     return is. }
false;private;1;5;;private void closeInputStreamIfNeeded(InputStream inputStream) throws IOException {     if (getConfiguration().isCloseStreamAfterWrite()) {         inputStream.close().     } }
