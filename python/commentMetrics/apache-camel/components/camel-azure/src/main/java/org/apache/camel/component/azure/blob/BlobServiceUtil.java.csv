commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;16;;public static void getBlob(Exchange exchange, BlobServiceConfiguration cfg) throws Exception {     switch(cfg.getBlobType()) {         case blockblob:             getBlockBlob(exchange, cfg).             break.         case appendblob:             getAppendBlob(exchange, cfg).             break.         case pageblob:             getPageBlob(exchange, cfg).             break.         default:             throw new IllegalArgumentException("Unsupported blob type").     } }
false;private,static;2;5;;private static void getBlockBlob(Exchange exchange, BlobServiceConfiguration cfg) throws Exception {     CloudBlockBlob client = createBlockBlobClient(cfg).     doGetBlob(client, exchange, cfg). }
false;private,static;2;4;;private static void getAppendBlob(Exchange exchange, BlobServiceConfiguration cfg) throws Exception {     CloudAppendBlob client = createAppendBlobClient(cfg).     doGetBlob(client, exchange, cfg). }
false;private,static;2;4;;private static void getPageBlob(Exchange exchange, BlobServiceConfiguration cfg) throws Exception {     CloudPageBlob client = createPageBlobClient(cfg).     doGetBlob(client, exchange, cfg). }
false;private,static;3;40;;private static void doGetBlob(CloudBlob client, Exchange exchange, BlobServiceConfiguration cfg) throws Exception {     BlobServiceUtil.configureCloudBlobForRead(client, cfg).     BlobServiceRequestOptions opts = getRequestOptions(exchange).     LOG.trace("Getting a blob [{}] from exchange [{}]...", cfg.getBlobName(), exchange).     OutputStream os = exchange.getIn().getBody(OutputStream.class).     if (os == null) {         String fileDir = cfg.getFileDir().         if (fileDir != null) {             File file = new File(fileDir, getBlobFileName(cfg)).             ExchangeUtil.getMessageForResponse(exchange).setBody(file).             os = new FileOutputStream(file).         }     }     try {         if (os == null) {             // Let the producers like file: deal with it             InputStream blobStream = client.openInputStream(opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).             exchange.getIn().setBody(blobStream).             exchange.getIn().setHeader(Exchange.FILE_NAME, getBlobFileName(cfg)).         } else {             Long blobOffset = cfg.getBlobOffset().             Long blobDataLength = cfg.getDataLength().             if (client instanceof CloudPageBlob) {                 PageRange range = exchange.getIn().getHeader(BlobServiceConstants.PAGE_BLOB_RANGE, PageRange.class).                 if (range != null) {                     blobOffset = range.getStartOffset().                     blobDataLength = range.getEndOffset() - range.getStartOffset().                 }             }             client.downloadRange(blobOffset, blobDataLength, os, opts.getAccessCond(), opts.getRequestOpts(), opts.getOpContext()).         }     } finally {         if (os != null && cfg.isCloseStreamAfterRead()) {             os.close().         }     } }
false;private,static;1;3;;private static String getBlobFileName(BlobServiceConfiguration cfg) {     return cfg.getBlobName() + ".blob". }
false;public,static;1;6;;public static CloudBlobContainer createBlobContainerClient(BlobServiceConfiguration cfg) throws Exception {     URI uri = prepareStorageBlobUri(cfg, false).     StorageCredentials creds = getAccountCredentials(cfg).     return new CloudBlobContainer(uri, creds). }
false;public,static;1;10;;public static CloudBlockBlob createBlockBlobClient(BlobServiceConfiguration cfg) throws Exception {     CloudBlockBlob client = (CloudBlockBlob) getConfiguredClient(cfg).     if (client == null) {         URI uri = prepareStorageBlobUri(cfg).         StorageCredentials creds = getAccountCredentials(cfg).         client = new CloudBlockBlob(uri, creds).     }     return client. }
false;public,static;1;10;;public static CloudAppendBlob createAppendBlobClient(BlobServiceConfiguration cfg) throws Exception {     CloudAppendBlob client = (CloudAppendBlob) getConfiguredClient(cfg).     if (client == null) {         URI uri = prepareStorageBlobUri(cfg).         StorageCredentials creds = getAccountCredentials(cfg).         client = new CloudAppendBlob(uri, creds).     }     return client. }
false;public,static;1;10;;public static CloudPageBlob createPageBlobClient(BlobServiceConfiguration cfg) throws Exception {     CloudPageBlob client = (CloudPageBlob) getConfiguredClient(cfg).     if (client == null) {         URI uri = prepareStorageBlobUri(cfg).         StorageCredentials creds = getAccountCredentials(cfg).         client = new CloudPageBlob(uri, creds).     }     return client. }
false;public,static;1;20;;public static CloudBlob getConfiguredClient(BlobServiceConfiguration cfg) {     CloudBlob client = cfg.getAzureBlobClient().     if (client != null) {         Class<?> expectedCls = null.         if (cfg.getBlobType() == BlobType.blockblob) {             expectedCls = CloudBlockBlob.class.         } else if (cfg.getBlobType() == BlobType.appendblob) {             expectedCls = CloudAppendBlob.class.         } else if (cfg.getBlobType() == BlobType.pageblob) {             expectedCls = CloudPageBlob.class.         }         if (client.getClass() != expectedCls) {             throw new IllegalArgumentException("Invalid Client Type").         }         if (!client.getUri().equals(prepareStorageBlobUri(cfg))) {             throw new IllegalArgumentException("Invalid Client URI").         }     }     return client. }
false;public,static;1;3;;public static StorageCredentials getAccountCredentials(BlobServiceConfiguration cfg) {     return cfg.getCredentials(). }
false;public,static;2;5;;public static void configureCloudBlobForRead(CloudBlob client, BlobServiceConfiguration cfg) {     if (cfg.getStreamReadSize() > 0) {         client.setStreamMinimumReadSizeInBytes(cfg.getStreamReadSize()).     } }
false;public,static;1;3;;public static URI prepareStorageBlobUri(BlobServiceConfiguration cfg) {     return prepareStorageBlobUri(cfg, true). }
false;public,static;2;17;;public static URI prepareStorageBlobUri(BlobServiceConfiguration cfg, boolean blobNameRequired) {     if (blobNameRequired && cfg.getBlobName() == null) {         throw new IllegalArgumentException("Blob name must be specified").     }     StringBuilder uriBuilder = new StringBuilder().     uriBuilder.append("https://").append(cfg.getAccountName()).append(BlobServiceConstants.SERVICE_URI_SEGMENT).append("/").append(cfg.getContainerName()).     if (cfg.getBlobName() != null) {         uriBuilder.append("/").append(cfg.getBlobName()).     }     return URI.create(uriBuilder.toString()). }
false;public,static;1;19;;public static BlobServiceRequestOptions getRequestOptions(Exchange exchange) {     BlobServiceRequestOptions opts = exchange.getIn().getHeader(BlobServiceConstants.BLOB_SERVICE_REQUEST_OPTIONS, BlobServiceRequestOptions.class).     if (opts != null) {         return opts.     } else {         opts = new BlobServiceRequestOptions().     }     AccessCondition accessCond = exchange.getIn().getHeader(BlobServiceConstants.ACCESS_CONDITION, AccessCondition.class).     BlobRequestOptions requestOpts = exchange.getIn().getHeader(BlobServiceConstants.BLOB_REQUEST_OPTIONS, BlobRequestOptions.class).     OperationContext opContext = exchange.getIn().getHeader(BlobServiceConstants.OPERATION_CONTEXT, OperationContext.class).     opts.setAccessCond(accessCond).     opts.setOpContext(opContext).     opts.setRequestOpts(requestOpts).     return opts. }
