commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static URI prepareStorageQueueUri(QueueServiceConfiguration cfg) {     StringBuilder uriBuilder = new StringBuilder().     uriBuilder.append("https://").append(cfg.getAccountName()).append(QueueServiceConstants.SERVICE_URI_SEGMENT).append("/" + cfg.getQueueName()).     return URI.create(uriBuilder.toString()). }
false;public,static;1;10;;public static CloudQueue createQueueClient(QueueServiceConfiguration cfg) throws Exception {     CloudQueue client = getConfiguredClient(cfg).     if (client == null) {         URI uri = prepareStorageQueueUri(cfg).         StorageCredentials creds = getAccountCredentials(cfg).         client = new CloudQueue(uri, creds).     }     return client. }
false;public,static;1;7;;public static CloudQueue getConfiguredClient(QueueServiceConfiguration cfg) {     CloudQueue client = cfg.getAzureQueueClient().     if (client != null && !client.getUri().equals(prepareStorageQueueUri(cfg))) {         throw new IllegalArgumentException("Invalid Client URI").     }     return client. }
false;public,static;1;3;;public static StorageCredentials getAccountCredentials(QueueServiceConfiguration cfg) {     return cfg.getCredentials(). }
false;public,static;2;9;;public static void retrieveMessage(Exchange exchange, QueueServiceConfiguration cfg) throws Exception {     CloudQueue client = createQueueClient(cfg).     QueueServiceRequestOptions opts = getRequestOptions(exchange).     int visibilityTimeout = cfg.getMessageVisibilityDelay().     visibilityTimeout = visibilityTimeout != 0 ? visibilityTimeout : 30.     CloudQueueMessage message = client.retrieveMessage(visibilityTimeout, opts.getRequestOpts(), opts.getOpContext()).     ExchangeUtil.getMessageForResponse(exchange).setBody(message). }
false;public,static;1;16;;public static QueueServiceRequestOptions getRequestOptions(Exchange exchange) {     QueueServiceRequestOptions opts = exchange.getIn().getHeader(QueueServiceConstants.QUEUE_SERVICE_REQUEST_OPTIONS, QueueServiceRequestOptions.class).     if (opts != null) {         return opts.     } else {         opts = new QueueServiceRequestOptions().     }     QueueRequestOptions requestOpts = exchange.getIn().getHeader(QueueServiceConstants.QUEUE_REQUEST_OPTIONS, QueueRequestOptions.class).     OperationContext opContext = exchange.getIn().getHeader(QueueServiceConstants.OPERATION_CONTEXT, OperationContext.class).     opts.setOpContext(opContext).     opts.setRequestOpts(requestOpts).     return opts. }
