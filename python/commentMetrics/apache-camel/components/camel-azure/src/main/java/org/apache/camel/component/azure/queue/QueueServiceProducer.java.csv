commented;modifiers;parameterAmount;loc;comment;code
false;public;1;37;;@Override public void process(final Exchange exchange) throws Exception {     QueueServiceOperations operation = determineOperation(exchange).     if (ObjectHelper.isEmpty(operation)) {         operation = QueueServiceOperations.listQueues.     } else {         switch(operation) {             case retrieveMessage:                 retrieveMessage(exchange).                 break.             case peekMessage:                 peekMessage(exchange).                 break.             case createQueue:                 createQueue(exchange).                 break.             case deleteQueue:                 deleteQueue(exchange).                 break.             case addMessage:                 addMessage(exchange).                 break.             case updateMessage:                 updateMessage(exchange).                 break.             case deleteMessage:                 deleteMessage(exchange).                 break.             case listQueues:                 listQueues(exchange).                 break.             default:                 throw new IllegalArgumentException("Unsupported operation").         }     } }
false;private;1;12;;private void listQueues(Exchange exchange) throws Exception {     CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration()).     QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange).     QueueListingDetails details = (QueueListingDetails) exchange.getIn().getHeader(QueueServiceConstants.QUEUE_LISTING_DETAILS).     if (details == null) {         details = QueueListingDetails.ALL.     }     Iterable<CloudQueue> list = client.getServiceClient().listQueues(getConfiguration().getQueuePrefix(), details, opts.getRequestOpts(), opts.getOpContext()).     ExchangeUtil.getMessageForResponse(exchange).setBody(list). }
false;private;1;5;;private void createQueue(Exchange exchange) throws Exception {     CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration()).     QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange).     doCreateQueue(client, opts, exchange). }
false;private;3;7;;private void doCreateQueue(CloudQueue client, QueueServiceRequestOptions opts, Exchange exchange) throws Exception {     log.trace("Creating the queue [{}] from exchange [{}]...", getConfiguration().getQueueName(), exchange).     client.createIfNotExists(opts.getRequestOpts(), opts.getOpContext()).     ExchangeUtil.getMessageForResponse(exchange).setHeader(QueueServiceConstants.QUEUE_CREATED, Boolean.TRUE). }
false;private;1;7;;private void deleteQueue(Exchange exchange) throws Exception {     log.trace("Deleting the queue [{}] from exchange [{}]...", getConfiguration().getQueueName(), exchange).     CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration()).     QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange).     client.delete(opts.getRequestOpts(), opts.getOpContext()). }
false;private;1;18;;private void addMessage(Exchange exchange) throws Exception {     log.trace("Putting the message into the queue [{}] from exchange [{}]...", getConfiguration().getQueueName(), exchange).     CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration()).     QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange).     Boolean queueCreated = exchange.getIn().getHeader(QueueServiceConstants.QUEUE_CREATED, Boolean.class).     if (Boolean.TRUE != queueCreated) {         doCreateQueue(client, opts, exchange).     }     CloudQueueMessage message = getCloudQueueMessage(exchange).     client.addMessage(message, getConfiguration().getMessageTimeToLive(), getConfiguration().getMessageVisibilityDelay(), opts.getRequestOpts(), opts.getOpContext()). }
false;private;1;22;;private void updateMessage(Exchange exchange) throws Exception {     CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration()).     QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange).     CloudQueueMessage message = getCloudQueueMessage(exchange).     log.trace("Updating the message in the queue [{}] from exchange [{}]...", getConfiguration().getQueueName(), exchange).     EnumSet<MessageUpdateFields> fields = null.     Object fieldsObject = exchange.getIn().getHeader(QueueServiceConstants.MESSAGE_UPDATE_FIELDS).     if (fieldsObject instanceof EnumSet) {         @SuppressWarnings("unchecked")         EnumSet<MessageUpdateFields> theFields = (EnumSet<MessageUpdateFields>) fieldsObject.         fields = theFields.     } else if (fieldsObject instanceof MessageUpdateFields) {         fields = EnumSet.of((MessageUpdateFields) fieldsObject).     }     client.updateMessage(message, getConfiguration().getMessageVisibilityDelay(), fields, opts.getRequestOpts(), opts.getOpContext()). }
false;private;1;8;;private void deleteMessage(Exchange exchange) throws Exception {     log.trace("Deleting the message from the queue [{}] from exchange [{}]...", getConfiguration().getQueueName(), exchange).     CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration()).     QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange).     CloudQueueMessage message = getCloudQueueMessage(exchange).     client.deleteMessage(message, opts.getRequestOpts(), opts.getOpContext()). }
false;private;1;3;;private void retrieveMessage(Exchange exchange) throws Exception {     QueueServiceUtil.retrieveMessage(exchange, getConfiguration()). }
false;private;1;6;;private void peekMessage(Exchange exchange) throws Exception {     CloudQueue client = QueueServiceUtil.createQueueClient(getConfiguration()).     QueueServiceRequestOptions opts = QueueServiceUtil.getRequestOptions(exchange).     CloudQueueMessage message = client.peekMessage(opts.getRequestOpts(), opts.getOpContext()).     ExchangeUtil.getMessageForResponse(exchange).setBody(message). }
false;private;1;13;;private CloudQueueMessage getCloudQueueMessage(Exchange exchange) throws Exception {     Object body = exchange.getIn().getMandatoryBody().     CloudQueueMessage message = null.     if (body instanceof CloudQueueMessage) {         message = (CloudQueueMessage) body.     } else if (body instanceof String) {         message = new CloudQueueMessage((String) body).     }     if (message == null) {         throw new IllegalArgumentException("Unsupported queue message type:" + body.getClass().getName()).     }     return message. }
false;private;1;8;;private QueueServiceOperations determineOperation(Exchange exchange) {     QueueServiceOperations operation = exchange.getIn().getHeader(BlobServiceConstants.OPERATION, QueueServiceOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected QueueServiceConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;4;;@Override public String toString() {     return "StorageQueueProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]". }
false;public;0;4;;@Override public QueueServiceEndpoint getEndpoint() {     return (QueueServiceEndpoint) super.getEndpoint(). }
