commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
true;protected;1;7;/**  * Strategy to prepare exchange for being processed by this consumer  *  * @param exchange the exchange  * @return the exchange to process by this consumer.  */ ;/**  * Strategy to prepare exchange for being processed by this consumer  *  * @param exchange the exchange  * @return the exchange to process by this consumer.  */ protected Exchange prepareExchange(Exchange exchange) {     // send a new copied exchange with the camel context from this consumer     Exchange newExchange = ExchangeHelper.copyExchangeAndSetCamelContext(exchange, getCamelContext()).     // set the from endpoint     newExchange.setFromEndpoint(getEndpoint()).     return newExchange. }
