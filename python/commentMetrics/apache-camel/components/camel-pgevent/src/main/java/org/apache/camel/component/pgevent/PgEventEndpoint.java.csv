commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;12;;public final PGConnection initJdbc() throws Exception {     PGConnection conn.     if (this.getDatasource() != null) {         conn = PgEventHelper.toPGConnection(this.getDatasource().getConnection()).     } else {         // ensure we can load the class         ClassResolver classResolver = getCamelContext().getClassResolver().         classResolver.resolveMandatoryClass(PGDriver.class.getName(), PgEventComponent.class.getClassLoader()).         conn = (PGConnection) DriverManager.getConnection("jdbc:pgsql://" + this.getHost() + ":" + this.getPort() + "/" + this.getDatabase(), this.getUser(), this.getPass()).     }     return conn. }
true;protected,final;0;32;/**  * Parse the provided URI and extract available parameters  *  * @throws IllegalArgumentException if there is an error in the parameters  */ ;/**  * Parse the provided URI and extract available parameters  *  * @throws IllegalArgumentException if there is an error in the parameters  */ protected final void parseUri() throws IllegalArgumentException {     log.info("URI: {}", uri).     if (uri.matches(FORMAT1)) {         log.info("FORMAT1").         String[] parts = uri.replaceFirst(FORMAT1, "$1:$2:$3:$4").split(":").         host = parts[0].         port = Integer.parseInt(parts[1]).         database = parts[2].         channel = parts[3].     } else if (uri.matches(FORMAT2)) {         log.info("FORMAT2").         String[] parts = uri.replaceFirst(FORMAT2, "$1:$2:$3").split(":").         host = parts[0].         port = 5432.         database = parts[1].         channel = parts[2].     } else if (uri.matches(FORMAT3)) {         log.info("FORMAT3").         String[] parts = uri.replaceFirst(FORMAT3, "$1:$2").split(":").         host = "localhost".         port = 5432.         database = parts[0].         channel = parts[1].     } else if (uri.matches(FORMAT4)) {         log.info("FORMAT4").         String[] parts = uri.replaceFirst(FORMAT4, "$1:$2").split(":").         database = parts[0].         channel = parts[1].     } else {         throw new IllegalArgumentException("The provided URL does not match the acceptable patterns.").     } }
false;public;0;5;;@Override public Producer createProducer() throws Exception {     validateInputs().     return new PgEventProducer(this). }
false;private;0;10;;private void validateInputs() throws IllegalArgumentException {     if (getChannel() == null || getChannel().length() == 0) {         throw new IllegalArgumentException("A required parameter was not set when creating this Endpoint (channel)").     }     if (datasource == null && user == null) {         throw new IllegalArgumentException("A required parameter was " + "not set when creating this Endpoint (pgUser or pgDataSource)").     } }
false;public;1;7;;@Override public Consumer createConsumer(Processor processor) throws Exception {     validateInputs().     PgEventConsumer consumer = new PgEventConsumer(this, processor).     configureConsumer(consumer).     return consumer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * To connect using hostname and port to the database.  */ ;/**  * To connect using hostname and port to the database.  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public Integer getPort() {     return port. }
true;public;1;3;/**  * To connect using hostname and port to the database.  */ ;/**  * To connect using hostname and port to the database.  */ public void setPort(Integer port) {     this.port = port. }
false;public;0;3;;public String getDatabase() {     return database. }
true;public;1;3;/**  * The database name  */ ;/**  * The database name  */ public void setDatabase(String database) {     this.database = database. }
false;public;0;3;;public String getChannel() {     return channel. }
true;public;1;3;/**  * The channel name  */ ;/**  * The channel name  */ public void setChannel(String channel) {     this.channel = channel. }
false;public;0;3;;public String getUser() {     return user. }
true;public;1;3;/**  * Username for login  */ ;/**  * Username for login  */ public void setUser(String user) {     this.user = user. }
false;public;0;3;;public String getPass() {     return pass. }
true;public;1;3;/**  * Password for login  */ ;/**  * Password for login  */ public void setPass(String pass) {     this.pass = pass. }
false;public;0;3;;public DataSource getDatasource() {     return datasource. }
true;public;1;3;/**  * To connect using the given {@link javax.sql.DataSource} instead of using hostname and port.  */ ;/**  * To connect using the given {@link javax.sql.DataSource} instead of using hostname and port.  */ public void setDatasource(DataSource datasource) {     this.datasource = datasource. }
