commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected void doStart() throws Exception {     super.doStart().     dbConnection = endpoint.initJdbc().     String sql = String.format("LISTEN %s", endpoint.getChannel()).     try (PreparedStatement statement = dbConnection.prepareStatement(sql)) {         statement.execute().     }     dbConnection.addNotificationListener(endpoint.getChannel(), endpoint.getChannel(), this). }
false;public;3;17;;public void notification(int processId, String channel, String payload) {     if (log.isDebugEnabled()) {         log.debug("Notification processId: {}, channel: {}, payload: {}", processId, channel, payload).     }     Exchange exchange = endpoint.createExchange().     Message msg = exchange.getIn().     msg.setHeader("channel", channel).     msg.setBody(payload).     try {         getProcessor().process(exchange).     } catch (Exception ex) {         String cause = "Unable to process incoming notification from PostgreSQL: processId='" + processId + "', channel='" + channel + "', payload='" + payload + "'".         getExceptionHandler().handleException(cause, ex).     } }
false;protected;0;11;;@Override protected void doStop() throws Exception {     if (dbConnection != null) {         dbConnection.removeNotificationListener(endpoint.getChannel()).         String sql = String.format("UNLISTEN %s", endpoint.getChannel()).         try (PreparedStatement statement = dbConnection.prepareStatement(sql)) {             statement.execute().         }         dbConnection.close().     } }
