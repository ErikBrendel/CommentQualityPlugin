commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;17;;@Override protected JndiRegistry createRegistry() throws Exception {     Properties properties = new Properties().     properties.load(getClass().getResourceAsStream("/test-options.properties")).     PGDataSource dataSource = new PGDataSource().     dataSource.setHost(properties.getProperty("host")).     dataSource.setPort(Integer.parseInt(properties.getProperty("port"))).     dataSource.setDatabase(properties.getProperty("database")).     dataSource.setUser(properties.getProperty("userName")).     dataSource.setPassword(properties.getProperty("password")).     JndiRegistry registry = super.createRegistry().     registry.bind("pgDataSource", dataSource).     return registry. }
false;public;0;5;;@Test public void testPgEventPublishSubscribeWithDefinedDatasource() throws Exception {     mockEndpoint.expectedBodiesReceived(TEST_MESSAGE_BODY).     mockEndpoint.assertIsSatisfied(5000). }
false;public;0;9;;@Override public void configure() throws Exception {     from(timerEndpoint).setBody(constant(TEST_MESSAGE_BODY)).to(notifyEndpoint).     from(subscribeEndpoint).to(mockEndpoint). }
false;protected;0;14;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(timerEndpoint).setBody(constant(TEST_MESSAGE_BODY)).to(notifyEndpoint).             from(subscribeEndpoint).to(mockEndpoint).         }     }. }
