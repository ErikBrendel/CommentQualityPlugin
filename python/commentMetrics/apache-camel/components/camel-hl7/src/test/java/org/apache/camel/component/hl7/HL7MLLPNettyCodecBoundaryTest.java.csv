commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;15;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // START SNIPPET: e1     HL7MLLPNettyDecoderFactory decoder = new HL7MLLPNettyDecoderFactory().     decoder.setCharset("iso-8859-1").     jndi.bind("hl7decoder", decoder).     HL7MLLPNettyEncoderFactory encoder = new HL7MLLPNettyEncoderFactory().     decoder.setCharset("iso-8859-1").     jndi.bind("hl7encoder", encoder).     return jndi. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // check presence of correct message type     exchange.getIn().getBody(MDM_T02.class). }
false;public;0;8;;public void configure() throws Exception {     from("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // check presence of correct message type             exchange.getIn().getBody(MDM_T02.class).         }     }).to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // check presence of correct message type                     exchange.getIn().getBody(MDM_T02.class).                 }             }).to("mock:result").         }     }. }
false;public;0;17;;@Test public void testSendHL7Message() throws Exception {     BufferedReader in = IOHelper.buffered(new InputStreamReader(getClass().getResourceAsStream("/mdm_t02-1022.txt"))).     String line = "".     String message = "".     while (line != null) {         if ((line = in.readLine()) != null) {             message += line + "\r".         }     }     message = message.substring(0, message.length() - 1).     assertEquals(1022, message.length()).     MockEndpoint mockEndpoint = getMockEndpoint("mock:result").     mockEndpoint.expectedMessageCount(1).     template.requestBody("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder", message).     mockEndpoint.assertIsSatisfied(). }
