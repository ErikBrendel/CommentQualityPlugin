commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;17;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // START SNIPPET: e1     HL7MLLPNettyDecoderFactory decoder = new HL7MLLPNettyDecoderFactory().     decoder.setCharset("iso-8859-1").     decoder.setConvertLFtoCR(true).     jndi.bind("hl7decoder", decoder).     HL7MLLPNettyEncoderFactory encoder = new HL7MLLPNettyEncoderFactory().     decoder.setCharset("iso-8859-1").     decoder.setConvertLFtoCR(true).     jndi.bind("hl7encoder", encoder).     return jndi. }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     Message input = exchange.getIn().getBody(Message.class).     assertEquals("2.4", input.getVersion()).     QRD qrd = (QRD) input.get("QRD").     assertEquals("0101701234", qrd.getWhoSubjectFilter(0).getIDNumber().getValue()).     Message response = createHL7AsMessage().     exchange.getOut().setBody(response). }
false;public;0;16;;public void configure() throws Exception {     from("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message input = exchange.getIn().getBody(Message.class).             assertEquals("2.4", input.getVersion()).             QRD qrd = (QRD) input.get("QRD").             assertEquals("0101701234", qrd.getWhoSubjectFilter(0).getIDNumber().getValue()).             Message response = createHL7AsMessage().             exchange.getOut().setBody(response).         }     }).to("mock:result"). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message input = exchange.getIn().getBody(Message.class).                     assertEquals("2.4", input.getVersion()).                     QRD qrd = (QRD) input.get("QRD").                     assertEquals("0101701234", qrd.getWhoSubjectFilter(0).getIDNumber().getValue()).                     Message response = createHL7AsMessage().                     exchange.getOut().setBody(response).                 }             }).to("mock:result").         }     }. }
false;public;0;18;;@Test public void testSendHL7Message() throws Exception {     // START SNIPPET: e2     String line1 = "MSH|^~\\&|MYSENDER|MYRECEIVER|MYAPPLICATION||200612211200||QRY^A19|1234|P|2.4".     String line2 = "QRD|200612211200|R|I|GetPatient|||1^RD|0101701234|DEM||".     StringBuilder in = new StringBuilder().     in.append(line1).     in.append("\n").     in.append(line2).     String out = template.requestBody("netty4:tcp://127.0.0.1:" + getPort() + "?sync=true&decoder=#hl7decoder&encoder=#hl7encoder", in.toString(), String.class).     // END SNIPPET: e2     String[] lines = out.split("\r").     assertEquals("MSH|^~\\&|MYSENDER||||200701011539||ADR^A19^ADR_A19|456|P|2.4", lines[0]).     assertEquals("MSA|AA|123", lines[1]). }
true;private,static;0;20;// START SNIPPET: e3 ;// START SNIPPET: e3 private static Message createHL7AsMessage() throws Exception {     ADR_A19 adr = new ADR_A19().     adr.initQuickstart("ADR", "A19", "P").     // Populate the MSH Segment     MSH mshSegment = adr.getMSH().     mshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue("200701011539").     mshSegment.getSendingApplication().getNamespaceID().setValue("MYSENDER").     mshSegment.getMessageControlID().setValue("456").     // Populate the PID Segment     MSA msa = adr.getMSA().     msa.getAcknowledgementCode().setValue("AA").     msa.getMessageControlID().setValue("123").     QRD qrd = adr.getQRD().     qrd.getQueryDateTime().getTimeOfAnEvent().setValue("20080805120000").     return adr. }
