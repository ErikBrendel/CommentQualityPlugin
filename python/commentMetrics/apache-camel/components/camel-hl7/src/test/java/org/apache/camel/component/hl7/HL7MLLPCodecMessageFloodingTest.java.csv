commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     HL7MLLPCodec codec = new HL7MLLPCodec().     codec.setCharset("ISO-8859-1").     codec.setConvertLFtoCR(false).     jndi.bind("hl7codec", codec).     return jndi. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     Message input = exchange.getIn().getBody(Message.class).     Message response = input.generateACK().     exchange.getOut().setBody(response).     // simulate some processing time     Thread.sleep(50). }
false;public;0;13;;public void configure() throws Exception {     from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").unmarshal().hl7().process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message input = exchange.getIn().getBody(Message.class).             Message response = input.generateACK().             exchange.getOut().setBody(response).             // simulate some processing time             Thread.sleep(50).         }     }).to("mock:result"). }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").unmarshal().hl7().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message input = exchange.getIn().getBody(Message.class).                     Message response = input.generateACK().                     exchange.getOut().setBody(response).                     // simulate some processing time                     Thread.sleep(50).                 }             }).to("mock:result").         }     }. }
false;public;0;23;;@Override public void run() {     int response.     StringBuilder s = new StringBuilder().     try {         int i = 0.         boolean cont = true.         while (cont && (response = inputStream.read()) >= 0) {             if (response == 28) {                 // read second end byte                 response = inputStream.read().                 if (response == 13) {                     // Responses must arrive in same order                     cont = s.toString().contains(String.format("X%dX", i++)).                     s.setLength(0).                     latch.countDown().                 }             } else {                 s.append((char) response).             }         }     } catch (IOException ignored) {     } }
false;public;0;65;;@Test public void testHL7MessageFlood() throws Exception {     // Write and receive using plain sockets and in different threads     Socket socket = new Socket("localhost", getPort()).     BufferedOutputStream outputStream = new BufferedOutputStream(new DataOutputStream(socket.getOutputStream())).     final BufferedInputStream inputStream = new BufferedInputStream(new DataInputStream(socket.getInputStream())).     int messageCount = 100.     CountDownLatch latch = new CountDownLatch(messageCount).     Thread t = new Thread(new Runnable() {          @Override         public void run() {             int response.             StringBuilder s = new StringBuilder().             try {                 int i = 0.                 boolean cont = true.                 while (cont && (response = inputStream.read()) >= 0) {                     if (response == 28) {                         // read second end byte                         response = inputStream.read().                         if (response == 13) {                             // Responses must arrive in same order                             cont = s.toString().contains(String.format("X%dX", i++)).                             s.setLength(0).                             latch.countDown().                         }                     } else {                         s.append((char) response).                     }                 }             } catch (IOException ignored) {             }         }     }).     t.start().     String in = "MSH|^~\\&|MYSENDER|MYRECEIVER|MYAPPLICATION||200612211200||QRY^A19|X%dX|P|2.4\r" + "QRD|200612211200|R|I|GetPatient|||1^RD|0101701234|DEM||".     for (int i = 0. i < messageCount. i++) {         String msg = String.format(in, i).         outputStream.write(11).         outputStream.flush().         // Some systems send end bytes in a separate frame         // Thread.sleep(10).         outputStream.write(msg.getBytes()).         outputStream.flush().         // Some systems send end bytes in a separate frame         // Thread.sleep(10).         outputStream.write(28).         outputStream.write(13).         outputStream.flush().     // Potentially wait after message     // Thread.sleep(10).     }     boolean success = latch.await(20, TimeUnit.SECONDS).     outputStream.close().     inputStream.close().     socket.close().     assertTrue(success). }
