commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testTerserExpression() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test1").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(PATIENT_ID).     template.sendBody("direct:test1", createADT01Message()).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Test public void testTerserPredicateValue() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test2").     mock.expectedMessageCount(1).     template.sendBody("direct:test2", createADT01Message()).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Test public void testTerserPredicateNull() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test3").     mock.expectedMessageCount(1).     template.sendBody("direct:test3", createADT01Message()).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Test(expected = CamelExecutionException.class) public void testTerserInvalidExpression() throws Exception {     template.sendBody("direct:test4", createADT01Message()). }
false;public;0;4;;@Test(expected = CamelExecutionException.class) public void testTerserInvalidMessage() throws Exception {     template.sendBody("direct:test4", "text instead of message"). }
false;public;0;8;;@Test public void testTerserAnnotatedMethod() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test5").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(PATIENT_ID).     template.sendBody("direct:test5", createADT01Message()).     assertMockEndpointsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     from("direct:test1").transform(hl7terser("PID-3-1")).to("mock:test1").     from("direct:test2").filter(hl7terser("PID-3-1").isEqualTo(PATIENT_ID)).to("mock:test2").     from("direct:test3").filter(hl7terser("PID-4-1").isNull()).to("mock:test3").     from("direct:test4").filter(hl7terser("blorg gablorg").isNull()).to("mock:test3").     from("direct:test5").bean(terserBean).to("mock:test5"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     final TerserBean terserBean = new TerserBean().     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:test1").transform(hl7terser("PID-3-1")).to("mock:test1").             from("direct:test2").filter(hl7terser("PID-3-1").isEqualTo(PATIENT_ID)).to("mock:test2").             from("direct:test3").filter(hl7terser("PID-4-1").isNull()).to("mock:test3").             from("direct:test4").filter(hl7terser("blorg gablorg").isNull()).to("mock:test3").             from("direct:test5").bean(terserBean).to("mock:test5").         }     }. }
false;private,static;0;12;;private static Message createADT01Message() throws Exception {     ADT_A01 adt = new ADT_A01().     adt.initQuickstart("ADT", "A01", "P").     // Populate the PID Segment     PID pid = adt.getPID().     pid.getPatientName(0).getFamilyName().getSurname().setValue("Doe").     pid.getPatientName(0).getGivenName().setValue("John").     pid.getPatientIdentifierList(0).getID().setValue(PATIENT_ID).     return adt. }
false;public;1;3;;public String patientId(@Hl7Terser(value = "PID-3-1") String patientId) {     return patientId. }
