commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     HL7MLLPCodec codec = new HL7MLLPCodec().     codec.setCharset("iso-8859-1").     jndi.bind("hl7codec", codec).     return jndi. }
false;public;0;15;;@Test public void testPlainString() throws Exception {     // START SNIPPET: e1     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     // send plain hello world as String     Object out = template.requestBody("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec", "Hello World", String.class).     assertMockEndpointsSatisfied().     // and the response is also just plain String     assertEquals("Bye World", out). // END SNIPPET: e1 }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     // use plain String as message format     String body = exchange.getIn().getBody(String.class).     assertEquals("Hello World", body).     // return the response as plain string     exchange.getOut().setBody("Bye World"). }
false;public;0;16;;public void configure() throws Exception {     // START SNIPPET: e2     from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // use plain String as message format             String body = exchange.getIn().getBody(String.class).             assertEquals("Hello World", body).             // return the response as plain string             exchange.getOut().setBody("Bye World").         }     }).to("mock:result"). // END SNIPPET: e2 }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e2             from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // use plain String as message format                     String body = exchange.getIn().getBody(String.class).                     assertEquals("Hello World", body).                     // return the response as plain string                     exchange.getOut().setBody("Bye World").                 }             }).to("mock:result").         // END SNIPPET: e2         }     }. }
