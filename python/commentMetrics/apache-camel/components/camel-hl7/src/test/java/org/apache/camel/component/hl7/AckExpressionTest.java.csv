commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testAckExpression() throws Exception {     ADT_A01 a01 = createADT01Message().     ACK ack = template.requestBody("direct:test1", a01, ACK.class).     assertEquals("AA", ack.getMSA().getAcknowledgementCode().getValue()).     assertEquals(a01.getMSH().getMessageControlID().getValue(), ack.getMSA().getMessageControlID().getValue()). }
false;public;0;8;;@Test public void testAckExpressionWithCode() throws Exception {     ADT_A01 a01 = createADT01Message().     ACK ack = template.requestBody("direct:test2", a01, ACK.class).     assertEquals("CA", ack.getMSA().getAcknowledgementCode().getValue()).     assertEquals(a01.getMSH().getMessageControlID().getValue(), ack.getMSA().getMessageControlID().getValue()). }
false;public;0;10;;@Test public void testNakExpression() throws Exception {     ADT_A01 a01 = createADT01Message().     ACK ack = template.requestBody("direct:test3", a01, ACK.class).     assertEquals("AE", ack.getMSA().getAcknowledgementCode().getValue()).     assertEquals(a01.getMSH().getMessageControlID().getValue(), ack.getMSA().getMessageControlID().getValue()).     assertEquals(String.valueOf(ErrorCode.APPLICATION_INTERNAL_ERROR.getCode()), ack.getERR().getErrorCodeAndLocation(0).getCodeIdentifyingError().getIdentifier().getValue()). }
false;public;0;12;;@Test public void testNakExpressionWithParameters() throws Exception {     ADT_A01 a01 = createADT01Message().     ACK ack = template.requestBody("direct:test4", a01, ACK.class).     assertEquals("AR", ack.getMSA().getAcknowledgementCode().getValue()).     assertEquals(a01.getMSH().getMessageControlID().getValue(), ack.getMSA().getMessageControlID().getValue()).     assertEquals(String.valueOf(ErrorCode.APPLICATION_INTERNAL_ERROR.getCode()), ack.getERR().getErrorCodeAndLocation(0).getCodeIdentifyingError().getIdentifier().getValue()).     assertEquals("Problem!", ack.getERR().getErrorCodeAndLocation(0).getCodeIdentifyingError().getAlternateText().getValue()). }
false;public;0;12;;@Test public void testNakExpressionWithoutException() throws Exception {     ADT_A01 a01 = createADT01Message().     ACK ack = template.requestBody("direct:test5", a01, ACK.class).     assertEquals("AR", ack.getMSA().getAcknowledgementCode().getValue()).     assertEquals(a01.getMSH().getMessageControlID().getValue(), ack.getMSA().getMessageControlID().getValue()).     assertEquals(String.valueOf(ErrorCode.DATA_TYPE_ERROR.getCode()), ack.getERR().getErrorCodeAndLocation(0).getCodeIdentifyingError().getIdentifier().getValue()).     assertEquals("Problem!", ack.getERR().getErrorCodeAndLocation(0).getCodeIdentifyingError().getAlternateText().getValue()). }
false;public;0;10;;public void configure() throws Exception {     from("direct:test1").transform(ack()).     from("direct:test2").transform(ack(AcknowledgmentCode.CA)).     from("direct:test3").onException(HL7Exception.class).handled(true).transform(ack()).end().transform(hl7terser("/.BLORG")).     from("direct:test4").onException(HL7Exception.class).handled(true).transform(ack(AcknowledgmentCode.AR, "Problem!", ErrorCode.APPLICATION_INTERNAL_ERROR)).end().transform(hl7terser("/.BLORG")).     from("direct:test5").transform(ack(AcknowledgmentCode.AR, "Problem!", ErrorCode.DATA_TYPE_ERROR)). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:test1").transform(ack()).             from("direct:test2").transform(ack(AcknowledgmentCode.CA)).             from("direct:test3").onException(HL7Exception.class).handled(true).transform(ack()).end().transform(hl7terser("/.BLORG")).             from("direct:test4").onException(HL7Exception.class).handled(true).transform(ack(AcknowledgmentCode.AR, "Problem!", ErrorCode.APPLICATION_INTERNAL_ERROR)).end().transform(hl7terser("/.BLORG")).             from("direct:test5").transform(ack(AcknowledgmentCode.AR, "Problem!", ErrorCode.DATA_TYPE_ERROR)).         }     }. }
false;private,static;0;12;;private static ADT_A01 createADT01Message() throws Exception {     ADT_A01 adt = new ADT_A01().     adt.initQuickstart("ADT", "A01", "P").     // Populate the PID Segment     PID pid = adt.getPID().     pid.getPatientName(0).getFamilyName().getSurname().setValue("Doe").     pid.getPatientName(0).getGivenName().setValue("John").     pid.getPatientIdentifierList(0).getID().setValue("123456").     return adt. }
