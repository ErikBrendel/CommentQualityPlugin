commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void configure() {     forVersion(Version.V24).message("ADT", "A01").terser("PID-8", not(empty())). }
false;protected;0;22;;@Override protected void doPreSetup() throws Exception {     defaultValidationContext = ValidationContextFactory.defaultValidation().     defaultContext = new DefaultHapiContext(defaultValidationContext).     // we validate separately, not during parsing or rendering     defaultContext.getParserConfiguration().setValidating(false).     ValidationRuleBuilder builder = new ValidationRuleBuilder() {          private static final long serialVersionUID = 1L.          @Override         protected void configure() {             forVersion(Version.V24).message("ADT", "A01").terser("PID-8", not(empty())).         }     }.     customValidationContext = ValidationContextFactory.fromBuilder(builder).     customContext = new DefaultHapiContext(customValidationContext).     // we validate separately, not during parsing or rendering     customContext.getParserConfiguration().setValidating(false). }
false;public;0;8;;@Test public void testDefaultHapiContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test4").     mock.expectedMessageCount(1).     Message msg = createADT01Message().     template.sendBody("direct:test4", msg).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test(expected = CamelExecutionException.class) public void testCustomHapiContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test5").     mock.expectedMessageCount(0).     Message msg = createADT01Message().     template.sendBody("direct:test5", msg).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testDefaultValidationContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test1").     mock.expectedMessageCount(1).     Message msg = createADT01Message().     template.sendBody("direct:test1", msg).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test(expected = CamelExecutionException.class) public void testCustomValidationContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test2").     mock.expectedMessageCount(0).     Message msg = createADT01Message().     template.sendBody("direct:test2", msg).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testDynamicCustomValidationContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test3").     mock.expectedMessageCount(1).     Message msg = createADT01Message().     template.sendBodyAndHeader("direct:test3", msg, "validator", defaultValidationContext).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testDynamicDefaultHapiContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test6").     mock.expectedMessageCount(1).     Message msg = createADT01Message().     msg.setParser(defaultContext.getPipeParser()).     template.sendBody("direct:test6", msg).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test(expected = CamelExecutionException.class) public void testDynamicCustomHapiContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:test6").     mock.expectedMessageCount(0).     Message msg = createADT01Message().     msg.setParser(customContext.getPipeParser()).     template.sendBody("direct:test6", msg).     assertMockEndpointsSatisfied(). }
false;public;0;8;;public void configure() throws Exception {     from("direct:test1").validate(messageConformsTo(defaultValidationContext)).to("mock:test1").     from("direct:test2").validate(messageConformsTo(customValidationContext)).to("mock:test2").     from("direct:test3").validate(messageConformsTo(header("validator"))).to("mock:test3").     from("direct:test4").validate(messageConformsTo(defaultContext)).to("mock:test4").     from("direct:test5").validate(messageConformsTo(customContext)).to("mock:test5").     from("direct:test6").validate(messageConforms()).to("mock:test6"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:test1").validate(messageConformsTo(defaultValidationContext)).to("mock:test1").             from("direct:test2").validate(messageConformsTo(customValidationContext)).to("mock:test2").             from("direct:test3").validate(messageConformsTo(header("validator"))).to("mock:test3").             from("direct:test4").validate(messageConformsTo(defaultContext)).to("mock:test4").             from("direct:test5").validate(messageConformsTo(customContext)).to("mock:test5").             from("direct:test6").validate(messageConforms()).to("mock:test6").         }     }. }
false;private,static;0;12;;private static Message createADT01Message() throws Exception {     ADT_A01 adt = new ADT_A01().     adt.initQuickstart("ADT", "A01", "P").     // Populate the PID Segment     PID pid = adt.getPID().     pid.getPatientName(0).getFamilyName().getSurname().setValue("Doe").     pid.getPatientName(0).getGivenName().setValue("John").     pid.getPatientIdentifierList(0).getID().setValue("123456").     return adt. }
