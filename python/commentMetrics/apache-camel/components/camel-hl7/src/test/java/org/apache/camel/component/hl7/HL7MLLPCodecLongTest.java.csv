commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // START SNIPPET: e1     HL7MLLPCodec codec = new HL7MLLPCodec().     codec.setCharset("iso-8859-1").     jndi.bind("hl7codec", codec).     return jndi. }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     assertEquals(70010, exchange.getIn().getBody(byte[].class).length).     MDM_T02 input = (MDM_T02) exchange.getIn().getBody(Message.class).     assertEquals("2.5", input.getVersion()).     MSH msh = input.getMSH().     assertEquals("20071129144629", msh.getDateTimeOfMessage().getTime().getValue()).     exchange.getOut().setBody("some response"). }
false;public;0;12;;public void configure() throws Exception {     from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals(70010, exchange.getIn().getBody(byte[].class).length).             MDM_T02 input = (MDM_T02) exchange.getIn().getBody(Message.class).             assertEquals("2.5", input.getVersion()).             MSH msh = input.getMSH().             assertEquals("20071129144629", msh.getDateTimeOfMessage().getTime().getValue()).             exchange.getOut().setBody("some response").         }     }).to("mock:result"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals(70010, exchange.getIn().getBody(byte[].class).length).                     MDM_T02 input = (MDM_T02) exchange.getIn().getBody(Message.class).                     assertEquals("2.5", input.getVersion()).                     MSH msh = input.getMSH().                     assertEquals("20071129144629", msh.getDateTimeOfMessage().getTime().getValue()).                     exchange.getOut().setBody("some response").                 }             }).to("mock:result").         }     }. }
false;public;0;17;;@Test public void testSendHL7Message() throws Exception {     // START SNIPPET: e2     BufferedReader in = IOHelper.buffered(new InputStreamReader(getClass().getResourceAsStream("/mdm_t02.txt"))).     String line = "".     String message = "".     while (line != null) {         if ((line = in.readLine()) != null) {             message += line + "\r".         }     }     message = message.substring(0, message.length() - 1).     assertEquals(70010, message.length()).     String out = template.requestBody("mina2:tcp://127.0.0.1:" + getPort() + "?sync=true&codec=#hl7codec", message, String.class).     assertEquals("some response", out). // END SNIPPET: e2 }
