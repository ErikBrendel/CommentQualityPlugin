commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public Object evaluate(Exchange exchange) {     Message message = exchange.getIn().getBody(Message.class).     try {         return new Terser(message).get(expression.trim()).     } catch (HL7Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;0;4;;@Override public String toString() {     return "hl7terser(" + expression + ")". }
false;public,static;1;21;;public static Expression terser(final String expression) {     ObjectHelper.notNull(expression, "expression").     return new ExpressionAdapter() {          @Override         public Object evaluate(Exchange exchange) {             Message message = exchange.getIn().getBody(Message.class).             try {                 return new Terser(message).get(expression.trim()).             } catch (HL7Exception e) {                 throw RuntimeCamelException.wrapRuntimeCamelException(e).             }         }          @Override         public String toString() {             return "hl7terser(" + expression + ")".         }     }. }
false;public;1;4;;@Override public Predicate createPredicate(String expression) {     return ExpressionToPredicateAdapter.toPredicate(createExpression(expression)). }
false;public;1;4;;@Override public Expression createExpression(String expression) {     return terser(expression). }
