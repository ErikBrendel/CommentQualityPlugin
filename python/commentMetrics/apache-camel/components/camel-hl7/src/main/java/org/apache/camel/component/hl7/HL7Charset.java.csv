commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getHL7CharsetName() {     return hl7CharsetName. }
false;public;0;3;;public String getJavaCharsetName() {     return javaCharsetName. }
true;public,static;1;10;/**  * Returns the HL7Charset that matches the parameter  *  * @param s charset string  * @return HL7Charset enum  */ ;/**  * Returns the HL7Charset that matches the parameter  *  * @param s charset string  * @return HL7Charset enum  */ public static HL7Charset getHL7Charset(String s) {     if (s != null && s.length() > 0) {         for (HL7Charset charset : HL7Charset.values()) {             if (charset.hl7CharsetName.equals(s) || charset.javaCharsetName.equals(s)) {                 return charset.             }         }     }     return null. }
true;public,static;2;5;/**  * Returns the charset to be used for marshalling HL7 messages. If MSH-18 is empty,  * the charset configured in Camel's charset properties/headers is returned.  *  * @param message HL7 message  * @param exchange Exchange  * @return Java charset name  */ ;/**  * Returns the charset to be used for marshalling HL7 messages. If MSH-18 is empty,  * the charset configured in Camel's charset properties/headers is returned.  *  * @param message HL7 message  * @param exchange Exchange  * @return Java charset name  */ public static String getCharsetName(Message message, Exchange exchange) throws HL7Exception {     String defaultCharsetName = ExchangeHelper.getCharsetName(exchange).     String msh18 = ((Segment) message.get("MSH")).getField(18, 0).toString().     return getCharsetName(msh18, defaultCharsetName). }
true;public,static;2;5;/**  * Returns the charset to be used for unmarshalling HL7 messages. If MSH-18 is empty,  * the temporary charset name is returned.  *  * @param bytes HL7 message as byte array  * @param guessedCharsetName the temporary charset guessed to be able to read MSH-18  * @return Java charset name  *  * @see org.apache.camel.component.hl7.HL7DataFormat#guessCharsetName(byte[], org.apache.camel.Exchange)  */ ;/**  * Returns the charset to be used for unmarshalling HL7 messages. If MSH-18 is empty,  * the temporary charset name is returned.  *  * @param bytes HL7 message as byte array  * @param guessedCharsetName the temporary charset guessed to be able to read MSH-18  * @return Java charset name  *  * @see org.apache.camel.component.hl7.HL7DataFormat#guessCharsetName(byte[], org.apache.camel.Exchange)  */ public static String getCharsetName(byte[] bytes, String guessedCharsetName) throws UnsupportedEncodingException, HL7Exception {     String tmp = new String(bytes, guessedCharsetName).     String msh18 = PreParser.getFields(tmp, "MSH-18")[0].     return getCharsetName(msh18, guessedCharsetName). }
false;private,static;2;4;;private static String getCharsetName(String msh18, String defaultCharsetName) {     HL7Charset charset = HL7Charset.getHL7Charset(msh18).     return charset != null ? charset.getJavaCharsetName() : defaultCharsetName. }
