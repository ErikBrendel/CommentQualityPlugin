# id;timestamp;commentText;codeText;commentWords;codeWords
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1417633856;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link org.apache.camel.util.IOHelper#getCharsetName(org.apache.camel.Exchange)}.__@param b byte array_@param exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return IOHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,org,apache,camel,util,iohelper,get,charset,name,org,apache,camel,exchange,param,b,byte,array,param,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,iohelper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1420741773;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link org.apache.camel.util.IOHelper#getCharsetName(org.apache.camel.Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return IOHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,org,apache,camel,util,iohelper,get,charset,name,org,apache,camel,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,iohelper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1443168793;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link org.apache.camel.util.IOHelper#getCharsetName(org.apache.camel.Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return IOHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,org,apache,camel,util,iohelper,get,charset,name,org,apache,camel,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,iohelper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1517857963;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link org.apache.camel.util.IOHelper#getCharsetName(org.apache.camel.Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return IOHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,org,apache,camel,util,iohelper,get,charset,name,org,apache,camel,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,iohelper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1523994367;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link org.apache.camel.util.IOHelper#getCharsetName(org.apache.camel.Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return IOHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,org,apache,camel,util,iohelper,get,charset,name,org,apache,camel,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,iohelper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1540108163;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link ExchangeHelper#getCharsetName(Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return ExchangeHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,exchange,helper,get,charset,name,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,exchange,helper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1547241305;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link ExchangeHelper#getCharsetName(Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return ExchangeHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,exchange,helper,get,charset,name,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,exchange,helper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1547808466;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link ExchangeHelper#getCharsetName(Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return ExchangeHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,exchange,helper,get,charset,name,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,exchange,helper,get,charset,name,exchange
HL7DataFormat -> protected String guessCharsetName(byte[] b, Exchange exchange);1548175645;In HL7 the charset of the message can be set in MSH-18,_but you need to decode the input stream in order to be able to read MSH-18._This works well for differentiating e.g. between ASCII, UTF-8 and ISI-8859 charsets,_but not for multi-byte charsets like UTF-16, Big5 etc.__This method is called to "guess" the initial encoding, and subclasses can overwrite it_using 3rd party libraries like ICU4J that provide a CharsetDetector.__The implementation in this class just assumes the charset defined in the exchange property or header by_calling {@link ExchangeHelper#getCharsetName(Exchange)}.__@param b byte array_@param exchange the exchange_@return charset name;protected String guessCharsetName(byte[] b, Exchange exchange) {_        return ExchangeHelper.getCharsetName(exchange)__    };in,hl7,the,charset,of,the,message,can,be,set,in,msh,18,but,you,need,to,decode,the,input,stream,in,order,to,be,able,to,read,msh,18,this,works,well,for,differentiating,e,g,between,ascii,utf,8,and,isi,8859,charsets,but,not,for,multi,byte,charsets,like,utf,16,big5,etc,this,method,is,called,to,guess,the,initial,encoding,and,subclasses,can,overwrite,it,using,3rd,party,libraries,like,icu4j,that,provide,a,charset,detector,the,implementation,in,this,class,just,assumes,the,charset,defined,in,the,exchange,property,or,header,by,calling,link,exchange,helper,get,charset,name,exchange,param,b,byte,array,param,exchange,the,exchange,return,charset,name;protected,string,guess,charset,name,byte,b,exchange,exchange,return,exchange,helper,get,charset,name,exchange
