commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;65;;@Override protected boolean doDecode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws Exception {     // Get the state of the current message and     // Skip what we have already scanned before     DecoderState state = decoderState(session).     in.position(state.current()).     LOG.debug("Received data, checking from position {} to {}", in.position(), in.limit()).     boolean messageDecoded = false.     while (in.hasRemaining()) {         int previousPosition = in.position().         byte current = in.get().         // Check if we are at the end of an HL7 message         if (current == config.getEndByte2() && state.previous() == config.getEndByte1()) {             if (state.isStarted()) {                 // Save the current buffer pointers and reset them to surround the identifier message                 int currentPosition = in.position().                 int currentLimit = in.limit().                 LOG.debug("Message ends at position {} with length {}", previousPosition, previousPosition - state.start() + 1).                 in.position(state.start()).                 in.limit(currentPosition).                 LOG.debug("Set start to position {} and limit to {}", in.position(), in.limit()).                 // Now create string or byte[] from this part of the buffer and restore the buffer pointers                 try {                     out.write(config.isProduceString() ? parseMessageToString(in.slice(), charsetDecoder(session)) : parseMessageToByteArray(in.slice())).                     messageDecoded = true.                 } finally {                     LOG.debug("Resetting to position {} and limit to {}", currentPosition, currentLimit).                     in.position(currentPosition).                     in.limit(currentLimit).                     state.reset().                 }             } else {                 LOG.warn("Ignoring message end at position {} until start byte has been seen.", previousPosition).             }         } else {             // Check if we are at the start of an HL7 message             if (current == config.getStartByte()) {                 state.markStart(previousPosition).             } else {                 // Remember previous byte in state object because the buffer could                 // be theoretically exhausted right between the two end bytes                 state.markPrevious(current).             }             messageDecoded = false.         }     }     if (!messageDecoded) {         // Could not find a complete message in the buffer.         // Reset to the initial position (just as nothing had been read yet)         // and return false so that this method is called again with more data.         LOG.debug("No complete message yet at position {}", in.position()).         state.markCurrent(in.position()).         in.position(0).     }     return messageDecoded. }
true;private;1;19;// returning a byte array ;// Make a defensive byte copy (the buffer will be reused) // and omit the start and the two end bytes of the MLLP message // returning a byte array private Object parseMessageToByteArray(IoBuffer buf) throws CharacterCodingException {     int len = buf.limit() - 3.     LOG.debug("Making byte array of length {}", len).     byte[] dst = new byte[len].     // skip start byte     buf.skip(1).     buf.get(dst, 0, len).     // skip end bytes     buf.skip(2).     // Only do this if conversion is enabled     if (config.isConvertLFtoCR()) {         LOG.debug("Replacing LF by CR").         for (int i = 0. i < dst.length. i++) {             if (dst[i] == (byte) '\n') {                 dst[i] = (byte) '\r'.             }         }     }     return dst. }
true;private;2;14;// returning a String ;// Make a defensive byte copy (the buffer will be reused) // and omit the start and the two end bytes of the MLLP message // returning a String private Object parseMessageToString(IoBuffer buf, CharsetDecoder decoder) throws CharacterCodingException {     int len = buf.limit() - 3.     LOG.debug("Making string of length {} using charset {}", len, decoder.charset()).     // skip start byte     buf.skip(1).     String message = buf.getString(len, decoder).     // skip end bytes     buf.skip(2).     // Only do this if conversion is enabled     if (config.isConvertLFtoCR()) {         LOG.debug("Replacing LF by CR").         message = message.replace('\n', '\r').     }     return message. }
false;public;1;5;;@Override public void dispose(IoSession session) throws Exception {     session.removeAttribute(DECODER_STATE).     session.removeAttribute(CHARSET_DECODER). }
false;private;1;12;;private CharsetDecoder charsetDecoder(IoSession session) {     synchronized (session) {         CharsetDecoder decoder = (CharsetDecoder) session.getAttribute(CHARSET_DECODER).         if (decoder == null) {             decoder = config.getCharset().newDecoder().onMalformedInput(config.getMalformedInputErrorAction()).onUnmappableCharacter(config.getUnmappableCharacterErrorAction()).             session.setAttribute(CHARSET_DECODER, decoder).         }         return decoder.     } }
false;private;1;10;;private DecoderState decoderState(IoSession session) {     synchronized (session) {         DecoderState decoderState = (DecoderState) session.getAttribute(DECODER_STATE).         if (decoderState == null) {             decoderState = new DecoderState().             session.setAttribute(DECODER_STATE, decoderState).         }         return decoderState.     } }
false;;0;5;;void reset() {     startPos = -1.     currentPos = 0.     previousByte = 0. }
false;;1;8;;void markStart(int position) {     if (isStarted()) {         LOG.warn("Ignoring message start at position {} before previous message has ended.", position).     } else {         startPos = position.         LOG.debug("Message starts at position {}", startPos).     } }
false;;1;3;;void markCurrent(int position) {     currentPos = position. }
false;;1;3;;void markPrevious(byte previous) {     previousByte = previous. }
false;public;0;3;;public int start() {     return startPos. }
false;public;0;3;;public int current() {     return currentPos. }
false;public;0;3;;public byte previous() {     return previousByte. }
false;public;0;3;;public boolean isStarted() {     return startPos >= 0. }
