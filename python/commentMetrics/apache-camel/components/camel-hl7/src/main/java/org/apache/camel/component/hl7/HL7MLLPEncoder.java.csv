commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public void dispose(IoSession session) throws Exception { }
false;public;3;32;;public void encode(IoSession session, Object message, ProtocolEncoderOutput out) throws Exception {     if (message == null) {         throw new IllegalArgumentException("Message to be encoded is null").     } else if (message instanceof Exception) {         // we cannot handle exceptions         throw (Exception) message.     }     byte[] body.     if (message instanceof Message) {         body = ((Message) message).encode().getBytes(config.getCharset()).     } else if (message instanceof String) {         body = ((String) message).getBytes(config.getCharset()).     } else if (message instanceof byte[]) {         body = (byte[]) message.     } else {         throw new IllegalArgumentException("The message to encode is not a supported type: " + message.getClass().getCanonicalName()).     }     // put the data into the byte buffer     IoBuffer buf = IoBuffer.allocate(body.length + 3).setAutoExpand(true).     buf.put((byte) config.getStartByte()).     buf.put(body).     buf.put((byte) config.getEndByte1()).     buf.put((byte) config.getEndByte2()).     // flip the buffer so we can use it to write to the out stream     buf.flip().     LOG.debug("Encoded HL7 from {} to byte stream", message.getClass().getCanonicalName()).     out.write(buf). }
