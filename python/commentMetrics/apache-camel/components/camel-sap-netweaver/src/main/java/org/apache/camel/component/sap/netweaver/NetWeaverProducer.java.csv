commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public NetWeaverEndpoint getEndpoint() {     return (NetWeaverEndpoint) super.getEndpoint(). }
false;public;1;31;;@Override public void process(Exchange exchange) throws Exception {     String command = ExchangeHelper.getMandatoryHeader(exchange, NetWeaverConstants.COMMAND, String.class).     Exchange httpExchange = getEndpoint().createExchange().     httpExchange.getIn().setHeader(Exchange.HTTP_PATH, command).     if (getEndpoint().isJson()) {         httpExchange.getIn().setHeader("Accept", "application/json").     }     log.debug("Calling SAP Net-Weaver {} with command {}", http, command).     http.process(httpExchange).     String data = httpExchange.getOut().getBody(String.class).     if (data != null && getEndpoint().isJsonAsMap() && getEndpoint().isJson()) {         // map json string to json map         ObjectMapper mapper = new ObjectMapper().         Map<?, ?> map = mapper.readValue(data, Map.class).         // if we only have one entry in the map, then put that as root (as it tends to return a single instance "d"         if (map.size() == 1 && getEndpoint().isFlatternMap()) {             exchange.getIn().setBody(map.values().iterator().next()).         } else {             exchange.getIn().setBody(map).         }     } else {         // store data as is         exchange.getIn().setBody(data).     } }
false;protected;0;10;;@Override protected void doStart() throws Exception {     String url = getEndpoint().getUrl() + "?authUsername=" + getEndpoint().getUsername() + "&authPassword=" + getEndpoint().getPassword() + "&authMethod=Basic".     if (log.isInfoEnabled()) {         log.info("Creating NetWeaverProducer using url: {}", URISupport.sanitizeUri(url)).     }     http = getEndpoint().getCamelContext().getEndpoint(url).createProducer().     ServiceHelper.startService(http). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(http). }
