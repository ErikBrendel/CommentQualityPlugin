commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testOptions() throws Exception {     CamelContext context = createCamelContext(new String[] { "-cc", "org.apache.camel.spring.javaconfig.config.ContextConfig" }).     context.start().     runTests(context).     context.stop(). }
false;public;0;7;;@Test public void testOptionBP() throws Exception {     CamelContext context = createCamelContext(new String[] { "-bp", "org.apache.camel.spring.javaconfig.config" }).     context.start().     runTests(context).     context.stop(). }
false;private;1;7;;private CamelContext createCamelContext(String[] options) throws Exception {     Main main = new Main().     main.parseArguments(options).     ApplicationContext applicationContext = main.createDefaultApplicationContext().     CamelContext context = applicationContext.getBean(CamelContext.class).     return context. }
false;private;1;14;;private void runTests(CamelContext context) throws Exception {     MockEndpoint resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class).     ProducerTemplate template = context.createProducerTemplate().     String expectedBody = "<matched/>".     resultEndpoint.expectedBodiesReceived(expectedBody).     template.sendBodyAndHeader("direct:start", expectedBody, "foo", "bar").     resultEndpoint.assertIsSatisfied().     resultEndpoint.reset().     resultEndpoint.expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "<notMatched/>", "foo", "notMatchedHeaderValue").     resultEndpoint.assertIsSatisfied(). }
