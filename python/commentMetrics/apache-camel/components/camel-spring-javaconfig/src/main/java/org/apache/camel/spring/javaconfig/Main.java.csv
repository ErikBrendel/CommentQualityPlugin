commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setBasedPackages(parameter). }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setConfigClasses(parameter). }
false;public,static;1;5;;public static void main(String... args) throws Exception {     Main main = new Main().     instance = main.     main.run(args). }
true;public;1;3;/**  * Sets the base packages where Spring annotation scanning is performed.  * You can separate multiple packages using comma or semi colon.  */ ;/**  * Sets the base packages where Spring annotation scanning is performed.  * You can separate multiple packages using comma or semi colon.  */ public void setBasedPackages(String config) {     basedPackages = config. }
false;public;0;3;;public String getBasedPackages() {     return basedPackages. }
true;public;1;3;/**  * Sets the name of Spring <tt>@Configuration</tt> classes to use.  * You can separate multiple classes using comma or semi colon.  */ ;/**  * Sets the name of Spring <tt>@Configuration</tt> classes to use.  * You can separate multiple classes using comma or semi colon.  */ public void setConfigClasses(String config) {     configClasses = config. }
false;public;0;3;;public String getConfigClasses() {     return configClasses. }
true;public;1;4;/**  * @deprecated use {@link #setConfigClasses(String)}  */ ;/**  * @deprecated use {@link #setConfigClasses(String)}  */ @Deprecated public void setConfigClassesString(String config) {     setConfigClasses(config). }
true;public;0;4;/**  * @deprecated use {@link #getConfigClasses()}  */ ;/**  * @deprecated use {@link #getConfigClasses()}  */ @Deprecated public String getConfigClassesString() {     return getConfigClasses(). }
false;public;0;3;;public Class[] getConfigClass() {     return configClass. }
true;public;1;3;/**  * Sets the Spring <tt>@Configuration</tt> classes to use.  */ ;/**  * Sets the Spring <tt>@Configuration</tt> classes to use.  */ public void setConfigClass(Class... configClass) {     this.configClass = configClass. }
false;private;1;12;;private Class<?>[] getConfigClasses(String configureClasses) {     List<Class<?>> answer = new ArrayList<>().     String[] classes = configureClasses.split("(.|,)").     for (String className : classes) {         className = className.trim().         Class<?> configClass = ObjectHelper.loadClass(className).         if (configClass != null) {             answer.add(configClass).         }     }     return answer.toArray(new Class<?>[answer.size()]). }
false;protected;0;27;;protected AbstractApplicationContext createDefaultApplicationContext() {     ApplicationContext parentContext = getParentApplicationContext().     AnnotationConfigApplicationContext acApplicationContext = new AnnotationConfigApplicationContext().     if (parentContext != null) {         acApplicationContext.setParent(parentContext).     }     if (getConfigClasses() != null) {         Class<?>[] configClasses = getConfigClasses(getConfigClasses()).         for (Class<?> cls : configClasses) {             acApplicationContext.register(cls).         }     }     if (getConfigClass() != null) {         for (Class<?> cls : getConfigClass()) {             acApplicationContext.register(cls).         }     }     if (getBasedPackages() != null) {         String[] basePackages = getBasedPackages().split("(.|,)").         for (String basePackage : basePackages) {             basePackage = basePackage.trim().             acApplicationContext.scan(basePackage).         }     }     acApplicationContext.refresh().     return acApplicationContext. }
