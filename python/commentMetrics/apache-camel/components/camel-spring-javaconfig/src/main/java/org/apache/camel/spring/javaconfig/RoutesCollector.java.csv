commented;modifiers;parameterAmount;loc;comment;code
false;public;1;43;;// Overridden @Override public void onApplicationEvent(ContextRefreshedEvent event) {     ApplicationContext applicationContext = event.getApplicationContext().     // only listen to context refresh of "my" applicationContext     if (this.applicationContext.equals(applicationContext)) {         CamelContext camelContext = event.getApplicationContext().getBean(CamelContext.class).         // only add and start Camel if its stopped (initial state)         if (camelContext.getStatus().isStopped()) {             LOG.debug("Post-processing CamelContext bean: {}", camelContext.getName()).             for (RoutesBuilder routesBuilder : configuration.routes()) {                 // filter out abstract classes                 boolean abs = Modifier.isAbstract(routesBuilder.getClass().getModifiers()).                 if (!abs) {                     try {                         LOG.debug("Injecting following route into the CamelContext: {}", routesBuilder).                         camelContext.addRoutes(routesBuilder).                     } catch (Exception e) {                         throw new CamelSpringJavaconfigInitializationException(e).                     }                 }             }             try {                 boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext")).                 if (skip) {                     LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.").                 } else {                     // start camel                     camelContext.start().                 }             } catch (Exception e) {                 throw new CamelSpringJavaconfigInitializationException(e).             }         }     } else {         LOG.debug("Ignore ContextRefreshedEvent: {}", event).     } }
false;public;0;6;;@Override public int getOrder() {     // before SpringCamelContext (see SpringCamelContext::getOrder)     return LOWEST_PRECEDENCE - 1. }
