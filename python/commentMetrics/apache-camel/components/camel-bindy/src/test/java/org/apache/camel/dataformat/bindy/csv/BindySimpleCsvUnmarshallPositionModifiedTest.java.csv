commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test @DirtiesContext public void testUnMarshallMessage() throws Exception {     record = "1,25,Albert,Cartier,ISIN,BE12345678,SELL,Share,1500,EUR,08-01-2009\r\n".     template.sendBody(record).     result.expectedMessageCount(1).     result.assertIsSatisfied(). }
false;public;0;22;;@Test @DirtiesContext public void testUnmarshallErrorMessage() throws Exception {     record = "1,25,Albert,Cartier,ISIN,BE12345678,SELL,Share,1500,EUR,08-01-2009-01\r\n".     template.sendBody(record).     // We don't expect to have a message as an error will be raised     result.expectedMessageCount(0).     // Message has been delivered to the mock error     error.expectedMessageCount(1).     result.assertIsSatisfied().     error.assertIsSatisfied().     // and check that we have the caused exception stored     Exception cause = error.getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     TestSupport.assertIsInstanceOf(FormatException.class, cause.getCause()).     assertEquals("Date provided does not fit the pattern defined, position: 11, line: 1", cause.getMessage()). }
false;public;0;10;;public void configure() {     // default should errors go to mock:error     errorHandler(deadLetterChannel(URI_MOCK_ERROR).redeliveryDelay(0)).     onException(Exception.class).maximumRedeliveries(0).handled(true).     from(URI_DIRECT_START).unmarshal(orderBindyDataFormat).to(URI_MOCK_RESULT). }
