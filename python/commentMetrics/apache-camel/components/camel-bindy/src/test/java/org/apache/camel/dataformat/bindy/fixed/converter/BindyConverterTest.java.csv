commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;// ************************************************************************* // TEST // ************************************************************************* @Test @DirtiesContext public void testMarshall() throws Exception {     DataModel rec = new DataModel().     rec.field1 = "0123456789".     mresult.expectedBodiesReceived("9876543210\r\n").     mtemplate.sendBody(rec).     mresult.assertIsSatisfied(). }
false;public;0;14;;@Test @DirtiesContext public void testUnMarshall() throws Exception {     utemplate.sendBody("9876543210\r\n").     uresult.expectedMessageCount(1).     uresult.assertIsSatisfied().     // check the model     Exchange exc = uresult.getReceivedExchanges().get(0).     DataModel data = exc.getIn().getBody(DataModel.class).     Assert.assertEquals("0123456789", data.field1). }
false;public;0;7;;@Test @DirtiesContext public void testRightAlignedNotTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Right aligned, padding not trimmed", data.field1, Is.is("!!!f1")). }
false;public;0;7;;@Test @DirtiesContext public void testLeftAlignedNotTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Left aligned, padding not trimmed", data.field2, Is.is("f2!!!")). }
false;public;0;7;;@Test @DirtiesContext public void testRightAlignedTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Right aligned, padding trimmed", data.field3, Is.is("f3")). }
false;public;0;7;;@Test @DirtiesContext public void testLeftAlignedTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Left aligned, padding trimmed", data.field4, Is.is("f4")). }
false;public;0;7;;@Test @DirtiesContext public void testRightAlignedRecordPaddingNotTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Right aligned, padding not trimmed", data.field5, Is.is("###f5")). }
false;public;0;7;;@Test @DirtiesContext public void testLeftAlignedRecordPaddingNotTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Left aligned, padding not trimmed", data.field6, Is.is("f6###")). }
false;public;0;7;;@Test @DirtiesContext public void testRightAlignedRecordPaddingTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Right aligned, padding trimmed", data.field7, Is.is("f7")). }
false;public;0;7;;@Test @DirtiesContext public void testLeftAlignedRecordPaddingTrimmed() throws Exception {     AllCombinations data = sendAndRecieveAllCombinations().     assertThat("Left aligned, padding trimmed", data.field8, Is.is("f8")). }
false;private;0;18;;private AllCombinations sendAndRecieveAllCombinations() throws InterruptedException {     AllCombinations all = new AllCombinations().     all.field1 = "f1".     all.field2 = "f2".     all.field3 = "f3".     all.field4 = "f4".     all.field5 = "f5".     all.field6 = "f6".     all.field7 = "f7".     all.field8 = "f8".     ttemplate.sendBody(all).     tresult.expectedMessageCount(1).     tresult.assertIsSatisfied().     Exchange exc = tresult.getReceivedExchanges().get(0).     return exc.getIn().getBody(AllCombinations.class). }
false;public;0;21;;@Override public void configure() throws Exception {     BindyDataFormat bindy = new BindyDataFormat().     bindy.setClassType(DataModel.class).     bindy.setType(BindyType.Fixed).     from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT).     from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed, DataModel.class).to(URI_MOCK_UNMARSHALL_RESULT).     BindyDataFormat bindy2 = new BindyDataFormat().     bindy2.setClassType(AllCombinations.class).     bindy2.setType(BindyType.Fixed).     from(URI_DIRECT_THROUGH).marshal(bindy2).unmarshal().bindy(BindyType.Fixed, AllCombinations.class).to(URI_MOCK_THROUGH). }
false;protected;0;28;;// ************************************************************************* // ROUTES // ************************************************************************* @Override protected RouteBuilder createRouteBuilder() throws Exception {     RouteBuilder routeBuilder = new RouteBuilder() {          @Override         public void configure() throws Exception {             BindyDataFormat bindy = new BindyDataFormat().             bindy.setClassType(DataModel.class).             bindy.setType(BindyType.Fixed).             from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT).             from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed, DataModel.class).to(URI_MOCK_UNMARSHALL_RESULT).             BindyDataFormat bindy2 = new BindyDataFormat().             bindy2.setClassType(AllCombinations.class).             bindy2.setType(BindyType.Fixed).             from(URI_DIRECT_THROUGH).marshal(bindy2).unmarshal().bindy(BindyType.Fixed, AllCombinations.class).to(URI_MOCK_THROUGH).         }     }.     return routeBuilder. }
false;public;1;4;;@Override public String format(String object) throws Exception {     return (new StringBuilder(object)).reverse().toString(). }
false;public;1;4;;@Override public String parse(String string) throws Exception {     return (new StringBuilder(string)).reverse().toString(). }
