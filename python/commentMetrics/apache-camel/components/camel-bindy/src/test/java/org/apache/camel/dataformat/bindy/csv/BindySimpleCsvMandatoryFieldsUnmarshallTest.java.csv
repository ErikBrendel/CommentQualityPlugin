commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;// String record5 = ",,,,,,,,,,". // record with no data @DirtiesContext @Test public void testEmptyRecord() throws Exception {     // empty records     String record1 = "".     resultEndpoint1.expectedMessageCount(0).     try {         template1.sendBody(record1).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         Assert.isInstanceOf(Exception.class, e.getCause()).     // log.info(">> Error : " + e).     }     resultEndpoint1.assertIsSatisfied(). }
false;public;0;11;;@DirtiesContext @Test public void testEmptyFields() throws Exception {     // optional fields     String record2 = ",,blabla,,,,,,,,".     resultEndpoint1.expectedMessageCount(1).     template1.sendBody(record2).     resultEndpoint1.assertIsSatisfied(). }
false;public;0;11;;@DirtiesContext @Test public void testOneOptionalField() throws Exception {     // optional fields     String record2 = ",,blabla,,,,,,,,".     resultEndpoint1.expectedMessageCount(1).     template1.sendBody(record2).     resultEndpoint1.assertIsSatisfied(). }
false;public;0;16;;@DirtiesContext @Test public void testSeveralOptionalFields() throws Exception {     // mandatory     String record3 = "1,A1,Charles,Moulliard,ISIN,LU123456789,,,,,".     // fields     // present     // (A1,     // Charles,     // Moulliard)     resultEndpoint1.expectedMessageCount(1).     template1.sendBody(record3).     resultEndpoint1.assertIsSatisfied(). }
false;public;0;19;;@DirtiesContext @Test public void testTooMuchFields() throws Exception {     // too much data in the record (only     String record6 = ",,,,,,,,,,,,,,".     // 11 are accepted by the model     resultEndpoint1.expectedMessageCount(0).     try {         template1.sendBody(record6).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         // expected         Assert.isInstanceOf(IllegalArgumentException.class, e.getCause()).     }     resultEndpoint1.assertIsSatisfied(). }
false;public;0;8;;@DirtiesContext @Test public void testEmptyLineWithAllowEmptyStreamEqualsTrue() throws Exception {     // empty line     String record6 = "".     resultEndpoint3.expectedMessageCount(1).     template3.sendBody(record6).     resultEndpoint3.assertIsSatisfied(). }
false;public;0;8;;@DirtiesContext @Test public void testNonEmptyLineWithAllowEmptyStreamEqualsTrue() throws Exception {     // mandatory     String record3 = "1,A1,Onder,Sezgin,MYC,BB123456789,,,,,".     resultEndpoint3.expectedMessageCount(1).     template3.sendBody(record3).     resultEndpoint3.assertIsSatisfied(). }
false;public;0;16;;@DirtiesContext @Test public void testMandatoryFields() throws Exception {     // mandatory     String record3 = "1,A1,Charles,Moulliard,ISIN,LU123456789,,,,,".     // fields     // present     // (A1,     // Charles,     // Moulliard)     resultEndpoint2.expectedMessageCount(1).     template2.sendBody(header + record3).     resultEndpoint2.assertIsSatisfied(). }
false;public;0;16;;@DirtiesContext @Test public void testMissingMandatoryFields() throws Exception {     // mandatory     String record4 = "1,A1,Charles,,ISIN,LU123456789,,,,,".     // field missing     resultEndpoint2.expectedMessageCount(1).     try {         template2.sendBody(header + record4).         resultEndpoint2.assertIsSatisfied().     } catch (CamelExecutionException e) {     // log.info(">> Error : " + e).     } }
false;public;0;5;;public void configure() {     from("direct:start1").unmarshal(formatOptional).to("mock:result1").     from("direct:start2").unmarshal(formatMandatory).to("mock:result2").     from("direct:start3").unmarshal(formatEmptyStream).to("mock:result3"). }
