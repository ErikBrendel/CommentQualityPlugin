commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;// ************************************************************************* // TESTS // ************************************************************************* @Test public void testUnmarshallMessage() throws Exception {     unmarshallResult.expectedMessageCount(1).     template.sendBody(URI_DIRECT_UNMARSHALL, TEST_RECORD).     unmarshallResult.assertIsSatisfied().     // check the model     BindyFixedLengthDynamicFieldTest.Order order = (BindyFixedLengthDynamicFieldTest.Order) unmarshallResult.getReceivedExchanges().get(0).getIn().getBody().     assertEquals(10, order.getOrderNr()).     // the field is not trimmed     assertEquals("Pauline", order.getFirstName()).     assertEquals("M", order.getLastName()).     assertEquals("XD12345678", order.getInstrumentNumber()). }
false;public;0;15;;@Test public void testFailWhenUnmarshallMessageWithUnmappedChars() throws Exception {     unmarshallResult.reset().     unmarshallResult.expectedMessageCount(0).     try {         template.sendBody(URI_DIRECT_UNMARSHALL, TEST_RECORD_WITH_EXTRA_CHARS).     } catch (Exception e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertTrue(e.getCause().getMessage().contains("unmapped characters")).         return.     }     fail("An error is expected when unmapped characters are encountered in the fixed length record"). }
false;public;0;23;;@Test public void testMarshallMessage() throws Exception {     BindyFixedLengthDynamicFieldTest.Order order = new Order().     order.setOrderNr(10).     order.setOrderType("BUY").     order.setClientNr("A9").     order.setFirstName("Pauline").     order.setLastName("M").     order.setAmount(new BigDecimal("2500.45")).     order.setInstrumentCode("ISIN").     order.setInstrumentNumberLen(10).     order.setInstrumentNumber("XD12345678").     order.setInstrumentType("Share").     order.setCurrency("USD").     Calendar calendar = new GregorianCalendar().     calendar.set(2009, 7, 1).     order.setOrderDate(calendar.getTime()).     marshallResult.expectedMessageCount(1).     marshallResult.expectedBodiesReceived(Arrays.asList(new String[] { TEST_RECORD })).     template.sendBody(URI_DIRECT_MARSHALL, order).     marshallResult.assertIsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     BindyDataFormat bindy = new BindyDataFormat().     bindy.setLocale("en").     bindy.setClassType(BindyFixedLengthDynamicFieldTest.Order.class).     bindy.setType(BindyType.Fixed).     from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT).     from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed, BindyFixedLengthDynamicFieldTest.Order.class).to(URI_MOCK_UNMARSHALL_RESULT). }
false;protected;0;23;;// ************************************************************************* // ROUTES // ************************************************************************* @Override protected RouteBuilder createRouteBuilder() throws Exception {     RouteBuilder routeBuilder = new RouteBuilder() {          @Override         public void configure() throws Exception {             BindyDataFormat bindy = new BindyDataFormat().             bindy.setLocale("en").             bindy.setClassType(BindyFixedLengthDynamicFieldTest.Order.class).             bindy.setType(BindyType.Fixed).             from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT).             from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed, BindyFixedLengthDynamicFieldTest.Order.class).to(URI_MOCK_UNMARSHALL_RESULT).         }     }.     return routeBuilder. }
false;public;0;3;;public int getOrderNr() {     return orderNr. }
false;public;1;3;;public void setOrderNr(int orderNr) {     this.orderNr = orderNr. }
false;public;0;3;;public String getClientNr() {     return clientNr. }
false;public;1;3;;public void setClientNr(String clientNr) {     this.clientNr = clientNr. }
false;public;0;3;;public String getFirstName() {     return firstName. }
false;public;1;3;;public void setFirstName(String firstName) {     this.firstName = firstName. }
false;public;0;3;;public String getLastName() {     return lastName. }
false;public;1;3;;public void setLastName(String lastName) {     this.lastName = lastName. }
false;public;0;3;;public String getInstrumentCode() {     return instrumentCode. }
false;public;1;3;;public void setInstrumentCode(String instrumentCode) {     this.instrumentCode = instrumentCode. }
false;public;1;3;;public void setInstrumentNumberLen(int instrumentNumberLen) {     this.instrumentNumberLen = instrumentNumberLen. }
false;public;0;3;;public int getInstrumentNumberLen() {     return instrumentNumberLen. }
false;public;0;3;;public String getInstrumentNumber() {     return instrumentNumber. }
false;public;1;3;;public void setInstrumentNumber(String instrumentNumber) {     this.instrumentNumber = instrumentNumber. }
false;public;0;3;;public String getOrderType() {     return orderType. }
false;public;1;3;;public void setOrderType(String orderType) {     this.orderType = orderType. }
false;public;0;3;;public String getInstrumentType() {     return instrumentType. }
false;public;1;3;;public void setInstrumentType(String instrumentType) {     this.instrumentType = instrumentType. }
false;public;0;3;;public BigDecimal getAmount() {     return amount. }
false;public;1;3;;public void setAmount(BigDecimal amount) {     this.amount = amount. }
false;public;0;3;;public String getCurrency() {     return currency. }
false;public;1;3;;public void setCurrency(String currency) {     this.currency = currency. }
false;public;0;3;;public Date getOrderDate() {     return orderDate. }
false;public;1;3;;public void setOrderDate(Date orderDate) {     this.orderDate = orderDate. }
false;public;0;6;;@Override public String toString() {     return "Model : " + Order.class.getName() + " : " + this.orderNr + ", " + this.orderType + ", " + String.valueOf(this.amount) + ", " + this.instrumentCode + ", " + this.instrumentNumber + ", " + this.instrumentType + ", " + this.currency + ", " + this.clientNr + ", " + this.firstName + ", " + this.lastName + ", " + String.valueOf(this.orderDate). }
