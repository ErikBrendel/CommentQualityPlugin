commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testUnmarshalNoNeedToSpanLine() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:unmarshal").     mock.expectedMessageCount(1).     template.sendBody("direct:unmarshal", "1 hei kommentar").     assertMockEndpointsSatisfied().     final RegexSpanLastRecord order = mock.getReceivedExchanges().get(0).getIn().getBody(RegexSpanLastRecord.class).     assertEquals(1, order.getRecordId()).     assertEquals("hei", order.getName()).     assertEquals("kommentar", order.getComment()). }
false;public;0;15;;@Test public void testUnmarshalSpanningLine() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:unmarshal").     mock.expectedMessageCount(1).     template.sendBody("direct:unmarshal", "1 hei kommentar test noe hei").     assertMockEndpointsSatisfied().     final RegexSpanLastRecord order = mock.getReceivedExchanges().get(0).getIn().getBody(RegexSpanLastRecord.class).     assertEquals(1, order.getRecordId()).     assertEquals("hei", order.getName()).     assertEquals("kommentar test noe hei", order.getComment()). }
false;public;0;8;;@Override public void configure() throws Exception {     final BindyCsvDataFormat bindy = new BindyCsvDataFormat(RegexSpanLastRecord.class).     from("direct:unmarshal").unmarshal(bindy).to("mock:unmarshal"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             final BindyCsvDataFormat bindy = new BindyCsvDataFormat(RegexSpanLastRecord.class).             from("direct:unmarshal").unmarshal(bindy).to("mock:unmarshal").         }     }. }
