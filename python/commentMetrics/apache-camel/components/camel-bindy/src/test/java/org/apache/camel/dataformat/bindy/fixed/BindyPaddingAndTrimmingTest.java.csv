commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from(URI_DIRECT_UNMARSHAL).unmarshal().bindy(BindyType.Fixed, MyBindyModel.class).to(URI_MOCK_UNMARSHAL_RESULT). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(URI_DIRECT_UNMARSHAL).unmarshal().bindy(BindyType.Fixed, MyBindyModel.class).to(URI_MOCK_UNMARSHAL_RESULT).         }     }. }
false;public;0;10;;@Test public void testUnmarshal() throws Exception {     unmarhsalResult.expectedMessageCount(1).     template.sendBody(URI_DIRECT_UNMARSHAL, "foo  \r\n").     unmarhsalResult.assertIsSatisfied().     MyBindyModel myBindyModel = unmarhsalResult.getReceivedExchanges().get(0).getIn().getBody(MyBindyModel.class).     assertEquals("foo  ", myBindyModel.foo).     assertThat(myBindyModel.bar, Is.is("")). }
false;public;0;10;;@Test public void testUnmarshalTooLong() throws Exception {     unmarhsalResult.expectedMessageCount(1).     template.sendBody(URI_DIRECT_UNMARSHAL, "foo  bar    \r\n").     unmarhsalResult.assertIsSatisfied().     MyBindyModel myBindyModel = unmarhsalResult.getReceivedExchanges().get(0).getIn().getBody(MyBindyModel.class).     assertEquals("foo  ", myBindyModel.foo). }
false;public;0;3;;public String getFoo() {     return foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
false;public;0;3;;public String getBar() {     return bar. }
false;public;1;3;;public void setBar(String bar) {     this.bar = bar. }
