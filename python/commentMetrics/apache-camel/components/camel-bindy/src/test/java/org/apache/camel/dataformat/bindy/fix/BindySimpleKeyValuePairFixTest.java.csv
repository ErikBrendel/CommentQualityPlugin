commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test @DirtiesContext public void testUnMarshallMessage() throws Exception {     mock.expectedMessageCount(FIX_RESPONSES.length).     mock.expectedBodiesReceived(FIX_RESPONSES).     for (String request : FIX_REQUESTS) {         template.sendBody("direct:fix", request).     }     mock.assertIsSatisfied(). }
false;public;1;18;;@Override public void process(Exchange exchange) throws Exception {     FixOrder order = exchange.getIn().getBody(FixOrder.class).     Object body = exchange.getIn().getBody().     if (order.getProduct().equals("butter")) {         order.setQuantity("2").         body = order.     } else if (order.getProduct().equals("milk")) {         order.setQuantity("4").         body = Collections.singletonMap(order.getClass().getName(), order).     } else if (order.getProduct().equals("bread")) {         order.setQuantity("6").         body = Collections.singletonList(Collections.singletonMap(order.getClass().getName(), order)).     }     exchange.getIn().setBody(body). }
false;public;0;28;;@Override public void configure() {     DataFormat bindy = new BindyKeyValuePairDataFormat(FixOrder.class).     from("direct:fix").unmarshal(bindy).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             FixOrder order = exchange.getIn().getBody(FixOrder.class).             Object body = exchange.getIn().getBody().             if (order.getProduct().equals("butter")) {                 order.setQuantity("2").                 body = order.             } else if (order.getProduct().equals("milk")) {                 order.setQuantity("4").                 body = Collections.singletonMap(order.getClass().getName(), order).             } else if (order.getProduct().equals("bread")) {                 order.setQuantity("6").                 body = Collections.singletonList(Collections.singletonMap(order.getClass().getName(), order)).             }             exchange.getIn().setBody(body).         }     }).marshal(bindy).to("mock:result"). }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public String getProduct() {     return product. }
false;public;0;3;;public String getQuantity() {     return quantity. }
false;public;1;3;;public void setQuantity(String quantity) {     this.quantity = quantity. }
