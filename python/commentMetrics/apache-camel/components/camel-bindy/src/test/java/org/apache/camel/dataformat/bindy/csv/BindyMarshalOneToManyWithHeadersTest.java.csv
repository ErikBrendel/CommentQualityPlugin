commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test @DirtiesContext public void testMarshallMessage() throws Exception {     expected = "orderNumber,customerName,sku,quantity,unitPrice\r\n" + "11111,Joe Blow,abc,1,3\r\n" + "11111,Joe Blow,cde,3,2\r\n".     result.expectedBodiesReceived(expected).     template.sendBody(generateModel()).     result.assertIsSatisfied(). }
false;public;0;21;;public Order generateModel() {     Order order = new Order().     order.setCustomerName("Joe Blow").     order.setOrderNumber(11111).     OrderItem oi1 = new OrderItem().     oi1.setSku("abc").     oi1.setQuantity(1).     oi1.setUnitPrice(3).     OrderItem oi2 = new OrderItem().     oi2.setSku("cde").     oi2.setQuantity(3).     oi2.setUnitPrice(2).     List<OrderItem> orderList = Arrays.asList(oi1, oi2).     order.setItems(orderList).     return order. }
false;public;0;12;;public void configure() {     BindyCsvDataFormat camelDataFormat = new BindyCsvDataFormat(Order.class).     camelDataFormat.setLocale("en").     // default should errors go to mock:error     errorHandler(deadLetterChannel(URI_MOCK_ERROR).redeliveryDelay(0)).     onException(Exception.class).maximumRedeliveries(0).handled(true).     from(URI_DIRECT_START).marshal(camelDataFormat).to(URI_MOCK_RESULT). }
