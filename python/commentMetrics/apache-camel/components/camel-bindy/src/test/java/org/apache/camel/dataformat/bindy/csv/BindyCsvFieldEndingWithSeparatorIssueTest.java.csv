commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testBindy() throws Exception {     CamelContext ctx = new DefaultCamelContext().     // new ReconciliationRoute()     ctx.addRoutes(createRoute()).     ctx.start().     String addressLine1 = "8506 SIX FORKS ROAD,".     MockEndpoint mock = ctx.getEndpoint("mock:result", MockEndpoint.class).     mock.expectedPropertyReceived("addressLine1", addressLine1).     String csvLine = "\"PROBLEM SOLVER\",\"" + addressLine1 + "\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\"".     ProducerTemplate template = ctx.createProducerTemplate().     template.sendBody("direct:fromCsv", csvLine.trim()).     mock.assertIsSatisfied(). // The algorithm of BindyCvsDataFormat.unquoteTokens(..) does not handle // separator at end of a field // addressLine1 results in the next field being appended -> '8506 SIX // FORKS ROAD,,SUITE 104' }
false;public;0;19;;@Test public void testBindyMoreSeparators() throws Exception {     CamelContext ctx = new DefaultCamelContext().     ctx.addRoutes(createRoute()).     ctx.start().     String addressLine1 = "8506 SIX FORKS ROAD, , ,,, ,".     MockEndpoint mock = ctx.getEndpoint("mock:result", MockEndpoint.class).     mock.expectedPropertyReceived("addressLine1", addressLine1).     String csvLine = "\"PROBLEM SOLVER\",\"" + addressLine1 + "\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\"".     ProducerTemplate template = ctx.createProducerTemplate().     template.sendBody("direct:fromCsv", csvLine.trim()).     mock.assertIsSatisfied(). }
false;public;0;22;;@Test @Ignore("This issue will be revisit when we have chance to rewrite bindy parser") public void testBindySeparatorsAround() throws Exception {     CamelContext ctx = new DefaultCamelContext().     // new ReconciliationRoute()     ctx.addRoutes(createRoute()).     ctx.start().     // TODO The separator in the beginning of the quoted field is still not handled.     // We may need to convert the separators in the quote into some kind of safe code     String addressLine1 = ",8506 SIX FORKS ROAD,".     MockEndpoint mock = ctx.getEndpoint("mock:result", MockEndpoint.class).     mock.expectedPropertyReceived("addressLine1", addressLine1).     String csvLine = "\"PROBLEM SOLVER\",\"" + addressLine1 + "\",\"SUITE 104\",\"RALEIGH\",\"NC\",\"27615\",\"US\"".     ProducerTemplate template = ctx.createProducerTemplate().     template.sendBody("direct:fromCsv", csvLine.trim()).     mock.assertIsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:fromCsv").unmarshal().bindy(BindyType.Csv, MyCsvRecord.class).setProperty("addressLine1", simple("${in.body.addressLine1}")).setProperty("addressLine2", simple("${in.body.addressLine2}")).log("${in.body}").to("mock:result"). }
false;private;0;11;;private RouteBuilder createRoute() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:fromCsv").unmarshal().bindy(BindyType.Csv, MyCsvRecord.class).setProperty("addressLine1", simple("${in.body.addressLine1}")).setProperty("addressLine2", simple("${in.body.addressLine2}")).log("${in.body}").to("mock:result").         }     }. }
