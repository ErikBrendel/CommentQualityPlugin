commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test @DirtiesContext public void testIntegerMessage() throws Exception {     record = "10000,25.10".     template.sendBody(record).     result.expectedMessageCount(1).     result.assertIsSatisfied().     Object data = result.getReceivedExchanges().get(0).getIn().getBody().     LOG.info(">>> Model generated : " + data.getClass().getName()). }
false;public;0;22;;@Test @DirtiesContext public void testIntegerTooBigError() throws Exception {     record = "1000000000000000000000000000000000000,25.10".     template.sendBody(record).     // We don't expect to have a message as an error will be raised     result.expectedMessageCount(0).     // Message has been delivered to the mock error     error.expectedMessageCount(1).     result.assertIsSatisfied().     error.assertIsSatisfied().     // and check that we have the caused exception stored     Exception cause = error.getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     TestSupport.assertIsInstanceOf(Exception.class, cause.getCause()).     assertEquals("Parsing error detected for field defined at the position: 1, line: 1", cause.getMessage()). }
false;public;0;10;;public void configure() {     // default should errors go to mock:error     errorHandler(deadLetterChannel(URI_MOCK_ERROR)).     onException(Exception.class).maximumRedeliveries(0).handled(true).     from(URI_DIRECT_START).unmarshal(orderBindyDataFormat).to(URI_MOCK_RESULT). }
