commented;modifiers;parameterAmount;loc;comment;code
false;public;0;45;;// ************************************************************************* // TESTS // ************************************************************************* @SuppressWarnings("unchecked") @Test public void testUnmarshallMessage() throws Exception {     StringBuffer buff = new StringBuffer().     buff.append(TEST_HEADER).append(TEST_RECORD).append(TEST_FOOTER).     unmarshallResult.expectedMessageCount(1).     template.sendBody(URI_DIRECT_UNMARSHALL, buff.toString()).     unmarshallResult.assertIsSatisfied().     // check the model     Exchange exchange = unmarshallResult.getReceivedExchanges().get(0).     Order order = (Order) exchange.getIn().getBody().     assertEquals(10, order.getOrderNr()).     // the field is not trimmed     assertEquals("  Pauline", order.getFirstName()).     assertEquals("M    ", order.getLastName()).     Map<String, Object> receivedHeaderMap = (Map<String, Object>) exchange.getIn().getHeader(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_HEADER).     Map<String, Object> receivedFooterMap = (Map<String, Object>) exchange.getIn().getHeader(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_FOOTER).     assertNotNull(receivedHeaderMap).     assertNotNull(receivedFooterMap).     OrderHeader receivedHeader = (OrderHeader) receivedHeaderMap.get(OrderHeader.class.getName()).     OrderFooter receivedFooter = (OrderFooter) receivedFooterMap.get(OrderFooter.class.getName()).     assertNotNull(receivedHeader).     assertNotNull(receivedFooter).     OrderHeader expectedHeader = new OrderHeader().     Calendar calendar = new GregorianCalendar().     calendar.set(2009, 7, 1, 0, 0, 0).     calendar.clear(Calendar.MILLISECOND).     expectedHeader.setRecordDate(calendar.getTime()).     assertEquals(receivedHeader.getRecordType(), expectedHeader.getRecordType()).     assertTrue(receivedHeader.getRecordDate().equals(expectedHeader.getRecordDate())). }
true;public;0;31;/**  * Verifies that header & footer provided as part of message body are marshalled successfully  */ ;/**  * Verifies that header & footer provided as part of message body are marshalled successfully  */ @Test public void testMarshallMessageWithDirectHeaderAndFooterInput() throws Exception {     Order order = new Order().     order.setOrderNr(10).     order.setOrderType("BUY").     order.setClientNr("A9").     order.setFirstName("Pauline").     order.setLastName("M").     order.setAmount(new BigDecimal("2500.45")).     order.setInstrumentCode("ISIN").     order.setInstrumentNumber("XD12345678").     order.setInstrumentType("Share").     order.setCurrency("USD").     Calendar calendar = new GregorianCalendar().     calendar.set(2009, 7, 1, 0, 0, 0).     order.setOrderDate(calendar.getTime()).     List<Map<String, Object>> input = new ArrayList<>().     Map<String, Object> bodyRow = new HashMap<>().     bodyRow.put(Order.class.getName(), order).     input.add(createHeaderRow()).     input.add(bodyRow).     input.add(createFooterRow()).     marshallResult.expectedMessageCount(1).     StringBuffer buff = new StringBuffer().     buff.append(TEST_HEADER).append(TEST_RECORD).append(TEST_FOOTER).     marshallResult.expectedBodiesReceived(Arrays.asList(new String[] { buff.toString() })).     template.sendBody(URI_DIRECT_MARSHALL, input).     marshallResult.assertIsSatisfied(). }
true;public;0;35;/**  * Verifies that header & footer provided via message headers are marshalled successfully  */ ;/**  * Verifies that header & footer provided via message headers are marshalled successfully  */ @Test public void testMarshallMessageWithIndirectHeaderAndFooterInput() throws Exception {     Order order = new Order().     order.setOrderNr(10).     order.setOrderType("BUY").     order.setClientNr("A9").     order.setFirstName("Pauline").     order.setLastName("M").     order.setAmount(new BigDecimal("2500.45")).     order.setInstrumentCode("ISIN").     order.setInstrumentNumber("XD12345678").     order.setInstrumentType("Share").     order.setCurrency("USD").     Calendar calendar = new GregorianCalendar().     calendar.set(2009, 7, 1, 0, 0, 0).     order.setOrderDate(calendar.getTime()).     List<Map<String, Object>> input = new ArrayList<>().     Map<String, Object> bodyRow = new HashMap<>().     bodyRow.put(Order.class.getName(), order).     input.add(bodyRow).     Map<String, Object> headers = new HashMap<>().     headers.put(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_HEADER, createHeaderRow()).     headers.put(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_FOOTER, createFooterRow()).     marshallResult.reset().     marshallResult.expectedMessageCount(1).     StringBuffer buff = new StringBuffer().     buff.append(TEST_HEADER).append(TEST_RECORD).append(TEST_FOOTER).     marshallResult.expectedBodiesReceived(Arrays.asList(new String[] { buff.toString() })).     template.sendBodyAndHeaders(URI_DIRECT_MARSHALL, input, headers).     marshallResult.assertIsSatisfied(). }
false;private;0;9;;private Map<String, Object> createHeaderRow() {     Map<String, Object> headerMap = new HashMap<>().     OrderHeader header = new OrderHeader().     Calendar calendar = new GregorianCalendar().     calendar.set(2009, 7, 1, 0, 0, 0).     header.setRecordDate(calendar.getTime()).     headerMap.put(OrderHeader.class.getName(), header).     return headerMap. }
false;private;0;7;;private Map<String, Object> createFooterRow() {     Map<String, Object> footerMap = new HashMap<>().     OrderFooter footer = new OrderFooter().     footer.setNumberOfRecordsInTheFile(1).     footerMap.put(OrderFooter.class.getName(), footer).     return footerMap. }
false;public;0;15;;@Override public void configure() throws Exception {     BindyDataFormat bindy = new BindyDataFormat().     bindy.setClassType(Order.class).     bindy.setLocale("en").     bindy.setType(BindyType.Fixed).     from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT).     from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed, Order.class).to(URI_MOCK_UNMARSHALL_RESULT). }
false;protected;0;23;;// ************************************************************************* // ROUTES // ************************************************************************* @Override protected RouteBuilder createRouteBuilder() throws Exception {     RouteBuilder routeBuilder = new RouteBuilder() {          @Override         public void configure() throws Exception {             BindyDataFormat bindy = new BindyDataFormat().             bindy.setClassType(Order.class).             bindy.setLocale("en").             bindy.setType(BindyType.Fixed).             from(URI_DIRECT_MARSHALL).marshal(bindy).to(URI_MOCK_MARSHALL_RESULT).             from(URI_DIRECT_UNMARSHALL).unmarshal().bindy(BindyType.Fixed, Order.class).to(URI_MOCK_UNMARSHALL_RESULT).         }     }.     return routeBuilder. }
