# id;timestamp;commentText;codeText;commentWords;codeWords
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1355719205;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1360226385;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }_            _            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1376549254;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }_            _            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1382001237;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1392400400;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1405374721;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1438938304;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1443174474;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1456383650;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1463827036;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1463827036;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1463943550;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1479916234;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1489149464;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1489149465;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith(quote)) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith(quote)) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress && startQuote && s.isEmpty()) {_                _                current.append(separator)__                answer.add(current.toString())__                current.setLength(0)__                continue__            }__            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,quote,s,s,substring,1,start,quote,true,if,s,ends,with,quote,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,s,is,empty,current,append,separator,answer,add,current,to,string,current,set,length,0,continue,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1491724487;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<String>()___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separator)__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,string,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1506410459;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<String>()___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separator)__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,string,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1513330638;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<String>()___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separator)__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,string,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1517474119;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<String>()___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separator)__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,string,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator, String quote);1517474119;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<String>()___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separator)__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,string,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result);1294219752;Unquote the tokens, by removing leading and trailing quote chars;private List<String> unquoteTokens(List<String> result) {_        List<String> answer = new ArrayList<String>(result.size())__        for (String s : result) {_            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__            }_            answer.add(s)__        }_        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars;private,list,string,unquote,tokens,list,string,result,list,string,answer,new,array,list,string,result,size,for,string,s,result,if,s,starts,with,s,starts,with,s,s,substring,1,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,answer,add,s,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result);1296495624;Unquote the tokens, by removing leading and trailing quote chars;private List<String> unquoteTokens(List<String> result) {_        List<String> answer = new ArrayList<String>(result.size())__        for (String s : result) {_            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__            }_            answer.add(s)__        }_        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars;private,list,string,unquote,tokens,list,string,result,list,string,answer,new,array,list,string,result,size,for,string,s,result,if,s,starts,with,s,starts,with,s,s,substring,1,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,answer,add,s,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result);1307685726;Unquote the tokens, by removing leading and trailing quote chars;private List<String> unquoteTokens(List<String> result) {_        List<String> answer = new ArrayList<String>(result.size())__        for (String s : result) {_            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__            }_            answer.add(s)__        }_        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars;private,list,string,unquote,tokens,list,string,result,list,string,answer,new,array,list,string,result,size,for,string,s,result,if,s,starts,with,s,starts,with,s,s,substring,1,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,answer,add,s,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result);1311838731;Unquote the tokens, by removing leading and trailing quote chars;private List<String> unquoteTokens(List<String> result) {_        List<String> answer = new ArrayList<String>(result.size())__        for (String s : result) {_            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__            }_            answer.add(s)__        }_        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars;private,list,string,unquote,tokens,list,string,result,list,string,answer,new,array,list,string,result,size,for,string,s,result,if,s,starts,with,s,starts,with,s,s,substring,1,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,answer,add,s,return,answer
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1236098343;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,package,name,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1236835446;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,package,name,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1236912265;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,package,name,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1245936806;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,package,name,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1246622223;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,package,name,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1246622798;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1247659740;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1247731460;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1247738177;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1248096157;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1252663206;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1252683066;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1252844150;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1255352752;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1255482326;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1258732346;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1258736086;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1260808207;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1276592595;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1277019577;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception;1286862857;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory(PackageScanClassResolver resolver) throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(resolver, packages)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,package,scan,class,resolver,resolver,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,resolver,packages,return,model,factory
BindyCsvDataFormat -> private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator);1382001237;Concatenate "the rest of the line" as the last record. Works similar as if quoted__@param result    input result set_@param maxpos    position of maximum record_@param separator csv separator char_@return List<String> with concatenated last record;private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator) {_        if (result.size() <= maxpos) {_            return result__        }__        final List<String> answer = new ArrayList<String>()__        final StringBuilder lastRecord = new StringBuilder()___        final Iterator<String> it = result.iterator()__        for (int counter = 0_ counter < maxpos - 1_ counter++) {_            answer.add(it.next())__        }__        while (it.hasNext()) {_            lastRecord.append(it.next())__            if (it.hasNext()) {_                lastRecord.append(separator)__            }_        }_        answer.add(lastRecord.toString())___        return answer__    };concatenate,the,rest,of,the,line,as,the,last,record,works,similar,as,if,quoted,param,result,input,result,set,param,maxpos,position,of,maximum,record,param,separator,csv,separator,char,return,list,string,with,concatenated,last,record;private,static,list,string,autospan,line,final,list,string,result,final,int,maxpos,final,string,separator,if,result,size,maxpos,return,result,final,list,string,answer,new,array,list,string,final,string,builder,last,record,new,string,builder,final,iterator,string,it,result,iterator,for,int,counter,0,counter,maxpos,1,counter,answer,add,it,next,while,it,has,next,last,record,append,it,next,if,it,has,next,last,record,append,separator,answer,add,last,record,to,string,return,answer
BindyCsvDataFormat -> private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator);1392400400;Concatenate "the rest of the line" as the last record. Works similar as if quoted__@param result    input result set_@param maxpos    position of maximum record_@param separator csv separator char_@return List<String> with concatenated last record;private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator) {_        if (result.size() <= maxpos) {_            return result__        }__        final List<String> answer = new ArrayList<String>()__        final StringBuilder lastRecord = new StringBuilder()___        final Iterator<String> it = result.iterator()__        for (int counter = 0_ counter < maxpos - 1_ counter++) {_            answer.add(it.next())__        }__        while (it.hasNext()) {_            lastRecord.append(it.next())__            if (it.hasNext()) {_                lastRecord.append(separator)__            }_        }_        answer.add(lastRecord.toString())___        return answer__    };concatenate,the,rest,of,the,line,as,the,last,record,works,similar,as,if,quoted,param,result,input,result,set,param,maxpos,position,of,maximum,record,param,separator,csv,separator,char,return,list,string,with,concatenated,last,record;private,static,list,string,autospan,line,final,list,string,result,final,int,maxpos,final,string,separator,if,result,size,maxpos,return,result,final,list,string,answer,new,array,list,string,final,string,builder,last,record,new,string,builder,final,iterator,string,it,result,iterator,for,int,counter,0,counter,maxpos,1,counter,answer,add,it,next,while,it,has,next,last,record,append,it,next,if,it,has,next,last,record,append,separator,answer,add,last,record,to,string,return,answer
BindyCsvDataFormat -> private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator);1405374721;Concatenate "the rest of the line" as the last record. Works similar as if quoted__@param result    input result set_@param maxpos    position of maximum record_@param separator csv separator char_@return List<String> with concatenated last record;private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator) {_        if (result.size() <= maxpos) {_            return result__        }__        final List<String> answer = new ArrayList<String>()__        final StringBuilder lastRecord = new StringBuilder()___        final Iterator<String> it = result.iterator()__        for (int counter = 0_ counter < maxpos - 1_ counter++) {_            answer.add(it.next())__        }__        while (it.hasNext()) {_            lastRecord.append(it.next())__            if (it.hasNext()) {_                lastRecord.append(separator)__            }_        }_        answer.add(lastRecord.toString())___        return answer__    };concatenate,the,rest,of,the,line,as,the,last,record,works,similar,as,if,quoted,param,result,input,result,set,param,maxpos,position,of,maximum,record,param,separator,csv,separator,char,return,list,string,with,concatenated,last,record;private,static,list,string,autospan,line,final,list,string,result,final,int,maxpos,final,string,separator,if,result,size,maxpos,return,result,final,list,string,answer,new,array,list,string,final,string,builder,last,record,new,string,builder,final,iterator,string,it,result,iterator,for,int,counter,0,counter,maxpos,1,counter,answer,add,it,next,while,it,has,next,last,record,append,it,next,if,it,has,next,last,record,append,separator,answer,add,last,record,to,string,return,answer
BindyCsvDataFormat -> private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator);1438938304;Concatenate "the rest of the line" as the last record. Works similar as if quoted__@param result    input result set_@param maxpos    position of maximum record_@param separator csv separator char_@return List<String> with concatenated last record;private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator) {_        if (result.size() <= maxpos) {_            return result__        }__        final List<String> answer = new ArrayList<String>()__        final StringBuilder lastRecord = new StringBuilder()___        final Iterator<String> it = result.iterator()__        for (int counter = 0_ counter < maxpos - 1_ counter++) {_            answer.add(it.next())__        }__        while (it.hasNext()) {_            lastRecord.append(it.next())__            if (it.hasNext()) {_                lastRecord.append(separator)__            }_        }_        answer.add(lastRecord.toString())___        return answer__    };concatenate,the,rest,of,the,line,as,the,last,record,works,similar,as,if,quoted,param,result,input,result,set,param,maxpos,position,of,maximum,record,param,separator,csv,separator,char,return,list,string,with,concatenated,last,record;private,static,list,string,autospan,line,final,list,string,result,final,int,maxpos,final,string,separator,if,result,size,maxpos,return,result,final,list,string,answer,new,array,list,string,final,string,builder,last,record,new,string,builder,final,iterator,string,it,result,iterator,for,int,counter,0,counter,maxpos,1,counter,answer,add,it,next,while,it,has,next,last,record,append,it,next,if,it,has,next,last,record,append,separator,answer,add,last,record,to,string,return,answer
BindyCsvDataFormat -> private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator);1443174474;Concatenate "the rest of the line" as the last record. Works similar as if quoted__@param result    input result set_@param maxpos    position of maximum record_@param separator csv separator char_@return List<String> with concatenated last record;private static List<String> autospanLine(final List<String> result, final int maxpos, final String separator) {_        if (result.size() <= maxpos) {_            return result__        }__        final List<String> answer = new ArrayList<String>()__        final StringBuilder lastRecord = new StringBuilder()___        final Iterator<String> it = result.iterator()__        for (int counter = 0_ counter < maxpos - 1_ counter++) {_            answer.add(it.next())__        }__        while (it.hasNext()) {_            lastRecord.append(it.next())__            if (it.hasNext()) {_                lastRecord.append(separator)__            }_        }_        answer.add(lastRecord.toString())___        return answer__    };concatenate,the,rest,of,the,line,as,the,last,record,works,similar,as,if,quoted,param,result,input,result,set,param,maxpos,position,of,maximum,record,param,separator,csv,separator,char,return,list,string,with,concatenated,last,record;private,static,list,string,autospan,line,final,list,string,result,final,int,maxpos,final,string,separator,if,result,size,maxpos,return,result,final,list,string,answer,new,array,list,string,final,string,builder,last,record,new,string,builder,final,iterator,string,it,result,iterator,for,int,counter,0,counter,maxpos,1,counter,answer,add,it,next,while,it,has,next,last,record,append,it,next,if,it,has,next,last,record,append,separator,answer,add,last,record,to,string,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1518764028;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<String>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,string,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1523968787;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1537943284;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1537943284;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1537943284;Unquote the tokens, by removing leading and trailing quote chars, as will_handling fixing broken tokens which may have been split by a separator_inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1538773412;Unquote the tokens, by removing leading and trailing quote chars, as will_handling fixing broken tokens which may have been split by a separator_inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1538777088;Unquote the tokens, by removing leading and trailing quote chars, as will_handling fixing broken tokens which may have been split by a separator_inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1540108163;Unquote the tokens, by removing leading and trailing quote chars, as will_handling fixing broken tokens which may have been split by a separator_inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1547241305;Unquote the tokens, by removing leading and trailing quote chars, as will_handling fixing broken tokens which may have been split by a separator_inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, List<String> separators, String quote);1548840203;Unquote the tokens, by removing leading and trailing quote chars, as will_handling fixing broken tokens which may have been split by a separator_inside a quote.;private List<String> unquoteTokens(List<String> result, List<String> separators, String quote) {_        _        _        _        _        _        _        StringBuilder current = new StringBuilder()__        boolean inProgress = false__        List<String> answer = new ArrayList<>()__        int idxSeparator = 0___        _        for (String s : result) {_            boolean canStart = false__            boolean canClose = false__            boolean cutStart = false__            boolean cutEnd = false__            if (s.startsWith(quote)) {_                _                if (s.length() == 1) {_                    s = ""__                    _                    _                    if (inProgress) {_                        canClose = true__                    } else {_                        canStart = true__                    }_                } else {_                    _                    cutStart = true__                    canStart = true__                }_            }__            _            if (s.endsWith(quote)) {_                cutEnd = true__                canClose = true__            }__            _            if (cutEnd || cutStart) {_                s = s.substring(cutStart ? 1 : 0, cutEnd ? s.length() - 1 : s.length())__            }__            _            if (inProgress) {_                current.append(separators.get(idxSeparator))__                current.append(s)___                if (canClose) {_                    answer.add(current.toString())__                    current.setLength(0)__                    inProgress = false__                }_            } else {_                if (canStart && !canClose) {_                    current.append(s)__                    inProgress = true__                } else {_                    _                    answer.add(s)__                }_            }_            idxSeparator++__        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,list,string,separators,string,quote,string,builder,current,new,string,builder,boolean,in,progress,false,list,string,answer,new,array,list,int,idx,separator,0,for,string,s,result,boolean,can,start,false,boolean,can,close,false,boolean,cut,start,false,boolean,cut,end,false,if,s,starts,with,quote,if,s,length,1,s,if,in,progress,can,close,true,else,can,start,true,else,cut,start,true,can,start,true,if,s,ends,with,quote,cut,end,true,can,close,true,if,cut,end,cut,start,s,s,substring,cut,start,1,0,cut,end,s,length,1,s,length,if,in,progress,current,append,separators,get,idx,separator,current,append,s,if,can,close,answer,add,current,to,string,current,set,length,0,in,progress,false,else,if,can,start,can,close,current,append,s,in,progress,true,else,answer,add,s,idx,separator,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1489149464;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_    	boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if(inputStream == null || inputStream.available() == 0)_        	isStreamEmpty = true__        _        if(isStreamEmpty == true && allowEmptyStream == true)_        	canReturnEmptyListOfModels = true__        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,true,allow,empty,stream,true,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1489149465;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1491724487;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1506410459;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1513330638;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1517474119;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1517474119;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1518764028;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1523968787;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1537943284;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1537943284;check emptyStream and if CVSRecord is allow to process emptyStreams_avoid IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false__        _        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }_        _        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }_        _        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1537943284;check emptyStream and if CVSRecord is allow to process emptyStreams avoid_IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false___        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }__        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }__        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1538773412;check emptyStream and if CVSRecord is allow to process emptyStreams avoid_IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false___        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }__        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }__        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1538777088;check emptyStream and if CVSRecord is allow to process emptyStreams avoid_IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false___        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }__        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }__        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1540108163;check emptyStream and if CVSRecord is allow to process emptyStreams avoid_IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false___        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }__        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }__        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1547241305;check emptyStream and if CVSRecord is allow to process emptyStreams avoid_IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false___        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }__        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }__        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException;1548840203;check emptyStream and if CVSRecord is allow to process emptyStreams avoid_IllegalArgumentException and return empty list when unmarshalling;private boolean checkEmptyStream(BindyCsvFactory factory, InputStream inputStream) throws IOException {_        boolean allowEmptyStream = factory.isAllowEmptyStream()__        boolean isStreamEmpty = false__        boolean canReturnEmptyListOfModels = false___        if (inputStream == null || inputStream.available() == 0) {_            isStreamEmpty = true__        }__        if (isStreamEmpty && allowEmptyStream) {_            canReturnEmptyListOfModels = true__        }__        return canReturnEmptyListOfModels__    };check,empty,stream,and,if,cvsrecord,is,allow,to,process,empty,streams,avoid,illegal,argument,exception,and,return,empty,list,when,unmarshalling;private,boolean,check,empty,stream,bindy,csv,factory,factory,input,stream,input,stream,throws,ioexception,boolean,allow,empty,stream,factory,is,allow,empty,stream,boolean,is,stream,empty,false,boolean,can,return,empty,list,of,models,false,if,input,stream,null,input,stream,available,0,is,stream,empty,true,if,is,stream,empty,allow,empty,stream,can,return,empty,list,of,models,true,return,can,return,empty,list,of,models
BindyCsvDataFormat -> public BindyCsvFactory getFactory() throws Exception;1233214146;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory() throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(this.packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,this,package,name,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory() throws Exception;1234034173;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory() throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(this.packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,this,package,name,return,model,factory
BindyCsvDataFormat -> public BindyCsvFactory getFactory() throws Exception;1235652242;Method used to create the singleton of the BindyCsvFactory;public BindyCsvFactory getFactory() throws Exception {_        if (modelFactory == null) {_            modelFactory = new BindyCsvFactory(this.packageName)__        }_        return modelFactory__    };method,used,to,create,the,singleton,of,the,bindy,csv,factory;public,bindy,csv,factory,get,factory,throws,exception,if,model,factory,null,model,factory,new,bindy,csv,factory,this,package,name,return,model,factory
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator);1321106594;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,s,starts,with,s,s,substring,1,start,quote,true,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator);1326499990;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,s,starts,with,s,s,substring,1,start,quote,true,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator);1328627381;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,s,starts,with,s,s,substring,1,start,quote,true,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator);1329076026;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,s,starts,with,s,s,substring,1,start,quote,true,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator);1335090271;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,s,starts,with,s,s,substring,1,start,quote,true,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator);1335788887;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,s,starts,with,s,s,substring,1,start,quote,true,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
BindyCsvDataFormat -> private List<String> unquoteTokens(List<String> result, String separator);1338733510;Unquote the tokens, by removing leading and trailing quote chars,_as will handling fixing broken tokens which may have been split_by a separator inside a quote.;private List<String> unquoteTokens(List<String> result, String separator) {_        _        _        _        _        _        StringBuilder current = new StringBuilder()___        List<String> answer = new ArrayList<String>()__        for (String s : result) {_            boolean startQuote = false__            boolean endQuote = false__            if (s.startsWith("\"") || s.startsWith("'")) {_                s = s.substring(1)__                startQuote = true__            }_            if (s.endsWith("\"") || s.endsWith("'")) {_                s = s.substring(0, s.length() - 1)__                endQuote = true__            }__            _            boolean currentInProgress = current.length() > 0___            _            if (currentInProgress || startQuote) {_                _                if (currentInProgress) {_                    _                    _                    current.append(separator)__                }_                current.append(s)__            }__            _            currentInProgress = current.length() > 0___            if (endQuote) {_                _                answer.add(current.toString())__                current.setLength(0)__            } else if (!currentInProgress) {_                _                answer.add(s)__            }_        }__        _        if (current.length() > 0) {_            answer.add(current.toString())__            current.setLength(0)__        }__        return answer__    };unquote,the,tokens,by,removing,leading,and,trailing,quote,chars,as,will,handling,fixing,broken,tokens,which,may,have,been,split,by,a,separator,inside,a,quote;private,list,string,unquote,tokens,list,string,result,string,separator,string,builder,current,new,string,builder,list,string,answer,new,array,list,string,for,string,s,result,boolean,start,quote,false,boolean,end,quote,false,if,s,starts,with,s,starts,with,s,s,substring,1,start,quote,true,if,s,ends,with,s,ends,with,s,s,substring,0,s,length,1,end,quote,true,boolean,current,in,progress,current,length,0,if,current,in,progress,start,quote,if,current,in,progress,current,append,separator,current,append,s,current,in,progress,current,length,0,if,end,quote,answer,add,current,to,string,current,set,length,0,else,if,current,in,progress,answer,add,s,if,current,length,0,answer,add,current,to,string,current,set,length,0,return,answer
