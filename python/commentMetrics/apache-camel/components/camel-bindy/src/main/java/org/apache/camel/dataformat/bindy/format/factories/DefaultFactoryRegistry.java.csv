commented;modifiers;parameterAmount;loc;comment;code
true;public;1;24;/**  * Registers a {@link FormatFactoryInterface}.  * Two types of factories exist:  * <ul>  * <li>Factories that support one or more classes</li>  * <li>Factories that support no specific class (e.g. {@link EnumFormatFactory})</li>  * </ul>  * @param formatFactories  * @return the DefaultFactoryRegistry instance  */ ;/**  * Registers a {@link FormatFactoryInterface}.  * Two types of factories exist:  * <ul>  * <li>Factories that support one or more classes</li>  * <li>Factories that support no specific class (e.g. {@link EnumFormatFactory})</li>  * </ul>  * @param formatFactories  * @return the DefaultFactoryRegistry instance  */ @Override public FactoryRegistry register(FormatFactoryInterface... formatFactories) {     for (FormatFactoryInterface formatFactory : formatFactories) {         if (formatFactory.supportedClasses().isEmpty()) {             for (FormatFactoryInterface factory : otherFactories) {                 if (factory.getClass() == formatFactory.getClass()) {                     return this.                 }             }             otherFactories.add(formatFactory).         } else {             for (Class<?> clazz : formatFactory.supportedClasses()) {                 List<FormatFactoryInterface> factories = getByClass(clazz).                 for (FormatFactoryInterface factory : factories) {                     if (factory.getClass() == formatFactory.getClass()) {                         return this.                     }                 }                 factories.add(formatFactory).             }         }     }     return this. }
false;public;1;7;;@Override public FactoryRegistry unregister(Class<? extends FormatFactoryInterface> clazz) {     for (Map.Entry<Class<?>, List<FormatFactoryInterface>> entry : classBasedFactories.entrySet()) {         entry.getValue().removeIf(factory -> factory.getClass() == clazz).     }     return this. }
false;public;1;14;;@Override public FormatFactoryInterface findForFormattingOptions(FormattingOptions formattingOptions) {     for (FormatFactoryInterface formatFactory : getByClass(formattingOptions.getClazz())) {         if (formatFactory.canBuild(formattingOptions)) {             return formatFactory.         }     }     for (FormatFactoryInterface formatFactory : otherFactories) {         if (formatFactory.canBuild(formattingOptions)) {             return formatFactory.         }     }     throw new IllegalArgumentException("Can not findForFormattingOptions a suitable formatter for the type: " + formattingOptions.getClazz().getCanonicalName()). }
false;private;1;8;;private List<FormatFactoryInterface> getByClass(Class<?> clazz) {     List<FormatFactoryInterface> result = classBasedFactories.get(clazz).     if (result == null) {         result = new ArrayList<>().         classBasedFactories.put(clazz, result).     }     return result. }
