commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "bindy-kvp". }
false;public;3;23;;@SuppressWarnings("unchecked") public void marshal(Exchange exchange, Object body, OutputStream outputStream) throws Exception {     final BindyAbstractFactory factory = getFactory().     final byte[] crlf = ConverterUtils.getByteReturn(factory.getCarriageReturn()).     final TypeConverter converter = exchange.getContext().getTypeConverter().     // a bit here and create one if needed     for (Object model : ObjectHelper.createIterable(body)) {         Map<String, Object> row.         if (model instanceof Map) {             row = (Map<String, Object>) model.         } else {             row = Collections.singletonMap(model.getClass().getName(), model).         }         String result = factory.unbind(getCamelContext(), row).         outputStream.write(converter.convertTo(byte[].class, exchange, result)).         outputStream.write(crlf).     } }
false;public;2;38;;public Object unmarshal(Exchange exchange, InputStream inputStream) throws Exception {     BindyKeyValuePairFactory factory = (BindyKeyValuePairFactory) getFactory().     // List of Pojos     List<Map<String, Object>> models = new ArrayList<>().     // Map to hold the model @OneToMany classes while binding     Map<String, List<Object>> lists = new HashMap<>().     InputStreamReader in = new InputStreamReader(inputStream, ExchangeHelper.getCharsetName(exchange)).     // Use a Stream to stream a file across     try (Stream<String> lines = new BufferedReader(in).lines()) {         // Retrieve the pair separator defined to split the record         org.apache.camel.util.ObjectHelper.notNull(factory.getPairSeparator(), "The pair separator property of the annotation @Message").         String separator = factory.getPairSeparator().         AtomicInteger count = new AtomicInteger(0).         try {             lines.forEachOrdered(line -> {                 consumeFile(factory, models, lists, separator, count, line).             }).         } catch (WrappedException e) {             throw e.getWrappedException().         }         // If this is the case (correspond to an empty stream, ...)         if (models.size() == 0) {             throw new java.lang.IllegalArgumentException("No records have been defined in the CSV").         } else {             return extractUnmarshalResult(models).         }     } finally {         IOHelper.close(in, "in", LOG).     } }
false;private;6;46;;private void consumeFile(BindyKeyValuePairFactory factory, List<Map<String, Object>> models, Map<String, List<Object>> lists, String separator, AtomicInteger count, String line) {     try {         // Trim the line coming in to remove any trailing whitespace         String trimmedLine = line.trim().         if (!org.apache.camel.util.ObjectHelper.isEmpty(trimmedLine)) {             // Increment counter             count.incrementAndGet().             // Pojos of the model             Map<String, Object> model.             // Create POJO             model = factory.factory().             // Split the message according to the pair separator defined in             // annotated class @Message             // Explicitly replace any occurrence of the Unicode new line character.             // Simply reading the line in with the File stream doesn't get us around the fact             // that this character is still present in the data set, and we don't wish for it             // to be present when storing the actual data in the model.             List<String> result = Arrays.stream(line.split(separator)).map(x -> x.replace("\u0085", "")).collect(Collectors.toList()).             if (result.size() == 0 || result.isEmpty()) {                 throw new IllegalArgumentException("No records have been defined in the KVP").             }             if (result.size() > 0) {                 // Bind data from message with model classes                 // Counter is used to detect line where error occurs                 factory.bind(getCamelContext(), result, model, count.get(), lists).                 // Link objects together                 factory.link(model).                 // Add objects graph to the list                 models.add(model).                 LOG.debug("Graph of objects created: {}", model).             }         }     } catch (Exception e) {         throw new WrappedException(e).     } }
false;protected;1;5;;protected BindyAbstractFactory createModelFactory(FormatFactory formatFactory) throws Exception {     BindyKeyValuePairFactory bindyKeyValuePairFactory = new BindyKeyValuePairFactory(getClassType()).     bindyKeyValuePairFactory.setFormatFactory(formatFactory).     return bindyKeyValuePairFactory. }
