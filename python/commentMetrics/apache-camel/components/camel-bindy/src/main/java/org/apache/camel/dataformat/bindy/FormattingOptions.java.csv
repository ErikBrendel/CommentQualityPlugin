commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getPattern() {     return pattern. }
false;public;0;3;;public Locale getLocale() {     return locale. }
false;public;0;3;;public String getTimezone() {     return timezone. }
false;public;0;3;;public int getPrecision() {     return precision. }
false;public;0;3;;public String getRounding() {     return rounding. }
false;public;0;3;;public boolean isImpliedDecimalSeparator() {     return impliedDecimalSeparator. }
false;public;0;3;;public String getDecimalSeparator() {     return decimalSeparator. }
false;public;0;3;;public String getGroupingSeparator() {     return groupingSeparator. }
false;public;1;4;;public FormattingOptions withPattern(String pattern) {     this.pattern = pattern.     return this. }
false;public;1;4;;public FormattingOptions withLocale(String locale) {     this.locale = getLocale(locale).     return this. }
false;public;1;4;;public FormattingOptions withTimezone(String timezone) {     this.timezone = timezone.     return this. }
false;public;1;4;;public FormattingOptions withPrecision(int precision) {     this.precision = precision.     return this. }
false;public;1;4;;public FormattingOptions withRounding(String rounding) {     this.rounding = rounding.     return this. }
false;public;1;4;;public FormattingOptions withImpliedDecimalSeparator(boolean impliedDecimalSeparator) {     this.impliedDecimalSeparator = impliedDecimalSeparator.     return this. }
false;public;1;4;;public FormattingOptions withDecimalSeparator(String decimalSeparator) {     this.decimalSeparator = decimalSeparator.     return this. }
false;public;1;4;;public FormattingOptions withGroupingSeparator(String groupingSeparator) {     this.groupingSeparator = groupingSeparator.     return this. }
false;public;1;4;;public FormattingOptions forClazz(Class<?> clazz) {     this.clazz = clazz.     return this. }
false;public;0;3;;public Class<?> getClazz() {     return clazz. }
false;private;1;14;;private Locale getLocale(String locale) {     if ("default".equals(locale)) {         return Locale.getDefault().     }     Locale answer = null.     if (ObjectHelper.isNotEmpty(locale)) {         String[] result = locale.split("-").         if (result.length <= 2) {             answer = result.length == 1 ? new Locale(result[0]) : new Locale(result[0], result[1]).         }     }     return answer. }
false;public;1;4;;public FormattingOptions withBindyConverter(BindyConverter bindyConverter) {     this.bindyConverter = bindyConverter.     return this. }
false;public;0;3;;public BindyConverter getBindyConverter() {     return bindyConverter. }
