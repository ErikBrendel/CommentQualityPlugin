commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public Format<?> build(FormattingOptions formattingOptions) {     return new DatePatternFormat(formattingOptions.getPattern(), formattingOptions.getTimezone(), formattingOptions.getLocale()). }
false;public;1;4;;public String format(Date object) throws Exception {     ObjectHelper.notNull(this.pattern, "pattern").     return this.getDateFormat().format(object). }
false;public;1;25;;public Date parse(String string) throws Exception {     Date date.     DateFormat df = this.getDateFormat().     ObjectHelper.notNull(this.pattern, "pattern").     if (string.length() <= this.pattern.length()) {         // Force the parser to be strict in the syntax of the date to be         // converted         df.setLenient(false).         date = df.parse(string).         return date.     } else {         throw new FormatException("Date provided does not fit the pattern defined").     } }
false;protected;0;12;;protected java.text.DateFormat getDateFormat() {     SimpleDateFormat result.     if (locale != null) {         result = new SimpleDateFormat(pattern, locale).     } else {         result = new SimpleDateFormat(pattern).     }     if (timezone != null) {         result.setTimeZone(timezone).     }     return result. }
false;public;0;3;;public String getPattern() {     return pattern. }
true;public;1;3;/**  * Sets the pattern  *  * @param pattern the pattern  */ ;/**  * Sets the pattern  *  * @param pattern the pattern  */ public void setPattern(String pattern) {     this.pattern = pattern. }
