# id;timestamp;commentText;codeText;commentWords;codeWords
BindyFixedLengthFactory -> public boolean isFooter();1360259982;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1360932033;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1367311394;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1372322150;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1373129971;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1373486788;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1376549254;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1438938304;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1438938346;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1438938347;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1438938347;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1458660774;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1463827036;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1463827036;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1467144039;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1495624996;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1504016748;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1506410459;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1507814374;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1510148302;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1510148302;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1523968787;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1536517284;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1536687142;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1537465853;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> public boolean isFooter();1540108163;Flag indicating whether this factory is for a footer;public boolean isFooter() {_        return isFooter__    };flag,indicating,whether,this,factory,is,for,a,footer;public,boolean,is,footer,return,is,footer
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1276787991;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__            for (Class<?> cl : models) {__                _            	FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___                if (record != null) {_                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Fixed length record : " + record.toString())__                    }__                    _                    crlf = record.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the CSV : " + crlf)__                    }__                    _                    hasHeader = record.hasHeader()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Has Header :  " + hasHeader)__                    }_                    _                    _                    hasFooter = record.hasFooter()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Has Footer :  " + hasFooter)__                    }_                    _                    _                    paddingChar = record.paddingChar()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Padding char :  " + paddingChar)__                    }                    _                    _                    _                    recordLength = record.length()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Length of the record :  " + recordLength)__                    } _                    __                }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1276858355;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__            for (Class<?> cl : models) {__                _            	FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___                if (record != null) {_                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Fixed length record : " + record.toString())__                    }__                    _                    crlf = record.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the CSV : " + crlf)__                    }__                    _                    hasHeader = record.hasHeader()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Has Header :  " + hasHeader)__                    }_                    _                    _                    hasFooter = record.hasFooter()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Has Footer :  " + hasFooter)__                    }_                    _                    _                    paddingChar = record.paddingChar()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Padding char :  " + paddingChar)__                    }                    _                    _                    _                    recordLength = record.length()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Length of the record :  " + recordLength)__                    } _                    __                }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1277019577;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1277126591;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1277340776;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1290574380;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1293121457;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1295546121;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }_                _                _                trimRecordOnUnmarshal = record.trimRecordOnUnmarshal()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Trim record :  " + trimRecordOnUnmarshal)__                }_            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,trim,record,on,unmarshal,record,trim,record,on,unmarshal,if,log,is,debug,enabled,log,debug,trim,record,trim,record,on,unmarshal
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1295553001;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }_                _                _                trimRecordOnUnmarshal = record.trim()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Trim record :  " + trimRecordOnUnmarshal)__                }_            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,trim,record,on,unmarshal,record,trim,if,log,is,debug,enabled,log,debug,trim,record,trim,record,on,unmarshal
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1295603844;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }_            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1295605189;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }_            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1296495624;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }_            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1297377495;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }_            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1304355123;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Fixed length record : " + record.toString())__                }__                _                crlf = record.crlf()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Carriage return defined for the CSV : " + crlf)__                }__                _                hasHeader = record.hasHeader()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Header :  " + hasHeader)__                }__                _                hasFooter = record.hasFooter()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Has Footer :  " + hasFooter)__                }__                _                paddingChar = record.paddingChar()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Padding char :  " + paddingChar)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }__                _                recordLength = record.length()__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Length of the record :  " + recordLength)__                }_            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,if,log,is,debug,enabled,log,debug,fixed,length,record,record,to,string,crlf,record,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,if,log,is,debug,enabled,log,debug,has,header,has,header,has,footer,record,has,footer,if,log,is,debug,enabled,log,debug,has,footer,has,footer,padding,char,record,padding,char,if,log,is,debug,enabled,log,debug,padding,char,padding,char,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length,record,length,record,length,if,log,is,debug,enabled,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1307685726;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record : {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV : {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header :  {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer :  {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char :  {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record : {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record : {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1311784042;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record : {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV : {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header :  {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer :  {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char :  {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record : {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record : {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1311838731;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1319272485;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1326392736;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1335788887;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1355739468;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1357140814;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)__            }_        }_    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1360259982;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                _                _                isHeader = record.isHeader()__                _                _                isFooter = record.isFooter()___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,is,header,record,is,header,is,footer,record,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1360932033;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                _                _                isHeader = record.isHeader()__                _                _                isFooter = record.isFooter()___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)_    _            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,is,header,record,is,header,is,footer,record,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1367311394;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                _                _                isHeader = record.isHeader()__                _                _                isFooter = record.isFooter()___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)_    _            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,is,header,record,is,header,is,footer,record,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,record,length,record,length,log,debug,length,of,the,record,record,length,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1372322150;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)__                _                _                isHeader = record.isHeader()__                LOG.debug("Is Header: {}", isHeader)__                _                _                isFooter = record.isFooter()__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,record,is,header,log,debug,is,header,is,header,is,footer,record,is,footer,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1373129971;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)__                _                _                isHeader = record.isHeader()__                LOG.debug("Is Header: {}", isHeader)__                _                _                isFooter = record.isFooter()__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,record,is,header,log,debug,is,header,is,header,is,footer,record,is,footer,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1373486788;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)__                _                _                isHeader = record.isHeader()__                LOG.debug("Is Header: {}", isHeader)__                _                _                isFooter = record.isFooter()__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,record,is,header,log,debug,is,header,is,header,is,footer,record,is,footer,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1376549254;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)__                _                _                isHeader = record.isHeader()__                LOG.debug("Is Header: {}", isHeader)__                _                _                isFooter = record.isFooter()__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,record,is,header,log,debug,is,header,is,header,is,footer,record,is,footer,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1438938304;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        Class<?> cl = type()___        _        FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___        if (record != null) {_            LOG.debug("Fixed length record: {}", record)___            _            crlf = record.crlf()__            LOG.debug("Carriage return defined for the CSV: {}", crlf)___            _            hasHeader = record.hasHeader()__            LOG.debug("Has Header: {}", hasHeader)___            _            skipHeader = record.skipHeader()__            LOG.debug("Skip Header: {}", skipHeader)___            _            hasFooter = record.hasFooter()__            LOG.debug("Has Footer: {}", hasFooter)___            _            skipFooter = record.skipFooter()__            LOG.debug("Skip Footer: {}", skipFooter)___            _            isHeader = record.isHeader()__            LOG.debug("Is Header: {}", isHeader)___            _            isFooter = record.isFooter()__            LOG.debug("Is Footer: {}", isFooter)___            _            paddingChar = record.paddingChar()__            LOG.debug("Padding char: {}", paddingChar)___            _            recordLength = record.length()__            LOG.debug("Length of the record: {}", recordLength)___            _            ignoreTrailingChars = record.ignoreTrailingChars()__            LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,class,cl,type,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,record,is,header,log,debug,is,header,is,header,is,footer,record,is,footer,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1438938346;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                hasHeader = record.hasHeader()__                LOG.debug("Has Header: {}", hasHeader)__                _                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                hasFooter = record.hasFooter()__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)__                _                _                isHeader = record.isHeader()__                LOG.debug("Is Header: {}", isHeader)__                _                _                isFooter = record.isFooter()__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,has,header,record,has,header,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,has,footer,record,has,footer,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,record,is,header,log,debug,is,header,is,header,is,footer,record,is,footer,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1438938347;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)_                _                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)__                                _                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)_                _                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)__                _                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)__                _                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1438938347;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)_                _                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)__                                _                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)_                _                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)__                _                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)__                _                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)__                _                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }_        _        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }_        _        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }_        _        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }_        _    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1458660774;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1463827036;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1463827036;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1467144039;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1495624996;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1504016748;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1506410459;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1507814374;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1510148302;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)__                _                eol = record.eol()__                LOG.debug("EOL(end-of-line) defined for the CSV: {}", crlf)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,eol,record,eol,log,debug,eol,end,of,line,defined,for,the,csv,crlf,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1510148302;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)__                _                eol = record.eol()__                LOG.debug("EOL(end-of-line) defined for the CSV: {}", eol)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,eol,record,eol,log,debug,eol,end,of,line,defined,for,the,csv,eol,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1523968787;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)__                _                eol = record.eol()__                LOG.debug("EOL(end-of-line) defined for the CSV: {}", eol)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,eol,record,eol,log,debug,eol,end,of,line,defined,for,the,csv,eol,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1536517284;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)__                _                eol = record.eol()__                LOG.debug("EOL(end-of-line) defined for the CSV: {}", eol)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,eol,record,eol,log,debug,eol,end,of,line,defined,for,the,csv,eol,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1536687142;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)__                _                eol = record.eol()__                LOG.debug("EOL(end-of-line) defined for the CSV: {}", eol)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,eol,record,eol,log,debug,eol,end,of,line,defined,for,the,csv,eol,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1537465853;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)__                _                eol = record.eol()__                LOG.debug("EOL(end-of-line) defined for the CSV: {}", eol)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,eol,record,eol,log,debug,eol,end,of,line,defined,for,the,csv,eol,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> private void initFixedLengthRecordParameters();1540108163;Get parameters defined in @FixedLengthRecord annotation;private void initFixedLengthRecordParameters() {__        for (Class<?> cl : models) {__            _            FixedLengthRecord record = cl.getAnnotation(FixedLengthRecord.class)___            if (record != null) {_                LOG.debug("Fixed length record: {}", record)___                _                crlf = record.crlf()__                LOG.debug("Carriage return defined for the CSV: {}", crlf)__                _                eol = record.eol()__                LOG.debug("EOL(end-of-line) defined for the CSV: {}", eol)___                _                header =  record.header()__                LOG.debug("Header: {}", header)__                hasHeader = header != void.class__                LOG.debug("Has Header: {}", hasHeader)___                _                skipHeader = record.skipHeader()__                LOG.debug("Skip Header: {}", skipHeader)___                _                footer =  record.footer()__                LOG.debug("Footer: {}", footer)__                hasFooter = record.footer() != void.class__                LOG.debug("Has Footer: {}", hasFooter)___                _                skipFooter = record.skipFooter()__                LOG.debug("Skip Footer: {}", skipFooter)___                _                isHeader = hasHeader ? cl.equals(header) : false__                LOG.debug("Is Header: {}", isHeader)___                _                isFooter = hasFooter ? cl.equals(footer) : false__                LOG.debug("Is Footer: {}", isFooter)___                _                paddingChar = record.paddingChar()__                LOG.debug("Padding char: {}", paddingChar)___                _                recordLength = record.length()__                LOG.debug("Length of the record: {}", recordLength)___                _                ignoreTrailingChars = record.ignoreTrailingChars()__                LOG.debug("Ignore trailing chars: {}", ignoreTrailingChars)___                ignoreMissingChars = record.ignoreMissingChars()__                LOG.debug("Enable ignore missing chars: {}", ignoreMissingChars)__            }_        }__        if (hasHeader && isHeader) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'")__        }__        if (hasFooter && isFooter) {_            throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'")__        }__        if ((isHeader || isFooter) && (skipHeader || skipFooter)) {_            throw new java.lang.IllegalArgumentException(_                    "skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'")__        }__    };get,parameters,defined,in,fixed,length,record,annotation;private,void,init,fixed,length,record,parameters,for,class,cl,models,fixed,length,record,record,cl,get,annotation,fixed,length,record,class,if,record,null,log,debug,fixed,length,record,record,crlf,record,crlf,log,debug,carriage,return,defined,for,the,csv,crlf,eol,record,eol,log,debug,eol,end,of,line,defined,for,the,csv,eol,header,record,header,log,debug,header,header,has,header,header,void,class,log,debug,has,header,has,header,skip,header,record,skip,header,log,debug,skip,header,skip,header,footer,record,footer,log,debug,footer,footer,has,footer,record,footer,void,class,log,debug,has,footer,has,footer,skip,footer,record,skip,footer,log,debug,skip,footer,skip,footer,is,header,has,header,cl,equals,header,false,log,debug,is,header,is,header,is,footer,has,footer,cl,equals,footer,false,log,debug,is,footer,is,footer,padding,char,record,padding,char,log,debug,padding,char,padding,char,record,length,record,length,log,debug,length,of,the,record,record,length,ignore,trailing,chars,record,ignore,trailing,chars,log,debug,ignore,trailing,chars,ignore,trailing,chars,ignore,missing,chars,record,ignore,missing,chars,log,debug,enable,ignore,missing,chars,ignore,missing,chars,if,has,header,is,header,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,header,true,and,has,header,true,if,has,footer,is,footer,throw,new,java,lang,illegal,argument,exception,record,can,not,be,configured,with,both,is,footer,true,and,has,footer,true,if,is,header,is,footer,skip,header,skip,footer,throw,new,java,lang,illegal,argument,exception,skip,header,and,or,skip,footer,can,not,be,configured,on,a,record,where,is,header,true,or,is,footer,true
BindyFixedLengthFactory -> public Class<?> footer();1438938347;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1438938347;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1458660774;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1463827036;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1463827036;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1467144039;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1495624996;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1504016748;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1506410459;@return;public Class<?> footer() {_        return footer__    };return;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1507814374;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1510148302;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1510148302;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1523968787;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1536517284;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1536687142;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1537465853;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public Class<?> footer();1540108163;Gets the type of the footer record.__@return The type of the footer record if any, otherwise_<code>void.class</code>.;public Class<?> footer() {_        return footer__    };gets,the,type,of,the,footer,record,return,the,type,of,the,footer,record,if,any,otherwise,code,void,class,code;public,class,footer,return,footer
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1276787991;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields__@throws Exception;public void initFixedLengthModel() throws Exception {__        _        initAnnotedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,throws,exception;public,void,init,fixed,length,model,throws,exception,init,annoted,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1276858355;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields__@throws Exception;public void initFixedLengthModel() throws Exception {__        _        initAnnotedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,throws,exception;public,void,init,fixed,length,model,throws,exception,init,annoted,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1277019577;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields__@throws Exception;public void initFixedLengthModel() throws Exception {__        _        initAnnotedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,throws,exception;public,void,init,fixed,length,model,throws,exception,init,annoted,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1277126591;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields__@throws Exception;public void initFixedLengthModel() throws Exception {__        _        initAnnotedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,throws,exception;public,void,init,fixed,length,model,throws,exception,init,annoted,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1277340776;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields__@throws Exception;public void initFixedLengthModel() throws Exception {__        _        initAnnotedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,throws,exception;public,void,init,fixed,length,model,throws,exception,init,annoted,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1290574380;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields__@throws Exception;public void initFixedLengthModel() throws Exception {__        _        initAnnotedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,throws,exception;public,void,init,fixed,length,model,throws,exception,init,annoted,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1293121457;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1295546121;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1295553001;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1295603844;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1295605189;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1296495624;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1297377495;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1304355123;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1307685726;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1311784042;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1311838731;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1319272485;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1326392736;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1335788887;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1355739468;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1357140814;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1360259982;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1360932033;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1367311394;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1372322150;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1373129971;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1373486788;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1376549254;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1438938304;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1438938346;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1438938347;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__        _        if(header != void.class) {_            models.add(header)__            modelClassNames.add(header.getName())__        }_        _        if(footer != void.class) {_            models.add(footer)__            modelClassNames.add(footer.getName())__        }_    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters,if,header,void,class,models,add,header,model,class,names,add,header,get,name,if,footer,void,class,models,add,footer,model,class,names,add,footer,get,name
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1438938347;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {      _        _        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1458660774;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1463827036;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1463827036;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1467144039;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1495624996;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1504016748;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1506410459;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1507814374;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1510148302;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1510148302;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1523968787;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1536517284;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1536687142;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1537465853;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public void initFixedLengthModel() throws Exception;1540108163;method uses to initialize the model representing the classes who will_bind the data. This process will scan for classes according to the_package name provided, check the annotated classes and fields;public void initFixedLengthModel() throws Exception {__        _        initAnnotatedFields()___        _        _        initFixedLengthRecordParameters()__    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields;public,void,init,fixed,length,model,throws,exception,init,annotated,fields,init,fixed,length,record,parameters
BindyFixedLengthFactory -> public boolean hasFooter();1276787991;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1276858355;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1277019577;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1277126591;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1277340776;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1290574380;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1293121457;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1295546121;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1295553001;Flag indicating if we have a footer__@return boolean;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer,return,boolean;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1295603844;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1295605189;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1296495624;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1297377495;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1304355123;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1307685726;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1311784042;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1311838731;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1319272485;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1326392736;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1335788887;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1355739468;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1357140814;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1360259982;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1360932033;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1367311394;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1372322150;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1373129971;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1373486788;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1376549254;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1438938304;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1438938346;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1438938347;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1438938347;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1458660774;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1463827036;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1463827036;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1467144039;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1495624996;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1504016748;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1506410459;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1507814374;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1510148302;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1510148302;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1523968787;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1536517284;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1536687142;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1537465853;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> public boolean hasFooter();1540108163;Flag indicating if we have a footer;public boolean hasFooter() {_        return hasFooter__    };flag,indicating,if,we,have,a,footer;public,boolean,has,footer,return,has,footer
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1326392736;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class<?> type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format<?> format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative, was: " + fieldLength)__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,was,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1335788887;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class<?> type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format<?> format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative, was: " + fieldLength)__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,was,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1355739468;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class<?> type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative, was: " + fieldLength)__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,was,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1357140814;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative, was: " + fieldLength)__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,was,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1360259982;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1360932033;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1367311394;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1372322150;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1373129971;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1373486788;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1376549254;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1438938304;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1438938346;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1438938347;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1438938347;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }_                    _                    int fieldLength = datafield.length()__                    _                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }_                    _                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: " _                                + field.getName() + " is mandatory.")__                    }_                    _                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()__    _                        _                        if (result.length() < fieldLength) {_    _                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }_    _                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }_    _                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            _    _                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1458660774;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    Format<?> format = FormatFactory.getFormat(type, getLocale(), datafield, field.getAnnotation(BindyConverter.class))___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,format,format,format,factory,get,format,type,get,locale,datafield,field,get,annotation,bindy,converter,class,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1463827036;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1463827036;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1467144039;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1495624996;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1504016748;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1506410459;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1507814374;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1510148302;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1510148302;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    Class<?> type = field.getType()___                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1523968787;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1536517284;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", value, datafield.pos(), result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1536687142;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", value, datafield.pos(), result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1537465853;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (ObjectHelper.isNotEmpty(datafield.defaultValue()) && ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", value, datafield.pos(), result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,object,helper,is,not,empty,datafield,default,value,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception;1540108163;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class<?> clazz, Object obj, Map<Integer, List<String>> results) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    FormattingOptions formattingOptions = ConverterUtils.convert(datafield,_                            field.getType(),_                            field.getAnnotation(BindyConverter.class),_                            getLocale())__                    Format<?> format = formatFactory.getFormat(formattingOptions)___                    _                    Object value = field.get(obj)___                    _                    if (org.apache.camel.util.ObjectHelper.isNotEmpty(datafield.defaultValue()) && org.apache.camel.util.ObjectHelper.isEmpty(value)) {_                        value = datafield.defaultValue()__                    }__                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    int fieldLength = datafield.length()___                    if (fieldLength == 0 && (datafield.lengthPos() > 0)) {_                        List<String> resultVals = results.get(datafield.lengthPos())__                        fieldLength = Integer.valueOf(resultVals.get(0))__                    }__                    if (fieldLength <= 0 && datafield.delimiter().equals("") && datafield.lengthPos() == 0) {_                        throw new IllegalArgumentException("Either a delimiter value or length for the field: "_                                + field.getName() + " is mandatory.")__                    }__                    if (!datafield.delimiter().equals("")) {_                        result = result + datafield.delimiter()__                    } else {_                        _                        String align = datafield.align()__                        char padCharField = datafield.paddingChar()__                        char padChar___                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else if (align.contains("B")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT or B for trimming both ends")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }_                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", value, datafield.pos(), result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,map,integer,list,string,results,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,formatting,options,formatting,options,converter,utils,convert,datafield,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,format,format,factory,get,format,formatting,options,object,value,field,get,obj,if,org,apache,camel,util,object,helper,is,not,empty,datafield,default,value,org,apache,camel,util,object,helper,is,empty,value,value,datafield,default,value,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,if,field,length,0,datafield,length,pos,0,list,string,result,vals,results,get,datafield,length,pos,field,length,integer,value,of,result,vals,get,0,if,field,length,0,datafield,delimiter,equals,datafield,length,pos,0,throw,new,illegal,argument,exception,either,a,delimiter,value,or,length,for,the,field,field,get,name,is,mandatory,if,datafield,delimiter,equals,result,result,datafield,delimiter,else,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,if,align,contains,b,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,or,b,for,trimming,both,ends,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> public boolean skipHeader();1360259982;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1360932033;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1367311394;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1372322150;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1373129971;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1373486788;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1376549254;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1438938304;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1438938346;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1438938347;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1438938347;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1458660774;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1463827036;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1463827036;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1467144039;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1495624996;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1504016748;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1506410459;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1507814374;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1510148302;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1510148302;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1523968787;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1536517284;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1536687142;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1537465853;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean skipHeader();1540108163;Flag indicating whether to skip the header parsing;public boolean skipHeader() {_        return skipHeader__    };flag,indicating,whether,to,skip,the,header,parsing;public,boolean,skip,header,return,skip,header
BindyFixedLengthFactory -> public boolean isHeader();1360259982;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1360932033;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1367311394;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1372322150;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1373129971;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1373486788;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1376549254;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1438938304;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1438938346;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1438938347;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1438938347;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1458660774;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1463827036;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1463827036;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1467144039;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1495624996;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1504016748;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1506410459;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1507814374;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1510148302;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1510148302;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1523968787;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1536517284;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1536687142;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1537465853;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean isHeader();1540108163;Flag indicating whether this factory is for a header;public boolean isHeader() {_        return isHeader__    };flag,indicating,whether,this,factory,is,for,a,header;public,boolean,is,header,return,is,header
BindyFixedLengthFactory -> public boolean hasHeader();1276787991;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1276858355;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1277019577;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1277126591;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1277340776;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1290574380;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1293121457;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1295546121;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1295553001;Flag indicating if we have a header__@return boolean;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header,return,boolean;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1295603844;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1295605189;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1296495624;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1297377495;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1304355123;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1307685726;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1311784042;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1311838731;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1319272485;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1326392736;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1335788887;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1355739468;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1357140814;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1360259982;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1360932033;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1367311394;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1372322150;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1373129971;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1373486788;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1376549254;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1438938304;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1438938346;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1438938347;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1438938347;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1458660774;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1463827036;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1463827036;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1467144039;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1495624996;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1504016748;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1506410459;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1507814374;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1510148302;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1510148302;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1523968787;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1536517284;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1536687142;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1537465853;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public boolean hasHeader();1540108163;Flag indicating if we have a header;public boolean hasHeader() {_        return hasHeader__    };flag,indicating,if,we,have,a,header;public,boolean,has,header,return,has,header
BindyFixedLengthFactory -> public char paddingchar();1276787991;Padding char used to fill the field__@return char;public char paddingchar() {_    	return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1276858355;Padding char used to fill the field__@return char;public char paddingchar() {_    	return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1277019577;Padding char used to fill the field__@return char;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1277126591;Padding char used to fill the field__@return char;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1277340776;Padding char used to fill the field__@return char;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1290574380;Padding char used to fill the field__@return char;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1293121457;Padding char used to fill the field__@return char;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1295546121;Padding char used to fill the field__@return char;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1295553001;Padding char used to fill the field__@return char;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field,return,char;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1295603844;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1295605189;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1296495624;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1297377495;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1304355123;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1307685726;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1311784042;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1311838731;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1319272485;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1326392736;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1335788887;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1355739468;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1357140814;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1360259982;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1360932033;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1367311394;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1372322150;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1373129971;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1373486788;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1376549254;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1438938304;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1438938346;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1438938347;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1438938347;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1458660774;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1463827036;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1463827036;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1467144039;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1495624996;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1504016748;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1506410459;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1507814374;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1510148302;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1510148302;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1523968787;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1536517284;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1536687142;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1537465853;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public char paddingchar();1540108163;Padding char used to fill the field;public char paddingchar() {_        return paddingChar__    };padding,char,used,to,fill,the,field;public,char,paddingchar,return,padding,char
BindyFixedLengthFactory -> public boolean isTrimRecordOnUnmarshal();1295546121;Flag indicating whether the fixed length record should be trimmed__@return boolean;public boolean isTrimRecordOnUnmarshal() {_        return trimRecordOnUnmarshal__    };flag,indicating,whether,the,fixed,length,record,should,be,trimmed,return,boolean;public,boolean,is,trim,record,on,unmarshal,return,trim,record,on,unmarshal
BindyFixedLengthFactory -> public boolean isTrimRecordOnUnmarshal();1295553001;Flag indicating whether the fixed length record should be trimmed__@return boolean;public boolean isTrimRecordOnUnmarshal() {_        return trimRecordOnUnmarshal__    };flag,indicating,whether,the,fixed,length,record,should,be,trimmed,return,boolean;public,boolean,is,trim,record,on,unmarshal,return,trim,record,on,unmarshal
BindyFixedLengthFactory -> public boolean skipFooter();1360259982;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1360932033;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1367311394;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1372322150;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1373129971;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1373486788;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1376549254;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1438938304;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1438938346;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1438938347;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1438938347;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1458660774;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1463827036;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1463827036;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1467144039;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1495624996;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1504016748;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1506410459;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1507814374;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1510148302;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1510148302;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1523968787;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1536517284;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1536687142;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1537465853;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public boolean skipFooter();1540108163;Flag indicating whether to skip the footer processing;public boolean skipFooter() {_        return skipFooter__    };flag,indicating,whether,to,skip,the,footer,processing;public,boolean,skip,footer,return,skip,footer
BindyFixedLengthFactory -> public Class<?> header();1438938347;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1438938347;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1458660774;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1463827036;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1463827036;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1467144039;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1495624996;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1504016748;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1506410459;@return;public Class<?> header() {_        return header__    };return;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1507814374;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1510148302;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1510148302;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1523968787;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1536517284;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1536687142;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1537465853;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public Class<?> header();1540108163;Gets the type of the header record.__@return The type of the header record if any, otherwise_<code>void.class</code>.;public Class<?> header() {_        return header__    };gets,the,type,of,the,header,record,return,the,type,of,the,header,record,if,any,otherwise,code,void,class,code;public,class,header,return,header
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1467144039;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1495624996;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1504016748;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1506410459;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1507814374;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1510148302;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1510148302;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1523968787;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1536517284;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1536687142;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1537465853;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> public boolean isIgnoreMissingChars();1540108163;Flag indicating whether too short lines are ignored;public boolean isIgnoreMissingChars() {_        return ignoreMissingChars__    };flag,indicating,whether,too,short,lines,are,ignored;public,boolean,is,ignore,missing,chars,return,ignore,missing,chars
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1276858355;Generate a table containing the data formated and sorted with their position/offset_The result is placed in the Map<Integer, List> results__@param clazz_@param obj_@throws Exception;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()___                    _                    Format format = FormatFactory.getFormat(type, pattern, precision)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)__                    _                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    _                    if (fieldLength > 0) {_                       _                    	StringBuilder temp = new StringBuilder()__                    	_                       _                       if (result.length() < fieldLength ) {_	                    	if (align.contains("R")) {_	                    		temp.append(generatePaddingChars(paddingChar, fieldLength, result.length()))__	                    		temp.append(result)__	                    	} else if (align.contains("L")) {_	                    		temp.append(result)__	                    		temp.append(generatePaddingChars(paddingChar, fieldLength, result.length()))__	                    	} else {_	                    		throw new IllegalArgumentException("Alignement for the " + field.getName() + " must be equal to R for RIGHT or L for LEFT !")__	                    	}_	                    	_	                    	result = temp.toString()_	                	_	                    }                         _                        _                       _                    } else {_                    	throw new IllegalArgumentException("Lenght of the field : " + field.getName() + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted : " + value + ", position : " + datafield.pos() + ", and its formated value : " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {__                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)___                } else {__                    List list = (LinkedList)results.get(key)__                    list.add(result)__                }__            }__         }__    };generate,a,table,containing,the,data,formated,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results,param,clazz,param,obj,throws,exception;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,precision,object,value,field,get,obj,result,format,string,format,value,int,field,length,datafield,length,string,align,datafield,align,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,align,contains,r,temp,append,generate,padding,chars,padding,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,padding,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignement,for,the,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,throw,new,illegal,argument,exception,lenght,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formated,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1277019577;Generate a table containing the data formated and sorted with their position/offset_The result is placed in the Map<Integer, List> results__@param clazz_@param obj_@throws Exception;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()___                    _                    Format format = FormatFactory.getFormat(type, pattern, precision)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)__                    _                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {_                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(paddingChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(paddingChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignement for the "_                                                                       + field.getName()_                                                                       + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        }__                    } else {_                        throw new IllegalArgumentException("Lenght of the field : "_                                                               + field.getName()_                                                               + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted : " + value + ", position : " + datafield.pos() + ", and its formated value : " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {__                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)___                } else {__                    List list = (LinkedList)results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formated,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results,param,clazz,param,obj,throws,exception;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,precision,object,value,field,get,obj,result,format,string,format,value,int,field,length,datafield,length,string,align,datafield,align,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,align,contains,r,temp,append,generate,padding,chars,padding,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,padding,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignement,for,the,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,throw,new,illegal,argument,exception,lenght,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formated,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1277126591;Generate a table containing the data formated and sorted with their position/offset_The result is placed in the Map<Integer, List> results__@param clazz_@param obj_@throws Exception;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()___                    _                    Format format = FormatFactory.getFormat(type, pattern, precision)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)__                    _                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char paddCharField = datafield.paddingChar()__                    char paddChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {_                        	_                        	_                        	if ( paddCharField == 0 ) {_                        		_                        		paddChar = paddingChar__                        	} else {_                        		paddChar = paddCharField__                        	}_                        	_                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(paddChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(paddChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignement for the "_                                                                       + field.getName()_                                                                       + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        }__                    } else {_                        throw new IllegalArgumentException("Lenght of the field : "_                                                               + field.getName()_                                                               + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted : " + value + ", position : " + datafield.pos() + ", and its formated value : " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {__                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)___                } else {__                    List list = (LinkedList)results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formated,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results,param,clazz,param,obj,throws,exception;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,precision,object,value,field,get,obj,result,format,string,format,value,int,field,length,datafield,length,string,align,datafield,align,char,padd,char,field,datafield,padding,char,char,padd,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,padd,char,field,0,padd,char,padding,char,else,padd,char,padd,char,field,if,align,contains,r,temp,append,generate,padding,chars,padd,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,padd,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignement,for,the,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,throw,new,illegal,argument,exception,lenght,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formated,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1277340776;Generate a table containing the data formated and sorted with their position/offset_The result is placed in the Map<Integer, List> results__@param clazz_@param obj_@throws Exception;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()___                    _                    Format format = FormatFactory.getFormat(type, pattern, precision)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)__                    _                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char paddCharField = datafield.paddingChar()__                    char paddChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (paddCharField == 0) {_                                _                                paddChar = paddingChar__                            } else {_                                paddChar = paddCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(paddChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(paddChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignement for the "_                                                                       + field.getName()_                                                                       + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        }__                    } else {_                        throw new IllegalArgumentException("Lenght of the field : "_                                                               + field.getName()_                                                               + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted : " + value + ", position : " + datafield.pos() + ", and its formated value : " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {__                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)___                } else {__                    List list = (LinkedList)results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formated,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results,param,clazz,param,obj,throws,exception;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,precision,object,value,field,get,obj,result,format,string,format,value,int,field,length,datafield,length,string,align,datafield,align,char,padd,char,field,datafield,padding,char,char,padd,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,padd,char,field,0,padd,char,padding,char,else,padd,char,padd,char,field,if,align,contains,r,temp,append,generate,padding,chars,padd,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,padd,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignement,for,the,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,throw,new,illegal,argument,exception,lenght,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formated,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1290574380;Generate a table containing the data formated and sorted with their position/offset_The result is placed in the Map<Integer, List> results__@param clazz_@param obj_@throws Exception;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()___                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)___                    result = formatString(format, value)__                    _                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char paddCharField = datafield.paddingChar()__                    char paddChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (paddCharField == 0) {_                                _                                paddChar = paddingChar__                            } else {_                                paddChar = paddCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(paddChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(paddChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignement for the "_                                                                       + field.getName()_                                                                       + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        }__                    } else {_                        throw new IllegalArgumentException("Lenght of the field : "_                                                               + field.getName()_                                                               + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted : " + value + ", position : " + datafield.pos() + ", and its formated value : " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {__                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)___                } else {__                    List list = (LinkedList)results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formated,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results,param,clazz,param,obj,throws,exception;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,int,field,length,datafield,length,string,align,datafield,align,char,padd,char,field,datafield,padding,char,char,padd,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,padd,char,field,0,padd,char,padding,char,else,padd,char,padd,char,field,if,align,contains,r,temp,append,generate,padding,chars,padd,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,padd,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignement,for,the,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,throw,new,illegal,argument,exception,lenght,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formated,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1293121457;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1295546121;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1295553001;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1295603844;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1295605189;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1296495624;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1297377495;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1304355123;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: " + value + ", position: " + datafield.pos() + ", and its formatted value: " + result)__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,value,position,datafield,pos,and,its,formatted,value,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1307685726;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List list = new LinkedList()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,list,new,linked,list,list,add,result,results,put,key,list,else,list,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1311784042;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class<?> type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format<?> format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT !")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative !")__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception;1311838731;Generate a table containing the data formatted and sorted with their position/offset_The result is placed in the Map<Integer, List> results;private void generateFixedLengthPositionMap(Class clazz, Object obj) throws Exception {__        String result = ""___        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            DataField datafield = field.getAnnotation(DataField.class)___            if (datafield != null) {__                if (obj != null) {__                    _                    _                    Class<?> type = field.getType()__                    String pattern = datafield.pattern()__                    int precision = datafield.precision()_____                    _                    Format<?> format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___                    _                    Object value = field.get(obj)____                    result = formatString(format, value)___                    _                    if (datafield.trim()) {_                        result = result.trim()__                    }__                    _                    int fieldLength = datafield.length()__                    String align = datafield.align()__                    char padCharField = datafield.paddingChar()__                    char padChar__                    _                    if (fieldLength > 0) {_                       _                        StringBuilder temp = new StringBuilder()___                        _                        if (result.length() < fieldLength) {__                            _                            if (padCharField == 0) {_                                _                                padChar = paddingChar__                            } else {_                                padChar = padCharField__                            }__                            if (align.contains("R")) {_                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                                temp.append(result)__                            } else if (align.contains("L")) {_                                temp.append(result)__                                temp.append(generatePaddingChars(padChar, fieldLength, result.length()))__                            } else {_                                throw new IllegalArgumentException("Alignment for the field: " + field.getName()_                                        + " must be equal to R for RIGHT or L for LEFT")__                            }__                            result = temp.toString()__                        } else if (result.length() > fieldLength) {_                            __                            _                            if (datafield.clip()) {_                                result = result.substring(0, fieldLength)__                            } else {_                                throw new IllegalArgumentException("Length for the " + field.getName()_                                        + " must not be larger than allowed, was: " + result.length() + ", allowed: " + fieldLength)__                            }_                        }__                    } else {_                        throw new IllegalArgumentException("Length of the field: " + field.getName()_                                + " is a mandatory field and cannot be equal to zero or to be negative, was: " + fieldLength)__                    }__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Value to be formatted: {}, position: {}, and its formatted value: {}", new Object[]{value, datafield.pos(), result})__                    }__                } else {_                    result = ""__                }__                Integer key__                key = datafield.pos()___                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(result)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(result)__                }__            }__        }__    };generate,a,table,containing,the,data,formatted,and,sorted,with,their,position,offset,the,result,is,placed,in,the,map,integer,list,results;private,void,generate,fixed,length,position,map,class,clazz,object,obj,throws,exception,string,result,for,field,field,clazz,get,declared,fields,field,set,accessible,true,data,field,datafield,field,get,annotation,data,field,class,if,datafield,null,if,obj,null,class,type,field,get,type,string,pattern,datafield,pattern,int,precision,datafield,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,value,field,get,obj,result,format,string,format,value,if,datafield,trim,result,result,trim,int,field,length,datafield,length,string,align,datafield,align,char,pad,char,field,datafield,padding,char,char,pad,char,if,field,length,0,string,builder,temp,new,string,builder,if,result,length,field,length,if,pad,char,field,0,pad,char,padding,char,else,pad,char,pad,char,field,if,align,contains,r,temp,append,generate,padding,chars,pad,char,field,length,result,length,temp,append,result,else,if,align,contains,l,temp,append,result,temp,append,generate,padding,chars,pad,char,field,length,result,length,else,throw,new,illegal,argument,exception,alignment,for,the,field,field,get,name,must,be,equal,to,r,for,right,or,l,for,left,result,temp,to,string,else,if,result,length,field,length,if,datafield,clip,result,result,substring,0,field,length,else,throw,new,illegal,argument,exception,length,for,the,field,get,name,must,not,be,larger,than,allowed,was,result,length,allowed,field,length,else,throw,new,illegal,argument,exception,length,of,the,field,field,get,name,is,a,mandatory,field,and,cannot,be,equal,to,zero,or,to,be,negative,was,field,length,if,log,is,debug,enabled,log,debug,value,to,be,formatted,position,and,its,formatted,value,new,object,value,datafield,pos,result,else,result,integer,key,key,datafield,pos,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,result,results,put,key,list,else,list,string,list,results,get,key,list,add,result
BindyFixedLengthFactory -> public int recordLength();1360932033;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1367311394;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1372322150;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1373129971;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1373486788;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1376549254;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1438938304;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1438938346;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1438938347;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1438938347;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1458660774;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1463827036;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1463827036;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1467144039;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1495624996;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1504016748;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1506410459;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1507814374;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1510148302;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1510148302;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1523968787;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1536517284;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1536687142;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1537465853;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public int recordLength();1540108163;Expected fixed length of the record;public int recordLength() {_        return recordLength__    };expected,fixed,length,of,the,record;public,int,record,length,return,record,length
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1372322150;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1373129971;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1373486788;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1376549254;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1438938304;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1438938346;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1438938347;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1438938347;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1458660774;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1463827036;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1463827036;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1467144039;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1495624996;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1504016748;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1506410459;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1507814374;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1510148302;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1510148302;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1523968787;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1536517284;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1536687142;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1537465853;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
BindyFixedLengthFactory -> public boolean isIgnoreTrailingChars();1540108163;Flag indicating whether trailing characters beyond the last declared field may be ignored;public boolean isIgnoreTrailingChars() {_        return this.ignoreTrailingChars__    };flag,indicating,whether,trailing,characters,beyond,the,last,declared,field,may,be,ignored;public,boolean,is,ignore,trailing,chars,return,this,ignore,trailing,chars
